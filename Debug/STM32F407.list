
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08011788  08011788  00021788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d60  08011d60  00030274  2**0
                  CONTENTS
  4 .ARM          00000008  08011d60  08011d60  00021d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d68  08011d68  00030274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d68  08011d68  00021d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d6c  08011d6c  00021d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08011d70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000278  08011fe4  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e24  08011fe4  00030e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a15e  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058e4  00000000  00000000  0005a402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0005fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00061970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ba3  00000000  00000000  000633d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a8c  00000000  00000000  00089f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9564  00000000  00000000  000b1a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018af6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cec  00000000  00000000  0018afc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801176c 	.word	0x0801176c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	0801176c 	.word	0x0801176c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e92:	f000 f853 	bl	8000f3c <read_one_digit_from_keyboard>
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b23      	cmp	r3, #35	; 0x23
 8000e9e:	d10a      	bne.n	8000eb6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000ea0:	221e      	movs	r2, #30
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4824      	ldr	r0, [pc, #144]	; (8000f38 <read_digits+0xb0>)
 8000ea6:	f010 f81d 	bl	8010ee4 <memset>
		keyboard.read_digits_position = 0;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <read_digits+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <read_digits+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000eba:	d109      	bne.n	8000ed0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <read_digits+0xb0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <read_digits+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <read_digits+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d028      	beq.n	8000f28 <read_digits+0xa0>
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b23      	cmp	r3, #35	; 0x23
 8000eda:	d025      	beq.n	8000f28 <read_digits+0xa0>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee0:	d022      	beq.n	8000f28 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <read_digits+0xb0>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <read_digits+0xb0>)
 8000ee8:	7f92      	ldrb	r2, [r2, #30]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dc11      	bgt.n	8000f12 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <read_digits+0xb0>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4911      	ldr	r1, [pc, #68]	; (8000f38 <read_digits+0xb0>)
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <read_digits+0xb0>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <read_digits+0xb0>)
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <read_digits+0xb0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <read_digits+0xb0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f10:	e00e      	b.n	8000f30 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <read_digits+0xb0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <read_digits+0xb0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <read_digits+0xb0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f26:	e003      	b.n	8000f30 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <read_digits+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	77da      	strb	r2, [r3, #31]
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200002ac 	.word	0x200002ac

08000f3c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f42:	2300      	movs	r3, #0
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	48cf      	ldr	r0, [pc, #828]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f4e:	f006 fdad 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f58:	48cc      	ldr	r0, [pc, #816]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f5a:	f006 fda7 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	48c9      	ldr	r0, [pc, #804]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f66:	f006 fda1 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	48c6      	ldr	r0, [pc, #792]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f72:	f006 fd9b 	bl	8007aac <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	48c5      	ldr	r0, [pc, #788]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000f7c:	f006 fd7e 	bl	8007a7c <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d169      	bne.n	800105a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	48bf      	ldr	r0, [pc, #764]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f8e:	f006 fd8d 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	48bc      	ldr	r0, [pc, #752]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f9a:	f006 fd87 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	48b9      	ldr	r0, [pc, #740]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f006 fd81 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb0:	48b6      	ldr	r0, [pc, #728]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f006 fd7b 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48b5      	ldr	r0, [pc, #724]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f006 fd5e 	bl	8007a7c <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000fc6:	2331      	movs	r3, #49	; 0x31
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd0:	48ae      	ldr	r0, [pc, #696]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f006 fd6b 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	48ab      	ldr	r0, [pc, #684]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fde:	f006 fd65 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	48aa      	ldr	r0, [pc, #680]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f006 fd48 	bl	8007a7c <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000ff2:	2334      	movs	r3, #52	; 0x34
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffc:	48a3      	ldr	r0, [pc, #652]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f006 fd55 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	48a0      	ldr	r0, [pc, #640]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800100a:	f006 fd4f 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	489f      	ldr	r0, [pc, #636]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001014:	f006 fd32 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800101e:	2337      	movs	r3, #55	; 0x37
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4898      	ldr	r0, [pc, #608]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800102a:	f006 fd3f 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4895      	ldr	r0, [pc, #596]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001036:	f006 fd39 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800103a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103e:	4894      	ldr	r0, [pc, #592]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001040:	f006 fd1c 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800104a:	232a      	movs	r3, #42	; 0x2a
 800104c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	488d      	ldr	r0, [pc, #564]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001056:	f006 fd29 	bl	8007aac <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	488a      	ldr	r0, [pc, #552]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001062:	f006 fd23 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4887      	ldr	r0, [pc, #540]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800106e:	f006 fd1d 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4884      	ldr	r0, [pc, #528]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800107a:	f006 fd17 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001086:	f006 fd11 	bl	8007aac <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4880      	ldr	r0, [pc, #512]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001090:	f006 fcf4 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d169      	bne.n	800116e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	487a      	ldr	r0, [pc, #488]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010a2:	f006 fd03 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4877      	ldr	r0, [pc, #476]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ae:	f006 fcfd 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4874      	ldr	r0, [pc, #464]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ba:	f006 fcf7 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4871      	ldr	r0, [pc, #452]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010c6:	f006 fcf1 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4870      	ldr	r0, [pc, #448]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f006 fcd4 	bl	8007a7c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010da:	2332      	movs	r3, #50	; 0x32
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4869      	ldr	r0, [pc, #420]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010e6:	f006 fce1 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	4866      	ldr	r0, [pc, #408]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010f2:	f006 fcdb 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4865      	ldr	r0, [pc, #404]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f006 fcbe 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001106:	2335      	movs	r3, #53	; 0x35
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001112:	f006 fccb 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	485b      	ldr	r0, [pc, #364]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800111e:	f006 fcc5 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	485a      	ldr	r0, [pc, #360]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001128:	f006 fca8 	bl	8007a7c <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001132:	2338      	movs	r3, #56	; 0x38
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4853      	ldr	r0, [pc, #332]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800113e:	f006 fcb5 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4850      	ldr	r0, [pc, #320]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800114a:	f006 fcaf 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	484f      	ldr	r0, [pc, #316]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001154:	f006 fc92 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800115e:	2330      	movs	r3, #48	; 0x30
 8001160:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	4848      	ldr	r0, [pc, #288]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800116a:	f006 fc9f 	bl	8007aac <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001176:	f006 fc99 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4842      	ldr	r0, [pc, #264]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001182:	f006 fc93 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800118e:	f006 fc8d 	bl	8007aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	483c      	ldr	r0, [pc, #240]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800119a:	f006 fc87 	bl	8007aac <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011a4:	f006 fc6a 	bl	8007a7c <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d169      	bne.n	8001282 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4835      	ldr	r0, [pc, #212]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011b6:	f006 fc79 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c0:	4832      	ldr	r0, [pc, #200]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011c2:	f006 fc73 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	482f      	ldr	r0, [pc, #188]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011ce:	f006 fc6d 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011da:	f006 fc67 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	482c      	ldr	r0, [pc, #176]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f006 fc4a 	bl	8007a7c <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011ee:	2333      	movs	r3, #51	; 0x33
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011fa:	f006 fc57 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001206:	f006 fc51 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4821      	ldr	r0, [pc, #132]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001210:	f006 fc34 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800121a:	2336      	movs	r3, #54	; 0x36
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001226:	f006 fc41 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001232:	f006 fc3b 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 800123c:	f006 fc1e 	bl	8007a7c <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001246:	2339      	movs	r3, #57	; 0x39
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001252:	f006 fc2b 	bl	8007aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800125e:	f006 fc25 	bl	8007aac <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001268:	f006 fc08 	bl	8007a7c <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001272:	2323      	movs	r3, #35	; 0x23
 8001274:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800127e:	f006 fc15 	bl	8007aac <HAL_GPIO_WritePin>
	}
	return digit;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40020400 	.word	0x40020400
 8001294:	40021000 	.word	0x40021000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f006 f8a9 	bl	80073f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f843 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 faf5 	bl	8001894 <MX_GPIO_Init>
  MX_I2S3_Init();
 80012aa:	f000 f929 	bl	8001500 <MX_I2S3_Init>
  MX_SPI1_Init();
 80012ae:	f000 f96b 	bl	8001588 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80012b2:	f00f fac7 	bl	8010844 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80012b6:	f000 fa2b 	bl	8001710 <MX_TIM2_Init>
  MX_SPI2_Init();
 80012ba:	f000 f99b 	bl	80015f4 <MX_SPI2_Init>
  MX_RNG_Init();
 80012be:	f000 f94f 	bl	8001560 <MX_RNG_Init>
  MX_TIM3_Init();
 80012c2:	f000 fa73 	bl	80017ac <MX_TIM3_Init>
  MX_TIM1_Init();
 80012c6:	f000 f9cb 	bl	8001660 <MX_TIM1_Init>
  MX_I2C3_Init();
 80012ca:	f000 f8eb 	bl	80014a4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012ce:	f000 f8bb 	bl	8001448 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012d2:	f000 f8ad 	bl	8001430 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012d6:	f001 fa43 	bl	8002760 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012da:	2000      	movs	r0, #0
 80012dc:	f001 fbe6 	bl	8002aac <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012e0:	2003      	movs	r0, #3
 80012e2:	f001 f9df 	bl	80026a4 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f001 fbe0 	bl	8002aac <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f002 faa7 	bl	8003844 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fbd8 	bl	8002aac <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <main+0x8c>)
 80012fe:	f00b fb67 	bl	800c9d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x8c>)
 8001306:	f00b fbd3 	bl	800cab0 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0x90>)
 800130c:	220a      	movs	r2, #10
 800130e:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 8001310:	f004 fe80 	bl	8006014 <detect_all_sensors_and_init>
  measure_sensors();
 8001314:	f004 feaa 	bl	800606c <measure_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 8001318:	f001 fd12 	bl	8002d40 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800131c:	f00f fab8 	bl	8010890 <MX_USB_HOST_Process>
	 menu();
 8001320:	e7fa      	b.n	8001318 <main+0x80>
 8001322:	bf00      	nop
 8001324:	200003d4 	.word	0x200003d4
 8001328:	200002ac 	.word	0x200002ac

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b098      	sub	sp, #96	; 0x60
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2230      	movs	r2, #48	; 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00f fdd2 	bl	8010ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <SystemClock_Config+0xfc>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <SystemClock_Config+0xfc>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <SystemClock_Config+0xfc>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <SystemClock_Config+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <SystemClock_Config+0x100>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <SystemClock_Config+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001396:	2301      	movs	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00a f9f7 	bl	800b7b4 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013cc:	f000 fbf8 	bl	8001bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2105      	movs	r1, #5
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00a fc58 	bl	800bca4 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013fa:	f000 fbe1 	bl	8001bc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f00a fe30 	bl	800c074 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800141a:	f000 fbd1 	bl	8001bc0 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3760      	adds	r7, #96	; 0x60
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	201c      	movs	r0, #28
 800143a:	f006 f94c 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143e:	201c      	movs	r0, #28
 8001440:	f006 f965 	bl	800770e <HAL_NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C2_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C2_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C2_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C2_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C2_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C2_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C2_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C2_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C2_Init+0x50>)
 8001486:	f008 f8c1 	bl	800960c <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fb96 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000380 	.word	0x20000380
 800149c:	40005800 	.word	0x40005800
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_I2C3_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_I2C3_Init+0x58>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014e2:	f008 f893 	bl	800960c <HAL_I2C_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 fb68 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002d4 	.word	0x200002d4
 80014f8:	40005c00 	.word	0x40005c00
 80014fc:	000186a0 	.word	0x000186a0

08001500 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_I2S3_Init+0x54>)
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_I2S3_Init+0x58>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2S3_Init+0x54>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_I2S3_Init+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2S3_Init+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_I2S3_Init+0x54>)
 8001520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001524:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_I2S3_Init+0x54>)
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <MX_I2S3_Init+0x5c>)
 800152a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2S3_Init+0x54>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_I2S3_Init+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2S3_Init+0x54>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_I2S3_Init+0x54>)
 8001540:	f009 fc98 	bl	800ae74 <HAL_I2S_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800154a:	f000 fb39 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000514 	.word	0x20000514
 8001558:	40003c00 	.word	0x40003c00
 800155c:	00017700 	.word	0x00017700

08001560 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_RNG_Init+0x20>)
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <MX_RNG_Init+0x24>)
 8001568:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_RNG_Init+0x20>)
 800156c:	f00a fec2 	bl	800c2f4 <HAL_RNG_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001576:	f000 fb23 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000464 	.word	0x20000464
 8001584:	50060800 	.word	0x50060800

08001588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_SPI1_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <MX_SPI1_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_SPI1_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_SPI1_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_SPI1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI1_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_SPI1_Init+0x64>)
 80015da:	f00a ff19 	bl	800c410 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e4:	f000 faec 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000474 	.word	0x20000474
 80015f0:	40013000 	.word	0x40013000

080015f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI2_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI2_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI2_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI2_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI2_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI2_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI2_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI2_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI2_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI2_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI2_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI2_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI2_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI2_Init+0x64>)
 8001646:	f00a fee3 	bl	800c410 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 fab6 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000328 	.word	0x20000328
 800165c:	40003800 	.word	0x40003800

08001660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f00f fc38 	bl	8010ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_TIM1_Init+0xa8>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_TIM1_Init+0xac>)
 8001680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_TIM1_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016d4:	f00b fb53 	bl	800cd7e <HAL_TIM_Encoder_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016de:	f000 fa6f 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016f0:	f00c f9b8 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016fa:	f000 fa61 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000041c 	.word	0x2000041c
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_TIM2_Init+0x98>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001736:	f240 3247 	movw	r2, #839	; 0x347
 800173a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM2_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001744:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_TIM2_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001758:	f00b f8ea 	bl	800c930 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001762:	f000 fa2d 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001774:	f00b fd70 	bl	800d258 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177e:	f000 fa1f 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001782:	2310      	movs	r3, #16
 8001784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001790:	f00c f968 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 fa11 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200004cc 	.word	0x200004cc

080017ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_TIM3_Init+0xe0>)
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <MX_TIM3_Init+0xe4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_TIM3_Init+0xe0>)
 80017e4:	f640 0233 	movw	r2, #2099	; 0x833
 80017e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_TIM3_Init+0xe0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_TIM3_Init+0xe0>)
 80017f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_TIM3_Init+0xe0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_TIM3_Init+0xe0>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_TIM3_Init+0xe0>)
 8001806:	f00b f893 	bl	800c930 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001810:	f000 f9d6 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181e:	4619      	mov	r1, r3
 8001820:	481a      	ldr	r0, [pc, #104]	; (800188c <MX_TIM3_Init+0xe0>)
 8001822:	f00b fd19 	bl	800d258 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800182c:	f000 f9c8 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <MX_TIM3_Init+0xe0>)
 8001832:	f00b fa4b 	bl	800cccc <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800183c:	f000 f9c0 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <MX_TIM3_Init+0xe0>)
 8001850:	f00c f908 	bl	800da64 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800185a:	f000 f9b1 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM3_Init+0xe0>)
 8001876:	f00b fc31 	bl	800d0dc <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001880:	f000 f99e 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200003d4 	.word	0x200003d4
 8001890:	40000400 	.word	0x40000400

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4bb1      	ldr	r3, [pc, #708]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4ab0      	ldr	r2, [pc, #704]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4bae      	ldr	r3, [pc, #696]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4baa      	ldr	r3, [pc, #680]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4aa9      	ldr	r2, [pc, #676]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4ba7      	ldr	r3, [pc, #668]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4ba3      	ldr	r3, [pc, #652]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4aa2      	ldr	r2, [pc, #648]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b9c      	ldr	r3, [pc, #624]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a9b      	ldr	r2, [pc, #620]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b95      	ldr	r3, [pc, #596]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a94      	ldr	r2, [pc, #592]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a8d      	ldr	r2, [pc, #564]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001952:	2200      	movs	r2, #0
 8001954:	217c      	movs	r1, #124	; 0x7c
 8001956:	4888      	ldr	r0, [pc, #544]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001958:	f006 f8a8 	bl	8007aac <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2101      	movs	r1, #1
 8001960:	4886      	ldr	r0, [pc, #536]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 8001962:	f006 f8a3 	bl	8007aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001966:	2200      	movs	r2, #0
 8001968:	f64f 7110 	movw	r1, #65296	; 0xff10
 800196c:	4884      	ldr	r0, [pc, #528]	; (8001b80 <MX_GPIO_Init+0x2ec>)
 800196e:	f006 f89d 	bl	8007aac <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001978:	4880      	ldr	r0, [pc, #512]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 800197a:	f006 f897 	bl	8007aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001984:	487f      	ldr	r0, [pc, #508]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001986:	f006 f891 	bl	8007aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800198a:	2374      	movs	r3, #116	; 0x74
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4875      	ldr	r0, [pc, #468]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 80019a2:	f005 fecf 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019a6:	2308      	movs	r3, #8
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	486e      	ldr	r0, [pc, #440]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 80019be:	f005 fec1 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	4869      	ldr	r0, [pc, #420]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 80019d8:	f005 feb4 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019dc:	f640 0341 	movw	r3, #2113	; 0x841
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4861      	ldr	r0, [pc, #388]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 80019f6:	f005 fea5 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019fa:	2308      	movs	r3, #8
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4859      	ldr	r0, [pc, #356]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 8001a16:	f005 fe95 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <MX_GPIO_Init+0x2f4>)
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4857      	ldr	r0, [pc, #348]	; (8001b8c <MX_GPIO_Init+0x2f8>)
 8001a2e:	f005 fe89 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a32:	2304      	movs	r3, #4
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	484f      	ldr	r0, [pc, #316]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001a46:	f005 fe7d 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <MX_GPIO_Init+0x2fc>)
 8001a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4846      	ldr	r0, [pc, #280]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001a60:	f005 fe70 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	483f      	ldr	r0, [pc, #252]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001a7a:	f005 fe63 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a7e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	483c      	ldr	r0, [pc, #240]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001a94:	f005 fe56 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a98:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a9c:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4833      	ldr	r0, [pc, #204]	; (8001b80 <MX_GPIO_Init+0x2ec>)
 8001ab2:	f005 fe47 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482d      	ldr	r0, [pc, #180]	; (8001b80 <MX_GPIO_Init+0x2ec>)
 8001aca:	f005 fe3b 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4827      	ldr	r0, [pc, #156]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001ae6:	f005 fe2d 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001aea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4820      	ldr	r0, [pc, #128]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001b04:	f005 fe1e 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4817      	ldr	r0, [pc, #92]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001b26:	f005 fe0d 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480e      	ldr	r0, [pc, #56]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001b3e:	f005 fe01 	bl	8007744 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_GPIO_Init+0x2f4>)
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001b56:	f005 fdf5 	bl	8007744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2028      	movs	r0, #40	; 0x28
 8001b60:	f005 fdb9 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b64:	2028      	movs	r0, #40	; 0x28
 8001b66:	f005 fdd2 	bl	800770e <HAL_NVIC_EnableIRQ>

}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40020400 	.word	0x40020400
 8001b88:	10120000 	.word	0x10120000
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	10110000 	.word	0x10110000

08001b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d105      	bne.n	8001bb2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x28>)
 8001bae:	f005 ff7d 	bl	8007aac <HAL_GPIO_WritePin>
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>
	...

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_MspInit+0x5c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_MspInit+0x5c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c0a:	2007      	movs	r0, #7
 8001c0c:	f005 fd58 	bl	80076c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2005      	movs	r0, #5
 8001c16:	f005 fd5e 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c1a:	2005      	movs	r0, #5
 8001c1c:	f005 fd77 	bl	800770e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <HAL_I2C_MspInit+0x128>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12d      	bne.n	8001caa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c70:	2312      	movs	r3, #18
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4835      	ldr	r0, [pc, #212]	; (8001d5c <HAL_I2C_MspInit+0x130>)
 8001c88:	f005 fd5c 	bl	8007744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ca8:	e050      	b.n	8001d4c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_I2C_MspInit+0x134>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d14b      	bne.n	8001d4c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf2:	2312      	movs	r3, #18
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4816      	ldr	r0, [pc, #88]	; (8001d64 <HAL_I2C_MspInit+0x138>)
 8001d0a:	f005 fd1b 	bl	8007744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d20:	2304      	movs	r3, #4
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <HAL_I2C_MspInit+0x13c>)
 8001d2c:	f005 fd0a 	bl	8007744 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_I2C_MspInit+0x12c>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40005800 	.word	0x40005800
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40005c00 	.word	0x40005c00
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020000 	.word	0x40020000

08001d6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_I2S_MspInit+0xc0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d14a      	bne.n	8001e24 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_I2S_MspInit+0xc4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001de2:	2310      	movs	r3, #16
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df2:	2306      	movs	r3, #6
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <HAL_I2S_MspInit+0xc8>)
 8001dfe:	f005 fca1 	bl	8007744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e02:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e14:	2306      	movs	r3, #6
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <HAL_I2S_MspInit+0xcc>)
 8001e20:	f005 fc90 	bl	8007744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40003c00 	.word	0x40003c00
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020800 	.word	0x40020800

08001e3c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_RNG_MspInit+0x3c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RNG_MspInit+0x40>)
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RNG_MspInit+0x40>)
 8001e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RNG_MspInit+0x40>)
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	50060800 	.word	0x50060800
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a41      	ldr	r2, [pc, #260]	; (8001fa4 <HAL_SPI_MspInit+0x124>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12c      	bne.n	8001efc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001eda:	23e0      	movs	r3, #224	; 0xe0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eea:	2305      	movs	r3, #5
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	482d      	ldr	r0, [pc, #180]	; (8001fac <HAL_SPI_MspInit+0x12c>)
 8001ef6:	f005 fc25 	bl	8007744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001efa:	e04f      	b.n	8001f9c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_SPI_MspInit+0x130>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d14a      	bne.n	8001f9c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_SPI_MspInit+0x128>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <HAL_SPI_MspInit+0x134>)
 8001f76:	f005 fbe5 	bl	8007744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f7a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <HAL_SPI_MspInit+0x138>)
 8001f98:	f005 fbd4 	bl	8007744 <HAL_GPIO_Init>
}
 8001f9c:	bf00      	nop
 8001f9e:	3730      	adds	r7, #48	; 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40013000 	.word	0x40013000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40003800 	.word	0x40003800
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12c      	bne.n	8002038 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_TIM_Encoder_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002016:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002034:	f005 fb86 	bl	8007744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010000 	.word	0x40010000
 8002044:	40023800 	.word	0x40023800
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d10e      	bne.n	800207c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800207a:	e01a      	b.n	80020b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_TIM_Base_MspInit+0x74>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d115      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	201d      	movs	r0, #29
 80020a8:	f005 fb15 	bl	80076d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020ac:	201d      	movs	r0, #29
 80020ae:	f005 fb2e 	bl	800770e <HAL_NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40000400 	.word	0x40000400

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <NMI_Handler+0x4>

080020ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler+0x4>

080020d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f005 f9c2 	bl	8007498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 800212c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002130:	481b      	ldr	r0, [pc, #108]	; (80021a0 <TIM2_IRQHandler+0x78>)
 8002132:	f005 fcd4 	bl	8007ade <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <TIM2_IRQHandler+0x7c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d111      	bne.n	8002162 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2bc8      	cmp	r3, #200	; 0xc8
 8002144:	dc0a      	bgt.n	800215c <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <TIM2_IRQHandler+0x84>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e002      	b.n	8002162 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <TIM2_IRQHandler+0x7c>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <TIM2_IRQHandler+0x7c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d114      	bne.n	8002194 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <TIM2_IRQHandler+0x80>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b63      	cmp	r3, #99	; 0x63
 8002170:	dd0a      	ble.n	8002188 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <TIM2_IRQHandler+0x84>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <TIM2_IRQHandler+0x80>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3b01      	subs	r3, #1
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e005      	b.n	8002194 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <TIM2_IRQHandler+0x7c>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
		  i = 100;
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <TIM2_IRQHandler+0x80>)
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <TIM2_IRQHandler+0x84>)
 8002196:	f00a fe98 	bl	800ceca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	20000294 	.word	0x20000294
 80021a8:	20000000 	.word	0x20000000
 80021ac:	200004cc 	.word	0x200004cc

080021b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80021b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <TIM3_IRQHandler+0x1c>)
 80021ba:	f005 fc90 	bl	8007ade <HAL_GPIO_TogglePin>
  read_digits();
 80021be:	f7fe fe63 	bl	8000e88 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <TIM3_IRQHandler+0x20>)
 80021c4:	f00a fe81 	bl	800ceca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	200003d4 	.word	0x200003d4

080021d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021dc:	f005 fc9a 	bl	8007b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <OTG_FS_IRQHandler+0x10>)
 80021ea:	f005 ff15 	bl	8008018 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000b10 	.word	0x20000b10

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f00e fe14 	bl	8010e54 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20020000 	.word	0x20020000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000298 	.word	0x20000298
 8002260:	20000e28 	.word	0x20000e28

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b08b      	sub	sp, #44	; 0x2c
 800228c:	af00      	add	r7, sp, #0
 800228e:	4604      	mov	r4, r0
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4623      	mov	r3, r4
 8002298:	80fb      	strh	r3, [r7, #6]
 800229a:	4603      	mov	r3, r0
 800229c:	80bb      	strh	r3, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]
 80022a2:	4613      	mov	r3, r2
 80022a4:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	f1c3 0301 	rsb	r3, r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80022c0:	e061      	b.n	8002386 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e018      	b.n	80022fe <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	b298      	uxth	r0, r3
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	883a      	ldrh	r2, [r7, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f000 fc0b 	bl	8002af8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	88ba      	ldrh	r2, [r7, #4]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	883a      	ldrh	r2, [r7, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f000 fc00 	bl	8002af8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3301      	adds	r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	4413      	add	r3, r2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	dde0      	ble.n	80022cc <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e018      	b.n	8002346 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	b298      	uxth	r0, r3
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	b29a      	uxth	r2, r3
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	883a      	ldrh	r2, [r7, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f000 fbe7 	bl	8002af8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	b298      	uxth	r0, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	b29b      	uxth	r3, r3
 8002332:	88ba      	ldrh	r2, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b29b      	uxth	r3, r3
 8002338:	883a      	ldrh	r2, [r7, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	f000 fbdc 	bl	8002af8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	88fa      	ldrh	r2, [r7, #6]
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	4413      	add	r3, r2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	429a      	cmp	r2, r3
 8002350:	dde0      	ble.n	8002314 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	3301      	adds	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	3302      	adds	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005a      	lsls	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	dd09      	ble.n	8002386 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3b01      	subs	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3302      	adds	r3, #2
 8002384:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	429a      	cmp	r2, r3
 800238c:	da99      	bge.n	80022c2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	372c      	adds	r7, #44	; 0x2c
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af02      	add	r7, sp, #8
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4623      	mov	r3, r4
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	4603      	mov	r3, r0
 80023ac:	80bb      	strh	r3, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	71bb      	strb	r3, [r7, #6]
 80023b2:	4613      	mov	r3, r2
 80023b4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b1f      	cmp	r3, #31
 80023be:	d902      	bls.n	80023c6 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	3b20      	subs	r3, #32
 80023c4:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	753b      	strb	r3, [r7, #20]
 80023ca:	e012      	b.n	80023f2 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80023cc:	7dfa      	ldrb	r2, [r7, #23]
 80023ce:	7d38      	ldrb	r0, [r7, #20]
 80023d0:	7d39      	ldrb	r1, [r7, #20]
 80023d2:	4c3b      	ldr	r4, [pc, #236]	; (80024c0 <ILI9341_Draw_Char+0x128>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4423      	add	r3, r4
 80023de:	4403      	add	r3, r0
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	440b      	add	r3, r1
 80023e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023ec:	7d3b      	ldrb	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	753b      	strb	r3, [r7, #20]
 80023f2:	7d3b      	ldrb	r3, [r7, #20]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d9e9      	bls.n	80023cc <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	b299      	uxth	r1, r3
 80023fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023fe:	461a      	mov	r2, r3
 8002400:	0052      	lsls	r2, r2, #1
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	b29c      	uxth	r4, r3
 800240e:	88b8      	ldrh	r0, [r7, #4]
 8002410:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4623      	mov	r3, r4
 8002416:	f000 fc37 	bl	8002c88 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800241a:	2300      	movs	r3, #0
 800241c:	757b      	strb	r3, [r7, #21]
 800241e:	e046      	b.n	80024ae <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002420:	2300      	movs	r3, #0
 8002422:	75bb      	strb	r3, [r7, #22]
 8002424:	e03d      	b.n	80024a2 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	f107 0218 	add.w	r2, r7, #24
 800242c:	4413      	add	r3, r2
 800242e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002432:	461a      	mov	r2, r3
 8002434:	7dbb      	ldrb	r3, [r7, #22]
 8002436:	fa42 f303 	asr.w	r3, r2, r3
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02c      	beq.n	800249c <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8002442:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10f      	bne.n	8002468 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002448:	7d7b      	ldrb	r3, [r7, #21]
 800244a:	b29a      	uxth	r2, r3
 800244c:	88bb      	ldrh	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	b298      	uxth	r0, r3
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	b29a      	uxth	r2, r3
 8002456:	7dbb      	ldrb	r3, [r7, #22]
 8002458:	b29b      	uxth	r3, r3
 800245a:	4413      	add	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	4619      	mov	r1, r3
 8002462:	f000 fb49 	bl	8002af8 <ILI9341_Draw_Pixel>
 8002466:	e019      	b.n	800249c <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002468:	7d7b      	ldrb	r3, [r7, #21]
 800246a:	b29b      	uxth	r3, r3
 800246c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800246e:	fb12 f303 	smulbb	r3, r2, r3
 8002472:	b29a      	uxth	r2, r3
 8002474:	88bb      	ldrh	r3, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	b298      	uxth	r0, r3
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	b29a      	uxth	r2, r3
 800247e:	7dbb      	ldrb	r3, [r7, #22]
 8002480:	b29b      	uxth	r3, r3
 8002482:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002484:	fb11 f303 	smulbb	r3, r1, r3
 8002488:	b29b      	uxth	r3, r3
 800248a:	4413      	add	r3, r2
 800248c:	b299      	uxth	r1, r3
 800248e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002490:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4623      	mov	r3, r4
 8002498:	f000 fbf6 	bl	8002c88 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800249c:	7dbb      	ldrb	r3, [r7, #22]
 800249e:	3301      	adds	r3, #1
 80024a0:	75bb      	strb	r3, [r7, #22]
 80024a2:	7dbb      	ldrb	r3, [r7, #22]
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d9be      	bls.n	8002426 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80024a8:	7d7b      	ldrb	r3, [r7, #21]
 80024aa:	3301      	adds	r3, #1
 80024ac:	757b      	strb	r3, [r7, #21]
 80024ae:	7d7b      	ldrb	r3, [r7, #21]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d9b5      	bls.n	8002420 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	080118bc 	.word	0x080118bc

080024c4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	460b      	mov	r3, r1
 80024d8:	727b      	strb	r3, [r7, #9]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 80024de:	e016      	b.n	800250e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60fa      	str	r2, [r7, #12]
 80024e6:	7818      	ldrb	r0, [r3, #0]
 80024e8:	88fc      	ldrh	r4, [r7, #6]
 80024ea:	7a7a      	ldrb	r2, [r7, #9]
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	8c3b      	ldrh	r3, [r7, #32]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4623      	mov	r3, r4
 80024f8:	f7ff ff4e 	bl	8002398 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80024fc:	8c3b      	ldrh	r3, [r7, #32]
 80024fe:	461a      	mov	r2, r3
 8002500:	0052      	lsls	r2, r2, #1
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	897b      	ldrh	r3, [r7, #10]
 800250a:	4413      	add	r3, r2
 800250c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e4      	bne.n	80024e0 <ILI9341_Draw_Text+0x1c>
    }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002524:	2200      	movs	r2, #0
 8002526:	2110      	movs	r1, #16
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <ILI9341_SPI_Init+0x14>)
 800252a:	f005 fabf 	bl	8007aac <HAL_GPIO_WritePin>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002542:	1df9      	adds	r1, r7, #7
 8002544:	2301      	movs	r3, #1
 8002546:	2201      	movs	r2, #1
 8002548:	4803      	ldr	r0, [pc, #12]	; (8002558 <ILI9341_SPI_Send+0x20>)
 800254a:	f009 ffea 	bl	800c522 <HAL_SPI_Transmit>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000328 	.word	0x20000328

0800255c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2110      	movs	r1, #16
 800256a:	480a      	ldr	r0, [pc, #40]	; (8002594 <ILI9341_Write_Command+0x38>)
 800256c:	f005 fa9e 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	4807      	ldr	r0, [pc, #28]	; (8002594 <ILI9341_Write_Command+0x38>)
 8002576:	f005 fa99 	bl	8007aac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ffdb 	bl	8002538 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002582:	2201      	movs	r2, #1
 8002584:	2110      	movs	r1, #16
 8002586:	4803      	ldr	r0, [pc, #12]	; (8002594 <ILI9341_Write_Command+0x38>)
 8002588:	f005 fa90 	bl	8007aac <HAL_GPIO_WritePin>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80025a2:	2201      	movs	r2, #1
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	480a      	ldr	r0, [pc, #40]	; (80025d0 <ILI9341_Write_Data+0x38>)
 80025a8:	f005 fa80 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2110      	movs	r1, #16
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <ILI9341_Write_Data+0x38>)
 80025b2:	f005 fa7b 	bl	8007aac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ffbd 	bl	8002538 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025be:	2201      	movs	r2, #1
 80025c0:	2110      	movs	r1, #16
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <ILI9341_Write_Data+0x38>)
 80025c4:	f005 fa72 	bl	8007aac <HAL_GPIO_WritePin>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	80fb      	strh	r3, [r7, #6]
 80025e6:	4603      	mov	r3, r0
 80025e8:	80bb      	strh	r3, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80025f2:	202a      	movs	r0, #42	; 0x2a
 80025f4:	f7ff ffb2 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ffc9 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ffc4 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ffbd 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffb8 	bl	8002598 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002628:	202b      	movs	r0, #43	; 0x2b
 800262a:	f7ff ff97 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800262e:	88bb      	ldrh	r3, [r7, #4]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29b      	uxth	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ffae 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800263c:	88bb      	ldrh	r3, [r7, #4]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ffa9 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002646:	883b      	ldrh	r3, [r7, #0]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	b29b      	uxth	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ffa2 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002654:	883b      	ldrh	r3, [r7, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff9d 	bl	8002598 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800265e:	202c      	movs	r0, #44	; 0x2c
 8002660:	f7ff ff7c 	bl	800255c <ILI9341_Write_Command>
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	2120      	movs	r1, #32
 8002674:	480a      	ldr	r0, [pc, #40]	; (80026a0 <ILI9341_Reset+0x34>)
 8002676:	f005 fa19 	bl	8007aac <HAL_GPIO_WritePin>
HAL_Delay(200);
 800267a:	20c8      	movs	r0, #200	; 0xc8
 800267c:	f004 ff2c 	bl	80074d8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	2110      	movs	r1, #16
 8002684:	4806      	ldr	r0, [pc, #24]	; (80026a0 <ILI9341_Reset+0x34>)
 8002686:	f005 fa11 	bl	8007aac <HAL_GPIO_WritePin>
HAL_Delay(200);
 800268a:	20c8      	movs	r0, #200	; 0xc8
 800268c:	f004 ff24 	bl	80074d8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002690:	2201      	movs	r2, #1
 8002692:	2120      	movs	r1, #32
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <ILI9341_Reset+0x34>)
 8002696:	f005 fa09 	bl	8007aac <HAL_GPIO_WritePin>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80026b2:	2036      	movs	r0, #54	; 0x36
 80026b4:	f7ff ff52 	bl	800255c <ILI9341_Write_Command>
HAL_Delay(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f004 ff0d 	bl	80074d8 <HAL_Delay>
	
switch(screen_rotation) 
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d837      	bhi.n	8002734 <ILI9341_Set_Rotation+0x90>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <ILI9341_Set_Rotation+0x28>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026f3 	.word	0x080026f3
 80026d4:	08002709 	.word	0x08002709
 80026d8:	0800271f 	.word	0x0800271f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80026dc:	2048      	movs	r0, #72	; 0x48
 80026de:	f7ff ff5b 	bl	8002598 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <ILI9341_Set_Rotation+0x9c>)
 80026e4:	22f0      	movs	r2, #240	; 0xf0
 80026e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <ILI9341_Set_Rotation+0xa0>)
 80026ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026ee:	801a      	strh	r2, [r3, #0]
			break;
 80026f0:	e021      	b.n	8002736 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80026f2:	2028      	movs	r0, #40	; 0x28
 80026f4:	f7ff ff50 	bl	8002598 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <ILI9341_Set_Rotation+0x9c>)
 80026fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <ILI9341_Set_Rotation+0xa0>)
 8002702:	22f0      	movs	r2, #240	; 0xf0
 8002704:	801a      	strh	r2, [r3, #0]
			break;
 8002706:	e016      	b.n	8002736 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002708:	2088      	movs	r0, #136	; 0x88
 800270a:	f7ff ff45 	bl	8002598 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <ILI9341_Set_Rotation+0x9c>)
 8002710:	22f0      	movs	r2, #240	; 0xf0
 8002712:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <ILI9341_Set_Rotation+0xa0>)
 8002716:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800271a:	801a      	strh	r2, [r3, #0]
			break;
 800271c:	e00b      	b.n	8002736 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800271e:	20e8      	movs	r0, #232	; 0xe8
 8002720:	f7ff ff3a 	bl	8002598 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <ILI9341_Set_Rotation+0x9c>)
 8002726:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800272a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <ILI9341_Set_Rotation+0xa0>)
 800272e:	22f0      	movs	r2, #240	; 0xf0
 8002730:	801a      	strh	r2, [r3, #0]
			break;
 8002732:	e000      	b.n	8002736 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002734:	bf00      	nop
	}
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000000a 	.word	0x2000000a
 8002744:	20000008 	.word	0x20000008

08002748 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800274c:	2201      	movs	r2, #1
 800274e:	2120      	movs	r1, #32
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <ILI9341_Enable+0x14>)
 8002752:	f005 f9ab 	bl	8007aac <HAL_GPIO_WritePin>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000

08002760 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002764:	f7ff fff0 	bl	8002748 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002768:	f7ff feda 	bl	8002520 <ILI9341_SPI_Init>
ILI9341_Reset();
 800276c:	f7ff ff7e 	bl	800266c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002770:	2001      	movs	r0, #1
 8002772:	f7ff fef3 	bl	800255c <ILI9341_Write_Command>
HAL_Delay(1000);
 8002776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800277a:	f004 fead 	bl	80074d8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800277e:	20cb      	movs	r0, #203	; 0xcb
 8002780:	f7ff feec 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002784:	2039      	movs	r0, #57	; 0x39
 8002786:	f7ff ff07 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800278a:	202c      	movs	r0, #44	; 0x2c
 800278c:	f7ff ff04 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff ff01 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002796:	2034      	movs	r0, #52	; 0x34
 8002798:	f7ff fefe 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800279c:	2002      	movs	r0, #2
 800279e:	f7ff fefb 	bl	8002598 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80027a2:	20cf      	movs	r0, #207	; 0xcf
 80027a4:	f7ff feda 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fef5 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80027ae:	20c1      	movs	r0, #193	; 0xc1
 80027b0:	f7ff fef2 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80027b4:	2030      	movs	r0, #48	; 0x30
 80027b6:	f7ff feef 	bl	8002598 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80027ba:	20e8      	movs	r0, #232	; 0xe8
 80027bc:	f7ff fece 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80027c0:	2085      	movs	r0, #133	; 0x85
 80027c2:	f7ff fee9 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff fee6 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80027cc:	2078      	movs	r0, #120	; 0x78
 80027ce:	f7ff fee3 	bl	8002598 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80027d2:	20ea      	movs	r0, #234	; 0xea
 80027d4:	f7ff fec2 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff fedd 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff feda 	bl	8002598 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80027e4:	20ed      	movs	r0, #237	; 0xed
 80027e6:	f7ff feb9 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80027ea:	2064      	movs	r0, #100	; 0x64
 80027ec:	f7ff fed4 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f7ff fed1 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80027f6:	2012      	movs	r0, #18
 80027f8:	f7ff fece 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80027fc:	2081      	movs	r0, #129	; 0x81
 80027fe:	f7ff fecb 	bl	8002598 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002802:	20f7      	movs	r0, #247	; 0xf7
 8002804:	f7ff feaa 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002808:	2020      	movs	r0, #32
 800280a:	f7ff fec5 	bl	8002598 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800280e:	20c0      	movs	r0, #192	; 0xc0
 8002810:	f7ff fea4 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002814:	2023      	movs	r0, #35	; 0x23
 8002816:	f7ff febf 	bl	8002598 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800281a:	20c1      	movs	r0, #193	; 0xc1
 800281c:	f7ff fe9e 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002820:	2010      	movs	r0, #16
 8002822:	f7ff feb9 	bl	8002598 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002826:	20c5      	movs	r0, #197	; 0xc5
 8002828:	f7ff fe98 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800282c:	203e      	movs	r0, #62	; 0x3e
 800282e:	f7ff feb3 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002832:	2028      	movs	r0, #40	; 0x28
 8002834:	f7ff feb0 	bl	8002598 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002838:	20c7      	movs	r0, #199	; 0xc7
 800283a:	f7ff fe8f 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800283e:	2086      	movs	r0, #134	; 0x86
 8002840:	f7ff feaa 	bl	8002598 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002844:	2036      	movs	r0, #54	; 0x36
 8002846:	f7ff fe89 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800284a:	2048      	movs	r0, #72	; 0x48
 800284c:	f7ff fea4 	bl	8002598 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002850:	203a      	movs	r0, #58	; 0x3a
 8002852:	f7ff fe83 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002856:	2055      	movs	r0, #85	; 0x55
 8002858:	f7ff fe9e 	bl	8002598 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800285c:	20b1      	movs	r0, #177	; 0xb1
 800285e:	f7ff fe7d 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7ff fe98 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002868:	2018      	movs	r0, #24
 800286a:	f7ff fe95 	bl	8002598 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800286e:	20b6      	movs	r0, #182	; 0xb6
 8002870:	f7ff fe74 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002874:	2008      	movs	r0, #8
 8002876:	f7ff fe8f 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800287a:	2082      	movs	r0, #130	; 0x82
 800287c:	f7ff fe8c 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002880:	2027      	movs	r0, #39	; 0x27
 8002882:	f7ff fe89 	bl	8002598 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002886:	20f2      	movs	r0, #242	; 0xf2
 8002888:	f7ff fe68 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff fe83 	bl	8002598 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002892:	2026      	movs	r0, #38	; 0x26
 8002894:	f7ff fe62 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002898:	2001      	movs	r0, #1
 800289a:	f7ff fe7d 	bl	8002598 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800289e:	20e0      	movs	r0, #224	; 0xe0
 80028a0:	f7ff fe5c 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80028a4:	200f      	movs	r0, #15
 80028a6:	f7ff fe77 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028aa:	2031      	movs	r0, #49	; 0x31
 80028ac:	f7ff fe74 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80028b0:	202b      	movs	r0, #43	; 0x2b
 80028b2:	f7ff fe71 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028b6:	200c      	movs	r0, #12
 80028b8:	f7ff fe6e 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80028bc:	200e      	movs	r0, #14
 80028be:	f7ff fe6b 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80028c2:	2008      	movs	r0, #8
 80028c4:	f7ff fe68 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80028c8:	204e      	movs	r0, #78	; 0x4e
 80028ca:	f7ff fe65 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80028ce:	20f1      	movs	r0, #241	; 0xf1
 80028d0:	f7ff fe62 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80028d4:	2037      	movs	r0, #55	; 0x37
 80028d6:	f7ff fe5f 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80028da:	2007      	movs	r0, #7
 80028dc:	f7ff fe5c 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80028e0:	2010      	movs	r0, #16
 80028e2:	f7ff fe59 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80028e6:	2003      	movs	r0, #3
 80028e8:	f7ff fe56 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80028ec:	200e      	movs	r0, #14
 80028ee:	f7ff fe53 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80028f2:	2009      	movs	r0, #9
 80028f4:	f7ff fe50 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff fe4d 	bl	8002598 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80028fe:	20e1      	movs	r0, #225	; 0xe1
 8002900:	f7ff fe2c 	bl	800255c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7ff fe47 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800290a:	200e      	movs	r0, #14
 800290c:	f7ff fe44 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002910:	2014      	movs	r0, #20
 8002912:	f7ff fe41 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002916:	2003      	movs	r0, #3
 8002918:	f7ff fe3e 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800291c:	2011      	movs	r0, #17
 800291e:	f7ff fe3b 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002922:	2007      	movs	r0, #7
 8002924:	f7ff fe38 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002928:	2031      	movs	r0, #49	; 0x31
 800292a:	f7ff fe35 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800292e:	20c1      	movs	r0, #193	; 0xc1
 8002930:	f7ff fe32 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002934:	2048      	movs	r0, #72	; 0x48
 8002936:	f7ff fe2f 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800293a:	2008      	movs	r0, #8
 800293c:	f7ff fe2c 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002940:	200f      	movs	r0, #15
 8002942:	f7ff fe29 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002946:	200c      	movs	r0, #12
 8002948:	f7ff fe26 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800294c:	2031      	movs	r0, #49	; 0x31
 800294e:	f7ff fe23 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002952:	2036      	movs	r0, #54	; 0x36
 8002954:	f7ff fe20 	bl	8002598 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002958:	200f      	movs	r0, #15
 800295a:	f7ff fe1d 	bl	8002598 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800295e:	2011      	movs	r0, #17
 8002960:	f7ff fdfc 	bl	800255c <ILI9341_Write_Command>
HAL_Delay(120);
 8002964:	2078      	movs	r0, #120	; 0x78
 8002966:	f004 fdb7 	bl	80074d8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800296a:	2029      	movs	r0, #41	; 0x29
 800296c:	f7ff fdf6 	bl	800255c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002970:	2003      	movs	r0, #3
 8002972:	f7ff fe97 	bl	80026a4 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002976:	200a      	movs	r0, #10
 8002978:	f004 fdae 	bl	80074d8 <HAL_Delay>
//
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	80fb      	strh	r3, [r7, #6]
 800298c:	466b      	mov	r3, sp
 800298e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800299c:	d202      	bcs.n	80029a4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e002      	b.n	80029aa <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80029a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80029aa:	2201      	movs	r2, #1
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	483d      	ldr	r0, [pc, #244]	; (8002aa4 <ILI9341_Draw_Colour_Burst+0x124>)
 80029b0:	f005 f87c 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2110      	movs	r1, #16
 80029b8:	483a      	ldr	r0, [pc, #232]	; (8002aa4 <ILI9341_Draw_Colour_Burst+0x124>)
 80029ba:	f005 f877 	bl	8007aac <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80029c8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80029ca:	4623      	mov	r3, r4
 80029cc:	3b01      	subs	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	4620      	mov	r0, r4
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	00cb      	lsls	r3, r1, #3
 80029e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029e4:	00c2      	lsls	r2, r0, #3
 80029e6:	4620      	mov	r0, r4
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00cb      	lsls	r3, r1, #3
 80029f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029fa:	00c2      	lsls	r2, r0, #3
 80029fc:	1de3      	adds	r3, r4, #7
 80029fe:	08db      	lsrs	r3, r3, #3
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	ebad 0d03 	sub.w	sp, sp, r3
 8002a06:	466b      	mov	r3, sp
 8002a08:	3300      	adds	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a10:	e00e      	b.n	8002a30 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	4413      	add	r3, r2
 8002a18:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a1c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	3301      	adds	r3, #1
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	b2d1      	uxtb	r1, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3ec      	bcc.n	8002a12 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a52:	fb01 f202 	mul.w	r2, r1, r2
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a64:	e009      	b.n	8002a7a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	230a      	movs	r3, #10
 8002a6e:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002a70:	f009 fd57 	bl	800c522 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	3301      	adds	r3, #1
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3f1      	bcc.n	8002a66 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	230a      	movs	r3, #10
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002a8c:	f009 fd49 	bl	800c522 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	2110      	movs	r1, #16
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <ILI9341_Draw_Colour_Burst+0x124>)
 8002a96:	f005 f809 	bl	8007aac <HAL_GPIO_WritePin>
 8002a9a:	46ad      	mov	sp, r5
}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	20000328 	.word	0x20000328

08002aac <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <ILI9341_Fill_Screen+0x44>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <ILI9341_Fill_Screen+0x48>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff fd85 	bl	80025d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <ILI9341_Fill_Screen+0x44>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <ILI9341_Fill_Screen+0x48>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	fb03 f302 	mul.w	r3, r3, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff4c 	bl	8002980 <ILI9341_Draw_Colour_Burst>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000000a 	.word	0x2000000a
 8002af4:	20000008 	.word	0x20000008

08002af8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
 8002b02:	460b      	mov	r3, r1
 8002b04:	80bb      	strh	r3, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <ILI9341_Draw_Pixel+0x180>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f080 80ac 	bcs.w	8002c70 <ILI9341_Draw_Pixel+0x178>
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <ILI9341_Draw_Pixel+0x184>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	88ba      	ldrh	r2, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f080 80a5 	bcs.w	8002c70 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b26:	2200      	movs	r2, #0
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	4855      	ldr	r0, [pc, #340]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b2c:	f004 ffbe 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2110      	movs	r1, #16
 8002b34:	4852      	ldr	r0, [pc, #328]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b36:	f004 ffb9 	bl	8007aac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002b3a:	202a      	movs	r0, #42	; 0x2a
 8002b3c:	f7ff fcfc 	bl	8002538 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002b40:	2201      	movs	r2, #1
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	484e      	ldr	r0, [pc, #312]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b46:	f004 ffb1 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	484c      	ldr	r0, [pc, #304]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b50:	f004 ffac 	bl	8007aac <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b54:	2200      	movs	r2, #0
 8002b56:	2110      	movs	r1, #16
 8002b58:	4849      	ldr	r0, [pc, #292]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b5a:	f004 ffa7 	bl	8007aac <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	753b      	strb	r3, [r7, #20]
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	757b      	strb	r3, [r7, #21]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	3301      	adds	r3, #1
 8002b72:	121b      	asrs	r3, r3, #8
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	75bb      	strb	r3, [r7, #22]
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002b82:	f107 0114 	add.w	r1, r7, #20
 8002b86:	2301      	movs	r3, #1
 8002b88:	2204      	movs	r2, #4
 8002b8a:	483e      	ldr	r0, [pc, #248]	; (8002c84 <ILI9341_Draw_Pixel+0x18c>)
 8002b8c:	f009 fcc9 	bl	800c522 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2110      	movs	r1, #16
 8002b94:	483a      	ldr	r0, [pc, #232]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002b96:	f004 ff89 	bl	8007aac <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2140      	movs	r1, #64	; 0x40
 8002b9e:	4838      	ldr	r0, [pc, #224]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002ba0:	f004 ff84 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	4835      	ldr	r0, [pc, #212]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002baa:	f004 ff7f 	bl	8007aac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002bae:	202b      	movs	r0, #43	; 0x2b
 8002bb0:	f7ff fcc2 	bl	8002538 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2140      	movs	r1, #64	; 0x40
 8002bb8:	4831      	ldr	r0, [pc, #196]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002bba:	f004 ff77 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	482f      	ldr	r0, [pc, #188]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002bc4:	f004 ff72 	bl	8007aac <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2110      	movs	r1, #16
 8002bcc:	482c      	ldr	r0, [pc, #176]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002bce:	f004 ff6d 	bl	8007aac <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002bd2:	88bb      	ldrh	r3, [r7, #4]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	743b      	strb	r3, [r7, #16]
 8002bdc:	88bb      	ldrh	r3, [r7, #4]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	747b      	strb	r3, [r7, #17]
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	3301      	adds	r3, #1
 8002be6:	121b      	asrs	r3, r3, #8
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	74bb      	strb	r3, [r7, #18]
 8002bec:	88bb      	ldrh	r3, [r7, #4]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002bf6:	f107 0110 	add.w	r1, r7, #16
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4821      	ldr	r0, [pc, #132]	; (8002c84 <ILI9341_Draw_Pixel+0x18c>)
 8002c00:	f009 fc8f 	bl	800c522 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	2110      	movs	r1, #16
 8002c08:	481d      	ldr	r0, [pc, #116]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c0a:	f004 ff4f 	bl	8007aac <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	481b      	ldr	r0, [pc, #108]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c14:	f004 ff4a 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	4818      	ldr	r0, [pc, #96]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c1e:	f004 ff45 	bl	8007aac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002c22:	202c      	movs	r0, #44	; 0x2c
 8002c24:	f7ff fc88 	bl	8002538 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	4814      	ldr	r0, [pc, #80]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c2e:	f004 ff3d 	bl	8007aac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002c32:	2201      	movs	r2, #1
 8002c34:	2110      	movs	r1, #16
 8002c36:	4812      	ldr	r0, [pc, #72]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c38:	f004 ff38 	bl	8007aac <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2110      	movs	r1, #16
 8002c40:	480f      	ldr	r0, [pc, #60]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c42:	f004 ff33 	bl	8007aac <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	733b      	strb	r3, [r7, #12]
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002c56:	f107 010c 	add.w	r1, r7, #12
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <ILI9341_Draw_Pixel+0x18c>)
 8002c60:	f009 fc5f 	bl	800c522 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c64:	2201      	movs	r2, #1
 8002c66:	2110      	movs	r1, #16
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <ILI9341_Draw_Pixel+0x188>)
 8002c6a:	f004 ff1f 	bl	8007aac <HAL_GPIO_WritePin>
 8002c6e:	e000      	b.n	8002c72 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002c70:	bf00      	nop
	
}
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000000a 	.word	0x2000000a
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	40021000 	.word	0x40021000
 8002c84:	20000328 	.word	0x20000328

08002c88 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	80fb      	strh	r3, [r7, #6]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	80bb      	strh	r3, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <ILI9341_Draw_Rectangle+0xb0>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d23d      	bcs.n	8002d2e <ILI9341_Draw_Rectangle+0xa6>
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <ILI9341_Draw_Rectangle+0xb4>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	88ba      	ldrh	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d237      	bcs.n	8002d2e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <ILI9341_Draw_Rectangle+0xb0>)
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	dd05      	ble.n	8002cda <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <ILI9341_Draw_Rectangle+0xb0>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002cda:	88ba      	ldrh	r2, [r7, #4]
 8002cdc:	883b      	ldrh	r3, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <ILI9341_Draw_Rectangle+0xb4>)
 8002ce2:	8812      	ldrh	r2, [r2, #0]
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	dd05      	ble.n	8002cf6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <ILI9341_Draw_Rectangle+0xb4>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29c      	uxth	r4, r3
 8002d02:	88ba      	ldrh	r2, [r7, #4]
 8002d04:	883b      	ldrh	r3, [r7, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	88b9      	ldrh	r1, [r7, #4]
 8002d10:	88f8      	ldrh	r0, [r7, #6]
 8002d12:	4622      	mov	r2, r4
 8002d14:	f7ff fc5e 	bl	80025d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002d18:	883b      	ldrh	r3, [r7, #0]
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	8b3b      	ldrh	r3, [r7, #24]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fe2a 	bl	8002980 <ILI9341_Draw_Colour_Burst>
 8002d2c:	e000      	b.n	8002d30 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002d2e:	bf00      	nop
}
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000000a 	.word	0x2000000a
 8002d3c:	20000008 	.word	0x20000008

08002d40 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002d46:	4832      	ldr	r0, [pc, #200]	; (8002e10 <menu+0xd0>)
 8002d48:	f000 fd4a 	bl	80037e0 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002d4c:	4831      	ldr	r0, [pc, #196]	; (8002e14 <menu+0xd4>)
 8002d4e:	f000 fd19 	bl	8003784 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002d52:	f000 fc4f 	bl	80035f4 <getPressKey>
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d04a      	beq.n	8002df6 <menu+0xb6>
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <menu+0xd8>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d043      	beq.n	8002df6 <menu+0xb6>
	   {
			flagPressed = true;
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <menu+0xd8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d83b      	bhi.n	8002df2 <menu+0xb2>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <menu+0x40>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d95 	.word	0x08002d95
 8002d84:	08002da5 	.word	0x08002da5
 8002d88:	08002dc1 	.word	0x08002dc1
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002ded 	.word	0x08002ded
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002d94:	f000 fcea 	bl	800376c <Menu_GetCurrentMenu>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fcf1 	bl	8003784 <Menu_Navigate>
					break;
 8002da2:	e027      	b.n	8002df4 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <menu+0xdc>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <menu+0xdc>)
 8002dae:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002db0:	f000 fcdc 	bl	800376c <Menu_GetCurrentMenu>
 8002db4:	4603      	mov	r3, r0
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fce3 	bl	8003784 <Menu_Navigate>
					break;
 8002dbe:	e019      	b.n	8002df4 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <menu+0xdc>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <menu+0xdc>)
 8002dca:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002dcc:	f000 fcce 	bl	800376c <Menu_GetCurrentMenu>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fcd5 	bl	8003784 <Menu_Navigate>
					break;
 8002dda:	e00b      	b.n	8002df4 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002ddc:	f000 fcc6 	bl	800376c <Menu_GetCurrentMenu>
 8002de0:	4603      	mov	r3, r0
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fccd 	bl	8003784 <Menu_Navigate>
					break;
 8002dea:	e003      	b.n	8002df4 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002dec:	f000 fd0c 	bl	8003808 <Menu_EnterCurrentItem>
					break;
 8002df0:	e000      	b.n	8002df4 <menu+0xb4>

			 default:
			  break;
 8002df2:	bf00      	nop
			switch(pressed_key)
 8002df4:	e00b      	b.n	8002e0e <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002df6:	f000 fbfd 	bl	80035f4 <getPressKey>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	d1a8      	bne.n	8002d52 <menu+0x12>
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <menu+0xd8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0a4      	beq.n	8002d52 <menu+0x12>
	   {
		   flagPressed = false;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <menu+0xd8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
	  {
 8002e0e:	e7a0      	b.n	8002d52 <menu+0x12>
 8002e10:	08003725 	.word	0x08003725
 8002e14:	08011b14 	.word	0x08011b14
 8002e18:	200002a0 	.word	0x200002a0
 8002e1c:	20000148 	.word	0x20000148

08002e20 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e32:	226e      	movs	r2, #110	; 0x6e
 8002e34:	211e      	movs	r1, #30
 8002e36:	4884      	ldr	r0, [pc, #528]	; (8003048 <print_all_top_menu+0x228>)
 8002e38:	f7ff fb44 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e48:	2282      	movs	r2, #130	; 0x82
 8002e4a:	211e      	movs	r1, #30
 8002e4c:	487e      	ldr	r0, [pc, #504]	; (8003048 <print_all_top_menu+0x228>)
 8002e4e:	f7ff fb39 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002e52:	2300      	movs	r3, #0
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2302      	movs	r3, #2
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e5e:	2296      	movs	r2, #150	; 0x96
 8002e60:	211e      	movs	r1, #30
 8002e62:	4879      	ldr	r0, [pc, #484]	; (8003048 <print_all_top_menu+0x228>)
 8002e64:	f7ff fb2e 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e74:	22aa      	movs	r2, #170	; 0xaa
 8002e76:	211e      	movs	r1, #30
 8002e78:	4873      	ldr	r0, [pc, #460]	; (8003048 <print_all_top_menu+0x228>)
 8002e7a:	f7ff fb23 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	2302      	movs	r3, #2
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e8a:	22be      	movs	r2, #190	; 0xbe
 8002e8c:	211e      	movs	r1, #30
 8002e8e:	486e      	ldr	r0, [pc, #440]	; (8003048 <print_all_top_menu+0x228>)
 8002e90:	f7ff fb18 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002e94:	2300      	movs	r3, #0
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	2302      	movs	r3, #2
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ea0:	22d2      	movs	r2, #210	; 0xd2
 8002ea2:	211e      	movs	r1, #30
 8002ea4:	4868      	ldr	r0, [pc, #416]	; (8003048 <print_all_top_menu+0x228>)
 8002ea6:	f7ff fb0d 	bl	80024c4 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	2302      	movs	r3, #2
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb6:	226e      	movs	r2, #110	; 0x6e
 8002eb8:	211e      	movs	r1, #30
 8002eba:	4864      	ldr	r0, [pc, #400]	; (800304c <print_all_top_menu+0x22c>)
 8002ebc:	f7ff fb02 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	2282      	movs	r2, #130	; 0x82
 8002ece:	211e      	movs	r1, #30
 8002ed0:	485f      	ldr	r0, [pc, #380]	; (8003050 <print_all_top_menu+0x230>)
 8002ed2:	f7ff faf7 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2302      	movs	r3, #2
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee2:	2296      	movs	r2, #150	; 0x96
 8002ee4:	211e      	movs	r1, #30
 8002ee6:	485b      	ldr	r0, [pc, #364]	; (8003054 <print_all_top_menu+0x234>)
 8002ee8:	f7ff faec 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002eec:	2300      	movs	r3, #0
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef8:	22aa      	movs	r2, #170	; 0xaa
 8002efa:	211e      	movs	r1, #30
 8002efc:	4856      	ldr	r0, [pc, #344]	; (8003058 <print_all_top_menu+0x238>)
 8002efe:	f7ff fae1 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002f02:	2300      	movs	r3, #0
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2302      	movs	r3, #2
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f0e:	22be      	movs	r2, #190	; 0xbe
 8002f10:	211e      	movs	r1, #30
 8002f12:	4852      	ldr	r0, [pc, #328]	; (800305c <print_all_top_menu+0x23c>)
 8002f14:	f7ff fad6 	bl	80024c4 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002f18:	4b51      	ldr	r3, [pc, #324]	; (8003060 <print_all_top_menu+0x240>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002f20:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <print_all_top_menu+0x240>)
 8002f22:	2205      	movs	r2, #5
 8002f24:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002f26:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <print_all_top_menu+0x240>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d902      	bls.n	8002f34 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <print_all_top_menu+0x240>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002f34:	2300      	movs	r3, #0
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f40:	226e      	movs	r2, #110	; 0x6e
 8002f42:	2105      	movs	r1, #5
 8002f44:	4847      	ldr	r0, [pc, #284]	; (8003064 <print_all_top_menu+0x244>)
 8002f46:	f7ff fabd 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2302      	movs	r3, #2
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f56:	2282      	movs	r2, #130	; 0x82
 8002f58:	2105      	movs	r1, #5
 8002f5a:	4842      	ldr	r0, [pc, #264]	; (8003064 <print_all_top_menu+0x244>)
 8002f5c:	f7ff fab2 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002f60:	2300      	movs	r3, #0
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2302      	movs	r3, #2
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6c:	2296      	movs	r2, #150	; 0x96
 8002f6e:	2105      	movs	r1, #5
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <print_all_top_menu+0x244>)
 8002f72:	f7ff faa7 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002f76:	2300      	movs	r3, #0
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f82:	22aa      	movs	r2, #170	; 0xaa
 8002f84:	2105      	movs	r1, #5
 8002f86:	4837      	ldr	r0, [pc, #220]	; (8003064 <print_all_top_menu+0x244>)
 8002f88:	f7ff fa9c 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2302      	movs	r3, #2
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f98:	22be      	movs	r2, #190	; 0xbe
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	4831      	ldr	r0, [pc, #196]	; (8003064 <print_all_top_menu+0x244>)
 8002f9e:	f7ff fa91 	bl	80024c4 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <print_all_top_menu+0x240>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d849      	bhi.n	8003040 <print_all_top_menu+0x220>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <print_all_top_menu+0x194>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc9 	.word	0x08002fc9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002ff9 	.word	0x08002ff9
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003029 	.word	0x08003029
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fd4:	226e      	movs	r2, #110	; 0x6e
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	4823      	ldr	r0, [pc, #140]	; (8003068 <print_all_top_menu+0x248>)
 8002fda:	f7ff fa73 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8002fde:	e02f      	b.n	8003040 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fec:	2282      	movs	r2, #130	; 0x82
 8002fee:	2105      	movs	r1, #5
 8002ff0:	481d      	ldr	r0, [pc, #116]	; (8003068 <print_all_top_menu+0x248>)
 8002ff2:	f7ff fa67 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8002ff6:	e023      	b.n	8003040 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003004:	2296      	movs	r2, #150	; 0x96
 8003006:	2105      	movs	r1, #5
 8003008:	4817      	ldr	r0, [pc, #92]	; (8003068 <print_all_top_menu+0x248>)
 800300a:	f7ff fa5b 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800300e:	e017      	b.n	8003040 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003010:	2300      	movs	r3, #0
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2302      	movs	r3, #2
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800301c:	22aa      	movs	r2, #170	; 0xaa
 800301e:	2105      	movs	r1, #5
 8003020:	4811      	ldr	r0, [pc, #68]	; (8003068 <print_all_top_menu+0x248>)
 8003022:	f7ff fa4f 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8003026:	e00b      	b.n	8003040 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8003028:	2300      	movs	r3, #0
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	2302      	movs	r3, #2
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003034:	22be      	movs	r2, #190	; 0xbe
 8003036:	2105      	movs	r1, #5
 8003038:	480b      	ldr	r0, [pc, #44]	; (8003068 <print_all_top_menu+0x248>)
 800303a:	f7ff fa43 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800303e:	bf00      	nop
	}

}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	08011788 	.word	0x08011788
 800304c:	20000010 	.word	0x20000010
 8003050:	2000002e 	.word	0x2000002e
 8003054:	2000004c 	.word	0x2000004c
 8003058:	2000006a 	.word	0x2000006a
 800305c:	20000088 	.word	0x20000088
 8003060:	20000148 	.word	0x20000148
 8003064:	080117ac 	.word	0x080117ac
 8003068:	080117b0 	.word	0x080117b0

0800306c <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003072:	2300      	movs	r3, #0
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2302      	movs	r3, #2
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800307e:	226e      	movs	r2, #110	; 0x6e
 8003080:	211e      	movs	r1, #30
 8003082:	4877      	ldr	r0, [pc, #476]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 8003084:	f7ff fa1e 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003088:	2300      	movs	r3, #0
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	2302      	movs	r3, #2
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003094:	2282      	movs	r2, #130	; 0x82
 8003096:	211e      	movs	r1, #30
 8003098:	4871      	ldr	r0, [pc, #452]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 800309a:	f7ff fa13 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800309e:	2300      	movs	r3, #0
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	2302      	movs	r3, #2
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030aa:	2296      	movs	r2, #150	; 0x96
 80030ac:	211e      	movs	r1, #30
 80030ae:	486c      	ldr	r0, [pc, #432]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 80030b0:	f7ff fa08 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80030b4:	2300      	movs	r3, #0
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	2302      	movs	r3, #2
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030c0:	22aa      	movs	r2, #170	; 0xaa
 80030c2:	211e      	movs	r1, #30
 80030c4:	4866      	ldr	r0, [pc, #408]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 80030c6:	f7ff f9fd 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80030ca:	2300      	movs	r3, #0
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	2302      	movs	r3, #2
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030d6:	22be      	movs	r2, #190	; 0xbe
 80030d8:	211e      	movs	r1, #30
 80030da:	4861      	ldr	r0, [pc, #388]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 80030dc:	f7ff f9f2 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2302      	movs	r3, #2
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030ec:	22d2      	movs	r2, #210	; 0xd2
 80030ee:	211e      	movs	r1, #30
 80030f0:	485b      	ldr	r0, [pc, #364]	; (8003260 <print_all_menu_1_menus+0x1f4>)
 80030f2:	f7ff f9e7 	bl	80024c4 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80030f6:	2300      	movs	r3, #0
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2302      	movs	r3, #2
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003102:	226e      	movs	r2, #110	; 0x6e
 8003104:	2105      	movs	r1, #5
 8003106:	4857      	ldr	r0, [pc, #348]	; (8003264 <print_all_menu_1_menus+0x1f8>)
 8003108:	f7ff f9dc 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 800310c:	2300      	movs	r3, #0
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	2302      	movs	r3, #2
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003118:	2282      	movs	r2, #130	; 0x82
 800311a:	2105      	movs	r1, #5
 800311c:	4851      	ldr	r0, [pc, #324]	; (8003264 <print_all_menu_1_menus+0x1f8>)
 800311e:	f7ff f9d1 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003122:	2300      	movs	r3, #0
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2302      	movs	r3, #2
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312e:	2296      	movs	r2, #150	; 0x96
 8003130:	2105      	movs	r1, #5
 8003132:	484c      	ldr	r0, [pc, #304]	; (8003264 <print_all_menu_1_menus+0x1f8>)
 8003134:	f7ff f9c6 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8003138:	2300      	movs	r3, #0
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2302      	movs	r3, #2
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	22aa      	movs	r2, #170	; 0xaa
 8003146:	2105      	movs	r1, #5
 8003148:	4846      	ldr	r0, [pc, #280]	; (8003264 <print_all_menu_1_menus+0x1f8>)
 800314a:	f7ff f9bb 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800314e:	2300      	movs	r3, #0
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	2302      	movs	r3, #2
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315a:	22be      	movs	r2, #190	; 0xbe
 800315c:	2105      	movs	r1, #5
 800315e:	4841      	ldr	r0, [pc, #260]	; (8003264 <print_all_menu_1_menus+0x1f8>)
 8003160:	f7ff f9b0 	bl	80024c4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 8003164:	2300      	movs	r3, #0
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2302      	movs	r3, #2
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003170:	226e      	movs	r2, #110	; 0x6e
 8003172:	211e      	movs	r1, #30
 8003174:	483c      	ldr	r0, [pc, #240]	; (8003268 <print_all_menu_1_menus+0x1fc>)
 8003176:	f7ff f9a5 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 800317a:	2300      	movs	r3, #0
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	2302      	movs	r3, #2
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003186:	2282      	movs	r2, #130	; 0x82
 8003188:	211e      	movs	r1, #30
 800318a:	4838      	ldr	r0, [pc, #224]	; (800326c <print_all_menu_1_menus+0x200>)
 800318c:	f7ff f99a 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 8003190:	2300      	movs	r3, #0
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2302      	movs	r3, #2
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800319c:	2296      	movs	r2, #150	; 0x96
 800319e:	211e      	movs	r1, #30
 80031a0:	4833      	ldr	r0, [pc, #204]	; (8003270 <print_all_menu_1_menus+0x204>)
 80031a2:	f7ff f98f 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 80031a6:	2300      	movs	r3, #0
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	2302      	movs	r3, #2
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b2:	22aa      	movs	r2, #170	; 0xaa
 80031b4:	211e      	movs	r1, #30
 80031b6:	482f      	ldr	r0, [pc, #188]	; (8003274 <print_all_menu_1_menus+0x208>)
 80031b8:	f7ff f984 	bl	80024c4 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <print_all_menu_1_menus+0x20c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <print_all_menu_1_menus+0x20c>)
 80031c6:	2204      	movs	r2, #4
 80031c8:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <print_all_menu_1_menus+0x20c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d902      	bls.n	80031d8 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <print_all_menu_1_menus+0x20c>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <print_all_menu_1_menus+0x20c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d83a      	bhi.n	8003258 <print_all_menu_1_menus+0x1ec>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <print_all_menu_1_menus+0x17c>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	080031f9 	.word	0x080031f9
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003229 	.word	0x08003229
 80031f4:	08003241 	.word	0x08003241
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80031f8:	2300      	movs	r3, #0
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	2302      	movs	r3, #2
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003204:	226e      	movs	r2, #110	; 0x6e
 8003206:	2105      	movs	r1, #5
 8003208:	481c      	ldr	r0, [pc, #112]	; (800327c <print_all_menu_1_menus+0x210>)
 800320a:	f7ff f95b 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800320e:	e023      	b.n	8003258 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003210:	2300      	movs	r3, #0
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800321c:	2282      	movs	r2, #130	; 0x82
 800321e:	2105      	movs	r1, #5
 8003220:	4816      	ldr	r0, [pc, #88]	; (800327c <print_all_menu_1_menus+0x210>)
 8003222:	f7ff f94f 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8003226:	e017      	b.n	8003258 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003228:	2300      	movs	r3, #0
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	2302      	movs	r3, #2
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003234:	2296      	movs	r2, #150	; 0x96
 8003236:	2105      	movs	r1, #5
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <print_all_menu_1_menus+0x210>)
 800323a:	f7ff f943 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800323e:	e00b      	b.n	8003258 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003240:	2300      	movs	r3, #0
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2302      	movs	r3, #2
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800324c:	22aa      	movs	r2, #170	; 0xaa
 800324e:	2105      	movs	r1, #5
 8003250:	480a      	ldr	r0, [pc, #40]	; (800327c <print_all_menu_1_menus+0x210>)
 8003252:	f7ff f937 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8003256:	bf00      	nop
	}
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	08011788 	.word	0x08011788
 8003264:	080117ac 	.word	0x080117ac
 8003268:	200000a8 	.word	0x200000a8
 800326c:	200000bc 	.word	0x200000bc
 8003270:	200000d0 	.word	0x200000d0
 8003274:	200000e4 	.word	0x200000e4
 8003278:	20000148 	.word	0x20000148
 800327c:	080117b0 	.word	0x080117b0

08003280 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003286:	2300      	movs	r3, #0
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2302      	movs	r3, #2
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003292:	226e      	movs	r2, #110	; 0x6e
 8003294:	211e      	movs	r1, #30
 8003296:	4877      	ldr	r0, [pc, #476]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 8003298:	f7ff f914 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 800329c:	2300      	movs	r3, #0
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2302      	movs	r3, #2
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032a8:	2282      	movs	r2, #130	; 0x82
 80032aa:	211e      	movs	r1, #30
 80032ac:	4871      	ldr	r0, [pc, #452]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 80032ae:	f7ff f909 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80032b2:	2300      	movs	r3, #0
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2302      	movs	r3, #2
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032be:	2296      	movs	r2, #150	; 0x96
 80032c0:	211e      	movs	r1, #30
 80032c2:	486c      	ldr	r0, [pc, #432]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 80032c4:	f7ff f8fe 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80032c8:	2300      	movs	r3, #0
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032d4:	22aa      	movs	r2, #170	; 0xaa
 80032d6:	211e      	movs	r1, #30
 80032d8:	4866      	ldr	r0, [pc, #408]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 80032da:	f7ff f8f3 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80032de:	2300      	movs	r3, #0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ea:	22be      	movs	r2, #190	; 0xbe
 80032ec:	211e      	movs	r1, #30
 80032ee:	4861      	ldr	r0, [pc, #388]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 80032f0:	f7ff f8e8 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80032f4:	2300      	movs	r3, #0
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2302      	movs	r3, #2
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003300:	22d2      	movs	r2, #210	; 0xd2
 8003302:	211e      	movs	r1, #30
 8003304:	485b      	ldr	r0, [pc, #364]	; (8003474 <print_all_menu_1_1_menus+0x1f4>)
 8003306:	f7ff f8dd 	bl	80024c4 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800330a:	2300      	movs	r3, #0
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	2302      	movs	r3, #2
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003316:	226e      	movs	r2, #110	; 0x6e
 8003318:	2105      	movs	r1, #5
 800331a:	4857      	ldr	r0, [pc, #348]	; (8003478 <print_all_menu_1_1_menus+0x1f8>)
 800331c:	f7ff f8d2 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003320:	2300      	movs	r3, #0
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	2302      	movs	r3, #2
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332c:	2282      	movs	r2, #130	; 0x82
 800332e:	2105      	movs	r1, #5
 8003330:	4851      	ldr	r0, [pc, #324]	; (8003478 <print_all_menu_1_1_menus+0x1f8>)
 8003332:	f7ff f8c7 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003336:	2300      	movs	r3, #0
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	2302      	movs	r3, #2
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003342:	2296      	movs	r2, #150	; 0x96
 8003344:	2105      	movs	r1, #5
 8003346:	484c      	ldr	r0, [pc, #304]	; (8003478 <print_all_menu_1_1_menus+0x1f8>)
 8003348:	f7ff f8bc 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800334c:	2300      	movs	r3, #0
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	2302      	movs	r3, #2
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003358:	22aa      	movs	r2, #170	; 0xaa
 800335a:	2105      	movs	r1, #5
 800335c:	4846      	ldr	r0, [pc, #280]	; (8003478 <print_all_menu_1_1_menus+0x1f8>)
 800335e:	f7ff f8b1 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8003362:	2300      	movs	r3, #0
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	2302      	movs	r3, #2
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336e:	22be      	movs	r2, #190	; 0xbe
 8003370:	2105      	movs	r1, #5
 8003372:	4841      	ldr	r0, [pc, #260]	; (8003478 <print_all_menu_1_1_menus+0x1f8>)
 8003374:	f7ff f8a6 	bl	80024c4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2302      	movs	r3, #2
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003384:	226e      	movs	r2, #110	; 0x6e
 8003386:	211e      	movs	r1, #30
 8003388:	483c      	ldr	r0, [pc, #240]	; (800347c <print_all_menu_1_1_menus+0x1fc>)
 800338a:	f7ff f89b 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800339a:	2282      	movs	r2, #130	; 0x82
 800339c:	211e      	movs	r1, #30
 800339e:	4838      	ldr	r0, [pc, #224]	; (8003480 <print_all_menu_1_1_menus+0x200>)
 80033a0:	f7ff f890 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 80033a4:	2300      	movs	r3, #0
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	2302      	movs	r3, #2
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b0:	2296      	movs	r2, #150	; 0x96
 80033b2:	211e      	movs	r1, #30
 80033b4:	4833      	ldr	r0, [pc, #204]	; (8003484 <print_all_menu_1_1_menus+0x204>)
 80033b6:	f7ff f885 	bl	80024c4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2302      	movs	r3, #2
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033c6:	22aa      	movs	r2, #170	; 0xaa
 80033c8:	211e      	movs	r1, #30
 80033ca:	482f      	ldr	r0, [pc, #188]	; (8003488 <print_all_menu_1_1_menus+0x208>)
 80033cc:	f7ff f87a 	bl	80024c4 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <print_all_menu_1_1_menus+0x20c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <print_all_menu_1_1_menus+0x20c>)
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <print_all_menu_1_1_menus+0x20c>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d902      	bls.n	80033ec <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <print_all_menu_1_1_menus+0x20c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <print_all_menu_1_1_menus+0x20c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d83a      	bhi.n	800346c <print_all_menu_1_1_menus+0x1ec>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <print_all_menu_1_1_menus+0x17c>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003425 	.word	0x08003425
 8003404:	0800343d 	.word	0x0800343d
 8003408:	08003455 	.word	0x08003455
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800340c:	2300      	movs	r3, #0
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	2302      	movs	r3, #2
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003418:	226e      	movs	r2, #110	; 0x6e
 800341a:	2105      	movs	r1, #5
 800341c:	481c      	ldr	r0, [pc, #112]	; (8003490 <print_all_menu_1_1_menus+0x210>)
 800341e:	f7ff f851 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8003422:	e023      	b.n	800346c <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003424:	2300      	movs	r3, #0
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	2302      	movs	r3, #2
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003430:	2282      	movs	r2, #130	; 0x82
 8003432:	2105      	movs	r1, #5
 8003434:	4816      	ldr	r0, [pc, #88]	; (8003490 <print_all_menu_1_1_menus+0x210>)
 8003436:	f7ff f845 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800343a:	e017      	b.n	800346c <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800343c:	2300      	movs	r3, #0
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	2302      	movs	r3, #2
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003448:	2296      	movs	r2, #150	; 0x96
 800344a:	2105      	movs	r1, #5
 800344c:	4810      	ldr	r0, [pc, #64]	; (8003490 <print_all_menu_1_1_menus+0x210>)
 800344e:	f7ff f839 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 8003452:	e00b      	b.n	800346c <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003454:	2300      	movs	r3, #0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2302      	movs	r3, #2
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003460:	22aa      	movs	r2, #170	; 0xaa
 8003462:	2105      	movs	r1, #5
 8003464:	480a      	ldr	r0, [pc, #40]	; (8003490 <print_all_menu_1_1_menus+0x210>)
 8003466:	f7ff f82d 	bl	80024c4 <ILI9341_Draw_Text>
			break;
 800346a:	bf00      	nop
	}
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	08011788 	.word	0x08011788
 8003478:	080117ac 	.word	0x080117ac
 800347c:	200000f8 	.word	0x200000f8
 8003480:	2000010c 	.word	0x2000010c
 8003484:	20000120 	.word	0x20000120
 8003488:	20000134 	.word	0x20000134
 800348c:	20000148 	.word	0x20000148
 8003490:	080117b0 	.word	0x080117b0

08003494 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8003498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <tongle_green_led+0x14>)
 800349e:	f004 fb1e 	bl	8007ade <HAL_GPIO_TogglePin>
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40020c00 	.word	0x40020c00

080034ac <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80034b0:	2201      	movs	r2, #1
 80034b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b6:	4802      	ldr	r0, [pc, #8]	; (80034c0 <RED_LED_ON+0x14>)
 80034b8:	f004 faf8 	bl	8007aac <HAL_GPIO_WritePin>
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40020c00 	.word	0x40020c00

080034c4 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ce:	4802      	ldr	r0, [pc, #8]	; (80034d8 <RED_LED_OFF+0x14>)
 80034d0:	f004 faec 	bl	8007aac <HAL_GPIO_WritePin>
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40020c00 	.word	0x40020c00

080034dc <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 80034e2:	2300      	movs	r3, #0
 80034e4:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f2:	223c      	movs	r2, #60	; 0x3c
 80034f4:	210a      	movs	r1, #10
 80034f6:	4838      	ldr	r0, [pc, #224]	; (80035d8 <Level1Item3_Enter+0xfc>)
 80034f8:	f7fe ffe4 	bl	80024c4 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	223c      	movs	r2, #60	; 0x3c
 800350a:	210a      	movs	r1, #10
 800350c:	4833      	ldr	r0, [pc, #204]	; (80035dc <Level1Item3_Enter+0x100>)
 800350e:	f7fe ffd9 	bl	80024c4 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8003512:	e049      	b.n	80035a8 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003518:	4831      	ldr	r0, [pc, #196]	; (80035e0 <Level1Item3_Enter+0x104>)
 800351a:	f004 faaf 	bl	8007a7c <HAL_GPIO_ReadPin>
 800351e:	4603      	mov	r3, r0
 8003520:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d019      	beq.n	800355c <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10b      	bne.n	8003546 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 800352e:	2300      	movs	r3, #0
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2302      	movs	r3, #2
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353a:	223c      	movs	r2, #60	; 0x3c
 800353c:	2196      	movs	r1, #150	; 0x96
 800353e:	4829      	ldr	r0, [pc, #164]	; (80035e4 <Level1Item3_Enter+0x108>)
 8003540:	f7fe ffc0 	bl	80024c4 <ILI9341_Draw_Text>
 8003544:	e00a      	b.n	800355c <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 8003546:	2300      	movs	r3, #0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	2196      	movs	r1, #150	; 0x96
 8003556:	4824      	ldr	r0, [pc, #144]	; (80035e8 <Level1Item3_Enter+0x10c>)
 8003558:	f7fe ffb4 	bl	80024c4 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 800355c:	f000 f84a 	bl	80035f4 <getPressKey>
 8003560:	4603      	mov	r3, r0
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d016      	beq.n	8003594 <Level1Item3_Enter+0xb8>
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f083 0301 	eor.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8003572:	2301      	movs	r3, #1
 8003574:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 8003576:	f000 f83d 	bl	80035f4 <getPressKey>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d002      	beq.n	8003586 <Level1Item3_Enter+0xaa>
 8003580:	2b02      	cmp	r3, #2
 8003582:	d003      	beq.n	800358c <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8003584:	e005      	b.n	8003592 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 8003586:	f7ff ff91 	bl	80034ac <RED_LED_ON>
	  	  		  break;
 800358a:	e002      	b.n	8003592 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 800358c:	f7ff ff9a 	bl	80034c4 <RED_LED_OFF>
	  	  		  break;
 8003590:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8003592:	e009      	b.n	80035a8 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8003594:	f000 f82e 	bl	80035f4 <getPressKey>
 8003598:	4603      	mov	r3, r0
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d104      	bne.n	80035a8 <Level1Item3_Enter+0xcc>
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 80035a4:	2300      	movs	r3, #0
 80035a6:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 80035a8:	f000 f824 	bl	80035f4 <getPressKey>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1b0      	bne.n	8003514 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035be:	223c      	movs	r2, #60	; 0x3c
 80035c0:	210a      	movs	r1, #10
 80035c2:	480a      	ldr	r0, [pc, #40]	; (80035ec <Level1Item3_Enter+0x110>)
 80035c4:	f7fe ff7e 	bl	80024c4 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 80035c8:	4809      	ldr	r0, [pc, #36]	; (80035f0 <Level1Item3_Enter+0x114>)
 80035ca:	f000 f8db 	bl	8003784 <Menu_Navigate>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	080117b4 	.word	0x080117b4
 80035dc:	080117d0 	.word	0x080117d0
 80035e0:	40020c00 	.word	0x40020c00
 80035e4:	080117dc 	.word	0x080117dc
 80035e8:	080117e0 	.word	0x080117e0
 80035ec:	080117e4 	.word	0x080117e4
 80035f0:	08011b6c 	.word	0x08011b6c

080035f4 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
	char digit = '\0';
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 80035fe:	4a48      	ldr	r2, [pc, #288]	; (8003720 <getPressKey+0x12c>)
 8003600:	463b      	mov	r3, r7
 8003602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003606:	6018      	str	r0, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	8019      	strh	r1, [r3, #0]
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8003618:	f7fd fc90 	bl	8000f3c <read_one_digit_from_keyboard>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	3b32      	subs	r3, #50	; 0x32
 8003624:	2b06      	cmp	r3, #6
 8003626:	d875      	bhi.n	8003714 <getPressKey+0x120>
 8003628:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <getPressKey+0x3c>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003675 	.word	0x08003675
 8003634:	08003715 	.word	0x08003715
 8003638:	0800364d 	.word	0x0800364d
 800363c:	080036ed 	.word	0x080036ed
 8003640:	080036c5 	.word	0x080036c5
 8003644:	08003715 	.word	0x08003715
 8003648:	0800369d 	.word	0x0800369d
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 800364c:	f107 0117 	add.w	r1, r7, #23
 8003650:	463b      	mov	r3, r7
 8003652:	2201      	movs	r2, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f00d fd07 	bl	8011068 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800365a:	4638      	mov	r0, r7
 800365c:	2300      	movs	r3, #0
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2302      	movs	r3, #2
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	f7fe ff2a 	bl	80024c4 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8003670:	2300      	movs	r3, #0
 8003672:	e050      	b.n	8003716 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8003674:	f107 0117 	add.w	r1, r7, #23
 8003678:	463b      	mov	r3, r7
 800367a:	2201      	movs	r2, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f00d fcf3 	bl	8011068 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003682:	4638      	mov	r0, r7
 8003684:	2300      	movs	r3, #0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	f7fe ff16 	bl	80024c4 <ILI9341_Draw_Text>
			return BUTTON_UP;
 8003698:	2301      	movs	r3, #1
 800369a:	e03c      	b.n	8003716 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 800369c:	f107 0117 	add.w	r1, r7, #23
 80036a0:	463b      	mov	r3, r7
 80036a2:	2201      	movs	r2, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f00d fcdf 	bl	8011068 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036aa:	4638      	mov	r0, r7
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2302      	movs	r3, #2
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	f7fe ff02 	bl	80024c4 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 80036c0:	2302      	movs	r3, #2
 80036c2:	e028      	b.n	8003716 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 80036c4:	f107 0117 	add.w	r1, r7, #23
 80036c8:	463b      	mov	r3, r7
 80036ca:	2201      	movs	r2, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f00d fccb 	bl	8011068 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036d2:	4638      	mov	r0, r7
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	f7fe feee 	bl	80024c4 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e014      	b.n	8003716 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 80036ec:	f107 0117 	add.w	r1, r7, #23
 80036f0:	463b      	mov	r3, r7
 80036f2:	2201      	movs	r2, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00d fcb7 	bl	8011068 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036fa:	4638      	mov	r0, r7
 80036fc:	2300      	movs	r3, #0
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	2302      	movs	r3, #2
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003708:	2200      	movs	r2, #0
 800370a:	2100      	movs	r1, #0
 800370c:	f7fe feda 	bl	80024c4 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003710:	2304      	movs	r3, #4
 8003712:	e000      	b.n	8003716 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003714:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	08011800 	.word	0x08011800

08003724 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af02      	add	r7, sp, #8
 800372a:	6078      	str	r0, [r7, #4]
	if (Text)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2301      	movs	r3, #1
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800373e:	2264      	movs	r2, #100	; 0x64
 8003740:	210a      	movs	r1, #10
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <Generic_Write+0x44>)
 8003744:	f7fe febe 	bl	80024c4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8003748:	2300      	movs	r3, #0
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	2301      	movs	r3, #1
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	210a      	movs	r1, #10
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fe feb3 	bl	80024c4 <ILI9341_Draw_Text>
	}
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08011814 	.word	0x08011814

0800376c <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <Menu_GetCurrentMenu+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c

08003784 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <Menu_Navigate+0x50>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01a      	beq.n	80037ca <Menu_Navigate+0x46>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <Menu_Navigate+0x54>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <Menu_Navigate+0x58>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <Menu_Navigate+0x58>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <Menu_Navigate+0x54>)
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	3218      	adds	r2, #24
 80037b2:	4610      	mov	r0, r2
 80037b4:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <Menu_Navigate+0x54>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4798      	blx	r3
 80037c8:	e000      	b.n	80037cc <Menu_Navigate+0x48>
		return;		// Exit
 80037ca:	bf00      	nop
	}
}
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08011afc 	.word	0x08011afc
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	2000029c 	.word	0x2000029c

080037e0 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <Menu_SetGenericWriteCallback+0x20>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <Menu_SetGenericWriteCallback+0x24>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ffc6 	bl	8003784 <Menu_Navigate>
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000029c 	.word	0x2000029c
 8003804:	2000000c 	.word	0x2000000c

08003808 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <Menu_EnterCurrentItem+0x34>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <Menu_EnterCurrentItem+0x38>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00d      	beq.n	8003834 <Menu_EnterCurrentItem+0x2c>
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <Menu_EnterCurrentItem+0x34>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <Menu_EnterCurrentItem+0x34>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e000      	b.n	8003836 <Menu_EnterCurrentItem+0x2e>
		return;
 8003834:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000000c 	.word	0x2000000c
 8003840:	08011afc 	.word	0x08011afc

08003844 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	int i =0;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8003850:	e036      	b.n	80038c0 <speed_test_LCD+0x7c>
	{
		i ++;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800386c:	4819      	ldr	r0, [pc, #100]	; (80038d4 <speed_test_LCD+0x90>)
 800386e:	f008 fdba 	bl	800c3e6 <HAL_RNG_GetRandomNumber>
 8003872:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003878:	4816      	ldr	r0, [pc, #88]	; (80038d4 <speed_test_LCD+0x90>)
 800387a:	f008 fdb4 	bl	800c3e6 <HAL_RNG_GetRandomNumber>
 800387e:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003884:	4813      	ldr	r0, [pc, #76]	; (80038d4 <speed_test_LCD+0x90>)
 8003886:	f008 fdae 	bl	800c3e6 <HAL_RNG_GetRandomNumber>
 800388a:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003890:	4810      	ldr	r0, [pc, #64]	; (80038d4 <speed_test_LCD+0x90>)
 8003892:	f008 fda8 	bl	800c3e6 <HAL_RNG_GetRandomNumber>
 8003896:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 800389c:	89fb      	ldrh	r3, [r7, #14]
 800389e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a2:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 80038a4:	89bb      	ldrh	r3, [r7, #12]
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	897a      	ldrh	r2, [r7, #10]
 80038b8:	89b9      	ldrh	r1, [r7, #12]
 80038ba:	89f8      	ldrh	r0, [r7, #14]
 80038bc:	f7fe fce4 	bl	8002288 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	ddc4      	ble.n	8003852 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000464 	.word	0x20000464

080038d8 <i2c1_read>:
int gesture_state_;
int gesture_motion_;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
int i2c1_read(uint8_t register_address, uint8_t * data, uint8_t lenght)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af04      	add	r7, sp, #16
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71bb      	strb	r3, [r7, #6]
//	i2c1_read(APDS9960_ID, &id,1)
	uint8_t STATUS = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Read(&hi2c2, APDS9960_I2C_ADDR<<1, register_address, 1, data, lenght, 1000) == false)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038f8:	9102      	str	r1, [sp, #8]
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	2172      	movs	r1, #114	; 0x72
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <i2c1_read+0x48>)
 8003906:	f006 fbe3 	bl	800a0d0 <HAL_I2C_Mem_Read>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <i2c1_read+0x3c>
	{
		return true; // Transmit OK
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <i2c1_read+0x3e>
	}
	else
	{
		return false;
 8003914:	2300      	movs	r3, #0
	}
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000380 	.word	0x20000380

08003924 <i2c1_write>:
//---------------------------------------------------------------------------------------
int i2c1_write(uint8_t register_address, uint8_t  data)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af04      	add	r7, sp, #16
 800392a:	4603      	mov	r3, r0
 800392c:	460a      	mov	r2, r1
 800392e:	71fb      	strb	r3, [r7, #7]
 8003930:	4613      	mov	r3, r2
 8003932:	71bb      	strb	r3, [r7, #6]
	// i2c1_write(APDS9960_WTIME, DEFAULT_WTIME)
	if(HAL_I2C_Mem_Read(&hi2c2, APDS9960_I2C_ADDR<<1, register_address, 1, data, 1, 1000) == false)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	b29a      	uxth	r2, r3
 8003938:	79bb      	ldrb	r3, [r7, #6]
 800393a:	4619      	mov	r1, r3
 800393c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	2301      	movs	r3, #1
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	2172      	movs	r1, #114	; 0x72
 800394c:	4806      	ldr	r0, [pc, #24]	; (8003968 <i2c1_write+0x44>)
 800394e:	f006 fbbf 	bl	800a0d0 <HAL_I2C_Mem_Read>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <i2c1_write+0x38>
	{
		return true;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <i2c1_write+0x3a>
	}
	else
	{
		return false;
 800395c:	2300      	movs	r3, #0
	}
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000380 	.word	0x20000380

0800396c <apds9960init>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int apds9960init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b096      	sub	sp, #88	; 0x58
 8003970:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    //ledSetLeftLed(LED_ON);

    /* Initialize I2C */
    //I2C1_init();
    HAL_Delay(700);
 8003978:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800397c:	f003 fdac 	bl	80074d8 <HAL_Delay>
    /* Read ID register and check against known values for APDS-9960 */
    if( !i2c1_read(APDS9960_ID, &id,1) )   // id = 0xA8
 8003980:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 8003984:	2201      	movs	r2, #1
 8003986:	4619      	mov	r1, r3
 8003988:	2092      	movs	r0, #146	; 0x92
 800398a:	f7ff ffa5 	bl	80038d8 <i2c1_read>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <apds9960init+0x2c>
    {
       //ledSetRightLed(LED_ON);
      return false;
 8003994:	2300      	movs	r3, #0
 8003996:	e19c      	b.n	8003cd2 <apds9960init+0x366>
    }
    //ledSetLeftLed(LED_ON);
    if( !(id == APDS9960_ID_1 || id == APDS9960_ID_2 || (id == APDS9960_ID_3))) {
 8003998:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800399c:	2bab      	cmp	r3, #171	; 0xab
 800399e:	d009      	beq.n	80039b4 <apds9960init+0x48>
 80039a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039a4:	2b9c      	cmp	r3, #156	; 0x9c
 80039a6:	d005      	beq.n	80039b4 <apds9960init+0x48>
 80039a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039ac:	2ba8      	cmp	r3, #168	; 0xa8
 80039ae:	d001      	beq.n	80039b4 <apds9960init+0x48>
        return false;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e18e      	b.n	8003cd2 <apds9960init+0x366>
    }

    /* Set ENABLE register to 0 (disable all features) */
    if( !setMode(ALL, OFF) ) {
 80039b4:	2100      	movs	r1, #0
 80039b6:	2007      	movs	r0, #7
 80039b8:	f000 f98f 	bl	8003cda <setMode>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <apds9960init+0x5a>
        return false;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e185      	b.n	8003cd2 <apds9960init+0x366>
    }

    /* Set default values for ambient light and proximity registers */
    if( !i2c1_write(APDS9960_ATIME, DEFAULT_ATIME) ) {
 80039c6:	21db      	movs	r1, #219	; 0xdb
 80039c8:	2081      	movs	r0, #129	; 0x81
 80039ca:	f7ff ffab 	bl	8003924 <i2c1_write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <apds9960init+0x6c>
        return false;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e17c      	b.n	8003cd2 <apds9960init+0x366>
//    }
//    //////////////////////////////////////////////////////////////////////////////////////////////////////



    if( !i2c1_write(APDS9960_WTIME, DEFAULT_WTIME) ) {
 80039d8:	21f6      	movs	r1, #246	; 0xf6
 80039da:	2083      	movs	r0, #131	; 0x83
 80039dc:	f7ff ffa2 	bl	8003924 <i2c1_write>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <apds9960init+0x7e>
        return false;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e173      	b.n	8003cd2 <apds9960init+0x366>
    }

    if( !i2c1_write(APDS9960_PPULSE, DEFAULT_PROX_PPULSE) ) {
 80039ea:	2187      	movs	r1, #135	; 0x87
 80039ec:	208e      	movs	r0, #142	; 0x8e
 80039ee:	f7ff ff99 	bl	8003924 <i2c1_write>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <apds9960init+0x90>
        return false;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e16a      	b.n	8003cd2 <apds9960init+0x366>
    }


    if( !i2c1_write(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR) ) {
 80039fc:	2100      	movs	r1, #0
 80039fe:	209d      	movs	r0, #157	; 0x9d
 8003a00:	f7ff ff90 	bl	8003924 <i2c1_write>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <apds9960init+0xa2>
        return false;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e161      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL) ) {
 8003a0e:	2100      	movs	r1, #0
 8003a10:	209e      	movs	r0, #158	; 0x9e
 8003a12:	f7ff ff87 	bl	8003924 <i2c1_write>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <apds9960init+0xb4>
        return false;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e158      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_CONFIG1, DEFAULT_CONFIG1) ) {
 8003a20:	2160      	movs	r1, #96	; 0x60
 8003a22:	208d      	movs	r0, #141	; 0x8d
 8003a24:	f7ff ff7e 	bl	8003924 <i2c1_write>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <apds9960init+0xc6>
        return false;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e14f      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setLEDDrive(DEFAULT_LDRIVE) ) {
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 f9b1 	bl	8003d9a <setLEDDrive>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <apds9960init+0xd6>
        return false;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e147      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 8003a42:	2002      	movs	r0, #2
 8003a44:	f000 f9da 	bl	8003dfc <setProximityGain>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <apds9960init+0xe6>
        return false;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e13f      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8003a52:	2001      	movs	r0, #1
 8003a54:	f000 fa03 	bl	8003e5e <setAmbientLightGain>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <apds9960init+0xf6>
        return false;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e137      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setProxIntLowThresh(DEFAULT_PILT) ) {
 8003a62:	2000      	movs	r0, #0
 8003a64:	f000 fa29 	bl	8003eba <setProxIntLowThresh>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <apds9960init+0x106>
        return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e12f      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setProxIntHighThresh(DEFAULT_PIHT) ) {
 8003a72:	2032      	movs	r0, #50	; 0x32
 8003a74:	f000 fa35 	bl	8003ee2 <setProxIntHighThresh>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <apds9960init+0x116>
        return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e127      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setLightIntLowThreshold(DEFAULT_AILT) ) {
 8003a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003a86:	f000 fa40 	bl	8003f0a <setLightIntLowThreshold>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <apds9960init+0x128>
        return false;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e11e      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setLightIntHighThreshold(DEFAULT_AIHT) ) {
 8003a94:	2000      	movs	r0, #0
 8003a96:	f000 fa5c 	bl	8003f52 <setLightIntHighThreshold>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <apds9960init+0x138>
        return false;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e116      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_PERS, DEFAULT_PERS) ) {
 8003aa4:	2111      	movs	r1, #17
 8003aa6:	208c      	movs	r0, #140	; 0x8c
 8003aa8:	f7ff ff3c 	bl	8003924 <i2c1_write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <apds9960init+0x14a>
        return false;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e10d      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_CONFIG2, DEFAULT_CONFIG2) ) {
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	2090      	movs	r0, #144	; 0x90
 8003aba:	f7ff ff33 	bl	8003924 <i2c1_write>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <apds9960init+0x15c>
        return false;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e104      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_CONFIG3, DEFAULT_CONFIG3) ) {
 8003ac8:	2100      	movs	r1, #0
 8003aca:	209f      	movs	r0, #159	; 0x9f
 8003acc:	f7ff ff2a 	bl	8003924 <i2c1_write>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <apds9960init+0x16e>
        return false;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e0fb      	b.n	8003cd2 <apds9960init+0x366>
    }

    /* Set default values for gesture sense registers */
    if( !setGestureEnterThresh(DEFAULT_GPENTH) ) {
 8003ada:	2028      	movs	r0, #40	; 0x28
 8003adc:	f000 fb32 	bl	8004144 <setGestureEnterThresh>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <apds9960init+0x17e>
        return false;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e0f3      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setGestureExitThresh(DEFAULT_GEXTH) ) {
 8003aea:	201e      	movs	r0, #30
 8003aec:	f000 fb16 	bl	800411c <setGestureExitThresh>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <apds9960init+0x18e>
        return false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e0eb      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GCONF1, DEFAULT_GCONF1) ) {
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	20a2      	movs	r0, #162	; 0xa2
 8003afe:	f7ff ff11 	bl	8003924 <i2c1_write>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <apds9960init+0x1a0>
        return false;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e0e2      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setGestureGain(DEFAULT_GGAIN) ) {
 8003b0c:	2002      	movs	r0, #2
 8003b0e:	f000 fad4 	bl	80040ba <setGestureGain>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <apds9960init+0x1b0>
        return false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e0da      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setGestureLEDDrive(DEFAULT_GLDRIVE) ) {
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f000 fa9b 	bl	8004058 <setGestureLEDDrive>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <apds9960init+0x1c0>
        return false;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e0d2      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setGestureWaitTime(DEFAULT_GWTIME) ) {
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 fa65 	bl	8003ffc <setGestureWaitTime>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <apds9960init+0x1d0>
        return false;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e0ca      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GOFFSET_U, DEFAULT_GOFFSET) ) {
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	20a4      	movs	r0, #164	; 0xa4
 8003b40:	f7ff fef0 	bl	8003924 <i2c1_write>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <apds9960init+0x1e2>
        return false;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e0c1      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GOFFSET_D, DEFAULT_GOFFSET) ) {
 8003b4e:	2100      	movs	r1, #0
 8003b50:	20a5      	movs	r0, #165	; 0xa5
 8003b52:	f7ff fee7 	bl	8003924 <i2c1_write>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <apds9960init+0x1f4>
        return false;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e0b8      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GOFFSET_L, DEFAULT_GOFFSET) ) {
 8003b60:	2100      	movs	r1, #0
 8003b62:	20a7      	movs	r0, #167	; 0xa7
 8003b64:	f7ff fede 	bl	8003924 <i2c1_write>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <apds9960init+0x206>
        return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e0af      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GOFFSET_R, DEFAULT_GOFFSET) ) {
 8003b72:	2100      	movs	r1, #0
 8003b74:	20a9      	movs	r0, #169	; 0xa9
 8003b76:	f7ff fed5 	bl	8003924 <i2c1_write>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <apds9960init+0x218>
        return false;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e0a6      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GPULSE, DEFAULT_GPULSE) ) {
 8003b84:	21c9      	movs	r1, #201	; 0xc9
 8003b86:	20a6      	movs	r0, #166	; 0xa6
 8003b88:	f7ff fecc 	bl	8003924 <i2c1_write>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <apds9960init+0x22a>
        return false;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e09d      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !i2c1_write(APDS9960_GCONF3, DEFAULT_GCONF3) ) {
 8003b96:	2100      	movs	r1, #0
 8003b98:	20aa      	movs	r0, #170	; 0xaa
 8003b9a:	f7ff fec3 	bl	8003924 <i2c1_write>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <apds9960init+0x23c>
        return false;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e094      	b.n	8003cd2 <apds9960init+0x366>
    }
    if( !setGestureIntEnable(DEFAULT_GIEN) ) {
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f000 f9f6 	bl	8003f9a <setGestureIntEnable>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <apds9960init+0x24c>
        return false;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e08c      	b.n	8003cd2 <apds9960init+0x366>
    }

#if 1

    HAL_Delay(100);
 8003bb8:	2064      	movs	r0, #100	; 0x64
 8003bba:	f003 fc8d 	bl	80074d8 <HAL_Delay>

    /* Gesture config register dump */
    uint8_t i = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    uint8_t reg = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint8_t val = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    uint8_t dump_buffer_setings[60] = {0};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2238      	movs	r2, #56	; 0x38
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00d f981 	bl	8010ee4 <memset>
    memset(dump_buffer_setings, 0xFF, sizeof(dump_buffer_setings));
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	21ff      	movs	r1, #255	; 0xff
 8003bea:	4618      	mov	r0, r3
 8003bec:	f00d f97a 	bl	8010ee4 <memset>

    uint8_t dump_buffer_data[10] = {0};
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	f107 0308 	add.w	r3, r7, #8
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	809a      	strh	r2, [r3, #4]
    memset(dump_buffer_data, 0xFF, sizeof(dump_buffer_data));
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	220a      	movs	r2, #10
 8003c02:	21ff      	movs	r1, #255	; 0xff
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00d f96d 	bl	8010ee4 <memset>

    for(reg = 0x80; reg <= 0xAF; reg++) {
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003c10:	e032      	b.n	8003c78 <apds9960init+0x30c>
        if( (reg != 0x82) && \
 8003c12:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c16:	2b82      	cmp	r3, #130	; 0x82
 8003c18:	d029      	beq.n	8003c6e <apds9960init+0x302>
 8003c1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c1e:	2b8a      	cmp	r3, #138	; 0x8a
 8003c20:	d025      	beq.n	8003c6e <apds9960init+0x302>
            (reg != 0x8A) && \
 8003c22:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c26:	2b91      	cmp	r3, #145	; 0x91
 8003c28:	d021      	beq.n	8003c6e <apds9960init+0x302>
            (reg != 0x91) && \
 8003c2a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c2e:	2ba8      	cmp	r3, #168	; 0xa8
 8003c30:	d01d      	beq.n	8003c6e <apds9960init+0x302>
            (reg != 0xA8) && \
 8003c32:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c36:	2bac      	cmp	r3, #172	; 0xac
 8003c38:	d019      	beq.n	8003c6e <apds9960init+0x302>
            (reg != 0xAC) && \
 8003c3a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c3e:	2bad      	cmp	r3, #173	; 0xad
 8003c40:	d015      	beq.n	8003c6e <apds9960init+0x302>
            (reg != 0xAD) )
        {
            i2c1_read(reg, &val,1);
 8003c42:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8003c46:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fe43 	bl	80038d8 <i2c1_read>
            dump_buffer_setings[i] = val;		// Read data in array
 8003c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c56:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8003c5a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003c5e:	440b      	add	r3, r1
 8003c60:	f803 2c48 	strb.w	r2, [r3, #-72]
            i++;
 8003c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for(reg = 0x80; reg <= 0xAF; reg++) {
 8003c6e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c72:	3301      	adds	r3, #1
 8003c74:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003c78:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c7c:	2baf      	cmp	r3, #175	; 0xaf
 8003c7e:	d9c8      	bls.n	8003c12 <apds9960init+0x2a6>
            //debugPutString(": 0x");
            //debugPutChar(val);
        }
    }

    i = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for(reg = 0xE4; reg <= 0xE7; reg++) {
 8003c86:	23e4      	movs	r3, #228	; 0xe4
 8003c88:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003c8c:	e01a      	b.n	8003cc4 <apds9960init+0x358>
        i2c1_read(reg, &val,1);
 8003c8e:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8003c92:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003c96:	2201      	movs	r2, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fe1d 	bl	80038d8 <i2c1_read>

        dump_buffer_data[i] = val;		// Read data in array
 8003c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ca2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8003ca6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003caa:	440b      	add	r3, r1
 8003cac:	f803 2c54 	strb.w	r2, [r3, #-84]
        i++;
 8003cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for(reg = 0xE4; reg <= 0xE7; reg++) {
 8003cba:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003cc4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003cc8:	2be7      	cmp	r3, #231	; 0xe7
 8003cca:	d9e0      	bls.n	8003c8e <apds9960init+0x322>
        //debugPutChar(reg);
        //debugPutString(": 0x");
        //debugPutChar(val);
    }
    int jjj = 99;  		// For debug
 8003ccc:	2363      	movs	r3, #99	; 0x63
 8003cce:	653b      	str	r3, [r7, #80]	; 0x50
#endif

    return true;
 8003cd0:	2301      	movs	r3, #1
}/* End of this function */
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3758      	adds	r7, #88	; 0x58
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <setMode>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setMode(uint8_t mode, uint8_t enable)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	71fb      	strb	r3, [r7, #7]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	71bb      	strb	r3, [r7, #6]
    uint8_t reg_val;

    /* Read current ENABLE register */
    reg_val = getMode();
 8003cea:	f000 f843 	bl	8003d74 <getMode>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
    if( reg_val == ERROR ) {
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	d101      	bne.n	8003cfc <setMode+0x22>
        return false;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e037      	b.n	8003d6c <setMode+0x92>
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
 8003cfc:	79bb      	ldrb	r3, [r7, #6]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	71bb      	strb	r3, [r7, #6]
    if( mode >= 0 && mode <= 6 ) {
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d81a      	bhi.n	8003d40 <setMode+0x66>
        if (enable) {
 8003d0a:	79bb      	ldrb	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <setMode+0x4c>
            reg_val |= (1 << mode);
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	2201      	movs	r2, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	b25a      	sxtb	r2, r3
 8003d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e017      	b.n	8003d56 <setMode+0x7c>
        } else {
            reg_val &= ~(1 << mode);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	b25a      	sxtb	r2, r3
 8003d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e00a      	b.n	8003d56 <setMode+0x7c>
        }
    } else if( mode == ALL ) {
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	2b07      	cmp	r3, #7
 8003d44:	d107      	bne.n	8003d56 <setMode+0x7c>
        if (enable) {
 8003d46:	79bb      	ldrb	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <setMode+0x78>
            reg_val = 0x7F;
 8003d4c:	237f      	movs	r3, #127	; 0x7f
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e001      	b.n	8003d56 <setMode+0x7c>
        } else {
            reg_val = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
        }
    }

    /* Write value back to ENABLE register */
    if( !i2c1_write(APDS9960_ENABLE, reg_val) ) {
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	2080      	movs	r0, #128	; 0x80
 8003d5c:	f7ff fde2 	bl	8003924 <i2c1_write>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <setMode+0x90>
        return false;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <setMode+0x92>
    }

    return true;
 8003d6a:	2301      	movs	r3, #1
}/* End of this function */
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <getMode>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
uint8_t getMode(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
  uint8_t enable_value;

    /* Read current ENABLE register */
    if( !i2c1_read(APDS9960_ENABLE,&enable_value,1) )
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4619      	mov	r1, r3
 8003d80:	2080      	movs	r0, #128	; 0x80
 8003d82:	f7ff fda9 	bl	80038d8 <i2c1_read>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <getMode+0x1c>
    {
        return ERROR;
 8003d8c:	23ff      	movs	r3, #255	; 0xff
 8003d8e:	e000      	b.n	8003d92 <getMode+0x1e>
    }

    return enable_value;
 8003d90:	79fb      	ldrb	r3, [r7, #7]
}/* End of this function */
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <setLEDDrive>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLEDDrive(uint8_t drive)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !i2c1_read(APDS9960_CONTROL, &val,1) ) {
 8003da4:	f107 030f 	add.w	r3, r7, #15
 8003da8:	2201      	movs	r2, #1
 8003daa:	4619      	mov	r1, r3
 8003dac:	208f      	movs	r0, #143	; 0x8f
 8003dae:	f7ff fd93 	bl	80038d8 <i2c1_read>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <setLEDDrive+0x22>
        return false;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e01b      	b.n	8003df4 <setLEDDrive+0x5a>
    }

    /* Set bits in register to given value */
    drive &= 0x03;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	71fb      	strb	r3, [r7, #7]
    drive = drive << 6;
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	019b      	lsls	r3, r3, #6
 8003dc8:	71fb      	strb	r3, [r7, #7]
    val &= 0x3F;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !i2c1_write(APDS9960_CONTROL, val) ) {
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	4619      	mov	r1, r3
 8003de2:	208f      	movs	r0, #143	; 0x8f
 8003de4:	f7ff fd9e 	bl	8003924 <i2c1_write>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <setLEDDrive+0x58>
        return false;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <setLEDDrive+0x5a>
    }

    return true;
 8003df2:	2301      	movs	r3, #1
}/* End of this function */
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <setProximityGain>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setProximityGain(uint8_t drive)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !i2c1_read(APDS9960_CONTROL, &val,1) ) {
 8003e06:	f107 030f 	add.w	r3, r7, #15
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	208f      	movs	r0, #143	; 0x8f
 8003e10:	f7ff fd62 	bl	80038d8 <i2c1_read>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <setProximityGain+0x22>
        return false;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e01b      	b.n	8003e56 <setProximityGain+0x5a>
    }

    /* Set bits in register to given value */
    drive &= 0x03;
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	71fb      	strb	r3, [r7, #7]
    drive = drive << 2;
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	71fb      	strb	r3, [r7, #7]
    val &= 0xF3;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	f023 030c 	bic.w	r3, r3, #12
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !i2c1_write(APDS9960_CONTROL, val) ) {
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	4619      	mov	r1, r3
 8003e44:	208f      	movs	r0, #143	; 0x8f
 8003e46:	f7ff fd6d 	bl	8003924 <i2c1_write>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <setProximityGain+0x58>
        return false;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <setProximityGain+0x5a>
    }

    return true;
 8003e54:	2301      	movs	r3, #1
}/* End of this function */
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <setAmbientLightGain>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setAmbientLightGain(uint8_t drive)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !i2c1_read(APDS9960_CONTROL, &val,1) ) {
 8003e68:	f107 030f 	add.w	r3, r7, #15
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4619      	mov	r1, r3
 8003e70:	208f      	movs	r0, #143	; 0x8f
 8003e72:	f7ff fd31 	bl	80038d8 <i2c1_read>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <setAmbientLightGain+0x22>
        return false;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e018      	b.n	8003eb2 <setAmbientLightGain+0x54>
    }

    /* Set bits in register to given value */
    drive &= 0x03;
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	71fb      	strb	r3, [r7, #7]
    val &= 0xFC;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !i2c1_write(APDS9960_CONTROL, val) ) {
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	208f      	movs	r0, #143	; 0x8f
 8003ea2:	f7ff fd3f 	bl	8003924 <i2c1_write>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <setAmbientLightGain+0x52>
        return false;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <setAmbientLightGain+0x54>
    }

    return true;
 8003eb0:	2301      	movs	r3, #1
}/* End of this function */
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <setProxIntLowThresh>:
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/

int setProxIntLowThresh(uint8_t threshold)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	71fb      	strb	r3, [r7, #7]
    if( !i2c1_write(APDS9960_PILT, threshold) ) {
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	2089      	movs	r0, #137	; 0x89
 8003eca:	f7ff fd2b 	bl	8003924 <i2c1_write>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <setProxIntLowThresh+0x1e>
        return false;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <setProxIntLowThresh+0x20>
    }

    return true;
 8003ed8:	2301      	movs	r3, #1
}/* End of this function */
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <setProxIntHighThresh>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setProxIntHighThresh(uint8_t threshold)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
    if( !i2c1_write(APDS9960_PIHT, threshold) ) {
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	208b      	movs	r0, #139	; 0x8b
 8003ef2:	f7ff fd17 	bl	8003924 <i2c1_write>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <setProxIntHighThresh+0x1e>
        return false;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <setProxIntHighThresh+0x20>
    }

    return true;
 8003f00:	2301      	movs	r3, #1
}/* End of this function */
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <setLightIntLowThreshold>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLightIntLowThreshold(uint16_t threshold)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	4603      	mov	r3, r0
 8003f12:	80fb      	strh	r3, [r7, #6]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !i2c1_write(APDS9960_AILTL, val_low) ) {
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	4619      	mov	r1, r3
 8003f24:	2084      	movs	r0, #132	; 0x84
 8003f26:	f7ff fcfd 	bl	8003924 <i2c1_write>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <setLightIntLowThreshold+0x2a>
        return false;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e00a      	b.n	8003f4a <setLightIntLowThreshold+0x40>
    }

    /* Write high byte */
    if( !i2c1_write(APDS9960_AILTH, val_high) ) {
 8003f34:	7bbb      	ldrb	r3, [r7, #14]
 8003f36:	4619      	mov	r1, r3
 8003f38:	2085      	movs	r0, #133	; 0x85
 8003f3a:	f7ff fcf3 	bl	8003924 <i2c1_write>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <setLightIntLowThreshold+0x3e>
        return false;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <setLightIntLowThreshold+0x40>
    }

    return true;
 8003f48:	2301      	movs	r3, #1
}/* End of this function */
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <setLightIntHighThreshold>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLightIntHighThreshold(uint16_t threshold)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	80fb      	strh	r3, [r7, #6]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !i2c1_write(APDS9960_AIHTL, val_low) ) {
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	2086      	movs	r0, #134	; 0x86
 8003f6e:	f7ff fcd9 	bl	8003924 <i2c1_write>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <setLightIntHighThreshold+0x2a>
        return false;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e00a      	b.n	8003f92 <setLightIntHighThreshold+0x40>
    }

    /* Write high byte */
    if( !i2c1_write(APDS9960_AIHTH, val_high) ) {
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	2087      	movs	r0, #135	; 0x87
 8003f82:	f7ff fccf 	bl	8003924 <i2c1_write>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <setLightIntHighThreshold+0x3e>
        return false;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <setLightIntHighThreshold+0x40>
    }

    return true;
 8003f90:	2301      	movs	r3, #1
}/* End of this function */
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <setGestureIntEnable>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureIntEnable(uint8_t enable)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !i2c1_read(APDS9960_GCONF4, &val,1) ) {
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4619      	mov	r1, r3
 8003fac:	20ab      	movs	r0, #171	; 0xab
 8003fae:	f7ff fc93 	bl	80038d8 <i2c1_read>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <setGestureIntEnable+0x22>
        return false;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e01b      	b.n	8003ff4 <setGestureIntEnable+0x5a>
    }

    /* Set bits in register to given value */
    enable &= 0x01;
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	71fb      	strb	r3, [r7, #7]
    enable = enable << 1;
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	71fb      	strb	r3, [r7, #7]
    val &= 0xFD;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	f023 0302 	bic.w	r3, r3, #2
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !i2c1_write(APDS9960_GCONF4, val) ) {
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	20ab      	movs	r0, #171	; 0xab
 8003fe4:	f7ff fc9e 	bl	8003924 <i2c1_write>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <setGestureIntEnable+0x58>
        return false;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <setGestureIntEnable+0x5a>
    }

    return true;
 8003ff2:	2301      	movs	r3, #1
}/* End of this function */
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <setGestureWaitTime>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureWaitTime(uint8_t time)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !i2c1_read(APDS9960_GCONF2, &val,1) ) {
 8004006:	f107 030f 	add.w	r3, r7, #15
 800400a:	2201      	movs	r2, #1
 800400c:	4619      	mov	r1, r3
 800400e:	20a3      	movs	r0, #163	; 0xa3
 8004010:	f7ff fc62 	bl	80038d8 <i2c1_read>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <setGestureWaitTime+0x22>
        return false;
 800401a:	2300      	movs	r3, #0
 800401c:	e018      	b.n	8004050 <setGestureWaitTime+0x54>
    }

    /* Set bits in register to given value */
    time &= 0x07;
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	71fb      	strb	r3, [r7, #7]
    val &= 0xF8;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	f023 0307 	bic.w	r3, r3, #7
 800402c:	b2db      	uxtb	r3, r3
 800402e:	73fb      	strb	r3, [r7, #15]
    val |= time;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	4313      	orrs	r3, r2
 8004036:	b2db      	uxtb	r3, r3
 8004038:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !i2c1_write(APDS9960_GCONF2, val) ) {
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	4619      	mov	r1, r3
 800403e:	20a3      	movs	r0, #163	; 0xa3
 8004040:	f7ff fc70 	bl	8003924 <i2c1_write>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <setGestureWaitTime+0x52>
        return false;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <setGestureWaitTime+0x54>
    }

    return true;
 800404e:	2301      	movs	r3, #1
}/* End of this function */
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <setGestureLEDDrive>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureLEDDrive(uint8_t drive)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !i2c1_read(APDS9960_GCONF2, &val,1) ) {
 8004062:	f107 030f 	add.w	r3, r7, #15
 8004066:	2201      	movs	r2, #1
 8004068:	4619      	mov	r1, r3
 800406a:	20a3      	movs	r0, #163	; 0xa3
 800406c:	f7ff fc34 	bl	80038d8 <i2c1_read>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <setGestureLEDDrive+0x22>
        return false;
 8004076:	2300      	movs	r3, #0
 8004078:	e01b      	b.n	80040b2 <setGestureLEDDrive+0x5a>
    }

    /* Set bits in register to given value */
    drive &= 0x03;
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	71fb      	strb	r3, [r7, #7]
    drive = drive << 3;
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	71fb      	strb	r3, [r7, #7]
    val &= 0xE7;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	f023 0318 	bic.w	r3, r3, #24
 800408e:	b2db      	uxtb	r3, r3
 8004090:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4313      	orrs	r3, r2
 8004098:	b2db      	uxtb	r3, r3
 800409a:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !i2c1_write(APDS9960_GCONF2, val) ) {
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	4619      	mov	r1, r3
 80040a0:	20a3      	movs	r0, #163	; 0xa3
 80040a2:	f7ff fc3f 	bl	8003924 <i2c1_write>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <setGestureLEDDrive+0x58>
        return false;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <setGestureLEDDrive+0x5a>
    }

    return true;
 80040b0:	2301      	movs	r3, #1
}/* End of this function */
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <setGestureGain>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureGain(uint8_t gain)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !i2c1_read(APDS9960_GCONF2, &val,1) ) {
 80040c4:	f107 030f 	add.w	r3, r7, #15
 80040c8:	2201      	movs	r2, #1
 80040ca:	4619      	mov	r1, r3
 80040cc:	20a3      	movs	r0, #163	; 0xa3
 80040ce:	f7ff fc03 	bl	80038d8 <i2c1_read>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <setGestureGain+0x22>
        return false;
 80040d8:	2300      	movs	r3, #0
 80040da:	e01b      	b.n	8004114 <setGestureGain+0x5a>
    }

    /* Set bits in register to given value */
    gain &= 0x03;
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	71fb      	strb	r3, [r7, #7]
    gain = gain << 5;
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	71fb      	strb	r3, [r7, #7]
    val &= 0x9F;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	73fb      	strb	r3, [r7, #15]
    val |= gain;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !i2c1_write(APDS9960_GCONF2, val) ) {
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	4619      	mov	r1, r3
 8004102:	20a3      	movs	r0, #163	; 0xa3
 8004104:	f7ff fc0e 	bl	8003924 <i2c1_write>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <setGestureGain+0x58>
        return false;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <setGestureGain+0x5a>
    }

    return true;
 8004112:	2301      	movs	r3, #1
}/* End of this function */
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <setGestureExitThresh>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureExitThresh(uint8_t threshold)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
    if( !i2c1_write(APDS9960_GEXTH, threshold) ) {
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	4619      	mov	r1, r3
 800412a:	20a1      	movs	r0, #161	; 0xa1
 800412c:	f7ff fbfa 	bl	8003924 <i2c1_write>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <setGestureExitThresh+0x1e>
        return false;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <setGestureExitThresh+0x20>
    }

    return true;
 800413a:	2301      	movs	r3, #1
}/* End of this function */
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <setGestureEnterThresh>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureEnterThresh(uint8_t threshold)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
    if( !i2c1_write(APDS9960_GPENTH, threshold) ) {
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4619      	mov	r1, r3
 8004152:	20a0      	movs	r0, #160	; 0xa0
 8004154:	f7ff fbe6 	bl	8003924 <i2c1_write>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <setGestureEnterThresh+0x1e>
        return false;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <setGestureEnterThresh+0x20>
//		int f=0;
//	}



    return true;
 8004162:	2301      	movs	r3, #1
}/* End of this function */
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <enableGestureSensor>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int enableGestureSensor(int interrupts)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
       Set ENABLE to 0 (power off)
       Set WTIME to 0xFF
       Set AUX to LED_BOOST_300
       Enable PON, WEN, PEN, GEN in ENABLE
    */
    resetGestureParameters();
 8004174:	f000 f85c 	bl	8004230 <resetGestureParameters>
    if( !i2c1_write(APDS9960_WTIME, 0xFF) ) {
 8004178:	21ff      	movs	r1, #255	; 0xff
 800417a:	2083      	movs	r0, #131	; 0x83
 800417c:	f7ff fbd2 	bl	8003924 <i2c1_write>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <enableGestureSensor+0x1e>
        return false;
 8004186:	2300      	movs	r3, #0
 8004188:	e04e      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !i2c1_write(APDS9960_PPULSE, DEFAULT_GESTURE_PPULSE) ) {
 800418a:	2189      	movs	r1, #137	; 0x89
 800418c:	208e      	movs	r0, #142	; 0x8e
 800418e:	f7ff fbc9 	bl	8003924 <i2c1_write>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <enableGestureSensor+0x30>
        return false;
 8004198:	2300      	movs	r3, #0
 800419a:	e045      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !setLEDBoost(LED_BOOST_300) ) {
 800419c:	2003      	movs	r0, #3
 800419e:	f000 f881 	bl	80042a4 <setLEDBoost>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <enableGestureSensor+0x40>
        return false;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e03d      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( interrupts ) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <enableGestureSensor+0x56>
        if( !setGestureIntEnable(1) ) {
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7ff fef1 	bl	8003f9a <setGestureIntEnable>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <enableGestureSensor+0x66>
            return false;
 80041be:	2300      	movs	r3, #0
 80041c0:	e032      	b.n	8004228 <enableGestureSensor+0xbc>
        }
    } else {
        if( !setGestureIntEnable(0) ) {
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7ff fee9 	bl	8003f9a <setGestureIntEnable>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <enableGestureSensor+0x66>
            return false;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e02a      	b.n	8004228 <enableGestureSensor+0xbc>
        }
    }
    if( !setGestureMode(1) ) {
 80041d2:	2001      	movs	r0, #1
 80041d4:	f000 f897 	bl	8004306 <setGestureMode>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <enableGestureSensor+0x76>
        return false;
 80041de:	2300      	movs	r3, #0
 80041e0:	e022      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !enablePower() ){
 80041e2:	f000 f8be 	bl	8004362 <enablePower>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <enableGestureSensor+0x84>
        return false;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e01b      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !setMode(WAIT, 1) ) {
 80041f0:	2101      	movs	r1, #1
 80041f2:	2003      	movs	r0, #3
 80041f4:	f7ff fd71 	bl	8003cda <setMode>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <enableGestureSensor+0x96>
        return false;
 80041fe:	2300      	movs	r3, #0
 8004200:	e012      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !setMode(PROXIMITY, 1) ) {
 8004202:	2101      	movs	r1, #1
 8004204:	2002      	movs	r0, #2
 8004206:	f7ff fd68 	bl	8003cda <setMode>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <enableGestureSensor+0xa8>
        return false;
 8004210:	2300      	movs	r3, #0
 8004212:	e009      	b.n	8004228 <enableGestureSensor+0xbc>
    }
    if( !setMode(GESTURE, 1) ) {
 8004214:	2101      	movs	r1, #1
 8004216:	2006      	movs	r0, #6
 8004218:	f7ff fd5f 	bl	8003cda <setMode>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <enableGestureSensor+0xba>
        return false;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <enableGestureSensor+0xbc>
    }

    return true;
 8004226:	2301      	movs	r3, #1
}/* End of this function */
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <resetGestureParameters>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
void resetGestureParameters(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
    gesture_data_.index = 0;
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <resetGestureParameters+0x50>)
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    gesture_data_.total_gestures = 0;
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <resetGestureParameters+0x50>)
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    gesture_ud_delta_ = 0;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <resetGestureParameters+0x54>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    gesture_lr_delta_ = 0;
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <resetGestureParameters+0x58>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

    gesture_ud_count_ = 0;
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <resetGestureParameters+0x5c>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
    gesture_lr_count_ = 0;
 8004256:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <resetGestureParameters+0x60>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

    gesture_near_count_ = 0;
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <resetGestureParameters+0x64>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    gesture_far_count_ = 0;
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <resetGestureParameters+0x68>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

    gesture_state_ = 0;
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <resetGestureParameters+0x6c>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    gesture_motion_ = DIR_NONE;
 800426e:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <resetGestureParameters+0x70>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
}/* End of this function */
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000578 	.word	0x20000578
 8004284:	20000570 	.word	0x20000570
 8004288:	2000056c 	.word	0x2000056c
 800428c:	2000055c 	.word	0x2000055c
 8004290:	20000560 	.word	0x20000560
 8004294:	200005fc 	.word	0x200005fc
 8004298:	20000568 	.word	0x20000568
 800429c:	20000564 	.word	0x20000564
 80042a0:	20000574 	.word	0x20000574

080042a4 <setLEDBoost>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setLEDBoost(uint8_t boost)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from CONFIG2 register */
    if( !i2c1_read(APDS9960_CONFIG2, &val,1) ) {
 80042ae:	f107 030f 	add.w	r3, r7, #15
 80042b2:	2201      	movs	r2, #1
 80042b4:	4619      	mov	r1, r3
 80042b6:	2090      	movs	r0, #144	; 0x90
 80042b8:	f7ff fb0e 	bl	80038d8 <i2c1_read>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <setLEDBoost+0x22>
        return false;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e01b      	b.n	80042fe <setLEDBoost+0x5a>
    }

    /* Set bits in register to given value */
    boost &= 0x03;
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	71fb      	strb	r3, [r7, #7]
    boost = boost << 4;
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	71fb      	strb	r3, [r7, #7]
    val &= 0xCF;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	73fb      	strb	r3, [r7, #15]
    val |= boost;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONFIG2 register */
    if( !i2c1_write(APDS9960_CONFIG2, val) ) {
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	4619      	mov	r1, r3
 80042ec:	2090      	movs	r0, #144	; 0x90
 80042ee:	f7ff fb19 	bl	8003924 <i2c1_write>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <setLEDBoost+0x58>
        return false;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <setLEDBoost+0x5a>
    }

    return true;
 80042fc:	2301      	movs	r3, #1
}/* End of this function */
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <setGestureMode>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int setGestureMode(uint8_t mode)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !i2c1_read(APDS9960_GCONF4, &val,1) ) {
 8004310:	f107 030f 	add.w	r3, r7, #15
 8004314:	2201      	movs	r2, #1
 8004316:	4619      	mov	r1, r3
 8004318:	20ab      	movs	r0, #171	; 0xab
 800431a:	f7ff fadd 	bl	80038d8 <i2c1_read>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <setGestureMode+0x22>
        return false;
 8004324:	2300      	movs	r3, #0
 8004326:	e018      	b.n	800435a <setGestureMode+0x54>
    }

    /* Set bits in register to given value */
    mode &= 0x01;
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	71fb      	strb	r3, [r7, #7]
    val &= 0xFE;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	73fb      	strb	r3, [r7, #15]
    val |= mode;
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4313      	orrs	r3, r2
 8004340:	b2db      	uxtb	r3, r3
 8004342:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !i2c1_write(APDS9960_GCONF4, val) ) {
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	4619      	mov	r1, r3
 8004348:	20ab      	movs	r0, #171	; 0xab
 800434a:	f7ff faeb 	bl	8003924 <i2c1_write>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <setGestureMode+0x52>
        return false;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <setGestureMode+0x54>
    }

    return true;
 8004358:	2301      	movs	r3, #1
}/* End of this function */
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <enablePower>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int enablePower(void)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
    if( !setMode(POWER, 1) ) {
 8004366:	2101      	movs	r1, #1
 8004368:	2000      	movs	r0, #0
 800436a:	f7ff fcb6 	bl	8003cda <setMode>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <enablePower+0x16>
        return false;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <enablePower+0x18>
    }

    return true;
 8004378:	2301      	movs	r3, #1
}/* End of this function */
 800437a:	4618      	mov	r0, r3
 800437c:	bd80      	pop	{r7, pc}

0800437e <isGestureAvailable>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int isGestureAvailable(void)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
    uint8_t val;
    /* Read value from GSTATUS register */
    if( !i2c1_read(APDS9960_GSTATUS, &val,1) ) {
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	2201      	movs	r2, #1
 8004388:	4619      	mov	r1, r3
 800438a:	20af      	movs	r0, #175	; 0xaf
 800438c:	f7ff faa4 	bl	80038d8 <i2c1_read>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <isGestureAvailable+0x1c>
        return ERROR;
 8004396:	23ff      	movs	r3, #255	; 0xff
 8004398:	e00a      	b.n	80043b0 <isGestureAvailable+0x32>
    }

    /* Shift and mask out GVALID bit */
    val &= APDS9960_GVALID;
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	71fb      	strb	r3, [r7, #7]

    /* Return true/false based on GVALID bit */
    if( val == 1) {
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <isGestureAvailable+0x30>
        return true;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <isGestureAvailable+0x32>
    } else {
        return false;
 80043ae:	2300      	movs	r3, #0
    }
}/* End of this function */
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <readGesture>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int readGesture(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0a6      	sub	sp, #152	; 0x98
 80043bc:	af00      	add	r7, sp, #0
    uint8_t fifo_level = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    int bytes_read = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint8_t gstatus;
    int motion;
    int i;

    /* Make sure that power and gesture is on and data is valid */
    if( !isGestureAvailable() || !(getMode() & 0x41) ) {
 80043ca:	f7ff ffd8 	bl	800437e <isGestureAvailable>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <readGesture+0x2a>
 80043d4:	f7ff fcce 	bl	8003d74 <getMode>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <readGesture+0x2e>
        return DIR_NONE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e0b2      	b.n	800454c <readGesture+0x194>

    /* Keep looping as long as gesture data is valid */
    while(1) {

        /* Wait some time to collect next batch of FIFO data */
        HAL_Delay(FIFO_PAUSE_TIME);
 80043e6:	201e      	movs	r0, #30
 80043e8:	f003 f876 	bl	80074d8 <HAL_Delay>

        /* Get the contents of the STATUS register. Is data still valid? */
        if( !i2c1_read(APDS9960_GSTATUS, &gstatus,1) ) {
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	2201      	movs	r2, #1
 80043f0:	4619      	mov	r1, r3
 80043f2:	20af      	movs	r0, #175	; 0xaf
 80043f4:	f7ff fa70 	bl	80038d8 <i2c1_read>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <readGesture+0x4a>
            return ERROR;
 80043fe:	23ff      	movs	r3, #255	; 0xff
 8004400:	e0a4      	b.n	800454c <readGesture+0x194>
        }

        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8092 	beq.w	8004532 <readGesture+0x17a>

            /* Read the current FIFO level */
            if( !i2c1_read(APDS9960_GFLVL, &fifo_level,1) ) {
 800440e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8004412:	2201      	movs	r2, #1
 8004414:	4619      	mov	r1, r3
 8004416:	20ae      	movs	r0, #174	; 0xae
 8004418:	f7ff fa5e 	bl	80038d8 <i2c1_read>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <readGesture+0x6e>
                return ERROR;
 8004422:	23ff      	movs	r3, #255	; 0xff
 8004424:	e092      	b.n	800454c <readGesture+0x194>
            debugPutString("FIFO Level: ");
            debugPutChar(fifo_level);
#endif

            /* If there's stuff in the FIFO, read it into our data block */
            if( fifo_level > 0) {
 8004426:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0db      	beq.n	80043e6 <readGesture+0x2e>
                bytes_read = i2c1_read(APDS9960_GFIFO_U,
 800442e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	b2da      	uxtb	r2, r3
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	4619      	mov	r1, r3
 800443c:	20fc      	movs	r0, #252	; 0xfc
 800443e:	f7ff fa4b 	bl	80038d8 <i2c1_read>
 8004442:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                fifo_data,
                                                (fifo_level * 4) );
                if( bytes_read == -1 ) {
 8004446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800444e:	d101      	bne.n	8004454 <readGesture+0x9c>
                    return ERROR;
 8004450:	23ff      	movs	r3, #255	; 0xff
 8004452:	e07b      	b.n	800454c <readGesture+0x194>
                }
                debugPutString("\r\n");
#endif

                /* If at least 1 set of data, sort the data into U/D/L/R */
                if( bytes_read >= 4 ) {
 8004454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004458:	2b03      	cmp	r3, #3
 800445a:	ddc4      	ble.n	80043e6 <readGesture+0x2e>
                    for( i = 0; i < bytes_read; i += 4 ) {
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004462:	e050      	b.n	8004506 <readGesture+0x14e>
                        gesture_data_.u_data[gesture_data_.index] = \
 8004464:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <readGesture+0x19c>)
 8004466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800446a:	4619      	mov	r1, r3
                                                            fifo_data[i + 0];
 800446c:	f107 0208 	add.w	r2, r7, #8
 8004470:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004474:	4413      	add	r3, r2
 8004476:	781a      	ldrb	r2, [r3, #0]
                        gesture_data_.u_data[gesture_data_.index] = \
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <readGesture+0x19c>)
 800447a:	545a      	strb	r2, [r3, r1]
                        gesture_data_.d_data[gesture_data_.index] = \
                                                            fifo_data[i + 1];
 800447c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004480:	3301      	adds	r3, #1
                        gesture_data_.d_data[gesture_data_.index] = \
 8004482:	4a34      	ldr	r2, [pc, #208]	; (8004554 <readGesture+0x19c>)
 8004484:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8004488:	4611      	mov	r1, r2
                                                            fifo_data[i + 1];
 800448a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800448e:	4413      	add	r3, r2
 8004490:	f813 2c90 	ldrb.w	r2, [r3, #-144]
                        gesture_data_.d_data[gesture_data_.index] = \
 8004494:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <readGesture+0x19c>)
 8004496:	440b      	add	r3, r1
 8004498:	f883 2020 	strb.w	r2, [r3, #32]
                        gesture_data_.l_data[gesture_data_.index] = \
                                                            fifo_data[i + 2];
 800449c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044a0:	3302      	adds	r3, #2
                        gesture_data_.l_data[gesture_data_.index] = \
 80044a2:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <readGesture+0x19c>)
 80044a4:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80044a8:	4611      	mov	r1, r2
                                                            fifo_data[i + 2];
 80044aa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80044ae:	4413      	add	r3, r2
 80044b0:	f813 2c90 	ldrb.w	r2, [r3, #-144]
                        gesture_data_.l_data[gesture_data_.index] = \
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <readGesture+0x19c>)
 80044b6:	440b      	add	r3, r1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        gesture_data_.r_data[gesture_data_.index] = \
                                                            fifo_data[i + 3];
 80044bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044c0:	3303      	adds	r3, #3
                        gesture_data_.r_data[gesture_data_.index] = \
 80044c2:	4a24      	ldr	r2, [pc, #144]	; (8004554 <readGesture+0x19c>)
 80044c4:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80044c8:	4611      	mov	r1, r2
                                                            fifo_data[i + 3];
 80044ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80044ce:	4413      	add	r3, r2
 80044d0:	f813 2c90 	ldrb.w	r2, [r3, #-144]
                        gesture_data_.r_data[gesture_data_.index] = \
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <readGesture+0x19c>)
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        gesture_data_.index++;
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <readGesture+0x19c>)
 80044de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044e2:	3301      	adds	r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <readGesture+0x19c>)
 80044e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                        gesture_data_.total_gestures++;
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <readGesture+0x19c>)
 80044ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80044f2:	3301      	adds	r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b17      	ldr	r3, [pc, #92]	; (8004554 <readGesture+0x19c>)
 80044f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                    for( i = 0; i < bytes_read; i += 4 ) {
 80044fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004500:	3304      	adds	r3, #4
 8004502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800450e:	429a      	cmp	r2, r3
 8004510:	dba8      	blt.n	8004464 <readGesture+0xac>
                }
                debugPutString("\r\n");
#endif

                    /* Filter and process gesture data. Decode near/far state */
                    if( processGestureData() ) {
 8004512:	f000 f823 	bl	800455c <processGestureData>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <readGesture+0x168>
                        if( decodeGesture() ) {
 800451c:	f000 f9fa 	bl	8004914 <decodeGesture>
#endif
                        }
                    }

                    /* Reset data */
                    gesture_data_.index = 0;
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <readGesture+0x19c>)
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                    gesture_data_.total_gestures = 0;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <readGesture+0x19c>)
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8004530:	e759      	b.n	80043e6 <readGesture+0x2e>
                }
            }
        } else {

            /* Determine best guessed gesture and clean up */
            HAL_Delay(FIFO_PAUSE_TIME);
 8004532:	201e      	movs	r0, #30
 8004534:	f002 ffd0 	bl	80074d8 <HAL_Delay>
            decodeGesture();
 8004538:	f000 f9ec 	bl	8004914 <decodeGesture>
            motion = gesture_motion_;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <readGesture+0x1a0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if DEBUGPRINT
            debugPutString("END: ");
            debugPutChar(gesture_motion_);
#endif
            resetGestureParameters();
 8004544:	f7ff fe74 	bl	8004230 <resetGestureParameters>
            return motion;
 8004548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
        }
    }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3798      	adds	r7, #152	; 0x98
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000578 	.word	0x20000578
 8004558:	20000574 	.word	0x20000574

0800455c <processGestureData>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int processGestureData(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b08b      	sub	sp, #44	; 0x2c
 8004560:	af00      	add	r7, sp, #0
    uint8_t u_first = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d_first = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t l_first = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t r_first = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t u_last = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t d_last = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t l_last = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t r_last = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3020 	strb.w	r3, [r7, #32]
    int ud_delta;
    int lr_delta;
    int i;

    /* If we have less than 4 total gestures, that's not enough */
    if( gesture_data_.total_gestures <= 4 ) {
 8004592:	4ba6      	ldr	r3, [pc, #664]	; (800482c <processGestureData+0x2d0>)
 8004594:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004598:	2b04      	cmp	r3, #4
 800459a:	d801      	bhi.n	80045a0 <processGestureData+0x44>
        return false;
 800459c:	2300      	movs	r3, #0
 800459e:	e1a5      	b.n	80048ec <processGestureData+0x390>
    }

    /* Check to make sure our data isn't out of bounds */
    if( (gesture_data_.total_gestures <= 32) && \
 80045a0:	4ba2      	ldr	r3, [pc, #648]	; (800482c <processGestureData+0x2d0>)
 80045a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	f200 809f 	bhi.w	80046ea <processGestureData+0x18e>
        (gesture_data_.total_gestures > 0) ) {
 80045ac:	4b9f      	ldr	r3, [pc, #636]	; (800482c <processGestureData+0x2d0>)
 80045ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    if( (gesture_data_.total_gestures <= 32) && \
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8099 	beq.w	80046ea <processGestureData+0x18e>

        /* Find the first value in U/D/L/R above the threshold */
        for( i = 0; i < gesture_data_.total_gestures; i++ ) {
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e039      	b.n	8004632 <processGestureData+0xd6>
            if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045be:	4a9b      	ldr	r2, [pc, #620]	; (800482c <processGestureData+0x2d0>)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b0a      	cmp	r3, #10
 80045c8:	d930      	bls.n	800462c <processGestureData+0xd0>
                (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045ca:	4a98      	ldr	r2, [pc, #608]	; (800482c <processGestureData+0x2d0>)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	3320      	adds	r3, #32
 80045d2:	781b      	ldrb	r3, [r3, #0]
            if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045d4:	2b0a      	cmp	r3, #10
 80045d6:	d929      	bls.n	800462c <processGestureData+0xd0>
                (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045d8:	4a94      	ldr	r2, [pc, #592]	; (800482c <processGestureData+0x2d0>)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	3340      	adds	r3, #64	; 0x40
 80045e0:	781b      	ldrb	r3, [r3, #0]
                (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045e2:	2b0a      	cmp	r3, #10
 80045e4:	d922      	bls.n	800462c <processGestureData+0xd0>
                (gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT) ) {
 80045e6:	4a91      	ldr	r2, [pc, #580]	; (800482c <processGestureData+0x2d0>)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	3360      	adds	r3, #96	; 0x60
 80045ee:	781b      	ldrb	r3, [r3, #0]
                (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 80045f0:	2b0a      	cmp	r3, #10
 80045f2:	d91b      	bls.n	800462c <processGestureData+0xd0>

                u_first = gesture_data_.u_data[i];
 80045f4:	4a8d      	ldr	r2, [pc, #564]	; (800482c <processGestureData+0x2d0>)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                d_first = gesture_data_.d_data[i];
 8004600:	4a8a      	ldr	r2, [pc, #552]	; (800482c <processGestureData+0x2d0>)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	3320      	adds	r3, #32
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                l_first = gesture_data_.l_data[i];
 800460e:	4a87      	ldr	r2, [pc, #540]	; (800482c <processGestureData+0x2d0>)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	3340      	adds	r3, #64	; 0x40
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                r_first = gesture_data_.r_data[i];
 800461c:	4a83      	ldr	r2, [pc, #524]	; (800482c <processGestureData+0x2d0>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	3360      	adds	r3, #96	; 0x60
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                break;
 800462a:	e009      	b.n	8004640 <processGestureData+0xe4>
        for( i = 0; i < gesture_data_.total_gestures; i++ ) {
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3301      	adds	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	4b7e      	ldr	r3, [pc, #504]	; (800482c <processGestureData+0x2d0>)
 8004634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004638:	461a      	mov	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4293      	cmp	r3, r2
 800463e:	dbbe      	blt.n	80045be <processGestureData+0x62>
            }
        }

        /* If one of the _first values is 0, then there is no good data */
        if( (u_first == 0) || (d_first == 0) || \
 8004640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <processGestureData+0x104>
 8004648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <processGestureData+0x104>
 8004650:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <processGestureData+0x104>
            (l_first == 0) || (r_first == 0) ) {
 8004658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <processGestureData+0x108>

            return false;
 8004660:	2300      	movs	r3, #0
 8004662:	e143      	b.n	80048ec <processGestureData+0x390>
        }
        /* Find the last value in U/D/L/R above the threshold */
        for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
 8004664:	4b71      	ldr	r3, [pc, #452]	; (800482c <processGestureData+0x2d0>)
 8004666:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800466a:	3b01      	subs	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e039      	b.n	80046e4 <processGestureData+0x188>
            debugPutChar(gesture_data_.l_data[i]);
            debugPutString(" R:");
            debugPutChar(gesture_data_.r_data[i]);
            debugPutString("\r\n");
#endif
            if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8004670:	4a6e      	ldr	r2, [pc, #440]	; (800482c <processGestureData+0x2d0>)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b0a      	cmp	r3, #10
 800467a:	d930      	bls.n	80046de <processGestureData+0x182>
                (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 800467c:	4a6b      	ldr	r2, [pc, #428]	; (800482c <processGestureData+0x2d0>)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	3320      	adds	r3, #32
 8004684:	781b      	ldrb	r3, [r3, #0]
            if( (gesture_data_.u_data[i] > GESTURE_THRESHOLD_OUT) &&
 8004686:	2b0a      	cmp	r3, #10
 8004688:	d929      	bls.n	80046de <processGestureData+0x182>
                (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 800468a:	4a68      	ldr	r2, [pc, #416]	; (800482c <processGestureData+0x2d0>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	3340      	adds	r3, #64	; 0x40
 8004692:	781b      	ldrb	r3, [r3, #0]
                (gesture_data_.d_data[i] > GESTURE_THRESHOLD_OUT) &&
 8004694:	2b0a      	cmp	r3, #10
 8004696:	d922      	bls.n	80046de <processGestureData+0x182>
                (gesture_data_.r_data[i] > GESTURE_THRESHOLD_OUT) ) {
 8004698:	4a64      	ldr	r2, [pc, #400]	; (800482c <processGestureData+0x2d0>)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	3360      	adds	r3, #96	; 0x60
 80046a0:	781b      	ldrb	r3, [r3, #0]
                (gesture_data_.l_data[i] > GESTURE_THRESHOLD_OUT) &&
 80046a2:	2b0a      	cmp	r3, #10
 80046a4:	d91b      	bls.n	80046de <processGestureData+0x182>

                u_last = gesture_data_.u_data[i];
 80046a6:	4a61      	ldr	r2, [pc, #388]	; (800482c <processGestureData+0x2d0>)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                d_last = gesture_data_.d_data[i];
 80046b2:	4a5e      	ldr	r2, [pc, #376]	; (800482c <processGestureData+0x2d0>)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	3320      	adds	r3, #32
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                l_last = gesture_data_.l_data[i];
 80046c0:	4a5a      	ldr	r2, [pc, #360]	; (800482c <processGestureData+0x2d0>)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	3340      	adds	r3, #64	; 0x40
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                r_last = gesture_data_.r_data[i];
 80046ce:	4a57      	ldr	r2, [pc, #348]	; (800482c <processGestureData+0x2d0>)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	3360      	adds	r3, #96	; 0x60
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 80046dc:	e005      	b.n	80046ea <processGestureData+0x18e>
        for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dac2      	bge.n	8004670 <processGestureData+0x114>
            }
        }
    }

    /* Calculate the first vs. last ratio of up/down and left/right */
    ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first);
 80046ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80046ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2264      	movs	r2, #100	; 0x64
 80046f6:	fb02 f203 	mul.w	r2, r2, r3
 80046fa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80046fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004702:	440b      	add	r3, r1
 8004704:	fb92 f3f3 	sdiv	r3, r2, r3
 8004708:	61bb      	str	r3, [r7, #24]
    lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);
 800470a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800470e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	fb02 f203 	mul.w	r2, r2, r3
 800471a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800471e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004722:	440b      	add	r3, r1
 8004724:	fb92 f3f3 	sdiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
 800472a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800472e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2264      	movs	r2, #100	; 0x64
 8004736:	fb02 f203 	mul.w	r2, r2, r3
 800473a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800473e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004742:	440b      	add	r3, r1
 8004744:	fb92 f3f3 	sdiv	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
    lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
 800474a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800474e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2264      	movs	r2, #100	; 0x64
 8004756:	fb02 f203 	mul.w	r2, r2, r3
 800475a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800475e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004762:	440b      	add	r3, r1
 8004764:	fb92 f3f3 	sdiv	r3, r2, r3
 8004768:	60fb      	str	r3, [r7, #12]
    debugPutString("\r\n");

#endif

    /* Determine the difference between the first and last ratios */
    ud_delta = ud_ratio_last - ud_ratio_first;
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
    lr_delta = lr_ratio_last - lr_ratio_first;
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	607b      	str	r3, [r7, #4]
    debugPutChar(lr_delta);
    debugPutString("\r\n");
#endif

    /* Accumulate the UD and LR delta values */
    gesture_ud_delta_ += ud_delta;
 800477a:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <processGestureData+0x2d4>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <processGestureData+0x2d4>)
 8004784:	6013      	str	r3, [r2, #0]
    gesture_lr_delta_ += lr_delta;
 8004786:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <processGestureData+0x2d8>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	4a29      	ldr	r2, [pc, #164]	; (8004834 <processGestureData+0x2d8>)
 8004790:	6013      	str	r3, [r2, #0]
    debugPutChar(gesture_lr_delta_);
    debugPutString("\r\n");
#endif

    /* Determine U/D gesture */
    if( gesture_ud_delta_ >= GESTURE_SENSITIVITY_1 ) {
 8004792:	4b27      	ldr	r3, [pc, #156]	; (8004830 <processGestureData+0x2d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b31      	cmp	r3, #49	; 0x31
 8004798:	dd03      	ble.n	80047a2 <processGestureData+0x246>
        gesture_ud_count_ = 1;
 800479a:	4b27      	ldr	r3, [pc, #156]	; (8004838 <processGestureData+0x2dc>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e00c      	b.n	80047bc <processGestureData+0x260>
    } else if( gesture_ud_delta_ <= -GESTURE_SENSITIVITY_1 ) {
 80047a2:	4b23      	ldr	r3, [pc, #140]	; (8004830 <processGestureData+0x2d4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80047aa:	da04      	bge.n	80047b6 <processGestureData+0x25a>
        gesture_ud_count_ = -1;
 80047ac:	4b22      	ldr	r3, [pc, #136]	; (8004838 <processGestureData+0x2dc>)
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e002      	b.n	80047bc <processGestureData+0x260>
    } else {
        gesture_ud_count_ = 0;
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <processGestureData+0x2dc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
    }

    /* Determine L/R gesture */
    if( gesture_lr_delta_ >= GESTURE_SENSITIVITY_1 ) {
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <processGestureData+0x2d8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b31      	cmp	r3, #49	; 0x31
 80047c2:	dd03      	ble.n	80047cc <processGestureData+0x270>
        gesture_lr_count_ = 1;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <processGestureData+0x2e0>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e00c      	b.n	80047e6 <processGestureData+0x28a>
    } else if( gesture_lr_delta_ <= -GESTURE_SENSITIVITY_1 ) {
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <processGestureData+0x2d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80047d4:	da04      	bge.n	80047e0 <processGestureData+0x284>
        gesture_lr_count_ = -1;
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <processGestureData+0x2e0>)
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e002      	b.n	80047e6 <processGestureData+0x28a>
    } else {
        gesture_lr_count_ = 0;
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <processGestureData+0x2e0>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    }

    /* Determine Near/Far gesture */
    if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <processGestureData+0x2dc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d152      	bne.n	8004894 <processGestureData+0x338>
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <processGestureData+0x2e0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d14e      	bne.n	8004894 <processGestureData+0x338>
        if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f113 0f13 	cmn.w	r3, #19
 80047fc:	db74      	blt.n	80048e8 <processGestureData+0x38c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b13      	cmp	r3, #19
 8004802:	dc71      	bgt.n	80048e8 <processGestureData+0x38c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f113 0f13 	cmn.w	r3, #19
 800480a:	db6d      	blt.n	80048e8 <processGestureData+0x38c>
            (abs(lr_delta) < GESTURE_SENSITIVITY_2) ) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b13      	cmp	r3, #19
 8004810:	dc6a      	bgt.n	80048e8 <processGestureData+0x38c>

            if( (ud_delta == 0) && (lr_delta == 0) ) {
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d115      	bne.n	8004844 <processGestureData+0x2e8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d112      	bne.n	8004844 <processGestureData+0x2e8>
                gesture_near_count_++;
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <processGestureData+0x2e4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <processGestureData+0x2e4>)
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e017      	b.n	800485a <processGestureData+0x2fe>
 800482a:	bf00      	nop
 800482c:	20000578 	.word	0x20000578
 8004830:	20000570 	.word	0x20000570
 8004834:	2000056c 	.word	0x2000056c
 8004838:	2000055c 	.word	0x2000055c
 800483c:	20000560 	.word	0x20000560
 8004840:	200005fc 	.word	0x200005fc
            } else if( (ud_delta != 0) || (lr_delta != 0) ) {
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <processGestureData+0x2f4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <processGestureData+0x2fe>
                gesture_far_count_++;
 8004850:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <processGestureData+0x39c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <processGestureData+0x39c>)
 8004858:	6013      	str	r3, [r2, #0]
            }

            if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 2) ) {
 800485a:	4b28      	ldr	r3, [pc, #160]	; (80048fc <processGestureData+0x3a0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b09      	cmp	r3, #9
 8004860:	dd42      	ble.n	80048e8 <processGestureData+0x38c>
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <processGestureData+0x39c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	dd3e      	ble.n	80048e8 <processGestureData+0x38c>
                if( (ud_delta == 0) && (lr_delta == 0) ) {
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <processGestureData+0x322>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <processGestureData+0x322>
                    gesture_state_ = NEAR_STATE;
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <processGestureData+0x3a4>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e008      	b.n	8004890 <processGestureData+0x334>
                } else if( (ud_delta != 0) && (lr_delta != 0) ) {
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <processGestureData+0x334>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <processGestureData+0x334>
                    gesture_state_ = FAR_STATE;
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <processGestureData+0x3a4>)
 800488c:	2202      	movs	r2, #2
 800488e:	601a      	str	r2, [r3, #0]
                }
                return true;
 8004890:	2301      	movs	r3, #1
 8004892:	e02b      	b.n	80048ec <processGestureData+0x390>
            }
        }
    } else {
        if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f113 0f13 	cmn.w	r3, #19
 800489a:	db26      	blt.n	80048ea <processGestureData+0x38e>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b13      	cmp	r3, #19
 80048a0:	dc23      	bgt.n	80048ea <processGestureData+0x38e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f113 0f13 	cmn.w	r3, #19
 80048a8:	db1f      	blt.n	80048ea <processGestureData+0x38e>
            (abs(lr_delta) < GESTURE_SENSITIVITY_2) ) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b13      	cmp	r3, #19
 80048ae:	dc1c      	bgt.n	80048ea <processGestureData+0x38e>

            if( (ud_delta == 0) && (lr_delta == 0) ) {
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <processGestureData+0x36a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <processGestureData+0x36a>
                gesture_near_count_++;
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <processGestureData+0x3a0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <processGestureData+0x3a0>)
 80048c4:	6013      	str	r3, [r2, #0]
            }

            if( gesture_near_count_ >= 10 ) {
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <processGestureData+0x3a0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	dd0d      	ble.n	80048ea <processGestureData+0x38e>
                gesture_ud_count_ = 0;
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <processGestureData+0x3a8>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
                gesture_lr_count_ = 0;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <processGestureData+0x3ac>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
                gesture_ud_delta_ = 0;
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <processGestureData+0x3b0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
                gesture_lr_delta_ = 0;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <processGestureData+0x3b4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e000      	b.n	80048ea <processGestureData+0x38e>
        if( (abs(ud_delta) < GESTURE_SENSITIVITY_2) && \
 80048e8:	bf00      	nop
    debugPutString(" FAR_CT: ");
    debugPutChar(gesture_far_count_);
    debugPutString("----------");
#endif

    return false;
 80048ea:	2300      	movs	r3, #0
}/* End of this function */
 80048ec:	4618      	mov	r0, r3
 80048ee:	372c      	adds	r7, #44	; 0x2c
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20000568 	.word	0x20000568
 80048fc:	200005fc 	.word	0x200005fc
 8004900:	20000564 	.word	0x20000564
 8004904:	2000055c 	.word	0x2000055c
 8004908:	20000560 	.word	0x20000560
 800490c:	20000570 	.word	0x20000570
 8004910:	2000056c 	.word	0x2000056c

08004914 <decodeGesture>:
 * ----------------------------------------------------------------------------*
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/
int decodeGesture(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
    /* Return if near or far event is detected */
    if( gesture_state_ == NEAR_STATE ) {
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <decodeGesture+0x18c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d104      	bne.n	800492a <decodeGesture+0x16>
        gesture_motion_ = DIR_NEAR;
 8004920:	4b60      	ldr	r3, [pc, #384]	; (8004aa4 <decodeGesture+0x190>)
 8004922:	2205      	movs	r2, #5
 8004924:	601a      	str	r2, [r3, #0]
        return true;
 8004926:	2301      	movs	r3, #1
 8004928:	e0b5      	b.n	8004a96 <decodeGesture+0x182>
    } else if ( gesture_state_ == FAR_STATE ) {
 800492a:	4b5d      	ldr	r3, [pc, #372]	; (8004aa0 <decodeGesture+0x18c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d104      	bne.n	800493c <decodeGesture+0x28>
        gesture_motion_ = DIR_FAR;
 8004932:	4b5c      	ldr	r3, [pc, #368]	; (8004aa4 <decodeGesture+0x190>)
 8004934:	2206      	movs	r2, #6
 8004936:	601a      	str	r2, [r3, #0]
        return true;
 8004938:	2301      	movs	r3, #1
 800493a:	e0ac      	b.n	8004a96 <decodeGesture+0x182>
    }

    /* Determine swipe direction */
    if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 800493c:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <decodeGesture+0x194>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d107      	bne.n	8004956 <decodeGesture+0x42>
 8004946:	4b59      	ldr	r3, [pc, #356]	; (8004aac <decodeGesture+0x198>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <decodeGesture+0x42>
        gesture_motion_ = DIR_UP;
 800494e:	4b55      	ldr	r3, [pc, #340]	; (8004aa4 <decodeGesture+0x190>)
 8004950:	2203      	movs	r2, #3
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e09e      	b.n	8004a94 <decodeGesture+0x180>
    } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) {
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <decodeGesture+0x194>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <decodeGesture+0x5a>
 800495e:	4b53      	ldr	r3, [pc, #332]	; (8004aac <decodeGesture+0x198>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <decodeGesture+0x5a>
        gesture_motion_ = DIR_DOWN;
 8004966:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <decodeGesture+0x190>)
 8004968:	2204      	movs	r2, #4
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e092      	b.n	8004a94 <decodeGesture+0x180>
    } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) {
 800496e:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <decodeGesture+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <decodeGesture+0x72>
 8004976:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <decodeGesture+0x198>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d103      	bne.n	8004986 <decodeGesture+0x72>
        gesture_motion_ = DIR_RIGHT;
 800497e:	4b49      	ldr	r3, [pc, #292]	; (8004aa4 <decodeGesture+0x190>)
 8004980:	2202      	movs	r2, #2
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e086      	b.n	8004a94 <decodeGesture+0x180>
    } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) ) {
 8004986:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <decodeGesture+0x194>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d108      	bne.n	80049a0 <decodeGesture+0x8c>
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <decodeGesture+0x198>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004996:	d103      	bne.n	80049a0 <decodeGesture+0x8c>
        gesture_motion_ = DIR_LEFT;
 8004998:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <decodeGesture+0x190>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e079      	b.n	8004a94 <decodeGesture+0x180>
    } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) ) {
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <decodeGesture+0x194>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a8:	d118      	bne.n	80049dc <decodeGesture+0xc8>
 80049aa:	4b40      	ldr	r3, [pc, #256]	; (8004aac <decodeGesture+0x198>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d114      	bne.n	80049dc <decodeGesture+0xc8>
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <decodeGesture+0x19c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80049ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <decodeGesture+0x1a0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfb8      	it	lt
 80049c6:	425b      	neglt	r3, r3
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dd03      	ble.n	80049d4 <decodeGesture+0xc0>
            gesture_motion_ = DIR_UP;
 80049cc:	4b35      	ldr	r3, [pc, #212]	; (8004aa4 <decodeGesture+0x190>)
 80049ce:	2203      	movs	r2, #3
 80049d0:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 80049d2:	e05f      	b.n	8004a94 <decodeGesture+0x180>
        } else {
            gesture_motion_ = DIR_RIGHT;
 80049d4:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <decodeGesture+0x190>)
 80049d6:	2202      	movs	r2, #2
 80049d8:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 80049da:	e05b      	b.n	8004a94 <decodeGesture+0x180>
        }
    } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == -1) ) {
 80049dc:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <decodeGesture+0x194>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d119      	bne.n	8004a18 <decodeGesture+0x104>
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <decodeGesture+0x198>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d114      	bne.n	8004a18 <decodeGesture+0x104>
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <decodeGesture+0x19c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80049f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80049fa:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <decodeGesture+0x1a0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	425b      	neglt	r3, r3
 8004a04:	429a      	cmp	r2, r3
 8004a06:	dd03      	ble.n	8004a10 <decodeGesture+0xfc>
            gesture_motion_ = DIR_DOWN;
 8004a08:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <decodeGesture+0x190>)
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a0e:	e041      	b.n	8004a94 <decodeGesture+0x180>
        } else {
            gesture_motion_ = DIR_LEFT;
 8004a10:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <decodeGesture+0x190>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a16:	e03d      	b.n	8004a94 <decodeGesture+0x180>
        }
    } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == -1) ) {
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <decodeGesture+0x194>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a20:	d119      	bne.n	8004a56 <decodeGesture+0x142>
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <decodeGesture+0x198>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2a:	d114      	bne.n	8004a56 <decodeGesture+0x142>
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a2c:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <decodeGesture+0x19c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <decodeGesture+0x1a0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bfb8      	it	lt
 8004a40:	425b      	neglt	r3, r3
 8004a42:	429a      	cmp	r2, r3
 8004a44:	dd03      	ble.n	8004a4e <decodeGesture+0x13a>
            gesture_motion_ = DIR_UP;
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <decodeGesture+0x190>)
 8004a48:	2203      	movs	r2, #3
 8004a4a:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a4c:	e022      	b.n	8004a94 <decodeGesture+0x180>
        } else {
            gesture_motion_ = DIR_LEFT;
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <decodeGesture+0x190>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a54:	e01e      	b.n	8004a94 <decodeGesture+0x180>
        }
    } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 1) ) {
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <decodeGesture+0x194>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d118      	bne.n	8004a90 <decodeGesture+0x17c>
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <decodeGesture+0x198>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d114      	bne.n	8004a90 <decodeGesture+0x17c>
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <decodeGesture+0x19c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004a6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <decodeGesture+0x1a0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfb8      	it	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	dd03      	ble.n	8004a88 <decodeGesture+0x174>
            gesture_motion_ = DIR_DOWN;
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <decodeGesture+0x190>)
 8004a82:	2204      	movs	r2, #4
 8004a84:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a86:	e005      	b.n	8004a94 <decodeGesture+0x180>
        } else {
            gesture_motion_ = DIR_RIGHT;
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <decodeGesture+0x190>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	601a      	str	r2, [r3, #0]
        if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
 8004a8e:	e001      	b.n	8004a94 <decodeGesture+0x180>
        }
    } else {
        return false;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <decodeGesture+0x182>
    }

    return true;
 8004a94:	2301      	movs	r3, #1
}/* End of this function */
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000564 	.word	0x20000564
 8004aa4:	20000574 	.word	0x20000574
 8004aa8:	2000055c 	.word	0x2000055c
 8004aac:	20000560 	.word	0x20000560
 8004ab0:	20000570 	.word	0x20000570
 8004ab4:	2000056c 	.word	0x2000056c

08004ab8 <apds9960ReadSensor>:
 * Authors: Sarath S
 * Date: May 17, 2017
 * ---------------------------------------------------------------------------*/

int apds9960ReadSensor(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  int Gesture = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
   if(isGestureAvailable())
 8004ac2:	f7ff fc5c 	bl	800437e <isGestureAvailable>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <apds9960ReadSensor+0x1a>
   {
     Gesture = readGesture();
 8004acc:	f7ff fc74 	bl	80043b8 <readGesture>
 8004ad0:	6078      	str	r0, [r7, #4]

   }
    return Gesture;
 8004ad2:	687b      	ldr	r3, [r7, #4]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8004ae4:	2305      	movs	r3, #5
 8004ae6:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 f9f1 	bl	8005ed4 <null_ptr_check>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8004af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d133      	bne.n	8004b66 <bme280_init+0x8a>
		while (try_count) {
 8004afe:	e028      	b.n	8004b52 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8004b00:	f107 010d 	add.w	r1, r7, #13
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	20d0      	movs	r0, #208	; 0xd0
 8004b0a:	f000 f832 	bl	8004b72 <bme280_get_regs>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8004b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d114      	bne.n	8004b44 <bme280_init+0x68>
 8004b1a:	7b7b      	ldrb	r3, [r7, #13]
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d111      	bne.n	8004b44 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8004b20:	7b7a      	ldrb	r2, [r7, #13]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f976 	bl	8004e18 <bme280_soft_reset>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8004b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 f841 	bl	8005bc0 <get_calib_data>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8004b42:	e00a      	b.n	8004b5a <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2001      	movs	r0, #1
 8004b4a:	4798      	blx	r3
			--try_count;
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1d3      	bne.n	8004b00 <bme280_init+0x24>
 8004b58:	e000      	b.n	8004b5c <bme280_init+0x80>
				break;
 8004b5a:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8004b62:	23fe      	movs	r3, #254	; 0xfe
 8004b64:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8004b72:	b590      	push	{r4, r7, lr}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73fb      	strb	r3, [r7, #15]
 8004b80:	4613      	mov	r3, r2
 8004b82:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f001 f9a5 	bl	8005ed4 <null_ptr_check>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8004b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d117      	bne.n	8004bc6 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	789b      	ldrb	r3, [r3, #2]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d003      	beq.n	8004ba6 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ba4:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685c      	ldr	r4, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7858      	ldrb	r0, [r3, #1]
 8004bae:	89bb      	ldrh	r3, [r7, #12]
 8004bb0:	7bf9      	ldrb	r1, [r7, #15]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	47a0      	blx	r4
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8004bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8004bc2:	23fc      	movs	r3, #252	; 0xfc
 8004bc4:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8004bd2:	b590      	push	{r4, r7, lr}
 8004bd4:	b08d      	sub	sp, #52	; 0x34
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b0a      	cmp	r3, #10
 8004be6:	d901      	bls.n	8004bec <bme280_set_regs+0x1a>
		len = 10;
 8004be8:	230a      	movs	r3, #10
 8004bea:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f001 f971 	bl	8005ed4 <null_ptr_check>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8004bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d154      	bne.n	8004caa <bme280_set_regs+0xd8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d051      	beq.n	8004caa <bme280_set_regs+0xd8>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d04e      	beq.n	8004caa <bme280_set_regs+0xd8>
		if (len != 0) {
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d047      	beq.n	8004ca2 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	789b      	ldrb	r3, [r3, #2]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d01a      	beq.n	8004c56 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e011      	b.n	8004c4c <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	440b      	add	r3, r1
 8004c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c46:	3301      	adds	r3, #1
 8004c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d3e8      	bcc.n	8004c28 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d90b      	bls.n	8004c74 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	f107 0114 	add.w	r1, r7, #20
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fff0 	bl	8005c4a <interleave_reg_addr>
				temp_len = len * 2;
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c72:	e001      	b.n	8004c78 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689c      	ldr	r4, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7858      	ldrb	r0, [r3, #1]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	7819      	ldrb	r1, [r3, #0]
 8004c84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c86:	f107 0214 	add.w	r2, r7, #20
 8004c8a:	47a0      	blx	r4
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8004c92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8004c9a:	23fc      	movs	r3, #252	; 0xfc
 8004c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8004ca0:	e007      	b.n	8004cb2 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8004ca2:	23fd      	movs	r3, #253	; 0xfd
 8004ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8004ca8:	e003      	b.n	8004cb2 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8004caa:	23ff      	movs	r3, #255	; 0xff
 8004cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004cb0:	e000      	b.n	8004cb4 <bme280_set_regs+0xe2>
		if (len != 0) {
 8004cb2:	bf00      	nop
	}


	return rslt;
 8004cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3734      	adds	r7, #52	; 0x34
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd90      	pop	{r4, r7, pc}

08004cc0 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f001 f901 	bl	8005ed4 <null_ptr_check>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13f      	bne.n	8004d5e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8004cde:	f107 030e 	add.w	r3, r7, #14
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 f874 	bl	8004dd2 <bme280_get_sensor_mode>
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8004cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <bme280_set_sensor_settings+0x46>
 8004cf6:	7bbb      	ldrb	r3, [r7, #14]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8004cfc:	6838      	ldr	r0, [r7, #0]
 8004cfe:	f000 fb4e 	bl	800539e <put_device_to_sleep>
 8004d02:	4603      	mov	r3, r0
 8004d04:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8004d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d127      	bne.n	8004d5e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	4619      	mov	r1, r3
 8004d12:	2007      	movs	r0, #7
 8004d14:	f001 f8c2 	bl	8005e9c <are_settings_changed>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f98a 	bl	8005042 <set_osr_settings>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d111      	bne.n	8004d5e <bme280_set_sensor_settings+0x9e>
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	2018      	movs	r0, #24
 8004d40:	f001 f8ac 	bl	8005e9c <are_settings_changed>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa11 	bl	800517c <set_filter_standby_settings>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8004d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	6039      	str	r1, [r7, #0]
 8004d74:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004d76:	6838      	ldr	r0, [r7, #0]
 8004d78:	f001 f8ac 	bl	8005ed4 <null_ptr_check>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8004d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11e      	bne.n	8004dc6 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004d88:	f107 030e 	add.w	r3, r7, #14
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f81f 	bl	8004dd2 <bme280_get_sensor_mode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <bme280_set_sensor_mode+0x46>
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f000 faf9 	bl	800539e <put_device_to_sleep>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8004db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fabb 	bl	8005338 <write_power_mode>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f001 f879 	bl	8005ed4 <null_ptr_check>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10e      	bne.n	8004e0c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	20f4      	movs	r0, #244	; 0xf4
 8004df6:	f7ff febc 	bl	8004b72 <bme280_get_regs>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004e20:	23e0      	movs	r3, #224	; 0xe0
 8004e22:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8004e24:	23b6      	movs	r3, #182	; 0xb6
 8004e26:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 f853 	bl	8005ed4 <null_ptr_check>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8004e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004e3a:	f107 010d 	add.w	r1, r7, #13
 8004e3e:	f107 000e 	add.w	r0, r7, #14
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f7ff fec4 	bl	8004bd2 <bme280_set_regs>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2002      	movs	r0, #2
 8004e54:	4798      	blx	r3
	}

	return rslt;
 8004e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	4603      	mov	r3, r0
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	2300      	movs	r3, #0
 8004e76:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f001 f825 	bl	8005ed4 <null_ptr_check>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8004e90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d124      	bne.n	8004ee2 <bme280_get_sensor_data+0x80>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d021      	beq.n	8004ee2 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004e9e:	f107 011c 	add.w	r1, r7, #28
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	20f7      	movs	r0, #247	; 0xf7
 8004ea8:	f7ff fe63 	bl	8004b72 <bme280_get_regs>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8004eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004eba:	f107 0210 	add.w	r2, r7, #16
 8004ebe:	f107 031c 	add.w	r3, r7, #28
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f815 	bl	8004ef4 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3310      	adds	r3, #16
 8004ece:	f107 0110 	add.w	r1, r7, #16
 8004ed2:	7bf8      	ldrb	r0, [r7, #15]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	f000 f853 	bl	8004f80 <bme280_compensate_data>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004ee0:	e002      	b.n	8004ee8 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8004ee2:	23ff      	movs	r3, #255	; 0xff
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8004ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	031b      	lsls	r3, r3, #12
 8004f04:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3302      	adds	r3, #2
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3305      	adds	r3, #5
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3306      	adds	r3, #6
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3307      	adds	r3, #7
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04b      	beq.n	8005032 <bme280_compensate_data+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d048      	beq.n	8005032 <bme280_compensate_data+0xb2>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d045      	beq.n	8005032 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f000 fa2b 	bl	8005438 <compensate_temperature>
 8004fe2:	eeb0 7a40 	vmov.f32	s14, s0
 8004fe6:	eef0 7a60 	vmov.f32	s15, s1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f000 faef 	bl	80055e0 <compensate_pressure>
 8005002:	eeb0 7a40 	vmov.f32	s14, s0
 8005006:	eef0 7a60 	vmov.f32	s15, s1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	68b8      	ldr	r0, [r7, #8]
 800501e:	f000 fcaf 	bl	8005980 <compensate_humidity>
 8005022:	eeb0 7a40 	vmov.f32	s14, s0
 8005026:	eef0 7a60 	vmov.f32	s15, s1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8005030:	e001      	b.n	8005036 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005032:	23ff      	movs	r3, #255	; 0xff
 8005034:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f000 f815 	bl	8005090 <set_osr_humidity_settings>
 8005066:	4603      	mov	r3, r0
 8005068:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f842 	bl	8005104 <set_osr_press_temp_settings>
 8005080:	4603      	mov	r3, r0
 8005082:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8005084:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800509a:	23f2      	movs	r3, #242	; 0xf2
 800509c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	789b      	ldrb	r3, [r3, #2]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80050aa:	f107 010e 	add.w	r1, r7, #14
 80050ae:	f107 000c 	add.w	r0, r7, #12
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f7ff fd8c 	bl	8004bd2 <bme280_set_regs>
 80050ba:	4603      	mov	r3, r0
 80050bc:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80050be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d118      	bne.n	80050f8 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80050c6:	23f4      	movs	r3, #244	; 0xf4
 80050c8:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80050ca:	7b38      	ldrb	r0, [r7, #12]
 80050cc:	f107 010d 	add.w	r1, r7, #13
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f7ff fd4d 	bl	8004b72 <bme280_get_regs>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80050dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80050e4:	f107 010d 	add.w	r1, r7, #13
 80050e8:	f107 000c 	add.w	r0, r7, #12
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f7ff fd6f 	bl	8004bd2 <bme280_set_regs>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80050f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8005112:	23f4      	movs	r3, #244	; 0xf4
 8005114:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005116:	7db8      	ldrb	r0, [r7, #22]
 8005118:	f107 0115 	add.w	r1, r7, #21
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f7ff fd27 	bl	8004b72 <bme280_get_regs>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8005128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11f      	bne.n	8005170 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800513a:	f107 0315 	add.w	r3, r7, #21
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f88e 	bl	8005262 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8005150:	f107 0315 	add.w	r3, r7, #21
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f8a0 	bl	800529c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800515c:	f107 0115 	add.w	r1, r7, #21
 8005160:	f107 0016 	add.w	r0, r7, #22
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f7ff fd33 	bl	8004bd2 <bme280_set_regs>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800518a:	23f5      	movs	r3, #245	; 0xf5
 800518c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800518e:	7db8      	ldrb	r0, [r7, #22]
 8005190:	f107 0115 	add.w	r1, r7, #21
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f7ff fceb 	bl	8004b72 <bme280_get_regs>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80051a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11f      	bne.n	80051e8 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80051b2:	f107 0315 	add.w	r3, r7, #21
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f81b 	bl	80051f4 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80051c8:	f107 0315 	add.w	r3, r7, #21
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f82d 	bl	800522e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80051d4:	f107 0115 	add.w	r1, r7, #21
 80051d8:	f107 0016 	add.w	r0, r7, #22
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f7ff fcf7 	bl	8004bd2 <bme280_set_regs>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80051e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b25b      	sxtb	r3, r3
 8005204:	f023 031c 	bic.w	r3, r3, #28
 8005208:	b25a      	sxtb	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	78db      	ldrb	r3, [r3, #3]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	b25b      	sxtb	r3, r3
 8005212:	f003 031c 	and.w	r3, r3, #28
 8005216:	b25b      	sxtb	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b25b      	sxtb	r3, r3
 800521c:	b2da      	uxtb	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	701a      	strb	r2, [r3, #0]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	b25b      	sxtb	r3, r3
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	b25a      	sxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	791b      	ldrb	r3, [r3, #4]
 8005248:	015b      	lsls	r3, r3, #5
 800524a:	b25b      	sxtb	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b25b      	sxtb	r3, r3
 8005250:	b2da      	uxtb	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	701a      	strb	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b25b      	sxtb	r3, r3
 8005272:	f023 031c 	bic.w	r3, r3, #28
 8005276:	b25a      	sxtb	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f003 031c 	and.w	r3, r3, #28
 8005284:	b25b      	sxtb	r3, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	b25b      	sxtb	r3, r3
 800528a:	b2da      	uxtb	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	701a      	strb	r2, [r3, #0]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	b25a      	sxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3302      	adds	r3, #2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	109b      	asrs	r3, r3, #2
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3302      	adds	r3, #2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	b2da      	uxtb	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3303      	adds	r3, #3
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	109b      	asrs	r3, r3, #2
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	b2da      	uxtb	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3303      	adds	r3, #3
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	711a      	strb	r2, [r3, #4]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005344:	23f4      	movs	r3, #244	; 0xf4
 8005346:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8005348:	7bb8      	ldrb	r0, [r7, #14]
 800534a:	f107 010d 	add.w	r1, r7, #13
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	f7ff fc0e 	bl	8004b72 <bme280_get_regs>
 8005356:	4603      	mov	r3, r0
 8005358:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800535a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d117      	bne.n	8005392 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005362:	7b7b      	ldrb	r3, [r7, #13]
 8005364:	b25b      	sxtb	r3, r3
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	b25a      	sxtb	r2, r3
 800536c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	b25b      	sxtb	r3, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	b25b      	sxtb	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800537e:	f107 010d 	add.w	r1, r7, #13
 8005382:	f107 000e 	add.w	r0, r7, #14
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	f7ff fc22 	bl	8004bd2 <bme280_set_regs>
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80053a6:	f107 0110 	add.w	r1, r7, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2204      	movs	r2, #4
 80053ae:	20f2      	movs	r0, #242	; 0xf2
 80053b0:	f7ff fbdf 	bl	8004b72 <bme280_get_regs>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80053b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d118      	bne.n	80053f2 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80053c0:	f107 0208 	add.w	r2, r7, #8
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ff80 	bl	80052d0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fd21 	bl	8004e18 <bme280_soft_reset>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80053da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f808 	bl	80053fe <reload_device_settings>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80053f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	201f      	movs	r0, #31
 800540e:	f7ff fe18 	bl	8005042 <set_osr_settings>
 8005412:	4603      	mov	r3, r0
 8005414:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8005416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	201f      	movs	r0, #31
 8005424:	f7ff feaa 	bl	800517c <set_filter_standby_settings>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800542c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b08c      	sub	sp, #48	; 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <compensate_temperature+0x18c>)
 8005448:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	4b5d      	ldr	r3, [pc, #372]	; (80055c8 <compensate_temperature+0x190>)
 8005452:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fa fff6 	bl	800044c <__aeabi_ui2d>
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <compensate_temperature+0x194>)
 8005466:	f7fb f995 	bl	8000794 <__aeabi_ddiv>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4614      	mov	r4, r2
 8005470:	461d      	mov	r5, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fa ffe8 	bl	800044c <__aeabi_ui2d>
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <compensate_temperature+0x198>)
 8005482:	f7fb f987 	bl	8000794 <__aeabi_ddiv>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fa fe9f 	bl	80001d0 <__aeabi_dsub>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fa ffe3 	bl	800046c <__aeabi_i2d>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054ae:	f7fb f847 	bl	8000540 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fa ffc4 	bl	800044c <__aeabi_ui2d>
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80054cc:	f7fb f962 	bl	8000794 <__aeabi_ddiv>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fa ffb5 	bl	800044c <__aeabi_ui2d>
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <compensate_temperature+0x19c>)
 80054e8:	f7fb f954 	bl	8000794 <__aeabi_ddiv>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fa fe6c 	bl	80001d0 <__aeabi_dsub>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8005500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005504:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005508:	f7fb f81a 	bl	8000540 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4614      	mov	r4, r2
 8005512:	461d      	mov	r5, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fa ffa6 	bl	800046c <__aeabi_i2d>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	f7fb f80a 	bl	8000540 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8005534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800553c:	f7fa fe4a 	bl	80001d4 <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f7fb faaa 	bl	8000aa0 <__aeabi_d2iz>
 800554c:	4602      	mov	r2, r0
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 8005552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005556:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800555a:	f7fa fe3b 	bl	80001d4 <__adddf3>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <compensate_temperature+0x1a0>)
 800556c:	f7fb f912 	bl	8000794 <__aeabi_ddiv>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8005578:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005580:	f7fb fa50 	bl	8000a24 <__aeabi_dcmplt>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <compensate_temperature+0x15c>
		temperature = temperature_min;
 800558a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005592:	e00c      	b.n	80055ae <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8005594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005598:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800559c:	f7fb fa60 	bl	8000a60 <__aeabi_dcmpgt>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <compensate_temperature+0x176>
		temperature = temperature_max;
 80055a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 80055ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}
 80055c4:	c0440000 	.word	0xc0440000
 80055c8:	40554000 	.word	0x40554000
 80055cc:	40d00000 	.word	0x40d00000
 80055d0:	40900000 	.word	0x40900000
 80055d4:	40c00000 	.word	0x40c00000
 80055d8:	40b40000 	.word	0x40b40000
 80055dc:	00000000 	.word	0x00000000

080055e0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80055e0:	b5b0      	push	{r4, r5, r7, lr}
 80055e2:	b08e      	sub	sp, #56	; 0x38
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 80055ea:	a3d9      	add	r3, pc, #868	; (adr r3, 8005950 <compensate_pressure+0x370>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 80055f4:	a3d8      	add	r3, pc, #864	; (adr r3, 8005958 <compensate_pressure+0x378>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ff32 	bl	800046c <__aeabi_i2d>
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005610:	f7fb f8c0 	bl	8000794 <__aeabi_ddiv>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	4bc1      	ldr	r3, [pc, #772]	; (8005928 <compensate_pressure+0x348>)
 8005622:	f7fa fdd5 	bl	80001d0 <__aeabi_dsub>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800562e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005636:	f7fa ff83 	bl	8000540 <__aeabi_dmul>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4614      	mov	r4, r2
 8005640:	461d      	mov	r5, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fa ff0f 	bl	800046c <__aeabi_i2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4620      	mov	r0, r4
 8005654:	4629      	mov	r1, r5
 8005656:	f7fa ff73 	bl	8000540 <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	4bb1      	ldr	r3, [pc, #708]	; (800592c <compensate_pressure+0x34c>)
 8005668:	f7fb f894 	bl	8000794 <__aeabi_ddiv>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fa fef6 	bl	800046c <__aeabi_i2d>
 8005680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005684:	f7fa ff5c 	bl	8000540 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4610      	mov	r0, r2
 800568e:	4619      	mov	r1, r3
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	f7fa fd9e 	bl	80001d4 <__adddf3>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056a0:	f7fa fd98 	bl	80001d4 <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	4b9f      	ldr	r3, [pc, #636]	; (8005930 <compensate_pressure+0x350>)
 80056b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056b6:	f7fb f86d 	bl	8000794 <__aeabi_ddiv>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4614      	mov	r4, r2
 80056c0:	461d      	mov	r5, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fa fecf 	bl	800046c <__aeabi_i2d>
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	4b98      	ldr	r3, [pc, #608]	; (8005934 <compensate_pressure+0x354>)
 80056d4:	f7fa ff34 	bl	8000540 <__aeabi_dmul>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fd78 	bl	80001d4 <__adddf3>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fa feba 	bl	800046c <__aeabi_i2d>
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	f7fa ff20 	bl	8000540 <__aeabi_dmul>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800570c:	f7fa ff18 	bl	8000540 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	4b86      	ldr	r3, [pc, #536]	; (8005938 <compensate_pressure+0x358>)
 800571e:	f7fb f839 	bl	8000794 <__aeabi_ddiv>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f7fa fe9b 	bl	800046c <__aeabi_i2d>
 8005736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800573a:	f7fa ff01 	bl	8000540 <__aeabi_dmul>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800574a:	f7fa fd43 	bl	80001d4 <__adddf3>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	4b77      	ldr	r3, [pc, #476]	; (8005938 <compensate_pressure+0x358>)
 800575c:	f7fb f81a 	bl	8000794 <__aeabi_ddiv>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	4b6f      	ldr	r3, [pc, #444]	; (800592c <compensate_pressure+0x34c>)
 800576e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005772:	f7fb f80f 	bl	8000794 <__aeabi_ddiv>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4610      	mov	r0, r2
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	4b6e      	ldr	r3, [pc, #440]	; (800593c <compensate_pressure+0x35c>)
 8005784:	f7fa fd26 	bl	80001d4 <__adddf3>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4614      	mov	r4, r2
 800578e:	461d      	mov	r5, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	88db      	ldrh	r3, [r3, #6]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fa fe59 	bl	800044c <__aeabi_ui2d>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fecd 	bl	8000540 <__aeabi_dmul>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057ba:	f7fb f929 	bl	8000a10 <__aeabi_dcmpeq>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 80cd 	bne.w	8005960 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fa fe3e 	bl	800044c <__aeabi_ui2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	f04f 0000 	mov.w	r0, #0
 80057d8:	4959      	ldr	r1, [pc, #356]	; (8005940 <compensate_pressure+0x360>)
 80057da:	f7fa fcf9 	bl	80001d0 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	4b56      	ldr	r3, [pc, #344]	; (8005944 <compensate_pressure+0x364>)
 80057ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057f0:	f7fa ffd0 	bl	8000794 <__aeabi_ddiv>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80057fc:	f7fa fce8 	bl	80001d0 <__aeabi_dsub>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	a345      	add	r3, pc, #276	; (adr r3, 8005920 <compensate_pressure+0x340>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa fe97 	bl	8000540 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800581e:	f7fa ffb9 	bl	8000794 <__aeabi_ddiv>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa fe1b 	bl	800046c <__aeabi_i2d>
 8005836:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800583a:	f7fa fe81 	bl	8000540 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800584a:	f7fa fe79 	bl	8000540 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <compensate_pressure+0x368>)
 800585c:	f7fa ff9a 	bl	8000794 <__aeabi_ddiv>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fdfc 	bl	800046c <__aeabi_i2d>
 8005874:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005878:	f7fa fe62 	bl	8000540 <__aeabi_dmul>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	4b28      	ldr	r3, [pc, #160]	; (800592c <compensate_pressure+0x34c>)
 800588a:	f7fa ff83 	bl	8000794 <__aeabi_ddiv>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8005896:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800589a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800589e:	f7fa fc99 	bl	80001d4 <__adddf3>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4614      	mov	r4, r2
 80058a8:	461d      	mov	r5, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fa fddb 	bl	800046c <__aeabi_i2d>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fc89 	bl	80001d4 <__adddf3>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	4b1f      	ldr	r3, [pc, #124]	; (800594c <compensate_pressure+0x36c>)
 80058d0:	f7fa ff60 	bl	8000794 <__aeabi_ddiv>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058dc:	f7fa fc7a 	bl	80001d4 <__adddf3>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 80058e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058f0:	f7fb f898 	bl	8000a24 <__aeabi_dcmplt>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <compensate_pressure+0x324>
			pressure = pressure_min;
 80058fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005902:	e031      	b.n	8005968 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8005904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005908:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800590c:	f7fb f8a8 	bl	8000a60 <__aeabi_dcmpgt>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d028      	beq.n	8005968 <compensate_pressure+0x388>
			pressure = pressure_max;
 8005916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800591a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800591e:	e023      	b.n	8005968 <compensate_pressure+0x388>
 8005920:	00000000 	.word	0x00000000
 8005924:	40b86a00 	.word	0x40b86a00
 8005928:	40ef4000 	.word	0x40ef4000
 800592c:	40e00000 	.word	0x40e00000
 8005930:	40100000 	.word	0x40100000
 8005934:	40f00000 	.word	0x40f00000
 8005938:	41200000 	.word	0x41200000
 800593c:	3ff00000 	.word	0x3ff00000
 8005940:	41300000 	.word	0x41300000
 8005944:	40b00000 	.word	0x40b00000
 8005948:	41e00000 	.word	0x41e00000
 800594c:	40300000 	.word	0x40300000
 8005950:	00000000 	.word	0x00000000
 8005954:	40dd4c00 	.word	0x40dd4c00
 8005958:	00000000 	.word	0x00000000
 800595c:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8005960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005964:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8005968:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800596c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005970:	eeb0 0a47 	vmov.f32	s0, s14
 8005974:	eef0 0a67 	vmov.f32	s1, s15
 8005978:	3738      	adds	r7, #56	; 0x38
 800597a:	46bd      	mov	sp, r7
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	bf00      	nop

08005980 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b094      	sub	sp, #80	; 0x50
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	4b81      	ldr	r3, [pc, #516]	; (8005ba0 <compensate_humidity+0x220>)
 800599c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fa fd61 	bl	800046c <__aeabi_i2d>
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	4b7d      	ldr	r3, [pc, #500]	; (8005ba4 <compensate_humidity+0x224>)
 80059b0:	f7fa fc0e 	bl	80001d0 <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fa fd52 	bl	800046c <__aeabi_i2d>
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <compensate_humidity+0x228>)
 80059ce:	f7fa fdb7 	bl	8000540 <__aeabi_dmul>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4614      	mov	r4, r2
 80059d8:	461d      	mov	r5, r3
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fa fd43 	bl	800046c <__aeabi_i2d>
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	4b70      	ldr	r3, [pc, #448]	; (8005bac <compensate_humidity+0x22c>)
 80059ec:	f7fa fed2 	bl	8000794 <__aeabi_ddiv>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059fc:	f7fa fda0 	bl	8000540 <__aeabi_dmul>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4620      	mov	r0, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	f7fa fbe4 	bl	80001d4 <__adddf3>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fa fd17 	bl	800044c <__aeabi_ui2d>
 8005a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a22:	f7fa fbd5 	bl	80001d0 <__aeabi_dsub>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fa fd19 	bl	800046c <__aeabi_i2d>
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	4b5c      	ldr	r3, [pc, #368]	; (8005bb0 <compensate_humidity+0x230>)
 8005a40:	f7fa fea8 	bl	8000794 <__aeabi_ddiv>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	7f1b      	ldrb	r3, [r3, #28]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fa fcfb 	bl	800044c <__aeabi_ui2d>
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <compensate_humidity+0x234>)
 8005a5c:	f7fa fe9a 	bl	8000794 <__aeabi_ddiv>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a6c:	f7fa fd68 	bl	8000540 <__aeabi_dmul>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4610      	mov	r0, r2
 8005a76:	4619      	mov	r1, r3
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	4b4e      	ldr	r3, [pc, #312]	; (8005bb8 <compensate_humidity+0x238>)
 8005a7e:	f7fa fba9 	bl	80001d4 <__adddf3>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fa fceb 	bl	800046c <__aeabi_i2d>
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <compensate_humidity+0x234>)
 8005a9c:	f7fa fe7a 	bl	8000794 <__aeabi_ddiv>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aac:	f7fa fd48 	bl	8000540 <__aeabi_dmul>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005abc:	f7fa fd40 	bl	8000540 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <compensate_humidity+0x238>)
 8005ace:	f7fa fb81 	bl	80001d4 <__adddf3>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8005ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005ae2:	f7fa fd2d 	bl	8000540 <__aeabi_dmul>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4614      	mov	r4, r2
 8005aec:	461d      	mov	r5, r3
 8005aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005af6:	f7fa fd23 	bl	8000540 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa fd1d 	bl	8000540 <__aeabi_dmul>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	7e1b      	ldrb	r3, [r3, #24]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fa fc9a 	bl	800044c <__aeabi_ui2d>
 8005b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b1c:	f7fa fd10 	bl	8000540 <__aeabi_dmul>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <compensate_humidity+0x23c>)
 8005b2e:	f7fa fe31 	bl	8000794 <__aeabi_ddiv>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	491f      	ldr	r1, [pc, #124]	; (8005bb8 <compensate_humidity+0x238>)
 8005b3c:	f7fa fb48 	bl	80001d0 <__aeabi_dsub>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b48:	f7fa fcfa 	bl	8000540 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8005b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b5c:	f7fa ff80 	bl	8000a60 <__aeabi_dcmpgt>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8005b66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005b6e:	e00c      	b.n	8005b8a <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8005b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b78:	f7fa ff54 	bl	8000a24 <__aeabi_dcmplt>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <compensate_humidity+0x20a>
		humidity = humidity_min;
 8005b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b86:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8005b8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b92:	eeb0 0a47 	vmov.f32	s0, s14
 8005b96:	eef0 0a67 	vmov.f32	s1, s15
 8005b9a:	3750      	adds	r7, #80	; 0x50
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba0:	40590000 	.word	0x40590000
 8005ba4:	40f2c000 	.word	0x40f2c000
 8005ba8:	40500000 	.word	0x40500000
 8005bac:	40d00000 	.word	0x40d00000
 8005bb0:	40f00000 	.word	0x40f00000
 8005bb4:	41900000 	.word	0x41900000
 8005bb8:	3ff00000 	.word	0x3ff00000
 8005bbc:	41200000 	.word	0x41200000

08005bc0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8005bc8:	2388      	movs	r3, #136	; 0x88
 8005bca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	f107 0310 	add.w	r3, r7, #16
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	611a      	str	r2, [r3, #16]
 8005be2:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8005be4:	f107 010c 	add.w	r1, r7, #12
 8005be8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	221a      	movs	r2, #26
 8005bf0:	f7fe ffbf 	bl	8004b72 <bme280_get_regs>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8005bfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11d      	bne.n	8005c3e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f84a 	bl	8005ca2 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8005c0e:	23e1      	movs	r3, #225	; 0xe1
 8005c10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8005c14:	f107 010c 	add.w	r1, r7, #12
 8005c18:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2207      	movs	r2, #7
 8005c20:	f7fe ffa7 	bl	8004b72 <bme280_get_regs>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8005c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f8e1 	bl	8005e00 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8005c3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3728      	adds	r7, #40	; 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8005c58:	2301      	movs	r3, #1
 8005c5a:	75fb      	strb	r3, [r7, #23]
 8005c5c:	e016      	b.n	8005c8c <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	441a      	add	r2, r3
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	441a      	add	r2, r3
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	440b      	add	r3, r1
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
 8005c8c:	7dfa      	ldrb	r2, [r7, #23]
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d3e4      	bcc.n	8005c5e <interleave_reg_addr+0x14>
	}
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	3310      	adds	r3, #16
 8005cb0:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	b21a      	sxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3303      	adds	r3, #3
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	b21a      	sxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3302      	adds	r3, #2
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	b21b      	sxth	r3, r3
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	b21a      	sxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3305      	adds	r3, #5
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	b21a      	sxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b21b      	sxth	r3, r3
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3307      	adds	r3, #7
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	b21a      	sxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3306      	adds	r3, #6
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	b21b      	sxth	r3, r3
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3309      	adds	r3, #9
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b21a      	sxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b21a      	sxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	330b      	adds	r3, #11
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	b21a      	sxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	330a      	adds	r3, #10
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	b21a      	sxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	330d      	adds	r3, #13
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b21a      	sxth	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b21a      	sxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	330f      	adds	r3, #15
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	b21a      	sxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	330e      	adds	r3, #14
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b21b      	sxth	r3, r3
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3311      	adds	r3, #17
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	b21a      	sxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3310      	adds	r3, #16
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b21b      	sxth	r3, r3
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b21a      	sxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3313      	adds	r3, #19
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	b21a      	sxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3312      	adds	r3, #18
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b21a      	sxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3315      	adds	r3, #21
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	b21a      	sxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b21b      	sxth	r3, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b21a      	sxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3317      	adds	r3, #23
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	b21a      	sxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3316      	adds	r3, #22
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b21b      	sxth	r3, r3
 8005de4:	4313      	orrs	r3, r2
 8005de6:	b21a      	sxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7e5a      	ldrb	r2, [r3, #25]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	761a      	strb	r2, [r3, #24]

}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3301      	adds	r3, #1
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	b21a      	sxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b21a      	sxth	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	789a      	ldrb	r2, [r3, #2]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3303      	adds	r3, #3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8005e4e:	8a7a      	ldrh	r2, [r7, #18]
 8005e50:	8a3b      	ldrh	r3, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b21a      	sxth	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3305      	adds	r3, #5
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8005e76:	89fa      	ldrh	r2, [r7, #14]
 8005e78:	89bb      	ldrh	r3, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3306      	adds	r3, #6
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b25a      	sxtb	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	460a      	mov	r2, r1
 8005ea6:	71fb      	strb	r3, [r7, #7]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8005eb0:	79fa      	ldrb	r2, [r7, #7]
 8005eb2:	79bb      	ldrb	r3, [r7, #6]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
 8005ec0:	e001      	b.n	8005ec6 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <null_ptr_check+0x26>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <null_ptr_check+0x26>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <null_ptr_check+0x26>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8005efa:	23ff      	movs	r3, #255	; 0xff
 8005efc:	73fb      	strb	r3, [r7, #15]
 8005efe:	e001      	b.n	8005f04 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	603a      	str	r2, [r7, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
 8005f22:	460b      	mov	r3, r1
 8005f24:	71bb      	strb	r3, [r7, #6]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	b299      	uxth	r1, r3
 8005f32:	1dba      	adds	r2, r7, #6
 8005f34:	230a      	movs	r3, #10
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4811      	ldr	r0, [pc, #68]	; (8005f80 <user_i2c_read+0x6c>)
 8005f3c:	f003 fcaa 	bl	8009894 <HAL_I2C_Master_Transmit>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <user_i2c_read+0x38>
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f4a:	e014      	b.n	8005f76 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	b299      	uxth	r1, r3
 8005f5a:	88bb      	ldrh	r3, [r7, #4]
 8005f5c:	220a      	movs	r2, #10
 8005f5e:	9200      	str	r2, [sp, #0]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	4807      	ldr	r0, [pc, #28]	; (8005f80 <user_i2c_read+0x6c>)
 8005f64:	f003 fd94 	bl	8009a90 <HAL_I2C_Master_Receive>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <user_i2c_read+0x60>
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f72:	e000      	b.n	8005f76 <user_i2c_read+0x62>

  return 0;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200002d4 	.word	0x200002d4

08005f84 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 faa3 	bl	80074d8 <HAL_Delay>
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	603a      	str	r2, [r7, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
 8005faa:	460b      	mov	r3, r1
 8005fac:	71bb      	strb	r3, [r7, #6]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f00a ff76 	bl	8010ea8 <malloc>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005fc0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	88ba      	ldrh	r2, [r7, #4]
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00a ff79 	bl	8010ec8 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	88bb      	ldrh	r3, [r7, #4]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fe8:	9200      	str	r2, [sp, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4808      	ldr	r0, [pc, #32]	; (8006010 <user_i2c_write+0x74>)
 8005fee:	f003 fc51 	bl	8009894 <HAL_I2C_Master_Transmit>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <user_i2c_write+0x62>
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ffc:	e003      	b.n	8006006 <user_i2c_write+0x6a>

  free(buf);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f00a ff5a 	bl	8010eb8 <free>
  return 0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200002d4 	.word	0x200002d4

08006014 <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
	detect_bme280();
 8006018:	f000 f938 	bl	800628c <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 800601c:	4b12      	ldr	r3, [pc, #72]	; (8006068 <detect_all_sensors_and_init+0x54>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 8006024:	f000 f8b0 	bl	8006188 <init_bme280>
	}

	detect_mpu6050();
 8006028:	f000 f966 	bl	80062f8 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 800602c:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <detect_all_sensors_and_init+0x54>)
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 8006034:	f000 f862 	bl	80060fc <init_mpu6050>
	}

	denect_hmc5883l();								// Don't work
 8006038:	f000 f9e0 	bl	80063fc <denect_hmc5883l>

	detect_ms5611();
 800603c:	f000 fa0c 	bl	8006458 <detect_ms5611>
	if(i2c_device.MS5611_ready_status == true)
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <detect_all_sensors_and_init+0x54>)
 8006042:	78db      	ldrb	r3, [r3, #3]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <detect_all_sensors_and_init+0x38>
	{
		init_ms5611();
 8006048:	f000 f83a 	bl	80060c0 <init_ms5611>
	}

	detect_apds9960();
 800604c:	f000 fa32 	bl	80064b4 <detect_apds9960>
	if(i2c_device.APDS9960_ready_status == true)
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <detect_all_sensors_and_init+0x54>)
 8006052:	791b      	ldrb	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <detect_all_sensors_and_init+0x48>
	{
		init_apds9960();
 8006058:	f000 f812 	bl	8006080 <init_apds9960>
	}


	detect_oled_screen();
 800605c:	f000 fa60 	bl	8006520 <detect_oled_screen>
	detect_ds3231();
 8006060:	f000 fa84 	bl	800656c <detect_ds3231>

}
 8006064:	bf00      	nop
 8006066:	bd80      	pop	{r7, pc}
 8006068:	200006b8 	.word	0x200006b8

0800606c <measure_sensors>:
//---------------------------------------------------------------------------------------
// Measure one time
void measure_sensors(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
	bme280_measure();
 8006070:	f000 f8d4 	bl	800621c <bme280_measure>
	mpu6050_measure();
 8006074:	f000 f852 	bl	800611c <mpu6050_measure>
	ms5611_measure();
 8006078:	f000 f82e 	bl	80060d8 <ms5611_measure>


//	apds9960();
}
 800607c:	bf00      	nop
 800607e:	bd80      	pop	{r7, pc}

08006080 <init_apds9960>:

//----------------------------------------------------------------------------------------
void init_apds9960(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////////////////////////////////////////////
	if(apds9960init() != true)
 8006086:	f7fd fc71 	bl	800396c <apds9960init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <init_apds9960+0x16>
	{
		// Init error !!
		while(1)
		{
			int j = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	607b      	str	r3, [r7, #4]
		{
 8006094:	e7fc      	b.n	8006090 <init_apds9960+0x10>
		}
	}
	else
	{
		if(enableGestureSensor(true) != true)
 8006096:	2001      	movs	r0, #1
 8006098:	f7fe f868 	bl	800416c <enableGestureSensor>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d002      	beq.n	80060a8 <init_apds9960+0x28>
		{
			// Init error !!
			while(1)
			{
				int j = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]
			{
 80060a6:	e7fc      	b.n	80060a2 <init_apds9960+0x22>
		}
	}

    while(1)
    {
    	int gesture = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
    	HAL_Delay(100);
 80060ac:	2064      	movs	r0, #100	; 0x64
 80060ae:	f001 fa13 	bl	80074d8 <HAL_Delay>
    	gesture = apds9960ReadSensor();
 80060b2:	f7fe fd01 	bl	8004ab8 <apds9960ReadSensor>
 80060b6:	60f8      	str	r0, [r7, #12]

    	detect_apds9960();
 80060b8:	f000 f9fc 	bl	80064b4 <detect_apds9960>
    {
 80060bc:	e7f4      	b.n	80060a8 <init_apds9960+0x28>
	...

080060c0 <init_ms5611>:
{

}
//----------------------------------------------------------------------------------------
int8_t init_ms5611(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	ms5611_set_i2c(&hi2c2);
 80060c4:	4803      	ldr	r0, [pc, #12]	; (80060d4 <init_ms5611+0x14>)
 80060c6:	f000 fe19 	bl	8006cfc <ms5611_set_i2c>
	ms5611_init();
 80060ca:	f000 fe6b 	bl	8006da4 <ms5611_init>
}
 80060ce:	bf00      	nop
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000380 	.word	0x20000380

080060d8 <ms5611_measure>:
//----------------------------------------------------------------------------------------
void ms5611_measure(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
	ms5611_update();
 80060de:	f000 feff 	bl	8006ee0 <ms5611_update>

	double temp = ms5611_get_temperature();
 80060e2:	f000 ff05 	bl	8006ef0 <ms5611_get_temperature>
 80060e6:	ed87 0b02 	vstr	d0, [r7, #8]
	double pressure = ms5611_get_pressure();
 80060ea:	f000 ff7d 	bl	8006fe8 <ms5611_get_pressure>
 80060ee:	ed87 0b00 	vstr	d0, [r7]
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 8006100:	4805      	ldr	r0, [pc, #20]	; (8006118 <init_mpu6050+0x1c>)
 8006102:	f000 fa61 	bl	80065c8 <MPU6050_Init>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <init_mpu6050+0x14>
	{
		return 0;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 8006110:	2301      	movs	r3, #1
	}
}
 8006112:	4618      	mov	r0, r3
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000380 	.word	0x20000380

0800611c <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 8006120:	4916      	ldr	r1, [pc, #88]	; (800617c <mpu6050_measure+0x60>)
 8006122:	4817      	ldr	r0, [pc, #92]	; (8006180 <mpu6050_measure+0x64>)
 8006124:	f000 faa8 	bl	8006678 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 8006128:	4b14      	ldr	r3, [pc, #80]	; (800617c <mpu6050_measure+0x60>)
 800612a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800612e:	4915      	ldr	r1, [pc, #84]	; (8006184 <mpu6050_measure+0x68>)
 8006130:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 8006134:	4b11      	ldr	r3, [pc, #68]	; (800617c <mpu6050_measure+0x60>)
 8006136:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800613a:	4912      	ldr	r1, [pc, #72]	; (8006184 <mpu6050_measure+0x68>)
 800613c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <mpu6050_measure+0x60>)
 8006142:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006146:	490f      	ldr	r1, [pc, #60]	; (8006184 <mpu6050_measure+0x68>)
 8006148:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <mpu6050_measure+0x60>)
 800614e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006152:	490c      	ldr	r1, [pc, #48]	; (8006184 <mpu6050_measure+0x68>)
 8006154:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 8006158:	4b08      	ldr	r3, [pc, #32]	; (800617c <mpu6050_measure+0x60>)
 800615a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800615e:	4909      	ldr	r1, [pc, #36]	; (8006184 <mpu6050_measure+0x68>)
 8006160:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <mpu6050_measure+0x60>)
 8006166:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800616a:	4906      	ldr	r1, [pc, #24]	; (8006184 <mpu6050_measure+0x68>)
 800616c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <mpu6050_measure+0x60>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4a03      	ldr	r2, [pc, #12]	; (8006184 <mpu6050_measure+0x68>)
 8006176:	6493      	str	r3, [r2, #72]	; 0x48
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000660 	.word	0x20000660
 8006180:	20000380 	.word	0x20000380
 8006184:	200006b8 	.word	0x200006b8

08006188 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <init_bme280+0x80>)
 800618e:	2276      	movs	r2, #118	; 0x76
 8006190:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <init_bme280+0x80>)
 8006194:	2201      	movs	r2, #1
 8006196:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <init_bme280+0x80>)
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <init_bme280+0x84>)
 800619c:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <init_bme280+0x80>)
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <init_bme280+0x88>)
 80061a2:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <init_bme280+0x80>)
 80061a6:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <init_bme280+0x8c>)
 80061a8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80061aa:	4817      	ldr	r0, [pc, #92]	; (8006208 <init_bme280+0x80>)
 80061ac:	f7fe fc96 	bl	8004adc <bme280_init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <init_bme280+0x90>)
 80061b6:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <init_bme280+0x80>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <init_bme280+0x80>)
 80061c2:	2205      	movs	r2, #5
 80061c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <init_bme280+0x80>)
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80061d0:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <init_bme280+0x80>)
 80061d2:	2204      	movs	r2, #4
 80061d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <init_bme280+0x80>)
 80061da:	200f      	movs	r0, #15
 80061dc:	f7fe fd70 	bl	8004cc0 <bme280_set_sensor_settings>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <init_bme280+0x90>)
 80061e6:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80061e8:	4907      	ldr	r1, [pc, #28]	; (8006208 <init_bme280+0x80>)
 80061ea:	2003      	movs	r0, #3
 80061ec:	f7fe fdbd 	bl	8004d6a <bme280_set_sensor_mode>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <init_bme280+0x90>)
 80061f6:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <init_bme280+0x80>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2028      	movs	r0, #40	; 0x28
 80061fe:	4798      	blx	r3
}
 8006200:	bf00      	nop
 8006202:	4618      	mov	r0, r3
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000600 	.word	0x20000600
 800620c:	08005f15 	.word	0x08005f15
 8006210:	08005f9d 	.word	0x08005f9d
 8006214:	08005f85 	.word	0x08005f85
 8006218:	20000640 	.word	0x20000640

0800621c <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <bme280_measure+0x60>)
 8006222:	4917      	ldr	r1, [pc, #92]	; (8006280 <bme280_measure+0x64>)
 8006224:	2007      	movs	r0, #7
 8006226:	f7fe fe1c 	bl	8004e62 <bme280_get_sensor_data>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <bme280_measure+0x68>)
 8006230:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <bme280_measure+0x68>)
 8006234:	f993 3000 	ldrsb.w	r3, [r3]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11d      	bne.n	8006278 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <bme280_measure+0x64>)
 800623e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006242:	4610      	mov	r0, r2
 8006244:	4619      	mov	r1, r3
 8006246:	f7fa fc53 	bl	8000af0 <__aeabi_d2f>
 800624a:	4603      	mov	r3, r0
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <bme280_measure+0x6c>)
 800624e:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <bme280_measure+0x64>)
 8006252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	f7fa fc49 	bl	8000af0 <__aeabi_d2f>
 800625e:	4603      	mov	r3, r0
 8006260:	4a09      	ldr	r2, [pc, #36]	; (8006288 <bme280_measure+0x6c>)
 8006262:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <bme280_measure+0x64>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	f7fa fc3f 	bl	8000af0 <__aeabi_d2f>
 8006272:	4603      	mov	r3, r0
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <bme280_measure+0x6c>)
 8006276:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8006278:	bf00      	nop
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000600 	.word	0x20000600
 8006280:	20000648 	.word	0x20000648
 8006284:	20000640 	.word	0x20000640
 8006288:	200006b8 	.word	0x200006b8

0800628c <detect_bme280>:

// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
// Temperature, humidity and pressure sensor
void detect_bme280(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8006292:	2300      	movs	r3, #0
 8006294:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8006296:	2376      	movs	r3, #118	; 0x76
 8006298:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 800629a:	23d0      	movs	r3, #208	; 0xd0
 800629c:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 800629e:	2360      	movs	r3, #96	; 0x60
 80062a0:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 80062a2:	2300      	movs	r3, #0
 80062a4:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80062a6:	88bb      	ldrh	r3, [r7, #4]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b299      	uxth	r1, r3
 80062ac:	887a      	ldrh	r2, [r7, #2]
 80062ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	2301      	movs	r3, #1
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	463b      	mov	r3, r7
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2301      	movs	r3, #1
 80062be:	480c      	ldr	r0, [pc, #48]	; (80062f0 <detect_bme280+0x64>)
 80062c0:	f003 ff06 	bl	800a0d0 <HAL_I2C_Mem_Read>
 80062c4:	4603      	mov	r3, r0
 80062c6:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 80062c8:	783b      	ldrb	r3, [r7, #0]
 80062ca:	787a      	ldrb	r2, [r7, #1]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d106      	bne.n	80062de <detect_bme280+0x52>
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <detect_bme280+0x68>)
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e003      	b.n	80062e6 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <detect_bme280+0x68>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
	}
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200002d4 	.word	0x200002d4
 80062f4:	200006b8 	.word	0x200006b8

080062f8 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
// 1. IMU Module. Measure Acceleration X, Y, Z and Gyroscope X, Y, Z.
// 2. Turn on ability work with  hmc5883l ( Magnetometer  sensor ).
void detect_mpu6050(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8006302:	23d0      	movs	r3, #208	; 0xd0
 8006304:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8006306:	2375      	movs	r3, #117	; 0x75
 8006308:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 800630a:	2368      	movs	r3, #104	; 0x68
 800630c:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8006312:	897a      	ldrh	r2, [r7, #10]
 8006314:	89b9      	ldrh	r1, [r7, #12]
 8006316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800631a:	9302      	str	r3, [sp, #8]
 800631c:	2301      	movs	r3, #1
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2301      	movs	r3, #1
 8006328:	4832      	ldr	r0, [pc, #200]	; (80063f4 <detect_mpu6050+0xfc>)
 800632a:	f003 fed1 	bl	800a0d0 <HAL_I2C_Mem_Read>
 800632e:	4603      	mov	r3, r0
 8006330:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8006332:	7a3b      	ldrb	r3, [r7, #8]
 8006334:	7a7a      	ldrb	r2, [r7, #9]
 8006336:	429a      	cmp	r2, r3
 8006338:	d106      	bne.n	8006348 <detect_mpu6050+0x50>
 800633a:	89fb      	ldrh	r3, [r7, #14]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <detect_mpu6050+0x100>)
 8006342:	2201      	movs	r2, #1
 8006344:	705a      	strb	r2, [r3, #1]
 8006346:	e002      	b.n	800634e <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8006348:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <detect_mpu6050+0x100>)
 800634a:	2200      	movs	r2, #0
 800634c:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 800634e:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <detect_mpu6050+0x100>)
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d04a      	beq.n	80063ec <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8006356:	2300      	movs	r3, #0
 8006358:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 800635a:	89b9      	ldrh	r1, [r7, #12]
 800635c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006360:	9302      	str	r3, [sp, #8]
 8006362:	2301      	movs	r3, #1
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	1dfb      	adds	r3, r7, #7
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2301      	movs	r3, #1
 800636c:	226a      	movs	r2, #106	; 0x6a
 800636e:	4821      	ldr	r0, [pc, #132]	; (80063f4 <detect_mpu6050+0xfc>)
 8006370:	f003 fdb4 	bl	8009edc <HAL_I2C_Mem_Write>
 8006374:	4603      	mov	r3, r0
 8006376:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8006378:	2302      	movs	r3, #2
 800637a:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 800637c:	89b9      	ldrh	r1, [r7, #12]
 800637e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006382:	9302      	str	r3, [sp, #8]
 8006384:	2301      	movs	r3, #1
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	1dfb      	adds	r3, r7, #7
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2301      	movs	r3, #1
 800638e:	2237      	movs	r2, #55	; 0x37
 8006390:	4818      	ldr	r0, [pc, #96]	; (80063f4 <detect_mpu6050+0xfc>)
 8006392:	f003 fda3 	bl	8009edc <HAL_I2C_Mem_Write>
 8006396:	4603      	mov	r3, r0
 8006398:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 800639e:	89b9      	ldrh	r1, [r7, #12]
 80063a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	2301      	movs	r3, #1
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2301      	movs	r3, #1
 80063b2:	226a      	movs	r2, #106	; 0x6a
 80063b4:	480f      	ldr	r0, [pc, #60]	; (80063f4 <detect_mpu6050+0xfc>)
 80063b6:	f003 fe8b 	bl	800a0d0 <HAL_I2C_Mem_Read>
 80063ba:	4603      	mov	r3, r0
 80063bc:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 80063c2:	89b9      	ldrh	r1, [r7, #12]
 80063c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063c8:	9302      	str	r3, [sp, #8]
 80063ca:	2301      	movs	r3, #1
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f107 0308 	add.w	r3, r7, #8
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2301      	movs	r3, #1
 80063d6:	2237      	movs	r2, #55	; 0x37
 80063d8:	4806      	ldr	r0, [pc, #24]	; (80063f4 <detect_mpu6050+0xfc>)
 80063da:	f003 fe79 	bl	800a0d0 <HAL_I2C_Mem_Read>
 80063de:	4603      	mov	r3, r0
 80063e0:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 80063e2:	89fb      	ldrh	r3, [r7, #14]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80063e8:	f000 f808 	bl	80063fc <denect_hmc5883l>
		}
	}
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000380 	.word	0x20000380
 80063f8:	200006b8 	.word	0x200006b8

080063fc <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8006406:	231e      	movs	r3, #30
 8006408:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 800640a:	230a      	movs	r3, #10
 800640c:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 8006412:	88bb      	ldrh	r3, [r7, #4]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	b299      	uxth	r1, r3
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800641e:	9302      	str	r3, [sp, #8]
 8006420:	2301      	movs	r3, #1
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	1c7b      	adds	r3, r7, #1
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	2301      	movs	r3, #1
 800642a:	4809      	ldr	r0, [pc, #36]	; (8006450 <denect_hmc5883l+0x54>)
 800642c:	f003 fe50 	bl	800a0d0 <HAL_I2C_Mem_Read>
 8006430:	4603      	mov	r3, r0
 8006432:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <denect_hmc5883l+0x58>)
 800643c:	2201      	movs	r2, #1
 800643e:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8006440:	e002      	b.n	8006448 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <denect_hmc5883l+0x58>)
 8006444:	2200      	movs	r2, #0
 8006446:	709a      	strb	r2, [r3, #2]
}
 8006448:	bf00      	nop
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000380 	.word	0x20000380
 8006454:	200006b8 	.word	0x200006b8

08006458 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8006462:	2377      	movs	r3, #119	; 0x77
 8006464:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8006466:	2300      	movs	r3, #0
 8006468:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800646e:	88bb      	ldrh	r3, [r7, #4]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	b299      	uxth	r1, r3
 8006474:	887a      	ldrh	r2, [r7, #2]
 8006476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	2301      	movs	r3, #1
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	1c7b      	adds	r3, r7, #1
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2301      	movs	r3, #1
 8006486:	4809      	ldr	r0, [pc, #36]	; (80064ac <detect_ms5611+0x54>)
 8006488:	f003 fe22 	bl	800a0d0 <HAL_I2C_Mem_Read>
 800648c:	4603      	mov	r3, r0
 800648e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <detect_ms5611+0x58>)
 8006498:	2201      	movs	r2, #1
 800649a:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 800649c:	e002      	b.n	80064a4 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <detect_ms5611+0x58>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	70da      	strb	r2, [r3, #3]
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000380 	.word	0x20000380
 80064b0:	200006b8 	.word	0x200006b8

080064b4 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 80064be:	2339      	movs	r3, #57	; 0x39
 80064c0:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 80064c2:	2392      	movs	r3, #146	; 0x92
 80064c4:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 80064c6:	23a8      	movs	r3, #168	; 0xa8
 80064c8:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80064ce:	88bb      	ldrh	r3, [r7, #4]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	b299      	uxth	r1, r3
 80064d4:	887a      	ldrh	r2, [r7, #2]
 80064d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	2301      	movs	r3, #1
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	463b      	mov	r3, r7
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2301      	movs	r3, #1
 80064e6:	480c      	ldr	r0, [pc, #48]	; (8006518 <detect_apds9960+0x64>)
 80064e8:	f003 fdf2 	bl	800a0d0 <HAL_I2C_Mem_Read>
 80064ec:	4603      	mov	r3, r0
 80064ee:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80064f0:	783b      	ldrb	r3, [r7, #0]
 80064f2:	787a      	ldrb	r2, [r7, #1]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d106      	bne.n	8006506 <detect_apds9960+0x52>
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <detect_apds9960+0x68>)
 8006500:	2201      	movs	r2, #1
 8006502:	711a      	strb	r2, [r3, #4]
 8006504:	e003      	b.n	800650e <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <detect_apds9960+0x68>)
 8006508:	2200      	movs	r2, #0
 800650a:	711a      	strb	r2, [r3, #4]
	}
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000380 	.word	0x20000380
 800651c:	200006b8 	.word	0x200006b8

08006520 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 800652a:	2300      	movs	r3, #0
 800652c:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 800652e:	23ae      	movs	r3, #174	; 0xae
 8006530:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 8006532:	1d3a      	adds	r2, r7, #4
 8006534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	2302      	movs	r3, #2
 800653c:	2178      	movs	r1, #120	; 0x78
 800653e:	4809      	ldr	r0, [pc, #36]	; (8006564 <detect_oled_screen+0x44>)
 8006540:	f003 f9a8 	bl	8009894 <HAL_I2C_Master_Transmit>
 8006544:	4603      	mov	r3, r0
 8006546:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <detect_oled_screen+0x48>)
 8006550:	2201      	movs	r2, #1
 8006552:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8006554:	e002      	b.n	800655c <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <detect_oled_screen+0x48>)
 8006558:	2200      	movs	r2, #0
 800655a:	715a      	strb	r2, [r3, #5]
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200002d4 	.word	0x200002d4
 8006568:	200006b8 	.word	0x200006b8

0800656c <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 8006576:	2368      	movs	r3, #104	; 0x68
 8006578:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 800657a:	2300      	movs	r3, #0
 800657c:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8006582:	88bb      	ldrh	r3, [r7, #4]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	b299      	uxth	r1, r3
 8006588:	887a      	ldrh	r2, [r7, #2]
 800658a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800658e:	9302      	str	r3, [sp, #8]
 8006590:	2301      	movs	r3, #1
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	1c7b      	adds	r3, r7, #1
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2301      	movs	r3, #1
 800659a:	4809      	ldr	r0, [pc, #36]	; (80065c0 <detect_ds3231+0x54>)
 800659c:	f003 fd98 	bl	800a0d0 <HAL_I2C_Mem_Read>
 80065a0:	4603      	mov	r3, r0
 80065a2:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <detect_ds3231+0x58>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 80065b0:	e002      	b.n	80065b8 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 80065b2:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <detect_ds3231+0x58>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	719a      	strb	r2, [r3, #6]
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200002d4 	.word	0x200002d4
 80065c4:	200006b8 	.word	0x200006b8

080065c8 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af04      	add	r7, sp, #16
 80065ce:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80065d0:	2364      	movs	r3, #100	; 0x64
 80065d2:	9302      	str	r3, [sp, #8]
 80065d4:	2301      	movs	r3, #1
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	f107 030f 	add.w	r3, r7, #15
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	2301      	movs	r3, #1
 80065e0:	2275      	movs	r2, #117	; 0x75
 80065e2:	21d0      	movs	r1, #208	; 0xd0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f003 fd73 	bl	800a0d0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b68      	cmp	r3, #104	; 0x68
 80065ee:	d13d      	bne.n	800666c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80065f4:	2364      	movs	r3, #100	; 0x64
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	2301      	movs	r3, #1
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	f107 030e 	add.w	r3, r7, #14
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2301      	movs	r3, #1
 8006604:	226b      	movs	r2, #107	; 0x6b
 8006606:	21d0      	movs	r1, #208	; 0xd0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f003 fc67 	bl	8009edc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800660e:	2307      	movs	r3, #7
 8006610:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8006612:	2364      	movs	r3, #100	; 0x64
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	2301      	movs	r3, #1
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	f107 030e 	add.w	r3, r7, #14
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2301      	movs	r3, #1
 8006622:	2219      	movs	r2, #25
 8006624:	21d0      	movs	r1, #208	; 0xd0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 fc58 	bl	8009edc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800662c:	2300      	movs	r3, #0
 800662e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006630:	2364      	movs	r3, #100	; 0x64
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	2301      	movs	r3, #1
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	f107 030e 	add.w	r3, r7, #14
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2301      	movs	r3, #1
 8006640:	221c      	movs	r2, #28
 8006642:	21d0      	movs	r1, #208	; 0xd0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f003 fc49 	bl	8009edc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800664a:	2300      	movs	r3, #0
 800664c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800664e:	2364      	movs	r3, #100	; 0x64
 8006650:	9302      	str	r3, [sp, #8]
 8006652:	2301      	movs	r3, #1
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	f107 030e 	add.w	r3, r7, #14
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2301      	movs	r3, #1
 800665e:	221b      	movs	r2, #27
 8006660:	21d0      	movs	r1, #208	; 0xd0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f003 fc3a 	bl	8009edc <HAL_I2C_Mem_Write>
        return 0;
 8006668:	2300      	movs	r3, #0
 800666a:	e000      	b.n	800666e <MPU6050_Init+0xa6>
    }
    return 1;
 800666c:	2301      	movs	r3, #1
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8006678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800667c:	b094      	sub	sp, #80	; 0x50
 800667e:	af04      	add	r7, sp, #16
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8006684:	2364      	movs	r3, #100	; 0x64
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	230e      	movs	r3, #14
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2301      	movs	r3, #1
 8006694:	223b      	movs	r2, #59	; 0x3b
 8006696:	21d0      	movs	r1, #208	; 0xd0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f003 fd19 	bl	800a0d0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800669e:	7a3b      	ldrb	r3, [r7, #8]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	b21a      	sxth	r2, r3
 80066a4:	7a7b      	ldrb	r3, [r7, #9]
 80066a6:	b21b      	sxth	r3, r3
 80066a8:	4313      	orrs	r3, r2
 80066aa:	b21a      	sxth	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80066b0:	7abb      	ldrb	r3, [r7, #10]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	b21a      	sxth	r2, r3
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	b21b      	sxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b21a      	sxth	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80066c2:	7b3b      	ldrb	r3, [r7, #12]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	b21a      	sxth	r2, r3
 80066c8:	7b7b      	ldrb	r3, [r7, #13]
 80066ca:	b21b      	sxth	r3, r3
 80066cc:	4313      	orrs	r3, r2
 80066ce:	b21a      	sxth	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	b21a      	sxth	r2, r3
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	b21b      	sxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80066e2:	7c3b      	ldrb	r3, [r7, #16]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	b21a      	sxth	r2, r3
 80066e8:	7c7b      	ldrb	r3, [r7, #17]
 80066ea:	b21b      	sxth	r3, r3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	b21a      	sxth	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80066f4:	7cbb      	ldrb	r3, [r7, #18]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	b21a      	sxth	r2, r3
 80066fa:	7cfb      	ldrb	r3, [r7, #19]
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b21a      	sxth	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8006706:	7d3b      	ldrb	r3, [r7, #20]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	b21a      	sxth	r2, r3
 800670c:	7d7b      	ldrb	r3, [r7, #21]
 800670e:	b21b      	sxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	b21a      	sxth	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800671e:	4618      	mov	r0, r3
 8006720:	f7f9 fea4 	bl	800046c <__aeabi_i2d>
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	4bbd      	ldr	r3, [pc, #756]	; (8006a20 <MPU6050_Read_All+0x3a8>)
 800672a:	f7fa f833 	bl	8000794 <__aeabi_ddiv>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800673e:	4618      	mov	r0, r3
 8006740:	f7f9 fe94 	bl	800046c <__aeabi_i2d>
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	4bb5      	ldr	r3, [pc, #724]	; (8006a20 <MPU6050_Read_All+0x3a8>)
 800674a:	f7fa f823 	bl	8000794 <__aeabi_ddiv>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	f7f9 fe84 	bl	800046c <__aeabi_i2d>
 8006764:	a3a8      	add	r3, pc, #672	; (adr r3, 8006a08 <MPU6050_Read_All+0x390>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7fa f813 	bl	8000794 <__aeabi_ddiv>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8006778:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006784:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8006a24 <MPU6050_Read_All+0x3ac>
 8006788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800678c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006a28 <MPU6050_Read_All+0x3b0>
 8006790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7f9 fe63 	bl	800046c <__aeabi_i2d>
 80067a6:	a39a      	add	r3, pc, #616	; (adr r3, 8006a10 <MPU6050_Read_All+0x398>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 fff2 	bl	8000794 <__aeabi_ddiv>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7f9 fe53 	bl	800046c <__aeabi_i2d>
 80067c6:	a392      	add	r3, pc, #584	; (adr r3, 8006a10 <MPU6050_Read_All+0x398>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 ffe2 	bl	8000794 <__aeabi_ddiv>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fe43 	bl	800046c <__aeabi_i2d>
 80067e6:	a38a      	add	r3, pc, #552	; (adr r3, 8006a10 <MPU6050_Read_All+0x398>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 ffd2 	bl	8000794 <__aeabi_ddiv>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80067fa:	f000 fe61 	bl	80074c0 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b8a      	ldr	r3, [pc, #552]	; (8006a2c <MPU6050_Read_All+0x3b4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fe20 	bl	800044c <__aeabi_ui2d>
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	4b87      	ldr	r3, [pc, #540]	; (8006a30 <MPU6050_Read_All+0x3b8>)
 8006812:	f7f9 ffbf 	bl	8000794 <__aeabi_ddiv>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800681e:	f000 fe4f 	bl	80074c0 <HAL_GetTick>
 8006822:	4603      	mov	r3, r0
 8006824:	4a81      	ldr	r2, [pc, #516]	; (8006a2c <MPU6050_Read_All+0x3b4>)
 8006826:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682e:	461a      	mov	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006836:	fb03 f202 	mul.w	r2, r3, r2
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006840:	4619      	mov	r1, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006848:	fb03 f301 	mul.w	r3, r3, r1
 800684c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800684e:	4618      	mov	r0, r3
 8006850:	f7f9 fe0c 	bl	800046c <__aeabi_i2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	ec43 2b10 	vmov	d0, r2, r3
 800685c:	f00a fdd4 	bl	8011408 <sqrt>
 8006860:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006870:	f7fa f8ce 	bl	8000a10 <__aeabi_dcmpeq>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11f      	bne.n	80068ba <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006880:	4618      	mov	r0, r3
 8006882:	f7f9 fdf3 	bl	800046c <__aeabi_i2d>
 8006886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800688a:	f7f9 ff83 	bl	8000794 <__aeabi_ddiv>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	ec43 2b17 	vmov	d7, r2, r3
 8006896:	eeb0 0a47 	vmov.f32	s0, s14
 800689a:	eef0 0a67 	vmov.f32	s1, s15
 800689e:	f00a fc07 	bl	80110b0 <atan>
 80068a2:	ec51 0b10 	vmov	r0, r1, d0
 80068a6:	a35c      	add	r3, pc, #368	; (adr r3, 8006a18 <MPU6050_Read_All+0x3a0>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fe48 	bl	8000540 <__aeabi_dmul>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80068b8:	e005      	b.n	80068c6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068cc:	425b      	negs	r3, r3
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7f9 fdcc 	bl	800046c <__aeabi_i2d>
 80068d4:	4682      	mov	sl, r0
 80068d6:	468b      	mov	fp, r1
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7f9 fdc4 	bl	800046c <__aeabi_i2d>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	ec43 2b11 	vmov	d1, r2, r3
 80068ec:	ec4b ab10 	vmov	d0, sl, fp
 80068f0:	f00a fd87 	bl	8011402 <atan2>
 80068f4:	ec51 0b10 	vmov	r0, r1, d0
 80068f8:	a347      	add	r3, pc, #284	; (adr r3, 8006a18 <MPU6050_Read_All+0x3a0>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fe1f 	bl	8000540 <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	4b49      	ldr	r3, [pc, #292]	; (8006a34 <MPU6050_Read_All+0x3bc>)
 8006910:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006914:	f7fa f886 	bl	8000a24 <__aeabi_dcmplt>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <MPU6050_Read_All+0x2bc>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	4b43      	ldr	r3, [pc, #268]	; (8006a38 <MPU6050_Read_All+0x3c0>)
 800692a:	f7fa f899 	bl	8000a60 <__aeabi_dcmpgt>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d114      	bne.n	800695e <MPU6050_Read_All+0x2e6>
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <MPU6050_Read_All+0x3c0>)
 800693a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800693e:	f7fa f88f 	bl	8000a60 <__aeabi_dcmpgt>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <MPU6050_Read_All+0x2fc>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <MPU6050_Read_All+0x3bc>)
 8006954:	f7fa f866 	bl	8000a24 <__aeabi_dcmplt>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800695e:	4937      	ldr	r1, [pc, #220]	; (8006a3c <MPU6050_Read_All+0x3c4>)
 8006960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006964:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800696e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8006972:	e014      	b.n	800699e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800697a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800697e:	eeb0 1a47 	vmov.f32	s2, s14
 8006982:	eef0 1a67 	vmov.f32	s3, s15
 8006986:	ed97 0b06 	vldr	d0, [r7, #24]
 800698a:	482c      	ldr	r0, [pc, #176]	; (8006a3c <MPU6050_Read_All+0x3c4>)
 800698c:	f000 f85a 	bl	8006a44 <Kalman_getAngle>
 8006990:	eeb0 7a40 	vmov.f32	s14, s0
 8006994:	eef0 7a60 	vmov.f32	s15, s1
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80069a4:	4690      	mov	r8, r2
 80069a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <MPU6050_Read_All+0x3c0>)
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7fa f854 	bl	8000a60 <__aeabi_dcmpgt>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80069c4:	4614      	mov	r4, r2
 80069c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80069d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80069da:	eeb0 1a47 	vmov.f32	s2, s14
 80069de:	eef0 1a67 	vmov.f32	s3, s15
 80069e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80069e6:	4816      	ldr	r0, [pc, #88]	; (8006a40 <MPU6050_Read_All+0x3c8>)
 80069e8:	f000 f82c 	bl	8006a44 <Kalman_getAngle>
 80069ec:	eeb0 7a40 	vmov.f32	s14, s0
 80069f0:	eef0 7a60 	vmov.f32	s15, s1
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80069fa:	bf00      	nop
 80069fc:	3740      	adds	r7, #64	; 0x40
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a04:	f3af 8000 	nop.w
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	40cc2900 	.word	0x40cc2900
 8006a10:	00000000 	.word	0x00000000
 8006a14:	40606000 	.word	0x40606000
 8006a18:	1a63c1f8 	.word	0x1a63c1f8
 8006a1c:	404ca5dc 	.word	0x404ca5dc
 8006a20:	40d00000 	.word	0x40d00000
 8006a24:	43aa0000 	.word	0x43aa0000
 8006a28:	42121eb8 	.word	0x42121eb8
 8006a2c:	2000071c 	.word	0x2000071c
 8006a30:	408f4000 	.word	0x408f4000
 8006a34:	c0568000 	.word	0xc0568000
 8006a38:	40568000 	.word	0x40568000
 8006a3c:	20000198 	.word	0x20000198
 8006a40:	20000150 	.word	0x20000150

08006a44 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8006a44:	b5b0      	push	{r4, r5, r7, lr}
 8006a46:	b096      	sub	sp, #88	; 0x58
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	61f8      	str	r0, [r7, #28]
 8006a4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8006a50:	ed87 1b02 	vstr	d1, [r7, #8]
 8006a54:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a62:	f7f9 fbb5 	bl	80001d0 <__aeabi_dsub>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a7c:	f7f9 fd60 	bl	8000540 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7f9 fba4 	bl	80001d4 <__adddf3>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	69f9      	ldr	r1, [r7, #28]
 8006a92:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa6:	f7f9 fd4b 	bl	8000540 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006ab8:	f7f9 fb8a 	bl	80001d0 <__aeabi_dsub>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006aca:	f7f9 fb81 	bl	80001d0 <__aeabi_dsub>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fb7a 	bl	80001d4 <__adddf3>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aec:	f7f9 fd28 	bl	8000540 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4620      	mov	r0, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	f7f9 fb6c 	bl	80001d4 <__adddf3>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b16:	f7f9 fd13 	bl	8000540 <__aeabi_dmul>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fb55 	bl	80001d0 <__aeabi_dsub>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	69f9      	ldr	r1, [r7, #28]
 8006b2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b40:	f7f9 fcfe 	bl	8000540 <__aeabi_dmul>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fb40 	bl	80001d0 <__aeabi_dsub>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	69f9      	ldr	r1, [r7, #28]
 8006b56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6a:	f7f9 fce9 	bl	8000540 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4620      	mov	r0, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7f9 fb2d 	bl	80001d4 <__adddf3>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	69f9      	ldr	r1, [r7, #28]
 8006b80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006b90:	f7f9 fb20 	bl	80001d4 <__adddf3>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006ba2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ba6:	f7f9 fdf5 	bl	8000794 <__aeabi_ddiv>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bbc:	f7f9 fdea 	bl	8000794 <__aeabi_ddiv>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bd2:	f7f9 fafd 	bl	80001d0 <__aeabi_dsub>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006be4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bec:	f7f9 fca8 	bl	8000540 <__aeabi_dmul>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 faec 	bl	80001d4 <__adddf3>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	69f9      	ldr	r1, [r7, #28]
 8006c02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c14:	f7f9 fc94 	bl	8000540 <__aeabi_dmul>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fad8 	bl	80001d4 <__adddf3>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006c34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006c3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006c48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c50:	f7f9 fc76 	bl	8000540 <__aeabi_dmul>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4620      	mov	r0, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	f7f9 fab8 	bl	80001d0 <__aeabi_dsub>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	69f9      	ldr	r1, [r7, #28]
 8006c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006c70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c78:	f7f9 fc62 	bl	8000540 <__aeabi_dmul>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4620      	mov	r0, r4
 8006c82:	4629      	mov	r1, r5
 8006c84:	f7f9 faa4 	bl	80001d0 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006c98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ca0:	f7f9 fc4e 	bl	8000540 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	4629      	mov	r1, r5
 8006cac:	f7f9 fa90 	bl	80001d0 <__aeabi_dsub>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	69f9      	ldr	r1, [r7, #28]
 8006cb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006cc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006cc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cc8:	f7f9 fc3a 	bl	8000540 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7f9 fa7c 	bl	80001d0 <__aeabi_dsub>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006ce8:	ec43 2b17 	vmov	d7, r2, r3
};
 8006cec:	eeb0 0a47 	vmov.f32	s0, s14
 8006cf0:	eef0 0a67 	vmov.f32	s1, s15
 8006cf4:	3758      	adds	r7, #88	; 0x58
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006cfc <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <ms5611_set_i2c+0x1c>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6013      	str	r3, [r2, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000718 	.word	0x20000718

08006d1c <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	4603      	mov	r3, r0
 8006d24:	603a      	str	r2, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	79bb      	ldrb	r3, [r7, #6]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d3c:	9102      	str	r1, [sp, #8]
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	2301      	movs	r3, #1
 8006d46:	21ee      	movs	r1, #238	; 0xee
 8006d48:	4804      	ldr	r0, [pc, #16]	; (8006d5c <ms5611_read_i2c+0x40>)
 8006d4a:	f003 f9c1 	bl	800a0d0 <HAL_I2C_Mem_Read>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000380 	.word	0x20000380

08006d60 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af04      	add	r7, sp, #16
 8006d66:	4603      	mov	r3, r0
 8006d68:	603a      	str	r2, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	79bb      	ldrb	r3, [r7, #6]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d80:	9102      	str	r1, [sp, #8]
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	21ee      	movs	r1, #238	; 0xee
 8006d8c:	4804      	ldr	r0, [pc, #16]	; (8006da0 <ms5611_write_i2c+0x40>)
 8006d8e:	f003 f99f 	bl	800a0d0 <HAL_I2C_Mem_Read>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]

}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000380 	.word	0x20000380

08006da4 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	e01c      	b.n	8006dea <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b5e      	subs	r3, #94	; 0x5e
 8006dba:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ffa8 	bl	8006d1c <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8006dcc:	783b      	ldrb	r3, [r7, #0]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	b21a      	sxth	r2, r3
 8006dd2:	787b      	ldrb	r3, [r7, #1]
 8006dd4:	b21b      	sxth	r3, r3
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	b299      	uxth	r1, r3
 8006ddc:	4a07      	ldr	r2, [pc, #28]	; (8006dfc <ms5611_init+0x58>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3301      	adds	r3, #1
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	dddf      	ble.n	8006db0 <ms5611_init+0xc>
	}
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000724 	.word	0x20000724

08006e00 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <ms5611_update_pressure+0x64>)
 8006e08:	463b      	mov	r3, r7
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	8019      	strh	r1, [r3, #0]
 8006e10:	3302      	adds	r3, #2
 8006e12:	0c12      	lsrs	r2, r2, #16
 8006e14:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <ms5611_update_pressure+0x68>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	463a      	mov	r2, r7
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff98 	bl	8006d60 <ms5611_write_i2c>
 8006e30:	4603      	mov	r3, r0
 8006e32:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006e34:	200c      	movs	r0, #12
 8006e36:	f000 fb4f 	bl	80074d8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2103      	movs	r1, #3
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7ff ff6b 	bl	8006d1c <ms5611_read_i2c>
 8006e46:	4603      	mov	r3, r0
 8006e48:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8006e4a:	783b      	ldrb	r3, [r7, #0]
 8006e4c:	041a      	lsls	r2, r3, #16
 8006e4e:	787b      	ldrb	r3, [r7, #1]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	4313      	orrs	r3, r2
 8006e54:	78ba      	ldrb	r2, [r7, #2]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <ms5611_update_pressure+0x6c>)
 8006e5a:	6013      	str	r3, [r2, #0]

}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0801189c 	.word	0x0801189c
 8006e68:	200001e0 	.word	0x200001e0
 8006e6c:	20000720 	.word	0x20000720

08006e70 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8006e76:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <ms5611_update_temperature+0x64>)
 8006e78:	463b      	mov	r3, r7
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	8019      	strh	r1, [r3, #0]
 8006e80:	3302      	adds	r3, #2
 8006e82:	0c12      	lsrs	r2, r2, #16
 8006e84:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <ms5611_update_temperature+0x68>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	463a      	mov	r2, r7
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff ff60 	bl	8006d60 <ms5611_write_i2c>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006ea4:	200c      	movs	r0, #12
 8006ea6:	f000 fb17 	bl	80074d8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8006eaa:	463b      	mov	r3, r7
 8006eac:	461a      	mov	r2, r3
 8006eae:	2103      	movs	r1, #3
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f7ff ff33 	bl	8006d1c <ms5611_read_i2c>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8006eba:	783b      	ldrb	r3, [r7, #0]
 8006ebc:	041a      	lsls	r2, r3, #16
 8006ebe:	787b      	ldrb	r3, [r7, #1]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	78ba      	ldrb	r2, [r7, #2]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	4a04      	ldr	r2, [pc, #16]	; (8006edc <ms5611_update_temperature+0x6c>)
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	0801189c 	.word	0x0801189c
 8006ed8:	200001e0 	.word	0x200001e0
 8006edc:	20000730 	.word	0x20000730

08006ee0 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 8006ee4:	f7ff ffc4 	bl	8006e70 <ms5611_update_temperature>
	ms5611_update_pressure();
 8006ee8:	f7ff ff8a 	bl	8006e00 <ms5611_update_pressure>
}
 8006eec:	bf00      	nop
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8006ef0:	b5b0      	push	{r4, r5, r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8006ef6:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <ms5611_get_temperature+0xe0>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <ms5611_get_temperature+0xe4>)
 8006efc:	891b      	ldrh	r3, [r3, #8]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7f9 faa1 	bl	800044c <__aeabi_ui2d>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <ms5611_get_temperature+0xe4>)
 8006f10:	895b      	ldrh	r3, [r3, #10]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7f9 faaa 	bl	800046c <__aeabi_i2d>
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <ms5611_get_temperature+0xe8>)
 8006f1e:	f7f9 fc39 	bl	8000794 <__aeabi_ddiv>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fb09 	bl	8000540 <__aeabi_dmul>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <ms5611_get_temperature+0xec>)
 8006f3c:	f7f9 f94a 	bl	80001d4 <__adddf3>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <ms5611_get_temperature+0xec>)
 8006f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5e:	f7f9 fd61 	bl	8000a24 <__aeabi_dcmplt>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d016      	beq.n	8006f96 <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7f9 fa6f 	bl	800044c <__aeabi_ui2d>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	460d      	mov	r5, r1
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7f9 fa6a 	bl	800044c <__aeabi_ui2d>
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <ms5611_get_temperature+0xf0>)
 8006f7e:	f7f9 fc09 	bl	8000794 <__aeabi_ddiv>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 fad9 	bl	8000540 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 8006f96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f9e:	f7f9 f917 	bl	80001d0 <__aeabi_dsub>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <ms5611_get_temperature+0xf4>)
 8006fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb4:	f7f9 fbee 	bl	8000794 <__aeabi_ddiv>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8006fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8006fc4:	eef0 0a67 	vmov.f32	s1, s15
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000730 	.word	0x20000730
 8006fd4:	20000724 	.word	0x20000724
 8006fd8:	41600000 	.word	0x41600000
 8006fdc:	409f4000 	.word	0x409f4000
 8006fe0:	41e00000 	.word	0x41e00000
 8006fe4:	40590000 	.word	0x40590000

08006fe8 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b090      	sub	sp, #64	; 0x40
 8006fec:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8006fee:	4bc4      	ldr	r3, [pc, #784]	; (8007300 <ms5611_get_pressure+0x318>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4bc4      	ldr	r3, [pc, #784]	; (8007304 <ms5611_get_pressure+0x31c>)
 8006ff4:	891b      	ldrh	r3, [r3, #8]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8006ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ffe:	f7f9 fa25 	bl	800044c <__aeabi_ui2d>
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	4bbf      	ldr	r3, [pc, #764]	; (8007304 <ms5611_get_pressure+0x31c>)
 8007008:	895b      	ldrh	r3, [r3, #10]
 800700a:	4618      	mov	r0, r3
 800700c:	f7f9 fa2e 	bl	800046c <__aeabi_i2d>
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	4bbc      	ldr	r3, [pc, #752]	; (8007308 <ms5611_get_pressure+0x320>)
 8007016:	f7f9 fbbd 	bl	8000794 <__aeabi_ddiv>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 fa8d 	bl	8000540 <__aeabi_dmul>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	4bb6      	ldr	r3, [pc, #728]	; (800730c <ms5611_get_pressure+0x324>)
 8007034:	f7f9 f8ce 	bl	80001d4 <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 8007040:	4bb0      	ldr	r3, [pc, #704]	; (8007304 <ms5611_get_pressure+0x31c>)
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	461a      	mov	r2, r3
 8007048:	4bae      	ldr	r3, [pc, #696]	; (8007304 <ms5611_get_pressure+0x31c>)
 800704a:	88db      	ldrh	r3, [r3, #6]
 800704c:	4619      	mov	r1, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	fb03 f301 	mul.w	r3, r3, r1
 8007054:	09db      	lsrs	r3, r3, #7
 8007056:	4413      	add	r3, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f7f9 f9f7 	bl	800044c <__aeabi_ui2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8007066:	4ba7      	ldr	r3, [pc, #668]	; (8007304 <ms5611_get_pressure+0x31c>)
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	03db      	lsls	r3, r3, #15
 800706c:	461a      	mov	r2, r3
 800706e:	4ba5      	ldr	r3, [pc, #660]	; (8007304 <ms5611_get_pressure+0x31c>)
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	4619      	mov	r1, r3
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	fb03 f301 	mul.w	r3, r3, r1
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	4413      	add	r3, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f9e4 	bl	800044c <__aeabi_ui2d>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 800708c:	4ba0      	ldr	r3, [pc, #640]	; (8007310 <ms5611_get_pressure+0x328>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7f9 f9db 	bl	800044c <__aeabi_ui2d>
 8007096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800709a:	f7f9 fa51 	bl	8000540 <__aeabi_dmul>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4610      	mov	r0, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	4b9a      	ldr	r3, [pc, #616]	; (8007314 <ms5611_get_pressure+0x32c>)
 80070ac:	f7f9 fb72 	bl	8000794 <__aeabi_ddiv>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070bc:	f7f9 f888 	bl	80001d0 <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	4b92      	ldr	r3, [pc, #584]	; (8007318 <ms5611_get_pressure+0x330>)
 80070ce:	f7f9 fb61 	bl	8000794 <__aeabi_ddiv>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	4b82      	ldr	r3, [pc, #520]	; (800730c <ms5611_get_pressure+0x324>)
 8007104:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007108:	f7f9 fc8c 	bl	8000a24 <__aeabi_dcmplt>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80cc 	beq.w	80072ac <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	fb03 f303 	mul.w	r3, r3, r3
 800711a:	0fdb      	lsrs	r3, r3, #31
 800711c:	461a      	mov	r2, r3
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	f7f9 f9dd 	bl	80004e4 <__aeabi_l2d>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	4b75      	ldr	r3, [pc, #468]	; (800730c <ms5611_get_pressure+0x324>)
 8007138:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800713c:	f7f9 f848 	bl	80001d0 <__aeabi_dsub>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4610      	mov	r0, r2
 8007146:	4619      	mov	r1, r3
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	4b73      	ldr	r3, [pc, #460]	; (800731c <ms5611_get_pressure+0x334>)
 800714e:	f7f9 f9f7 	bl	8000540 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	4b6b      	ldr	r3, [pc, #428]	; (800730c <ms5611_get_pressure+0x324>)
 8007160:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007164:	f7f9 f834 	bl	80001d0 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f7f9 f9e6 	bl	8000540 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007184:	f7f9 fb06 	bl	8000794 <__aeabi_ddiv>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	4b5d      	ldr	r3, [pc, #372]	; (800730c <ms5611_get_pressure+0x324>)
 8007196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800719a:	f7f9 f819 	bl	80001d0 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4610      	mov	r0, r2
 80071a4:	4619      	mov	r1, r3
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	4b5c      	ldr	r3, [pc, #368]	; (800731c <ms5611_get_pressure+0x334>)
 80071ac:	f7f9 f9c8 	bl	8000540 <__aeabi_dmul>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	4b53      	ldr	r3, [pc, #332]	; (800730c <ms5611_get_pressure+0x324>)
 80071be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071c2:	f7f9 f805 	bl	80001d0 <__aeabi_dsub>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	f7f9 f9b7 	bl	8000540 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	4b50      	ldr	r3, [pc, #320]	; (8007320 <ms5611_get_pressure+0x338>)
 80071e0:	f7f9 fad8 	bl	8000794 <__aeabi_ddiv>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 80071ec:	a340      	add	r3, pc, #256	; (adr r3, 80072f0 <ms5611_get_pressure+0x308>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071f6:	f7f9 fc15 	bl	8000a24 <__aeabi_dcmplt>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d055      	beq.n	80072ac <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8007200:	a33d      	add	r3, pc, #244	; (adr r3, 80072f8 <ms5611_get_pressure+0x310>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800720a:	f7f8 ffe3 	bl	80001d4 <__adddf3>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	4b42      	ldr	r3, [pc, #264]	; (8007324 <ms5611_get_pressure+0x33c>)
 800721c:	f7f9 f990 	bl	8000540 <__aeabi_dmul>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4614      	mov	r4, r2
 8007226:	461d      	mov	r5, r3
 8007228:	a333      	add	r3, pc, #204	; (adr r3, 80072f8 <ms5611_get_pressure+0x310>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007232:	f7f8 ffcf 	bl	80001d4 <__adddf3>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f9 f97f 	bl	8000540 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800724a:	f7f8 ffc3 	bl	80001d4 <__adddf3>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8007256:	a328      	add	r3, pc, #160	; (adr r3, 80072f8 <ms5611_get_pressure+0x310>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007260:	f7f8 ffb8 	bl	80001d4 <__adddf3>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	4b2a      	ldr	r3, [pc, #168]	; (800731c <ms5611_get_pressure+0x334>)
 8007272:	f7f9 f965 	bl	8000540 <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4614      	mov	r4, r2
 800727c:	461d      	mov	r5, r3
 800727e:	a31e      	add	r3, pc, #120	; (adr r3, 80072f8 <ms5611_get_pressure+0x310>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007288:	f7f8 ffa4 	bl	80001d4 <__adddf3>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f9 f954 	bl	8000540 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072a0:	f7f8 ff98 	bl	80001d4 <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 80072ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072b4:	f7f8 ff8c 	bl	80001d0 <__aeabi_dsub>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 80072c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80072c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072c8:	f7f8 ff82 	bl	80001d0 <__aeabi_dsub>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 80072d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072dc:	f7f8 ff78 	bl	80001d0 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <ms5611_get_pressure+0x328>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	e01b      	b.n	8007328 <ms5611_get_pressure+0x340>
 80072f0:	00000000 	.word	0x00000000
 80072f4:	c0977000 	.word	0xc0977000
 80072f8:	00000000 	.word	0x00000000
 80072fc:	40977000 	.word	0x40977000
 8007300:	20000730 	.word	0x20000730
 8007304:	20000724 	.word	0x20000724
 8007308:	41600000 	.word	0x41600000
 800730c:	409f4000 	.word	0x409f4000
 8007310:	20000720 	.word	0x20000720
 8007314:	41400000 	.word	0x41400000
 8007318:	40e00000 	.word	0x40e00000
 800731c:	40140000 	.word	0x40140000
 8007320:	40100000 	.word	0x40100000
 8007324:	401c0000 	.word	0x401c0000
 8007328:	f7f9 f890 	bl	800044c <__aeabi_ui2d>
 800732c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007330:	f7f9 f906 	bl	8000540 <__aeabi_dmul>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4610      	mov	r0, r2
 800733a:	4619      	mov	r1, r3
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	4b14      	ldr	r3, [pc, #80]	; (8007394 <ms5611_get_pressure+0x3ac>)
 8007342:	f7f9 fa27 	bl	8000794 <__aeabi_ddiv>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007352:	f7f8 ff3d 	bl	80001d0 <__aeabi_dsub>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <ms5611_get_pressure+0x3b0>)
 8007364:	f7f9 fa16 	bl	8000794 <__aeabi_ddiv>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <ms5611_get_pressure+0x3b4>)
 8007376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800737a:	f7f9 fa0b 	bl	8000794 <__aeabi_ddiv>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	ec43 2b17 	vmov	d7, r2, r3
}
 8007386:	eeb0 0a47 	vmov.f32	s0, s14
 800738a:	eef0 0a67 	vmov.f32	s1, s15
 800738e:	3740      	adds	r7, #64	; 0x40
 8007390:	46bd      	mov	sp, r7
 8007392:	bdb0      	pop	{r4, r5, r7, pc}
 8007394:	41400000 	.word	0x41400000
 8007398:	40e00000 	.word	0x40e00000
 800739c:	40590000 	.word	0x40590000

080073a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80073a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80073a4:	480d      	ldr	r0, [pc, #52]	; (80073dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80073a6:	490e      	ldr	r1, [pc, #56]	; (80073e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80073a8:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80073aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073ac:	e002      	b.n	80073b4 <LoopCopyDataInit>

080073ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073b2:	3304      	adds	r3, #4

080073b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073b8:	d3f9      	bcc.n	80073ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073ba:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80073bc:	4c0b      	ldr	r4, [pc, #44]	; (80073ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80073be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073c0:	e001      	b.n	80073c6 <LoopFillZerobss>

080073c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073c4:	3204      	adds	r2, #4

080073c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073c8:	d3fb      	bcc.n	80073c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80073ca:	f7fa ff4b 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073ce:	f009 fd47 	bl	8010e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073d2:	f7f9 ff61 	bl	8001298 <main>
  bx  lr    
 80073d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80073d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80073dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80073e0:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80073e4:	08011d70 	.word	0x08011d70
  ldr r2, =_sbss
 80073e8:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80073ec:	20000e24 	.word	0x20000e24

080073f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80073f0:	e7fe      	b.n	80073f0 <ADC_IRQHandler>
	...

080073f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80073f8:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <HAL_Init+0x40>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <HAL_Init+0x40>)
 80073fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_Init+0x40>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a0a      	ldr	r2, [pc, #40]	; (8007434 <HAL_Init+0x40>)
 800740a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800740e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007410:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_Init+0x40>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a07      	ldr	r2, [pc, #28]	; (8007434 <HAL_Init+0x40>)
 8007416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800741c:	2003      	movs	r0, #3
 800741e:	f000 f94f 	bl	80076c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007422:	2000      	movs	r0, #0
 8007424:	f000 f808 	bl	8007438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007428:	f7fa fbd0 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40023c00 	.word	0x40023c00

08007438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007440:	4b12      	ldr	r3, [pc, #72]	; (800748c <HAL_InitTick+0x54>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b12      	ldr	r3, [pc, #72]	; (8007490 <HAL_InitTick+0x58>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	4619      	mov	r1, r3
 800744a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800744e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f967 	bl	800772a <HAL_SYSTICK_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e00e      	b.n	8007484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b0f      	cmp	r3, #15
 800746a:	d80a      	bhi.n	8007482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800746c:	2200      	movs	r2, #0
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007474:	f000 f92f 	bl	80076d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007478:	4a06      	ldr	r2, [pc, #24]	; (8007494 <HAL_InitTick+0x5c>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e000      	b.n	8007484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000004 	.word	0x20000004
 8007490:	200001e8 	.word	0x200001e8
 8007494:	200001e4 	.word	0x200001e4

08007498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <HAL_IncTick+0x20>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_IncTick+0x24>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	4a04      	ldr	r2, [pc, #16]	; (80074bc <HAL_IncTick+0x24>)
 80074aa:	6013      	str	r3, [r2, #0]
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	200001e8 	.word	0x200001e8
 80074bc:	20000734 	.word	0x20000734

080074c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return uwTick;
 80074c4:	4b03      	ldr	r3, [pc, #12]	; (80074d4 <HAL_GetTick+0x14>)
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000734 	.word	0x20000734

080074d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074e0:	f7ff ffee 	bl	80074c0 <HAL_GetTick>
 80074e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f0:	d005      	beq.n	80074fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_Delay+0x44>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80074fe:	bf00      	nop
 8007500:	f7ff ffde 	bl	80074c0 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	429a      	cmp	r2, r3
 800750e:	d8f7      	bhi.n	8007500 <HAL_Delay+0x28>
  {
  }
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200001e8 	.word	0x200001e8

08007520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007530:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <__NVIC_SetPriorityGrouping+0x44>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800753c:	4013      	ands	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800754c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <__NVIC_SetPriorityGrouping+0x44>)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	60d3      	str	r3, [r2, #12]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <__NVIC_GetPriorityGrouping+0x18>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	f003 0307 	and.w	r3, r3, #7
}
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800758e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	db0b      	blt.n	80075ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	4907      	ldr	r1, [pc, #28]	; (80075bc <__NVIC_EnableIRQ+0x38>)
 800759e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2001      	movs	r0, #1
 80075a6:	fa00 f202 	lsl.w	r2, r0, r2
 80075aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	e000e100 	.word	0xe000e100

080075c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db0a      	blt.n	80075ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	490c      	ldr	r1, [pc, #48]	; (800760c <__NVIC_SetPriority+0x4c>)
 80075da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075de:	0112      	lsls	r2, r2, #4
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	440b      	add	r3, r1
 80075e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075e8:	e00a      	b.n	8007600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4908      	ldr	r1, [pc, #32]	; (8007610 <__NVIC_SetPriority+0x50>)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	3b04      	subs	r3, #4
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	440b      	add	r3, r1
 80075fe:	761a      	strb	r2, [r3, #24]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	e000e100 	.word	0xe000e100
 8007610:	e000ed00 	.word	0xe000ed00

08007614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f1c3 0307 	rsb	r3, r3, #7
 800762e:	2b04      	cmp	r3, #4
 8007630:	bf28      	it	cs
 8007632:	2304      	movcs	r3, #4
 8007634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3304      	adds	r3, #4
 800763a:	2b06      	cmp	r3, #6
 800763c:	d902      	bls.n	8007644 <NVIC_EncodePriority+0x30>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	3b03      	subs	r3, #3
 8007642:	e000      	b.n	8007646 <NVIC_EncodePriority+0x32>
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43da      	mvns	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	401a      	ands	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800765c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	fa01 f303 	lsl.w	r3, r1, r3
 8007666:	43d9      	mvns	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800766c:	4313      	orrs	r3, r2
         );
}
 800766e:	4618      	mov	r0, r3
 8007670:	3724      	adds	r7, #36	; 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3b01      	subs	r3, #1
 8007688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800768c:	d301      	bcc.n	8007692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800768e:	2301      	movs	r3, #1
 8007690:	e00f      	b.n	80076b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007692:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <SysTick_Config+0x40>)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3b01      	subs	r3, #1
 8007698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800769a:	210f      	movs	r1, #15
 800769c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a0:	f7ff ff8e 	bl	80075c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <SysTick_Config+0x40>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <SysTick_Config+0x40>)
 80076ac:	2207      	movs	r2, #7
 80076ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000e010 	.word	0xe000e010

080076c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff ff29 	bl	8007520 <__NVIC_SetPriorityGrouping>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	4603      	mov	r3, r0
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076e8:	f7ff ff3e 	bl	8007568 <__NVIC_GetPriorityGrouping>
 80076ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f7ff ff8e 	bl	8007614 <NVIC_EncodePriority>
 80076f8:	4602      	mov	r2, r0
 80076fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff ff5d 	bl	80075c0 <__NVIC_SetPriority>
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	4603      	mov	r3, r0
 8007716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff ff31 	bl	8007584 <__NVIC_EnableIRQ>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ffa2 	bl	800767c <SysTick_Config>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007756:	2300      	movs	r3, #0
 8007758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	e16b      	b.n	8007a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007760:	2201      	movs	r2, #1
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4013      	ands	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	f040 815a 	bne.w	8007a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d005      	beq.n	8007796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007792:	2b02      	cmp	r3, #2
 8007794:	d130      	bne.n	80077f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	2203      	movs	r2, #3
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	4313      	orrs	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077cc:	2201      	movs	r2, #1
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 0201 	and.w	r2, r3, #1
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	2b03      	cmp	r3, #3
 8007802:	d017      	beq.n	8007834 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	2203      	movs	r2, #3
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	43db      	mvns	r3, r3
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	4013      	ands	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d123      	bne.n	8007888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	08da      	lsrs	r2, r3, #3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3208      	adds	r2, #8
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	220f      	movs	r2, #15
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	43db      	mvns	r3, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4013      	ands	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	4313      	orrs	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	08da      	lsrs	r2, r3, #3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3208      	adds	r2, #8
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	2203      	movs	r2, #3
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	4013      	ands	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f003 0203 	and.w	r2, r3, #3
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80b4 	beq.w	8007a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	4b60      	ldr	r3, [pc, #384]	; (8007a50 <HAL_GPIO_Init+0x30c>)
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	4a5f      	ldr	r2, [pc, #380]	; (8007a50 <HAL_GPIO_Init+0x30c>)
 80078d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d8:	6453      	str	r3, [r2, #68]	; 0x44
 80078da:	4b5d      	ldr	r3, [pc, #372]	; (8007a50 <HAL_GPIO_Init+0x30c>)
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078e6:	4a5b      	ldr	r2, [pc, #364]	; (8007a54 <HAL_GPIO_Init+0x310>)
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	089b      	lsrs	r3, r3, #2
 80078ec:	3302      	adds	r3, #2
 80078ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	220f      	movs	r2, #15
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43db      	mvns	r3, r3
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	4013      	ands	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a52      	ldr	r2, [pc, #328]	; (8007a58 <HAL_GPIO_Init+0x314>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d02b      	beq.n	800796a <HAL_GPIO_Init+0x226>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a51      	ldr	r2, [pc, #324]	; (8007a5c <HAL_GPIO_Init+0x318>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d025      	beq.n	8007966 <HAL_GPIO_Init+0x222>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a50      	ldr	r2, [pc, #320]	; (8007a60 <HAL_GPIO_Init+0x31c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01f      	beq.n	8007962 <HAL_GPIO_Init+0x21e>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a4f      	ldr	r2, [pc, #316]	; (8007a64 <HAL_GPIO_Init+0x320>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d019      	beq.n	800795e <HAL_GPIO_Init+0x21a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a4e      	ldr	r2, [pc, #312]	; (8007a68 <HAL_GPIO_Init+0x324>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_GPIO_Init+0x216>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a4d      	ldr	r2, [pc, #308]	; (8007a6c <HAL_GPIO_Init+0x328>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00d      	beq.n	8007956 <HAL_GPIO_Init+0x212>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a4c      	ldr	r2, [pc, #304]	; (8007a70 <HAL_GPIO_Init+0x32c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <HAL_GPIO_Init+0x20e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a4b      	ldr	r2, [pc, #300]	; (8007a74 <HAL_GPIO_Init+0x330>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <HAL_GPIO_Init+0x20a>
 800794a:	2307      	movs	r3, #7
 800794c:	e00e      	b.n	800796c <HAL_GPIO_Init+0x228>
 800794e:	2308      	movs	r3, #8
 8007950:	e00c      	b.n	800796c <HAL_GPIO_Init+0x228>
 8007952:	2306      	movs	r3, #6
 8007954:	e00a      	b.n	800796c <HAL_GPIO_Init+0x228>
 8007956:	2305      	movs	r3, #5
 8007958:	e008      	b.n	800796c <HAL_GPIO_Init+0x228>
 800795a:	2304      	movs	r3, #4
 800795c:	e006      	b.n	800796c <HAL_GPIO_Init+0x228>
 800795e:	2303      	movs	r3, #3
 8007960:	e004      	b.n	800796c <HAL_GPIO_Init+0x228>
 8007962:	2302      	movs	r3, #2
 8007964:	e002      	b.n	800796c <HAL_GPIO_Init+0x228>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <HAL_GPIO_Init+0x228>
 800796a:	2300      	movs	r3, #0
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	f002 0203 	and.w	r2, r2, #3
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	4093      	lsls	r3, r2
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4313      	orrs	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800797c:	4935      	ldr	r1, [pc, #212]	; (8007a54 <HAL_GPIO_Init+0x310>)
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	089b      	lsrs	r3, r3, #2
 8007982:	3302      	adds	r3, #2
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800798a:	4b3b      	ldr	r3, [pc, #236]	; (8007a78 <HAL_GPIO_Init+0x334>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	43db      	mvns	r3, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4013      	ands	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079ae:	4a32      	ldr	r2, [pc, #200]	; (8007a78 <HAL_GPIO_Init+0x334>)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079b4:	4b30      	ldr	r3, [pc, #192]	; (8007a78 <HAL_GPIO_Init+0x334>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079d8:	4a27      	ldr	r2, [pc, #156]	; (8007a78 <HAL_GPIO_Init+0x334>)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079de:	4b26      	ldr	r3, [pc, #152]	; (8007a78 <HAL_GPIO_Init+0x334>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	43db      	mvns	r3, r3
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4013      	ands	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a02:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <HAL_GPIO_Init+0x334>)
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a08:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <HAL_GPIO_Init+0x334>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	4013      	ands	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a2c:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <HAL_GPIO_Init+0x334>)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b0f      	cmp	r3, #15
 8007a3c:	f67f ae90 	bls.w	8007760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3724      	adds	r7, #36	; 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40013800 	.word	0x40013800
 8007a58:	40020000 	.word	0x40020000
 8007a5c:	40020400 	.word	0x40020400
 8007a60:	40020800 	.word	0x40020800
 8007a64:	40020c00 	.word	0x40020c00
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	40021400 	.word	0x40021400
 8007a70:	40021800 	.word	0x40021800
 8007a74:	40021c00 	.word	0x40021c00
 8007a78:	40013c00 	.word	0x40013c00

08007a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	887b      	ldrh	r3, [r7, #2]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
 8007a98:	e001      	b.n	8007a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007abc:	787b      	ldrb	r3, [r7, #1]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ac2:	887a      	ldrh	r2, [r7, #2]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ac8:	e003      	b.n	8007ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007aca:	887b      	ldrh	r3, [r7, #2]
 8007acc:	041a      	lsls	r2, r3, #16
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	619a      	str	r2, [r3, #24]
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007af0:	887a      	ldrh	r2, [r7, #2]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4013      	ands	r3, r2
 8007af6:	041a      	lsls	r2, r3, #16
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	43d9      	mvns	r1, r3
 8007afc:	887b      	ldrh	r3, [r7, #2]
 8007afe:	400b      	ands	r3, r1
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	619a      	str	r2, [r3, #24]
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d006      	beq.n	8007b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b2a:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fa f82e 	bl	8001b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40013c00 	.word	0x40013c00

08007b44 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b46:	b08f      	sub	sp, #60	; 0x3c
 8007b48:	af0a      	add	r7, sp, #40	; 0x28
 8007b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e054      	b.n	8007c00 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f008 fec5 	bl	8010900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f006 f867 	bl	800dc68 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	687e      	ldr	r6, [r7, #4]
 8007ba2:	466d      	mov	r5, sp
 8007ba4:	f106 0410 	add.w	r4, r6, #16
 8007ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007bb8:	1d33      	adds	r3, r6, #4
 8007bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bbc:	6838      	ldr	r0, [r7, #0]
 8007bbe:	f005 ffe1 	bl	800db84 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f006 f85e 	bl	800dc8a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	687e      	ldr	r6, [r7, #4]
 8007bd6:	466d      	mov	r5, sp
 8007bd8:	f106 0410 	add.w	r4, r6, #16
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007be8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007bec:	1d33      	adds	r3, r6, #4
 8007bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f006 f971 	bl	800ded8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c08 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8007c08:	b590      	push	{r4, r7, lr}
 8007c0a:	b089      	sub	sp, #36	; 0x24
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	461a      	mov	r2, r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	70fb      	strb	r3, [r7, #3]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70bb      	strb	r3, [r7, #2]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_HCD_HC_Init+0x28>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e076      	b.n	8007d1e <HAL_HCD_HC_Init+0x116>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	212c      	movs	r1, #44	; 0x2c
 8007c3e:	fb01 f303 	mul.w	r3, r1, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	333d      	adds	r3, #61	; 0x3d
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	212c      	movs	r1, #44	; 0x2c
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3338      	adds	r3, #56	; 0x38
 8007c58:	787a      	ldrb	r2, [r7, #1]
 8007c5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	212c      	movs	r1, #44	; 0x2c
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3340      	adds	r3, #64	; 0x40
 8007c6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c6c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	212c      	movs	r1, #44	; 0x2c
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	4413      	add	r3, r2
 8007c7a:	3339      	adds	r3, #57	; 0x39
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	212c      	movs	r1, #44	; 0x2c
 8007c86:	fb01 f303 	mul.w	r3, r1, r3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	333f      	adds	r3, #63	; 0x3f
 8007c8e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	78ba      	ldrb	r2, [r7, #2]
 8007c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c9c:	b2d0      	uxtb	r0, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	212c      	movs	r1, #44	; 0x2c
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	333a      	adds	r3, #58	; 0x3a
 8007caa:	4602      	mov	r2, r0
 8007cac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da09      	bge.n	8007cca <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	212c      	movs	r1, #44	; 0x2c
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	333b      	adds	r3, #59	; 0x3b
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e008      	b.n	8007cdc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	212c      	movs	r1, #44	; 0x2c
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	333b      	adds	r3, #59	; 0x3b
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	212c      	movs	r1, #44	; 0x2c
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	333c      	adds	r3, #60	; 0x3c
 8007cea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007cee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	787c      	ldrb	r4, [r7, #1]
 8007cf6:	78ba      	ldrb	r2, [r7, #2]
 8007cf8:	78f9      	ldrb	r1, [r7, #3]
 8007cfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cfc:	9302      	str	r3, [sp, #8]
 8007cfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	f006 fa66 	bl	800e1dc <USB_HC_Init>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd90      	pop	{r4, r7, pc}

08007d26 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_HCD_HC_Halt+0x1e>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e00f      	b.n	8007d64 <HAL_HCD_HC_Halt+0x3e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f006 fca2 	bl	800e69e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	4608      	mov	r0, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	70fb      	strb	r3, [r7, #3]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70bb      	strb	r3, [r7, #2]
 8007d82:	4613      	mov	r3, r2
 8007d84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	212c      	movs	r1, #44	; 0x2c
 8007d8c:	fb01 f303 	mul.w	r3, r1, r3
 8007d90:	4413      	add	r3, r2
 8007d92:	333b      	adds	r3, #59	; 0x3b
 8007d94:	78ba      	ldrb	r2, [r7, #2]
 8007d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	212c      	movs	r1, #44	; 0x2c
 8007d9e:	fb01 f303 	mul.w	r3, r1, r3
 8007da2:	4413      	add	r3, r2
 8007da4:	333f      	adds	r3, #63	; 0x3f
 8007da6:	787a      	ldrb	r2, [r7, #1]
 8007da8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007daa:	7c3b      	ldrb	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d112      	bne.n	8007dd6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	212c      	movs	r1, #44	; 0x2c
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	4413      	add	r3, r2
 8007dbc:	3342      	adds	r3, #66	; 0x42
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	212c      	movs	r1, #44	; 0x2c
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	333d      	adds	r3, #61	; 0x3d
 8007dd0:	7f3a      	ldrb	r2, [r7, #28]
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	212c      	movs	r1, #44	; 0x2c
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	3342      	adds	r3, #66	; 0x42
 8007de4:	2202      	movs	r2, #2
 8007de6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007de8:	787b      	ldrb	r3, [r7, #1]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	f200 80c6 	bhi.w	8007f7c <HAL_HCD_HC_SubmitRequest+0x210>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e09 	.word	0x08007e09
 8007dfc:	08007f69 	.word	0x08007f69
 8007e00:	08007e6d 	.word	0x08007e6d
 8007e04:	08007eeb 	.word	0x08007eeb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8007e08:	7c3b      	ldrb	r3, [r7, #16]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	f040 80b8 	bne.w	8007f80 <HAL_HCD_HC_SubmitRequest+0x214>
 8007e10:	78bb      	ldrb	r3, [r7, #2]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 80b4 	bne.w	8007f80 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8007e18:	8b3b      	ldrh	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d108      	bne.n	8007e30 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	212c      	movs	r1, #44	; 0x2c
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	3355      	adds	r3, #85	; 0x55
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	212c      	movs	r1, #44	; 0x2c
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3355      	adds	r3, #85	; 0x55
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	212c      	movs	r1, #44	; 0x2c
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	3342      	adds	r3, #66	; 0x42
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007e56:	e093      	b.n	8007f80 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	212c      	movs	r1, #44	; 0x2c
 8007e5e:	fb01 f303 	mul.w	r3, r1, r3
 8007e62:	4413      	add	r3, r2
 8007e64:	3342      	adds	r3, #66	; 0x42
 8007e66:	2202      	movs	r2, #2
 8007e68:	701a      	strb	r2, [r3, #0]
      break;
 8007e6a:	e089      	b.n	8007f80 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007e6c:	78bb      	ldrb	r3, [r7, #2]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d11d      	bne.n	8007eae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	212c      	movs	r1, #44	; 0x2c
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	3355      	adds	r3, #85	; 0x55
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	212c      	movs	r1, #44	; 0x2c
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	4413      	add	r3, r2
 8007e92:	3342      	adds	r3, #66	; 0x42
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007e98:	e073      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	212c      	movs	r1, #44	; 0x2c
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3342      	adds	r3, #66	; 0x42
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	701a      	strb	r2, [r3, #0]
      break;
 8007eac:	e069      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	212c      	movs	r1, #44	; 0x2c
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	3354      	adds	r3, #84	; 0x54
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	212c      	movs	r1, #44	; 0x2c
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	3342      	adds	r3, #66	; 0x42
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
      break;
 8007ed4:	e055      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	212c      	movs	r1, #44	; 0x2c
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3342      	adds	r3, #66	; 0x42
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	701a      	strb	r2, [r3, #0]
      break;
 8007ee8:	e04b      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007eea:	78bb      	ldrb	r3, [r7, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11d      	bne.n	8007f2c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	212c      	movs	r1, #44	; 0x2c
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3355      	adds	r3, #85	; 0x55
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	212c      	movs	r1, #44	; 0x2c
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	4413      	add	r3, r2
 8007f10:	3342      	adds	r3, #66	; 0x42
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007f16:	e034      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	212c      	movs	r1, #44	; 0x2c
 8007f1e:	fb01 f303 	mul.w	r3, r1, r3
 8007f22:	4413      	add	r3, r2
 8007f24:	3342      	adds	r3, #66	; 0x42
 8007f26:	2202      	movs	r2, #2
 8007f28:	701a      	strb	r2, [r3, #0]
      break;
 8007f2a:	e02a      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	212c      	movs	r1, #44	; 0x2c
 8007f32:	fb01 f303 	mul.w	r3, r1, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	3354      	adds	r3, #84	; 0x54
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	212c      	movs	r1, #44	; 0x2c
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3342      	adds	r3, #66	; 0x42
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e016      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	212c      	movs	r1, #44	; 0x2c
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	3342      	adds	r3, #66	; 0x42
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
      break;
 8007f66:	e00c      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	212c      	movs	r1, #44	; 0x2c
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	4413      	add	r3, r2
 8007f74:	3342      	adds	r3, #66	; 0x42
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
      break;
 8007f7a:	e002      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007f80:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	212c      	movs	r1, #44	; 0x2c
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3344      	adds	r3, #68	; 0x44
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	8b3a      	ldrh	r2, [r7, #24]
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	202c      	movs	r0, #44	; 0x2c
 8007f9c:	fb00 f303 	mul.w	r3, r0, r3
 8007fa0:	440b      	add	r3, r1
 8007fa2:	334c      	adds	r3, #76	; 0x4c
 8007fa4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	212c      	movs	r1, #44	; 0x2c
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3360      	adds	r3, #96	; 0x60
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	212c      	movs	r1, #44	; 0x2c
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3350      	adds	r3, #80	; 0x50
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	212c      	movs	r1, #44	; 0x2c
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	3339      	adds	r3, #57	; 0x39
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	212c      	movs	r1, #44	; 0x2c
 8007fe2:	fb01 f303 	mul.w	r3, r1, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3361      	adds	r3, #97	; 0x61
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	222c      	movs	r2, #44	; 0x2c
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	3338      	adds	r3, #56	; 0x38
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	18d1      	adds	r1, r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	f006 f9f6 	bl	800e3f8 <USB_HC_StartXfer>
 800800c:	4603      	mov	r3, r0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f005 ff0f 	bl	800de52 <USB_GetMode>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	f040 80ef 	bne.w	800821a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f005 fef3 	bl	800de2c <USB_ReadInterrupts>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80e5 	beq.w	8008218 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f005 feea 	bl	800de2c <USB_ReadInterrupts>
 8008058:	4603      	mov	r3, r0
 800805a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800805e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008062:	d104      	bne.n	800806e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800806c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f005 feda 	bl	800de2c <USB_ReadInterrupts>
 8008078:	4603      	mov	r3, r0
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008082:	d104      	bne.n	800808e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800808c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f005 feca 	bl	800de2c <USB_ReadInterrupts>
 8008098:	4603      	mov	r3, r0
 800809a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800809e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080a2:	d104      	bne.n	80080ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80080ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f005 feba 	bl	800de2c <USB_ReadInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d103      	bne.n	80080ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2202      	movs	r2, #2
 80080c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f005 feac 	bl	800de2c <USB_ReadInterrupts>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080de:	d115      	bne.n	800810c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80080e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d108      	bne.n	800810c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f008 fc7e 	bl	80109fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2101      	movs	r1, #1
 8008106:	4618      	mov	r0, r3
 8008108:	f005 ffa2 	bl	800e050 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f005 fe8b 	bl	800de2c <USB_ReadInterrupts>
 8008116:	4603      	mov	r3, r0
 8008118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800811c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008120:	d102      	bne.n	8008128 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f9ff 	bl	8009526 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f005 fe7d 	bl	800de2c <USB_ReadInterrupts>
 8008132:	4603      	mov	r3, r0
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d106      	bne.n	800814a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f008 fc41 	bl	80109c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2208      	movs	r2, #8
 8008148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f005 fe6c 	bl	800de2c <USB_ReadInterrupts>
 8008154:	4603      	mov	r3, r0
 8008156:	f003 0310 	and.w	r3, r3, #16
 800815a:	2b10      	cmp	r3, #16
 800815c:	d101      	bne.n	8008162 <HAL_HCD_IRQHandler+0x14a>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <HAL_HCD_IRQHandler+0x14c>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d012      	beq.n	800818e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0210 	bic.w	r2, r2, #16
 8008176:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f902 	bl	8009382 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0210 	orr.w	r2, r2, #16
 800818c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f005 fe4a 	bl	800de2c <USB_ReadInterrupts>
 8008198:	4603      	mov	r3, r0
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a2:	d13a      	bne.n	800821a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f006 fa67 	bl	800e67c <USB_HC_ReadInterrupt>
 80081ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e025      	b.n	8008202 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d018      	beq.n	80081fc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e0:	d106      	bne.n	80081f0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8ab 	bl	8008344 <HCD_HC_IN_IRQHandler>
 80081ee:	e005      	b.n	80081fc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fcc6 	bl	8008b88 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3301      	adds	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	429a      	cmp	r2, r3
 800820a:	d3d4      	bcc.n	80081b6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008214:	615a      	str	r2, [r3, #20]
 8008216:	e000      	b.n	800821a <HAL_HCD_IRQHandler+0x202>
      return;
 8008218:	bf00      	nop
    }
  }
}
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_HCD_Start+0x16>
 8008232:	2302      	movs	r3, #2
 8008234:	e013      	b.n	800825e <HAL_HCD_Start+0x3e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f005 fcff 	bl	800dc46 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f005 ff62 	bl	800e118 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_HCD_Stop+0x16>
 8008278:	2302      	movs	r3, #2
 800827a:	e00d      	b.n	8008298 <HAL_HCD_Stop+0x32>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f006 fb61 	bl	800e950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f005 ff09 	bl	800e0c4 <USB_ResetPort>
 80082b2:	4603      	mov	r3, r0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	212c      	movs	r1, #44	; 0x2c
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	3360      	adds	r3, #96	; 0x60
 80082d6:	781b      	ldrb	r3, [r3, #0]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	212c      	movs	r1, #44	; 0x2c
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	3350      	adds	r3, #80	; 0x50
 80082fe:	681b      	ldr	r3, [r3, #0]
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f005 ff4d 	bl	800e1b8 <USB_GetCurrentFrame>
 800831e:	4603      	mov	r3, r0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f005 ff28 	bl	800e18a <USB_GetHostSpeed>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4413      	add	r3, r2
 8008366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b04      	cmp	r3, #4
 8008372:	d119      	bne.n	80083a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4413      	add	r3, r2
 800837c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008380:	461a      	mov	r2, r3
 8008382:	2304      	movs	r3, #4
 8008384:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	440a      	add	r2, r1
 800839c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a0:	f043 0302 	orr.w	r3, r3, #2
 80083a4:	60d3      	str	r3, [r2, #12]
 80083a6:	e101      	b.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083be:	d12b      	bne.n	8008418 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083cc:	461a      	mov	r2, r3
 80083ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	212c      	movs	r1, #44	; 0x2c
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	3361      	adds	r3, #97	; 0x61
 80083e2:	2207      	movs	r2, #7
 80083e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008400:	f043 0302 	orr.w	r3, r3, #2
 8008404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	b2d2      	uxtb	r2, r2
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f006 f944 	bl	800e69e <USB_HC_Halt>
 8008416:	e0c9      	b.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b20      	cmp	r3, #32
 800842c:	d109      	bne.n	8008442 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	461a      	mov	r2, r3
 800843c:	2320      	movs	r3, #32
 800843e:	6093      	str	r3, [r2, #8]
 8008440:	e0b4      	b.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	2b08      	cmp	r3, #8
 8008456:	d133      	bne.n	80084c0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	0151      	lsls	r1, r2, #5
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	440a      	add	r2, r1
 800846e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008472:	f043 0302 	orr.w	r3, r3, #2
 8008476:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	212c      	movs	r1, #44	; 0x2c
 800847e:	fb01 f303 	mul.w	r3, r1, r3
 8008482:	4413      	add	r3, r2
 8008484:	3361      	adds	r3, #97	; 0x61
 8008486:	2205      	movs	r2, #5
 8008488:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008496:	461a      	mov	r2, r3
 8008498:	2310      	movs	r3, #16
 800849a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a8:	461a      	mov	r2, r3
 80084aa:	2308      	movs	r3, #8
 80084ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	b2d2      	uxtb	r2, r2
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f006 f8f0 	bl	800e69e <USB_HC_Halt>
 80084be:	e075      	b.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d6:	d134      	bne.n	8008542 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f2:	f043 0302 	orr.w	r3, r3, #2
 80084f6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	212c      	movs	r1, #44	; 0x2c
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	3361      	adds	r3, #97	; 0x61
 8008506:	2208      	movs	r2, #8
 8008508:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	461a      	mov	r2, r3
 8008518:	2310      	movs	r3, #16
 800851a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008528:	461a      	mov	r2, r3
 800852a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f006 f8af 	bl	800e69e <USB_HC_Halt>
 8008540:	e034      	b.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008554:	2b80      	cmp	r3, #128	; 0x80
 8008556:	d129      	bne.n	80085ac <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	4413      	add	r3, r2
 8008560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	440a      	add	r2, r1
 800856e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008572:	f043 0302 	orr.w	r3, r3, #2
 8008576:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	212c      	movs	r1, #44	; 0x2c
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	4413      	add	r3, r2
 8008584:	3361      	adds	r3, #97	; 0x61
 8008586:	2206      	movs	r2, #6
 8008588:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f006 f882 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a6:	461a      	mov	r2, r3
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c2:	d122      	bne.n	800860a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085de:	f043 0302 	orr.w	r3, r3, #2
 80085e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f006 f855 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008600:	461a      	mov	r2, r3
 8008602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008606:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008608:	e2ba      	b.n	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b01      	cmp	r3, #1
 800861e:	f040 811b 	bne.w	8008858 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d019      	beq.n	800865e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	212c      	movs	r1, #44	; 0x2c
 8008630:	fb01 f303 	mul.w	r3, r1, r3
 8008634:	4413      	add	r3, r2
 8008636:	3348      	adds	r3, #72	; 0x48
 8008638:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0159      	lsls	r1, r3, #5
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	440b      	add	r3, r1
 8008642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800864c:	1ad2      	subs	r2, r2, r3
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	202c      	movs	r0, #44	; 0x2c
 8008654:	fb00 f303 	mul.w	r3, r0, r3
 8008658:	440b      	add	r3, r1
 800865a:	3350      	adds	r3, #80	; 0x50
 800865c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	212c      	movs	r1, #44	; 0x2c
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	4413      	add	r3, r2
 800866a:	3361      	adds	r3, #97	; 0x61
 800866c:	2201      	movs	r2, #1
 800866e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	212c      	movs	r1, #44	; 0x2c
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	4413      	add	r3, r2
 800867c:	335c      	adds	r3, #92	; 0x5c
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	4413      	add	r3, r2
 800868a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868e:	461a      	mov	r2, r3
 8008690:	2301      	movs	r3, #1
 8008692:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	212c      	movs	r1, #44	; 0x2c
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	4413      	add	r3, r2
 80086a0:	333f      	adds	r3, #63	; 0x3f
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	212c      	movs	r1, #44	; 0x2c
 80086ae:	fb01 f303 	mul.w	r3, r1, r3
 80086b2:	4413      	add	r3, r2
 80086b4:	333f      	adds	r3, #63	; 0x3f
 80086b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d121      	bne.n	8008700 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d6:	f043 0302 	orr.w	r3, r3, #2
 80086da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f005 ffd9 	bl	800e69e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f8:	461a      	mov	r2, r3
 80086fa:	2310      	movs	r3, #16
 80086fc:	6093      	str	r3, [r2, #8]
 80086fe:	e066      	b.n	80087ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	212c      	movs	r1, #44	; 0x2c
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	4413      	add	r3, r2
 800870c:	333f      	adds	r3, #63	; 0x3f
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d127      	bne.n	8008764 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008732:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	212c      	movs	r1, #44	; 0x2c
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	3360      	adds	r3, #96	; 0x60
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	b2d9      	uxtb	r1, r3
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	202c      	movs	r0, #44	; 0x2c
 8008750:	fb00 f303 	mul.w	r3, r0, r3
 8008754:	4413      	add	r3, r2
 8008756:	3360      	adds	r3, #96	; 0x60
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f008 f95b 	bl	8010a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008762:	e034      	b.n	80087ce <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	212c      	movs	r1, #44	; 0x2c
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	333f      	adds	r3, #63	; 0x3f
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d12a      	bne.n	80087ce <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	212c      	movs	r1, #44	; 0x2c
 800877e:	fb01 f303 	mul.w	r3, r1, r3
 8008782:	4413      	add	r3, r2
 8008784:	3360      	adds	r3, #96	; 0x60
 8008786:	2201      	movs	r2, #1
 8008788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	212c      	movs	r1, #44	; 0x2c
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	4413      	add	r3, r2
 8008796:	3354      	adds	r3, #84	; 0x54
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f083 0301 	eor.w	r3, r3, #1
 800879e:	b2d8      	uxtb	r0, r3
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	212c      	movs	r1, #44	; 0x2c
 80087a6:	fb01 f303 	mul.w	r3, r1, r3
 80087aa:	4413      	add	r3, r2
 80087ac:	3354      	adds	r3, #84	; 0x54
 80087ae:	4602      	mov	r2, r0
 80087b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	b2d9      	uxtb	r1, r3
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	202c      	movs	r0, #44	; 0x2c
 80087bc:	fb00 f303 	mul.w	r3, r0, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3360      	adds	r3, #96	; 0x60
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f008 f925 	bl	8010a18 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d12b      	bne.n	800882e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	212c      	movs	r1, #44	; 0x2c
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	4413      	add	r3, r2
 80087e2:	3348      	adds	r3, #72	; 0x48
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	202c      	movs	r0, #44	; 0x2c
 80087ec:	fb00 f202 	mul.w	r2, r0, r2
 80087f0:	440a      	add	r2, r1
 80087f2:	3240      	adds	r2, #64	; 0x40
 80087f4:	8812      	ldrh	r2, [r2, #0]
 80087f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 81be 	beq.w	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	212c      	movs	r1, #44	; 0x2c
 800880a:	fb01 f303 	mul.w	r3, r1, r3
 800880e:	4413      	add	r3, r2
 8008810:	3354      	adds	r3, #84	; 0x54
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f083 0301 	eor.w	r3, r3, #1
 8008818:	b2d8      	uxtb	r0, r3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	212c      	movs	r1, #44	; 0x2c
 8008820:	fb01 f303 	mul.w	r3, r1, r3
 8008824:	4413      	add	r3, r2
 8008826:	3354      	adds	r3, #84	; 0x54
 8008828:	4602      	mov	r2, r0
 800882a:	701a      	strb	r2, [r3, #0]
}
 800882c:	e1a8      	b.n	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	212c      	movs	r1, #44	; 0x2c
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	4413      	add	r3, r2
 800883a:	3354      	adds	r3, #84	; 0x54
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f083 0301 	eor.w	r3, r3, #1
 8008842:	b2d8      	uxtb	r0, r3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	212c      	movs	r1, #44	; 0x2c
 800884a:	fb01 f303 	mul.w	r3, r1, r3
 800884e:	4413      	add	r3, r2
 8008850:	3354      	adds	r3, #84	; 0x54
 8008852:	4602      	mov	r2, r0
 8008854:	701a      	strb	r2, [r3, #0]
}
 8008856:	e193      	b.n	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b02      	cmp	r3, #2
 800886c:	f040 8106 	bne.w	8008a7c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888a:	f023 0302 	bic.w	r3, r3, #2
 800888e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	212c      	movs	r1, #44	; 0x2c
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	4413      	add	r3, r2
 800889c:	3361      	adds	r3, #97	; 0x61
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d109      	bne.n	80088b8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	212c      	movs	r1, #44	; 0x2c
 80088aa:	fb01 f303 	mul.w	r3, r1, r3
 80088ae:	4413      	add	r3, r2
 80088b0:	3360      	adds	r3, #96	; 0x60
 80088b2:	2201      	movs	r2, #1
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e0c9      	b.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	212c      	movs	r1, #44	; 0x2c
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	3361      	adds	r3, #97	; 0x61
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	d109      	bne.n	80088e0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	212c      	movs	r1, #44	; 0x2c
 80088d2:	fb01 f303 	mul.w	r3, r1, r3
 80088d6:	4413      	add	r3, r2
 80088d8:	3360      	adds	r3, #96	; 0x60
 80088da:	2205      	movs	r2, #5
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e0b5      	b.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	212c      	movs	r1, #44	; 0x2c
 80088e6:	fb01 f303 	mul.w	r3, r1, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	3361      	adds	r3, #97	; 0x61
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b06      	cmp	r3, #6
 80088f2:	d009      	beq.n	8008908 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	212c      	movs	r1, #44	; 0x2c
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	3361      	adds	r3, #97	; 0x61
 8008902:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008904:	2b08      	cmp	r3, #8
 8008906:	d150      	bne.n	80089aa <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	212c      	movs	r1, #44	; 0x2c
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	335c      	adds	r3, #92	; 0x5c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	202c      	movs	r0, #44	; 0x2c
 8008920:	fb00 f303 	mul.w	r3, r0, r3
 8008924:	440b      	add	r3, r1
 8008926:	335c      	adds	r3, #92	; 0x5c
 8008928:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	212c      	movs	r1, #44	; 0x2c
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	335c      	adds	r3, #92	; 0x5c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d912      	bls.n	8008964 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	212c      	movs	r1, #44	; 0x2c
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	4413      	add	r3, r2
 800894a:	335c      	adds	r3, #92	; 0x5c
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	212c      	movs	r1, #44	; 0x2c
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	3360      	adds	r3, #96	; 0x60
 800895e:	2204      	movs	r2, #4
 8008960:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008962:	e073      	b.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	212c      	movs	r1, #44	; 0x2c
 800896a:	fb01 f303 	mul.w	r3, r1, r3
 800896e:	4413      	add	r3, r2
 8008970:	3360      	adds	r3, #96	; 0x60
 8008972:	2202      	movs	r2, #2
 8008974:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800898c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008994:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80089a8:	e050      	b.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	212c      	movs	r1, #44	; 0x2c
 80089b0:	fb01 f303 	mul.w	r3, r1, r3
 80089b4:	4413      	add	r3, r2
 80089b6:	3361      	adds	r3, #97	; 0x61
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d122      	bne.n	8008a04 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	212c      	movs	r1, #44	; 0x2c
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	3360      	adds	r3, #96	; 0x60
 80089cc:	2202      	movs	r2, #2
 80089ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fc:	461a      	mov	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	e023      	b.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	212c      	movs	r1, #44	; 0x2c
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3361      	adds	r3, #97	; 0x61
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b07      	cmp	r3, #7
 8008a16:	d119      	bne.n	8008a4c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	335c      	adds	r3, #92	; 0x5c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	202c      	movs	r0, #44	; 0x2c
 8008a30:	fb00 f303 	mul.w	r3, r0, r3
 8008a34:	440b      	add	r3, r1
 8008a36:	335c      	adds	r3, #92	; 0x5c
 8008a38:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	212c      	movs	r1, #44	; 0x2c
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	3360      	adds	r3, #96	; 0x60
 8008a48:	2204      	movs	r2, #4
 8008a4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a58:	461a      	mov	r2, r3
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	b2d9      	uxtb	r1, r3
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	202c      	movs	r0, #44	; 0x2c
 8008a68:	fb00 f303 	mul.w	r3, r0, r3
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3360      	adds	r3, #96	; 0x60
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f007 ffcf 	bl	8010a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008a7a:	e081      	b.n	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0310 	and.w	r3, r3, #16
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	d176      	bne.n	8008b80 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	212c      	movs	r1, #44	; 0x2c
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	333f      	adds	r3, #63	; 0x3f
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d121      	bne.n	8008aea <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	212c      	movs	r1, #44	; 0x2c
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	335c      	adds	r3, #92	; 0x5c
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad2:	f043 0302 	orr.w	r3, r3, #2
 8008ad6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f005 fddb 	bl	800e69e <USB_HC_Halt>
 8008ae8:	e041      	b.n	8008b6e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	212c      	movs	r1, #44	; 0x2c
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	333f      	adds	r3, #63	; 0x3f
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	212c      	movs	r1, #44	; 0x2c
 8008b04:	fb01 f303 	mul.w	r3, r1, r3
 8008b08:	4413      	add	r3, r2
 8008b0a:	333f      	adds	r3, #63	; 0x3f
 8008b0c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d12d      	bne.n	8008b6e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	212c      	movs	r1, #44	; 0x2c
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	335c      	adds	r3, #92	; 0x5c
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d120      	bne.n	8008b6e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	212c      	movs	r1, #44	; 0x2c
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	4413      	add	r3, r2
 8008b38:	3361      	adds	r3, #97	; 0x61
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f005 fd98 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	6093      	str	r3, [r2, #8]
}
 8008b80:	bf00      	nop
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d119      	bne.n	8008bec <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2304      	movs	r3, #4
 8008bc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be4:	f043 0302 	orr.w	r3, r3, #2
 8008be8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008bea:	e3c6      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d13e      	bne.n	8008c80 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2320      	movs	r3, #32
 8008c12:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	212c      	movs	r1, #44	; 0x2c
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	333d      	adds	r3, #61	; 0x3d
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	f040 83a8 	bne.w	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	212c      	movs	r1, #44	; 0x2c
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	333d      	adds	r3, #61	; 0x3d
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	212c      	movs	r1, #44	; 0x2c
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	3360      	adds	r3, #96	; 0x60
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c68:	f043 0302 	orr.w	r3, r3, #2
 8008c6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	b2d2      	uxtb	r2, r2
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f005 fd10 	bl	800e69e <USB_HC_Halt>
}
 8008c7e:	e37c      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c96:	d122      	bne.n	8008cde <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cb2:	f043 0302 	orr.w	r3, r3, #2
 8008cb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f005 fceb 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cda:	6093      	str	r3, [r2, #8]
}
 8008cdc:	e34d      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d150      	bne.n	8008d96 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	212c      	movs	r1, #44	; 0x2c
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	335c      	adds	r3, #92	; 0x5c
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d111      	bne.n	8008d40 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	212c      	movs	r1, #44	; 0x2c
 8008d22:	fb01 f303 	mul.w	r3, r1, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	333d      	adds	r3, #61	; 0x3d
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d5a:	f043 0302 	orr.w	r3, r3, #2
 8008d5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f005 fc97 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2301      	movs	r3, #1
 8008d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	212c      	movs	r1, #44	; 0x2c
 8008d88:	fb01 f303 	mul.w	r3, r1, r3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3361      	adds	r3, #97	; 0x61
 8008d90:	2201      	movs	r2, #1
 8008d92:	701a      	strb	r2, [r3, #0]
}
 8008d94:	e2f1      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	d13c      	bne.n	8008e26 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	212c      	movs	r1, #44	; 0x2c
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	4413      	add	r3, r2
 8008db8:	3361      	adds	r3, #97	; 0x61
 8008dba:	2204      	movs	r2, #4
 8008dbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	212c      	movs	r1, #44	; 0x2c
 8008dc4:	fb01 f303 	mul.w	r3, r1, r3
 8008dc8:	4413      	add	r3, r2
 8008dca:	333d      	adds	r3, #61	; 0x3d
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	212c      	movs	r1, #44	; 0x2c
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	335c      	adds	r3, #92	; 0x5c
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f005 fc46 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1e:	461a      	mov	r2, r3
 8008e20:	2340      	movs	r3, #64	; 0x40
 8008e22:	6093      	str	r3, [r2, #8]
}
 8008e24:	e2a9      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d12a      	bne.n	8008e92 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e48:	461a      	mov	r2, r3
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e68:	f043 0302 	orr.w	r3, r3, #2
 8008e6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f005 fc10 	bl	800e69e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	212c      	movs	r1, #44	; 0x2c
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	3361      	adds	r3, #97	; 0x61
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	701a      	strb	r2, [r3, #0]
}
 8008e90:	e273      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b10      	cmp	r3, #16
 8008ea6:	d150      	bne.n	8008f4a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	212c      	movs	r1, #44	; 0x2c
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	335c      	adds	r3, #92	; 0x5c
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	212c      	movs	r1, #44	; 0x2c
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	3361      	adds	r3, #97	; 0x61
 8008ec8:	2203      	movs	r2, #3
 8008eca:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	212c      	movs	r1, #44	; 0x2c
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	333d      	adds	r3, #61	; 0x3d
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d112      	bne.n	8008f06 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	212c      	movs	r1, #44	; 0x2c
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	4413      	add	r3, r2
 8008eec:	333c      	adds	r3, #60	; 0x3c
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d108      	bne.n	8008f06 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	212c      	movs	r1, #44	; 0x2c
 8008efa:	fb01 f303 	mul.w	r3, r1, r3
 8008efe:	4413      	add	r3, r2
 8008f00:	333d      	adds	r3, #61	; 0x3d
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f20:	f043 0302 	orr.w	r3, r3, #2
 8008f24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	b2d2      	uxtb	r2, r2
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f005 fbb4 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f42:	461a      	mov	r2, r3
 8008f44:	2310      	movs	r3, #16
 8008f46:	6093      	str	r3, [r2, #8]
}
 8008f48:	e217      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d174      	bne.n	800904a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d121      	bne.n	8008fac <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	212c      	movs	r1, #44	; 0x2c
 8008f6e:	fb01 f303 	mul.w	r3, r1, r3
 8008f72:	4413      	add	r3, r2
 8008f74:	3361      	adds	r3, #97	; 0x61
 8008f76:	2206      	movs	r2, #6
 8008f78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f94:	f043 0302 	orr.w	r3, r3, #2
 8008f98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	b2d2      	uxtb	r2, r2
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f005 fb7a 	bl	800e69e <USB_HC_Halt>
 8008faa:	e044      	b.n	8009036 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	212c      	movs	r1, #44	; 0x2c
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	335c      	adds	r3, #92	; 0x5c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	202c      	movs	r0, #44	; 0x2c
 8008fc4:	fb00 f303 	mul.w	r3, r0, r3
 8008fc8:	440b      	add	r3, r1
 8008fca:	335c      	adds	r3, #92	; 0x5c
 8008fcc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	212c      	movs	r1, #44	; 0x2c
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	4413      	add	r3, r2
 8008fda:	335c      	adds	r3, #92	; 0x5c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d920      	bls.n	8009024 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	212c      	movs	r1, #44	; 0x2c
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	335c      	adds	r3, #92	; 0x5c
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	212c      	movs	r1, #44	; 0x2c
 8008ffa:	fb01 f303 	mul.w	r3, r1, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	3360      	adds	r3, #96	; 0x60
 8009002:	2204      	movs	r2, #4
 8009004:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	b2d9      	uxtb	r1, r3
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	202c      	movs	r0, #44	; 0x2c
 8009010:	fb00 f303 	mul.w	r3, r0, r3
 8009014:	4413      	add	r3, r2
 8009016:	3360      	adds	r3, #96	; 0x60
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f007 fcfb 	bl	8010a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009022:	e008      	b.n	8009036 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	212c      	movs	r1, #44	; 0x2c
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	3360      	adds	r3, #96	; 0x60
 8009032:	2202      	movs	r2, #2
 8009034:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	4413      	add	r3, r2
 800903e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009042:	461a      	mov	r2, r3
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	6093      	str	r3, [r2, #8]
}
 8009048:	e197      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800905c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009060:	d134      	bne.n	80090cc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	440a      	add	r2, r1
 8009078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	b2d2      	uxtb	r2, r2
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f005 fb06 	bl	800e69e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	4413      	add	r3, r2
 800909a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909e:	461a      	mov	r2, r3
 80090a0:	2310      	movs	r3, #16
 80090a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b0:	461a      	mov	r2, r3
 80090b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	212c      	movs	r1, #44	; 0x2c
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	3361      	adds	r3, #97	; 0x61
 80090c6:	2208      	movs	r2, #8
 80090c8:	701a      	strb	r2, [r3, #0]
}
 80090ca:	e156      	b.n	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b02      	cmp	r3, #2
 80090e0:	f040 814b 	bne.w	800937a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090fe:	f023 0302 	bic.w	r3, r3, #2
 8009102:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	212c      	movs	r1, #44	; 0x2c
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	4413      	add	r3, r2
 8009110:	3361      	adds	r3, #97	; 0x61
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d179      	bne.n	800920c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	212c      	movs	r1, #44	; 0x2c
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	3360      	adds	r3, #96	; 0x60
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	212c      	movs	r1, #44	; 0x2c
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	4413      	add	r3, r2
 8009136:	333f      	adds	r3, #63	; 0x3f
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d00a      	beq.n	8009154 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	212c      	movs	r1, #44	; 0x2c
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	333f      	adds	r3, #63	; 0x3f
 800914c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800914e:	2b03      	cmp	r3, #3
 8009150:	f040 80fc 	bne.w	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d142      	bne.n	80091e2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	212c      	movs	r1, #44	; 0x2c
 8009162:	fb01 f303 	mul.w	r3, r1, r3
 8009166:	4413      	add	r3, r2
 8009168:	334c      	adds	r3, #76	; 0x4c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80ed 	beq.w	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	212c      	movs	r1, #44	; 0x2c
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	4413      	add	r3, r2
 800917e:	334c      	adds	r3, #76	; 0x4c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	202c      	movs	r0, #44	; 0x2c
 8009188:	fb00 f202 	mul.w	r2, r0, r2
 800918c:	440a      	add	r2, r1
 800918e:	3240      	adds	r2, #64	; 0x40
 8009190:	8812      	ldrh	r2, [r2, #0]
 8009192:	4413      	add	r3, r2
 8009194:	3b01      	subs	r3, #1
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	202c      	movs	r0, #44	; 0x2c
 800919c:	fb00 f202 	mul.w	r2, r0, r2
 80091a0:	440a      	add	r2, r1
 80091a2:	3240      	adds	r2, #64	; 0x40
 80091a4:	8812      	ldrh	r2, [r2, #0]
 80091a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80ca 	beq.w	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	212c      	movs	r1, #44	; 0x2c
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	4413      	add	r3, r2
 80091c4:	3355      	adds	r3, #85	; 0x55
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f083 0301 	eor.w	r3, r3, #1
 80091cc:	b2d8      	uxtb	r0, r3
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	212c      	movs	r1, #44	; 0x2c
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	4413      	add	r3, r2
 80091da:	3355      	adds	r3, #85	; 0x55
 80091dc:	4602      	mov	r2, r0
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e0b4      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	212c      	movs	r1, #44	; 0x2c
 80091e8:	fb01 f303 	mul.w	r3, r1, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	3355      	adds	r3, #85	; 0x55
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f083 0301 	eor.w	r3, r3, #1
 80091f6:	b2d8      	uxtb	r0, r3
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	212c      	movs	r1, #44	; 0x2c
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	4413      	add	r3, r2
 8009204:	3355      	adds	r3, #85	; 0x55
 8009206:	4602      	mov	r2, r0
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e09f      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	212c      	movs	r1, #44	; 0x2c
 8009212:	fb01 f303 	mul.w	r3, r1, r3
 8009216:	4413      	add	r3, r2
 8009218:	3361      	adds	r3, #97	; 0x61
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b03      	cmp	r3, #3
 800921e:	d109      	bne.n	8009234 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	212c      	movs	r1, #44	; 0x2c
 8009226:	fb01 f303 	mul.w	r3, r1, r3
 800922a:	4413      	add	r3, r2
 800922c:	3360      	adds	r3, #96	; 0x60
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	e08b      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	212c      	movs	r1, #44	; 0x2c
 800923a:	fb01 f303 	mul.w	r3, r1, r3
 800923e:	4413      	add	r3, r2
 8009240:	3361      	adds	r3, #97	; 0x61
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b04      	cmp	r3, #4
 8009246:	d109      	bne.n	800925c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	212c      	movs	r1, #44	; 0x2c
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	4413      	add	r3, r2
 8009254:	3360      	adds	r3, #96	; 0x60
 8009256:	2202      	movs	r2, #2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e077      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	212c      	movs	r1, #44	; 0x2c
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	3361      	adds	r3, #97	; 0x61
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b05      	cmp	r3, #5
 800926e:	d109      	bne.n	8009284 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	212c      	movs	r1, #44	; 0x2c
 8009276:	fb01 f303 	mul.w	r3, r1, r3
 800927a:	4413      	add	r3, r2
 800927c:	3360      	adds	r3, #96	; 0x60
 800927e:	2205      	movs	r2, #5
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e063      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	212c      	movs	r1, #44	; 0x2c
 800928a:	fb01 f303 	mul.w	r3, r1, r3
 800928e:	4413      	add	r3, r2
 8009290:	3361      	adds	r3, #97	; 0x61
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b06      	cmp	r3, #6
 8009296:	d009      	beq.n	80092ac <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	212c      	movs	r1, #44	; 0x2c
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	4413      	add	r3, r2
 80092a4:	3361      	adds	r3, #97	; 0x61
 80092a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d14f      	bne.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	212c      	movs	r1, #44	; 0x2c
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	335c      	adds	r3, #92	; 0x5c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	202c      	movs	r0, #44	; 0x2c
 80092c4:	fb00 f303 	mul.w	r3, r0, r3
 80092c8:	440b      	add	r3, r1
 80092ca:	335c      	adds	r3, #92	; 0x5c
 80092cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	212c      	movs	r1, #44	; 0x2c
 80092d4:	fb01 f303 	mul.w	r3, r1, r3
 80092d8:	4413      	add	r3, r2
 80092da:	335c      	adds	r3, #92	; 0x5c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d912      	bls.n	8009308 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	212c      	movs	r1, #44	; 0x2c
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	4413      	add	r3, r2
 80092ee:	335c      	adds	r3, #92	; 0x5c
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	212c      	movs	r1, #44	; 0x2c
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	4413      	add	r3, r2
 8009300:	3360      	adds	r3, #96	; 0x60
 8009302:	2204      	movs	r2, #4
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	e021      	b.n	800934c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	212c      	movs	r1, #44	; 0x2c
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3360      	adds	r3, #96	; 0x60
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009330:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009338:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	4413      	add	r3, r2
 8009342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009346:	461a      	mov	r2, r3
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	4413      	add	r3, r2
 8009354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009358:	461a      	mov	r2, r3
 800935a:	2302      	movs	r3, #2
 800935c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	b2d9      	uxtb	r1, r3
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	202c      	movs	r0, #44	; 0x2c
 8009368:	fb00 f303 	mul.w	r3, r0, r3
 800936c:	4413      	add	r3, r2
 800936e:	3360      	adds	r3, #96	; 0x60
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f007 fb4f 	bl	8010a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800937a:	bf00      	nop
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b08a      	sub	sp, #40	; 0x28
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	0c5b      	lsrs	r3, r3, #17
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	091b      	lsrs	r3, r3, #4
 80093b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d004      	beq.n	80093c8 <HCD_RXQLVL_IRQHandler+0x46>
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b05      	cmp	r3, #5
 80093c2:	f000 80a9 	beq.w	8009518 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80093c6:	e0aa      	b.n	800951e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 80a6 	beq.w	800951c <HCD_RXQLVL_IRQHandler+0x19a>
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	212c      	movs	r1, #44	; 0x2c
 80093d6:	fb01 f303 	mul.w	r3, r1, r3
 80093da:	4413      	add	r3, r2
 80093dc:	3344      	adds	r3, #68	; 0x44
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 809b 	beq.w	800951c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	212c      	movs	r1, #44	; 0x2c
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	4413      	add	r3, r2
 80093f2:	3350      	adds	r3, #80	; 0x50
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	441a      	add	r2, r3
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	202c      	movs	r0, #44	; 0x2c
 8009400:	fb00 f303 	mul.w	r3, r0, r3
 8009404:	440b      	add	r3, r1
 8009406:	334c      	adds	r3, #76	; 0x4c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d87a      	bhi.n	8009504 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	212c      	movs	r1, #44	; 0x2c
 8009418:	fb01 f303 	mul.w	r3, r1, r3
 800941c:	4413      	add	r3, r2
 800941e:	3344      	adds	r3, #68	; 0x44
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	b292      	uxth	r2, r2
 8009426:	4619      	mov	r1, r3
 8009428:	f004 fcd7 	bl	800ddda <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	212c      	movs	r1, #44	; 0x2c
 8009432:	fb01 f303 	mul.w	r3, r1, r3
 8009436:	4413      	add	r3, r2
 8009438:	3344      	adds	r3, #68	; 0x44
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	441a      	add	r2, r3
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	202c      	movs	r0, #44	; 0x2c
 8009446:	fb00 f303 	mul.w	r3, r0, r3
 800944a:	440b      	add	r3, r1
 800944c:	3344      	adds	r3, #68	; 0x44
 800944e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	212c      	movs	r1, #44	; 0x2c
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	4413      	add	r3, r2
 800945c:	3350      	adds	r3, #80	; 0x50
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	441a      	add	r2, r3
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	202c      	movs	r0, #44	; 0x2c
 800946a:	fb00 f303 	mul.w	r3, r0, r3
 800946e:	440b      	add	r3, r1
 8009470:	3350      	adds	r3, #80	; 0x50
 8009472:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	4413      	add	r3, r2
 800947c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	0cdb      	lsrs	r3, r3, #19
 8009484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009488:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	212c      	movs	r1, #44	; 0x2c
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	3340      	adds	r3, #64	; 0x40
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4293      	cmp	r3, r2
 80094a0:	d13c      	bne.n	800951c <HCD_RXQLVL_IRQHandler+0x19a>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d039      	beq.n	800951c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	461a      	mov	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	212c      	movs	r1, #44	; 0x2c
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	4413      	add	r3, r2
 80094e6:	3354      	adds	r3, #84	; 0x54
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f083 0301 	eor.w	r3, r3, #1
 80094ee:	b2d8      	uxtb	r0, r3
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	212c      	movs	r1, #44	; 0x2c
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	3354      	adds	r3, #84	; 0x54
 80094fe:	4602      	mov	r2, r0
 8009500:	701a      	strb	r2, [r3, #0]
      break;
 8009502:	e00b      	b.n	800951c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	212c      	movs	r1, #44	; 0x2c
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	4413      	add	r3, r2
 8009510:	3360      	adds	r3, #96	; 0x60
 8009512:	2204      	movs	r2, #4
 8009514:	701a      	strb	r2, [r3, #0]
      break;
 8009516:	e001      	b.n	800951c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800951c:	bf00      	nop
  }
}
 800951e:	bf00      	nop
 8009520:	3728      	adds	r7, #40	; 0x28
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009552:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d10b      	bne.n	8009576 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b01      	cmp	r3, #1
 8009566:	d102      	bne.n	800956e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f007 fa39 	bl	80109e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f043 0302 	orr.w	r3, r3, #2
 8009574:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b08      	cmp	r3, #8
 800957e:	d132      	bne.n	80095e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f043 0308 	orr.w	r3, r3, #8
 8009586:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b04      	cmp	r3, #4
 8009590:	d126      	bne.n	80095e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d113      	bne.n	80095c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80095a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095a4:	d106      	bne.n	80095b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2102      	movs	r1, #2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f004 fd4f 	bl	800e050 <USB_InitFSLSPClkSel>
 80095b2:	e011      	b.n	80095d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2101      	movs	r1, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	f004 fd48 	bl	800e050 <USB_InitFSLSPClkSel>
 80095c0:	e00a      	b.n	80095d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d106      	bne.n	80095d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095d0:	461a      	mov	r2, r3
 80095d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80095d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f007 fa2b 	bl	8010a34 <HAL_HCD_PortEnabled_Callback>
 80095de:	e002      	b.n	80095e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f007 fa35 	bl	8010a50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d103      	bne.n	80095f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f043 0320 	orr.w	r3, r3, #32
 80095f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095fe:	461a      	mov	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6013      	str	r3, [r2, #0]
}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e12b      	b.n	8009876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7f8 fafa 	bl	8001c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2224      	movs	r2, #36	; 0x24
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0201 	bic.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800965e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800966e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009670:	f002 fcec 	bl	800c04c <HAL_RCC_GetPCLK1Freq>
 8009674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4a81      	ldr	r2, [pc, #516]	; (8009880 <HAL_I2C_Init+0x274>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d807      	bhi.n	8009690 <HAL_I2C_Init+0x84>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a80      	ldr	r2, [pc, #512]	; (8009884 <HAL_I2C_Init+0x278>)
 8009684:	4293      	cmp	r3, r2
 8009686:	bf94      	ite	ls
 8009688:	2301      	movls	r3, #1
 800968a:	2300      	movhi	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	e006      	b.n	800969e <HAL_I2C_Init+0x92>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a7d      	ldr	r2, [pc, #500]	; (8009888 <HAL_I2C_Init+0x27c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	bf94      	ite	ls
 8009698:	2301      	movls	r3, #1
 800969a:	2300      	movhi	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e0e7      	b.n	8009876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4a78      	ldr	r2, [pc, #480]	; (800988c <HAL_I2C_Init+0x280>)
 80096aa:	fba2 2303 	umull	r2, r3, r2, r3
 80096ae:	0c9b      	lsrs	r3, r3, #18
 80096b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	4a6a      	ldr	r2, [pc, #424]	; (8009880 <HAL_I2C_Init+0x274>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d802      	bhi.n	80096e0 <HAL_I2C_Init+0xd4>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	3301      	adds	r3, #1
 80096de:	e009      	b.n	80096f4 <HAL_I2C_Init+0xe8>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	4a69      	ldr	r2, [pc, #420]	; (8009890 <HAL_I2C_Init+0x284>)
 80096ec:	fba2 2303 	umull	r2, r3, r2, r3
 80096f0:	099b      	lsrs	r3, r3, #6
 80096f2:	3301      	adds	r3, #1
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6812      	ldr	r2, [r2, #0]
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	495c      	ldr	r1, [pc, #368]	; (8009880 <HAL_I2C_Init+0x274>)
 8009710:	428b      	cmp	r3, r1
 8009712:	d819      	bhi.n	8009748 <HAL_I2C_Init+0x13c>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	1e59      	subs	r1, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009722:	1c59      	adds	r1, r3, #1
 8009724:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009728:	400b      	ands	r3, r1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <HAL_I2C_Init+0x138>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1e59      	subs	r1, r3, #1
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	fbb1 f3f3 	udiv	r3, r1, r3
 800973c:	3301      	adds	r3, #1
 800973e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009742:	e051      	b.n	80097e8 <HAL_I2C_Init+0x1dc>
 8009744:	2304      	movs	r3, #4
 8009746:	e04f      	b.n	80097e8 <HAL_I2C_Init+0x1dc>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d111      	bne.n	8009774 <HAL_I2C_Init+0x168>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	1e58      	subs	r0, r3, #1
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6859      	ldr	r1, [r3, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	440b      	add	r3, r1
 800975e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009762:	3301      	adds	r3, #1
 8009764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009768:	2b00      	cmp	r3, #0
 800976a:	bf0c      	ite	eq
 800976c:	2301      	moveq	r3, #1
 800976e:	2300      	movne	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	e012      	b.n	800979a <HAL_I2C_Init+0x18e>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	1e58      	subs	r0, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6859      	ldr	r1, [r3, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	0099      	lsls	r1, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	fbb0 f3f3 	udiv	r3, r0, r3
 800978a:	3301      	adds	r3, #1
 800978c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009790:	2b00      	cmp	r3, #0
 8009792:	bf0c      	ite	eq
 8009794:	2301      	moveq	r3, #1
 8009796:	2300      	movne	r3, #0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <HAL_I2C_Init+0x196>
 800979e:	2301      	movs	r3, #1
 80097a0:	e022      	b.n	80097e8 <HAL_I2C_Init+0x1dc>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10e      	bne.n	80097c8 <HAL_I2C_Init+0x1bc>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1e58      	subs	r0, r3, #1
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6859      	ldr	r1, [r3, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	440b      	add	r3, r1
 80097b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80097bc:	3301      	adds	r3, #1
 80097be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c6:	e00f      	b.n	80097e8 <HAL_I2C_Init+0x1dc>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	1e58      	subs	r0, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6859      	ldr	r1, [r3, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	0099      	lsls	r1, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	fbb0 f3f3 	udiv	r3, r0, r3
 80097de:	3301      	adds	r3, #1
 80097e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	6809      	ldr	r1, [r1, #0]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69da      	ldr	r2, [r3, #28]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6911      	ldr	r1, [r2, #16]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68d2      	ldr	r2, [r2, #12]
 8009822:	4311      	orrs	r1, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	430b      	orrs	r3, r1
 800982a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	000186a0 	.word	0x000186a0
 8009884:	001e847f 	.word	0x001e847f
 8009888:	003d08ff 	.word	0x003d08ff
 800988c:	431bde83 	.word	0x431bde83
 8009890:	10624dd3 	.word	0x10624dd3

08009894 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	461a      	mov	r2, r3
 80098a0:	460b      	mov	r3, r1
 80098a2:	817b      	strh	r3, [r7, #10]
 80098a4:	4613      	mov	r3, r2
 80098a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098a8:	f7fd fe0a 	bl	80074c0 <HAL_GetTick>
 80098ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	f040 80e0 	bne.w	8009a7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2319      	movs	r3, #25
 80098c2:	2201      	movs	r2, #1
 80098c4:	4970      	ldr	r1, [pc, #448]	; (8009a88 <HAL_I2C_Master_Transmit+0x1f4>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f001 f8f6 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80098d2:	2302      	movs	r3, #2
 80098d4:	e0d3      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_I2C_Master_Transmit+0x50>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e0cc      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d007      	beq.n	800990a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0201 	orr.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2210      	movs	r2, #16
 8009926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	893a      	ldrh	r2, [r7, #8]
 800993a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a50      	ldr	r2, [pc, #320]	; (8009a8c <HAL_I2C_Master_Transmit+0x1f8>)
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800994c:	8979      	ldrh	r1, [r7, #10]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a3a      	ldr	r2, [r7, #32]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fde2 	bl	800a51c <I2C_MasterRequestWrite>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e08d      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009978:	e066      	b.n	8009a48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	6a39      	ldr	r1, [r7, #32]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f001 f970 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00d      	beq.n	80099a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	2b04      	cmp	r3, #4
 8009990:	d107      	bne.n	80099a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e06b      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d11b      	bne.n	8009a1c <HAL_I2C_Master_Transmit+0x188>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	6a39      	ldr	r1, [r7, #32]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f001 f960 	bl	800ace6 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00d      	beq.n	8009a48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d107      	bne.n	8009a44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e01a      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d194      	bne.n	800997a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	00100002 	.word	0x00100002
 8009a8c:	ffff0000 	.word	0xffff0000

08009a90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08c      	sub	sp, #48	; 0x30
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	817b      	strh	r3, [r7, #10]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aa4:	f7fd fd0c 	bl	80074c0 <HAL_GetTick>
 8009aa8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	f040 820b 	bne.w	8009ece <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2319      	movs	r3, #25
 8009abe:	2201      	movs	r2, #1
 8009ac0:	497c      	ldr	r1, [pc, #496]	; (8009cb4 <HAL_I2C_Master_Receive+0x224>)
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 fff8 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e1fe      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d101      	bne.n	8009ae0 <HAL_I2C_Master_Receive+0x50>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e1f7      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d007      	beq.n	8009b06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f042 0201 	orr.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2222      	movs	r2, #34	; 0x22
 8009b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2210      	movs	r2, #16
 8009b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	893a      	ldrh	r2, [r7, #8]
 8009b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4a5c      	ldr	r2, [pc, #368]	; (8009cb8 <HAL_I2C_Master_Receive+0x228>)
 8009b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b48:	8979      	ldrh	r1, [r7, #10]
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 fd66 	bl	800a620 <I2C_MasterRequestRead>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e1b8      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d113      	bne.n	8009b8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b66:	2300      	movs	r3, #0
 8009b68:	623b      	str	r3, [r7, #32]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	623b      	str	r3, [r7, #32]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	623b      	str	r3, [r7, #32]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	e18c      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d11b      	bne.n	8009bce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	61fb      	str	r3, [r7, #28]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	61fb      	str	r3, [r7, #28]
 8009bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	e16c      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d11b      	bne.n	8009c0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	e14c      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	617b      	str	r3, [r7, #20]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	617b      	str	r3, [r7, #20]
 8009c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009c34:	e138      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	f200 80f1 	bhi.w	8009e22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d123      	bne.n	8009c90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f001 f88b 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e139      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691a      	ldr	r2, [r3, #16]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c8e:	e10b      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d14e      	bne.n	8009d36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4906      	ldr	r1, [pc, #24]	; (8009cbc <HAL_I2C_Master_Receive+0x22c>)
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 ff08 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d008      	beq.n	8009cc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e10e      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
 8009cb2:	bf00      	nop
 8009cb4:	00100002 	.word	0x00100002
 8009cb8:	ffff0000 	.word	0xffff0000
 8009cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691a      	ldr	r2, [r3, #16]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d34:	e0b8      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4966      	ldr	r1, [pc, #408]	; (8009ed8 <HAL_I2C_Master_Receive+0x448>)
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 feb9 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e0bf      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691a      	ldr	r2, [r3, #16]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	b2d2      	uxtb	r2, r2
 8009d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	2200      	movs	r2, #0
 8009d9a:	494f      	ldr	r1, [pc, #316]	; (8009ed8 <HAL_I2C_Master_Receive+0x448>)
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 fe8b 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e091      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	b2d2      	uxtb	r2, r2
 8009dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b01      	subs	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	b2d2      	uxtb	r2, r2
 8009dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e20:	e042      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 ff9e 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e04c      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d118      	bne.n	8009ea8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691a      	ldr	r2, [r3, #16]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f aec2 	bne.w	8009c36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e000      	b.n	8009ed0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3728      	adds	r7, #40	; 0x28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	00010004 	.word	0x00010004

08009edc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	817b      	strh	r3, [r7, #10]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	813b      	strh	r3, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ef6:	f7fd fae3 	bl	80074c0 <HAL_GetTick>
 8009efa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	f040 80d9 	bne.w	800a0bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	2319      	movs	r3, #25
 8009f10:	2201      	movs	r2, #1
 8009f12:	496d      	ldr	r1, [pc, #436]	; (800a0c8 <HAL_I2C_Mem_Write+0x1ec>)
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 fdcf 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
 8009f22:	e0cc      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_I2C_Mem_Write+0x56>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e0c5      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d007      	beq.n	8009f58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2221      	movs	r2, #33	; 0x21
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2240      	movs	r2, #64	; 0x40
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a3a      	ldr	r2, [r7, #32]
 8009f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4a4d      	ldr	r2, [pc, #308]	; (800a0cc <HAL_I2C_Mem_Write+0x1f0>)
 8009f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f9a:	88f8      	ldrh	r0, [r7, #6]
 8009f9c:	893a      	ldrh	r2, [r7, #8]
 8009f9e:	8979      	ldrh	r1, [r7, #10]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	4603      	mov	r3, r0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 fc06 	bl	800a7bc <I2C_RequestMemoryWrite>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d052      	beq.n	800a05c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e081      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fe50 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00d      	beq.n	8009fe6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d107      	bne.n	8009fe2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e06b      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a000:	3b01      	subs	r3, #1
 800a002:	b29a      	uxth	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b04      	cmp	r3, #4
 800a022:	d11b      	bne.n	800a05c <HAL_I2C_Mem_Write+0x180>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d017      	beq.n	800a05c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	781a      	ldrb	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a046:	3b01      	subs	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a052:	b29b      	uxth	r3, r3
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1aa      	bne.n	8009fba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fe3c 	bl	800ace6 <I2C_WaitOnBTFFlagUntilTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00d      	beq.n	800a090 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d107      	bne.n	800a08c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a08a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e016      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e000      	b.n	800a0be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a0bc:	2302      	movs	r3, #2
  }
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	00100002 	.word	0x00100002
 800a0cc:	ffff0000 	.word	0xffff0000

0800a0d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08c      	sub	sp, #48	; 0x30
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	461a      	mov	r2, r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	817b      	strh	r3, [r7, #10]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	813b      	strh	r3, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0ea:	f7fd f9e9 	bl	80074c0 <HAL_GetTick>
 800a0ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	f040 8208 	bne.w	800a50e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	2319      	movs	r3, #25
 800a104:	2201      	movs	r2, #1
 800a106:	497b      	ldr	r1, [pc, #492]	; (800a2f4 <HAL_I2C_Mem_Read+0x224>)
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fcd5 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a114:	2302      	movs	r3, #2
 800a116:	e1fb      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_I2C_Mem_Read+0x56>
 800a122:	2302      	movs	r3, #2
 800a124:	e1f4      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d007      	beq.n	800a14c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0201 	orr.w	r2, r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a15a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2222      	movs	r2, #34	; 0x22
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2240      	movs	r2, #64	; 0x40
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a17c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4a5b      	ldr	r2, [pc, #364]	; (800a2f8 <HAL_I2C_Mem_Read+0x228>)
 800a18c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a18e:	88f8      	ldrh	r0, [r7, #6]
 800a190:	893a      	ldrh	r2, [r7, #8]
 800a192:	8979      	ldrh	r1, [r7, #10]
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	4603      	mov	r3, r0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fba2 	bl	800a8e8 <I2C_RequestMemoryRead>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e1b0      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d113      	bne.n	800a1de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	623b      	str	r3, [r7, #32]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	623b      	str	r3, [r7, #32]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e184      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d11b      	bne.n	800a21e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	61fb      	str	r3, [r7, #28]
 800a20a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	e164      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a222:	2b02      	cmp	r3, #2
 800a224:	d11b      	bne.n	800a25e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a234:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a246:	2300      	movs	r3, #0
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	61bb      	str	r3, [r7, #24]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	61bb      	str	r3, [r7, #24]
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	e144      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a274:	e138      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	f200 80f1 	bhi.w	800a462 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a284:	2b01      	cmp	r3, #1
 800a286:	d123      	bne.n	800a2d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fd6b 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e139      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691a      	ldr	r2, [r3, #16]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	b2d2      	uxtb	r2, r2
 800a2a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2ce:	e10b      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d14e      	bne.n	800a376 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4906      	ldr	r1, [pc, #24]	; (800a2fc <HAL_I2C_Mem_Read+0x22c>)
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fbe8 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d008      	beq.n	800a300 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e10e      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
 800a2f2:	bf00      	nop
 800a2f4:	00100002 	.word	0x00100002
 800a2f8:	ffff0000 	.word	0xffff0000
 800a2fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a30e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a374:	e0b8      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	2200      	movs	r2, #0
 800a37e:	4966      	ldr	r1, [pc, #408]	; (800a518 <HAL_I2C_Mem_Read+0x448>)
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fb99 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e0bf      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	2200      	movs	r2, #0
 800a3da:	494f      	ldr	r1, [pc, #316]	; (800a518 <HAL_I2C_Mem_Read+0x448>)
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 fb6b 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e091      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	691a      	ldr	r2, [r3, #16]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	b2d2      	uxtb	r2, r2
 800a43a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a460:	e042      	b.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fc7e 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e04c      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a492:	3b01      	subs	r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	d118      	bne.n	800a4e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	b2d2      	uxtb	r2, r2
 800a4c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f47f aec2 	bne.w	800a276 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2220      	movs	r2, #32
 800a4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e000      	b.n	800a510 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a50e:	2302      	movs	r3, #2
  }
}
 800a510:	4618      	mov	r0, r3
 800a512:	3728      	adds	r7, #40	; 0x28
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	00010004 	.word	0x00010004

0800a51c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	460b      	mov	r3, r1
 800a52a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2b08      	cmp	r3, #8
 800a536:	d006      	beq.n	800a546 <I2C_MasterRequestWrite+0x2a>
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d003      	beq.n	800a546 <I2C_MasterRequestWrite+0x2a>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a544:	d108      	bne.n	800a558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	e00b      	b.n	800a570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	2b12      	cmp	r3, #18
 800a55e:	d107      	bne.n	800a570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a56e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 fa9b 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00d      	beq.n	800a5a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a596:	d103      	bne.n	800a5a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a59e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e035      	b.n	800a610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ac:	d108      	bne.n	800a5c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5ae:	897b      	ldrh	r3, [r7, #10]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5bc:	611a      	str	r2, [r3, #16]
 800a5be:	e01b      	b.n	800a5f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a5c0:	897b      	ldrh	r3, [r7, #10]
 800a5c2:	11db      	asrs	r3, r3, #7
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0306 	and.w	r3, r3, #6
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f063 030f 	orn	r3, r3, #15
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	490e      	ldr	r1, [pc, #56]	; (800a618 <I2C_MasterRequestWrite+0xfc>)
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fac1 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e010      	b.n	800a610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a5ee:	897b      	ldrh	r3, [r7, #10]
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	4907      	ldr	r1, [pc, #28]	; (800a61c <I2C_MasterRequestWrite+0x100>)
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fab1 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	00010008 	.word	0x00010008
 800a61c:	00010002 	.word	0x00010002

0800a620 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af02      	add	r7, sp, #8
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	460b      	mov	r3, r1
 800a62e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a644:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d006      	beq.n	800a65a <I2C_MasterRequestRead+0x3a>
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d003      	beq.n	800a65a <I2C_MasterRequestRead+0x3a>
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a658:	d108      	bne.n	800a66c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e00b      	b.n	800a684 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	2b11      	cmp	r3, #17
 800a672:	d107      	bne.n	800a684 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fa11 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00d      	beq.n	800a6b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6aa:	d103      	bne.n	800a6b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e079      	b.n	800a7ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6c0:	d108      	bne.n	800a6d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a6c2:	897b      	ldrh	r3, [r7, #10]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	611a      	str	r2, [r3, #16]
 800a6d2:	e05f      	b.n	800a794 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6d4:	897b      	ldrh	r3, [r7, #10]
 800a6d6:	11db      	asrs	r3, r3, #7
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	f003 0306 	and.w	r3, r3, #6
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f063 030f 	orn	r3, r3, #15
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	4930      	ldr	r1, [pc, #192]	; (800a7b4 <I2C_MasterRequestRead+0x194>)
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fa37 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e054      	b.n	800a7ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a702:	897b      	ldrh	r3, [r7, #10]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	4929      	ldr	r1, [pc, #164]	; (800a7b8 <I2C_MasterRequestRead+0x198>)
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 fa27 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e044      	b.n	800a7ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	695b      	ldr	r3, [r3, #20]
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a746:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f9af 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00d      	beq.n	800a77c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a76e:	d103      	bne.n	800a778 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a776:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e017      	b.n	800a7ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a77c:	897b      	ldrh	r3, [r7, #10]
 800a77e:	11db      	asrs	r3, r3, #7
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0306 	and.w	r3, r3, #6
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f063 030e 	orn	r3, r3, #14
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	4907      	ldr	r1, [pc, #28]	; (800a7b8 <I2C_MasterRequestRead+0x198>)
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f9e3 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	00010008 	.word	0x00010008
 800a7b8:	00010002 	.word	0x00010002

0800a7bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	817b      	strh	r3, [r7, #10]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	813b      	strh	r3, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f960 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80c:	d103      	bne.n	800a816 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e05f      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a81a:	897b      	ldrh	r3, [r7, #10]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	6a3a      	ldr	r2, [r7, #32]
 800a82e:	492d      	ldr	r1, [pc, #180]	; (800a8e4 <I2C_RequestMemoryWrite+0x128>)
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f998 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e04c      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a858:	6a39      	ldr	r1, [r7, #32]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fa02 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00d      	beq.n	800a882 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d107      	bne.n	800a87e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a87c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e02b      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d105      	bne.n	800a894 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a888:	893b      	ldrh	r3, [r7, #8]
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	611a      	str	r2, [r3, #16]
 800a892:	e021      	b.n	800a8d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a4:	6a39      	ldr	r1, [r7, #32]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f9dc 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00d      	beq.n	800a8ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d107      	bne.n	800a8ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e005      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8ce:	893b      	ldrh	r3, [r7, #8]
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	00010002 	.word	0x00010002

0800a8e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	817b      	strh	r3, [r7, #10]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	813b      	strh	r3, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a910:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	2200      	movs	r2, #0
 800a92a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f8c2 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a948:	d103      	bne.n	800a952 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e0aa      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a956:	897b      	ldrh	r3, [r7, #10]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	6a3a      	ldr	r2, [r7, #32]
 800a96a:	4952      	ldr	r1, [pc, #328]	; (800aab4 <I2C_RequestMemoryRead+0x1cc>)
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f8fa 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e097      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	6a39      	ldr	r1, [r7, #32]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f964 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d107      	bne.n	800a9ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e076      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d105      	bne.n	800a9d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9c4:	893b      	ldrh	r3, [r7, #8]
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	611a      	str	r2, [r3, #16]
 800a9ce:	e021      	b.n	800aa14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a9d0:	893b      	ldrh	r3, [r7, #8]
 800a9d2:	0a1b      	lsrs	r3, r3, #8
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e0:	6a39      	ldr	r1, [r7, #32]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f93e 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00d      	beq.n	800aa0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d107      	bne.n	800aa06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e050      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa0a:	893b      	ldrh	r3, [r7, #8]
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	6a39      	ldr	r1, [r7, #32]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f923 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d107      	bne.n	800aa3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e035      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f82b 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00d      	beq.n	800aa84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa76:	d103      	bne.n	800aa80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e013      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa84:	897b      	ldrh	r3, [r7, #10]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f043 0301 	orr.w	r3, r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	6a3a      	ldr	r2, [r7, #32]
 800aa98:	4906      	ldr	r1, [pc, #24]	; (800aab4 <I2C_RequestMemoryRead+0x1cc>)
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f863 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	00010002 	.word	0x00010002

0800aab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aac8:	e025      	b.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aad0:	d021      	beq.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7fc fcf5 	bl	80074c0 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d116      	bne.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e023      	b.n	800ab5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10d      	bne.n	800ab3c <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	43da      	mvns	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf0c      	ite	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	2300      	movne	r3, #0
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	e00c      	b.n	800ab56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	43da      	mvns	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4013      	ands	r3, r2
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf0c      	ite	eq
 800ab4e:	2301      	moveq	r3, #1
 800ab50:	2300      	movne	r3, #0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0b6      	beq.n	800aaca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
 800ab72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab74:	e051      	b.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab84:	d123      	bne.n	800abce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	f043 0204 	orr.w	r2, r3, #4
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e046      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abd4:	d021      	beq.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd6:	f7fc fc73 	bl	80074c0 <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d302      	bcc.n	800abec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d116      	bne.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	f043 0220 	orr.w	r2, r3, #32
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e020      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10c      	bne.n	800ac3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	43da      	mvns	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e00b      	b.n	800ac56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	43da      	mvns	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d18d      	bne.n	800ab76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac70:	e02d      	b.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f8ce 	bl	800ae14 <I2C_IsAcknowledgeFailed>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e02d      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac88:	d021      	beq.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8a:	f7fc fc19 	bl	80074c0 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d302      	bcc.n	800aca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d116      	bne.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	f043 0220 	orr.w	r2, r3, #32
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e007      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd8:	2b80      	cmp	r3, #128	; 0x80
 800acda:	d1ca      	bne.n	800ac72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acf2:	e02d      	b.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f88d 	bl	800ae14 <I2C_IsAcknowledgeFailed>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e02d      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0a:	d021      	beq.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0c:	f7fc fbd8 	bl	80074c0 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d116      	bne.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	f043 0220 	orr.w	r2, r3, #32
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d1ca      	bne.n	800acf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad74:	e042      	b.n	800adfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b10      	cmp	r3, #16
 800ad82:	d119      	bne.n	800adb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0210 	mvn.w	r2, #16
 800ad8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e029      	b.n	800ae0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb8:	f7fc fb82 	bl	80074c0 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d302      	bcc.n	800adce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d116      	bne.n	800adfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2220      	movs	r2, #32
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade8:	f043 0220 	orr.w	r2, r3, #32
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e007      	b.n	800ae0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b40      	cmp	r3, #64	; 0x40
 800ae08:	d1b5      	bne.n	800ad76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2a:	d11b      	bne.n	800ae64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	f043 0204 	orr.w	r2, r3, #4
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
	...

0800ae74 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e128      	b.n	800b0d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d109      	bne.n	800aea6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a90      	ldr	r2, [pc, #576]	; (800b0e0 <HAL_I2S_Init+0x26c>)
 800ae9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7f6 ff63 	bl	8001d6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6812      	ldr	r2, [r2, #0]
 800aeb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800aebc:	f023 030f 	bic.w	r3, r3, #15
 800aec0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2202      	movs	r2, #2
 800aec8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d060      	beq.n	800af94 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800aeda:	2310      	movs	r3, #16
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	e001      	b.n	800aee4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800aee0:	2320      	movs	r3, #32
 800aee2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d802      	bhi.n	800aef2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800aef2:	2001      	movs	r0, #1
 800aef4:	f001 f9a0 	bl	800c238 <HAL_RCCEx_GetPeriphCLKFreq>
 800aef8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af02:	d125      	bne.n	800af50 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d010      	beq.n	800af2e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	fbb2 f2f3 	udiv	r2, r2, r3
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	fbb2 f3f3 	udiv	r3, r2, r3
 800af28:	3305      	adds	r3, #5
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	e01f      	b.n	800af6e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	fbb2 f2f3 	udiv	r2, r2, r3
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	461a      	mov	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4a:	3305      	adds	r3, #5
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	e00e      	b.n	800af6e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	fbb2 f2f3 	udiv	r2, r2, r3
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	461a      	mov	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6a:	3305      	adds	r3, #5
 800af6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	4a5c      	ldr	r2, [pc, #368]	; (800b0e4 <HAL_I2S_Init+0x270>)
 800af72:	fba2 2303 	umull	r2, r3, r2, r3
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	085b      	lsrs	r3, r3, #1
 800af8a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	021b      	lsls	r3, r3, #8
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	e003      	b.n	800af9c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800af94:	2302      	movs	r3, #2
 800af96:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d902      	bls.n	800afa8 <HAL_I2S_Init+0x134>
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	2bff      	cmp	r3, #255	; 0xff
 800afa6:	d907      	bls.n	800afb8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	f043 0210 	orr.w	r2, r3, #16
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e08f      	b.n	800b0d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	ea42 0103 	orr.w	r1, r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69fa      	ldr	r2, [r7, #28]
 800afc8:	430a      	orrs	r2, r1
 800afca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800afd6:	f023 030f 	bic.w	r3, r3, #15
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6851      	ldr	r1, [r2, #4]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	6892      	ldr	r2, [r2, #8]
 800afe2:	4311      	orrs	r1, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	68d2      	ldr	r2, [r2, #12]
 800afe8:	4311      	orrs	r1, r2
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	6992      	ldr	r2, [r2, #24]
 800afee:	430a      	orrs	r2, r1
 800aff0:	431a      	orrs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800affa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d161      	bne.n	800b0c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a38      	ldr	r2, [pc, #224]	; (800b0e8 <HAL_I2S_Init+0x274>)
 800b008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a37      	ldr	r2, [pc, #220]	; (800b0ec <HAL_I2S_Init+0x278>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d101      	bne.n	800b018 <HAL_I2S_Init+0x1a4>
 800b014:	4b36      	ldr	r3, [pc, #216]	; (800b0f0 <HAL_I2S_Init+0x27c>)
 800b016:	e001      	b.n	800b01c <HAL_I2S_Init+0x1a8>
 800b018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	4932      	ldr	r1, [pc, #200]	; (800b0ec <HAL_I2S_Init+0x278>)
 800b024:	428a      	cmp	r2, r1
 800b026:	d101      	bne.n	800b02c <HAL_I2S_Init+0x1b8>
 800b028:	4a31      	ldr	r2, [pc, #196]	; (800b0f0 <HAL_I2S_Init+0x27c>)
 800b02a:	e001      	b.n	800b030 <HAL_I2S_Init+0x1bc>
 800b02c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b030:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b034:	f023 030f 	bic.w	r3, r3, #15
 800b038:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a2b      	ldr	r2, [pc, #172]	; (800b0ec <HAL_I2S_Init+0x278>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d101      	bne.n	800b048 <HAL_I2S_Init+0x1d4>
 800b044:	4b2a      	ldr	r3, [pc, #168]	; (800b0f0 <HAL_I2S_Init+0x27c>)
 800b046:	e001      	b.n	800b04c <HAL_I2S_Init+0x1d8>
 800b048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b04c:	2202      	movs	r2, #2
 800b04e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a25      	ldr	r2, [pc, #148]	; (800b0ec <HAL_I2S_Init+0x278>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d101      	bne.n	800b05e <HAL_I2S_Init+0x1ea>
 800b05a:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <HAL_I2S_Init+0x27c>)
 800b05c:	e001      	b.n	800b062 <HAL_I2S_Init+0x1ee>
 800b05e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b06e:	d003      	beq.n	800b078 <HAL_I2S_Init+0x204>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d103      	bne.n	800b080 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b07c:	613b      	str	r3, [r7, #16]
 800b07e:	e001      	b.n	800b084 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b080:	2300      	movs	r3, #0
 800b082:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b08e:	4313      	orrs	r3, r2
 800b090:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b098:	4313      	orrs	r3, r2
 800b09a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	897b      	ldrh	r3, [r7, #10]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b0b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a0d      	ldr	r2, [pc, #52]	; (800b0ec <HAL_I2S_Init+0x278>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d101      	bne.n	800b0c0 <HAL_I2S_Init+0x24c>
 800b0bc:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <HAL_I2S_Init+0x27c>)
 800b0be:	e001      	b.n	800b0c4 <HAL_I2S_Init+0x250>
 800b0c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b0c4:	897a      	ldrh	r2, [r7, #10]
 800b0c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0800b1eb 	.word	0x0800b1eb
 800b0e4:	cccccccd 	.word	0xcccccccd
 800b0e8:	0800b301 	.word	0x0800b301
 800b0ec:	40003800 	.word	0x40003800
 800b0f0:	40003400 	.word	0x40003400

0800b0f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	881a      	ldrh	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	1c9a      	adds	r2, r3, #2
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b152:	b29b      	uxth	r3, r3
 800b154:	3b01      	subs	r3, #1
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10e      	bne.n	800b184 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b174:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff ffb8 	bl	800b0f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19e:	b292      	uxth	r2, r2
 800b1a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	1c9a      	adds	r2, r3, #2
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10e      	bne.n	800b1e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b1d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7ff ff93 	bl	800b108 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b1e2:	bf00      	nop
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b04      	cmp	r3, #4
 800b204:	d13a      	bne.n	800b27c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f003 0301 	and.w	r3, r3, #1
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d109      	bne.n	800b224 <I2S_IRQHandler+0x3a>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d102      	bne.n	800b224 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7ff ffb4 	bl	800b18c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d126      	bne.n	800b27c <I2S_IRQHandler+0x92>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f003 0320 	and.w	r3, r3, #32
 800b238:	2b20      	cmp	r3, #32
 800b23a:	d11f      	bne.n	800b27c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b24a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b24c:	2300      	movs	r3, #0
 800b24e:	613b      	str	r3, [r7, #16]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26e:	f043 0202 	orr.w	r2, r3, #2
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff ff50 	bl	800b11c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b03      	cmp	r3, #3
 800b286:	d136      	bne.n	800b2f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d109      	bne.n	800b2a6 <I2S_IRQHandler+0xbc>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d102      	bne.n	800b2a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff ff45 	bl	800b130 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 0308 	and.w	r3, r3, #8
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d122      	bne.n	800b2f6 <I2S_IRQHandler+0x10c>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d11b      	bne.n	800b2f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b2cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e8:	f043 0204 	orr.w	r2, r3, #4
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7ff ff13 	bl	800b11c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b088      	sub	sp, #32
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4aa2      	ldr	r2, [pc, #648]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d101      	bne.n	800b31e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b31a:	4ba2      	ldr	r3, [pc, #648]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b31c:	e001      	b.n	800b322 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b31e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a9b      	ldr	r2, [pc, #620]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d101      	bne.n	800b33c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b338:	4b9a      	ldr	r3, [pc, #616]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b33a:	e001      	b.n	800b340 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b33c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b34c:	d004      	beq.n	800b358 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 8099 	bne.w	800b48a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d107      	bne.n	800b372 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f925 	bl	800b5bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d107      	bne.n	800b38c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f9c8 	bl	800b71c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b392:	2b40      	cmp	r3, #64	; 0x40
 800b394:	d13a      	bne.n	800b40c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f003 0320 	and.w	r3, r3, #32
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d035      	beq.n	800b40c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a7e      	ldr	r2, [pc, #504]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d101      	bne.n	800b3ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b3aa:	4b7e      	ldr	r3, [pc, #504]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b3ac:	e001      	b.n	800b3b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b3ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4979      	ldr	r1, [pc, #484]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b3ba:	428b      	cmp	r3, r1
 800b3bc:	d101      	bne.n	800b3c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b3be:	4b79      	ldr	r3, [pc, #484]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b3c0:	e001      	b.n	800b3c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b3c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b3c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b3ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b3da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b3dc:	2300      	movs	r3, #0
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fe:	f043 0202 	orr.w	r2, r3, #2
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fe88 	bl	800b11c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f003 0308 	and.w	r3, r3, #8
 800b412:	2b08      	cmp	r3, #8
 800b414:	f040 80be 	bne.w	800b594 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 80b8 	beq.w	800b594 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b432:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a59      	ldr	r2, [pc, #356]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d101      	bne.n	800b442 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b43e:	4b59      	ldr	r3, [pc, #356]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b440:	e001      	b.n	800b446 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4954      	ldr	r1, [pc, #336]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b44e:	428b      	cmp	r3, r1
 800b450:	d101      	bne.n	800b456 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b452:	4b54      	ldr	r3, [pc, #336]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b454:	e001      	b.n	800b45a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b45a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b45e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b460:	2300      	movs	r3, #0
 800b462:	60bb      	str	r3, [r7, #8]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	60bb      	str	r3, [r7, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47a:	f043 0204 	orr.w	r2, r3, #4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fe4a 	bl	800b11c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b488:	e084      	b.n	800b594 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b02      	cmp	r3, #2
 800b492:	d107      	bne.n	800b4a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f8be 	bl	800b620 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d107      	bne.n	800b4be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f8fd 	bl	800b6b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	d12f      	bne.n	800b528 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f003 0320 	and.w	r3, r3, #32
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d02a      	beq.n	800b528 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b4e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a2e      	ldr	r2, [pc, #184]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d101      	bne.n	800b4f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800b4ec:	4b2d      	ldr	r3, [pc, #180]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b4ee:	e001      	b.n	800b4f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800b4f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4929      	ldr	r1, [pc, #164]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	d101      	bne.n	800b504 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800b500:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b502:	e001      	b.n	800b508 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800b504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b50c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51a:	f043 0202 	orr.w	r2, r3, #2
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff fdfa 	bl	800b11c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	f003 0308 	and.w	r3, r3, #8
 800b52e:	2b08      	cmp	r3, #8
 800b530:	d131      	bne.n	800b596 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d02c      	beq.n	800b596 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d101      	bne.n	800b54a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800b546:	4b17      	ldr	r3, [pc, #92]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b548:	e001      	b.n	800b54e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800b54a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4912      	ldr	r1, [pc, #72]	; (800b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b556:	428b      	cmp	r3, r1
 800b558:	d101      	bne.n	800b55e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800b55a:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b55c:	e001      	b.n	800b562 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800b55e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b562:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b566:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b576:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b584:	f043 0204 	orr.w	r2, r3, #4
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff fdc5 	bl	800b11c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b592:	e000      	b.n	800b596 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b594:	bf00      	nop
}
 800b596:	bf00      	nop
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40003800 	.word	0x40003800
 800b5a4:	40003400 	.word	0x40003400

0800b5a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	1c99      	adds	r1, r3, #2
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	6251      	str	r1, [r2, #36]	; 0x24
 800b5ce:	881a      	ldrh	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d113      	bne.n	800b616 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b5fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b602:	b29b      	uxth	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff ffc9 	bl	800b5a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	1c99      	adds	r1, r3, #2
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6251      	str	r1, [r2, #36]	; 0x24
 800b632:	8819      	ldrh	r1, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <I2SEx_TxISR_I2SExt+0x90>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d101      	bne.n	800b642 <I2SEx_TxISR_I2SExt+0x22>
 800b63e:	4b1d      	ldr	r3, [pc, #116]	; (800b6b4 <I2SEx_TxISR_I2SExt+0x94>)
 800b640:	e001      	b.n	800b646 <I2SEx_TxISR_I2SExt+0x26>
 800b642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b646:	460a      	mov	r2, r1
 800b648:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d121      	bne.n	800b6a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a12      	ldr	r2, [pc, #72]	; (800b6b0 <I2SEx_TxISR_I2SExt+0x90>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d101      	bne.n	800b670 <I2SEx_TxISR_I2SExt+0x50>
 800b66c:	4b11      	ldr	r3, [pc, #68]	; (800b6b4 <I2SEx_TxISR_I2SExt+0x94>)
 800b66e:	e001      	b.n	800b674 <I2SEx_TxISR_I2SExt+0x54>
 800b670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	490d      	ldr	r1, [pc, #52]	; (800b6b0 <I2SEx_TxISR_I2SExt+0x90>)
 800b67c:	428b      	cmp	r3, r1
 800b67e:	d101      	bne.n	800b684 <I2SEx_TxISR_I2SExt+0x64>
 800b680:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <I2SEx_TxISR_I2SExt+0x94>)
 800b682:	e001      	b.n	800b688 <I2SEx_TxISR_I2SExt+0x68>
 800b684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b68c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b692:	b29b      	uxth	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff81 	bl	800b5a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	40003800 	.word	0x40003800
 800b6b4:	40003400 	.word	0x40003400

0800b6b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68d8      	ldr	r0, [r3, #12]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	1c99      	adds	r1, r3, #2
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b6d0:	b282      	uxth	r2, r0
 800b6d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d113      	bne.n	800b714 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b6fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b700:	b29b      	uxth	r3, r3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d106      	bne.n	800b714 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff ff4a 	bl	800b5a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a20      	ldr	r2, [pc, #128]	; (800b7ac <I2SEx_RxISR_I2SExt+0x90>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d101      	bne.n	800b732 <I2SEx_RxISR_I2SExt+0x16>
 800b72e:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <I2SEx_RxISR_I2SExt+0x94>)
 800b730:	e001      	b.n	800b736 <I2SEx_RxISR_I2SExt+0x1a>
 800b732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b736:	68d8      	ldr	r0, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	1c99      	adds	r1, r3, #2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b742:	b282      	uxth	r2, r0
 800b744:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d121      	bne.n	800b7a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a12      	ldr	r2, [pc, #72]	; (800b7ac <I2SEx_RxISR_I2SExt+0x90>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d101      	bne.n	800b76c <I2SEx_RxISR_I2SExt+0x50>
 800b768:	4b11      	ldr	r3, [pc, #68]	; (800b7b0 <I2SEx_RxISR_I2SExt+0x94>)
 800b76a:	e001      	b.n	800b770 <I2SEx_RxISR_I2SExt+0x54>
 800b76c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	490d      	ldr	r1, [pc, #52]	; (800b7ac <I2SEx_RxISR_I2SExt+0x90>)
 800b778:	428b      	cmp	r3, r1
 800b77a:	d101      	bne.n	800b780 <I2SEx_RxISR_I2SExt+0x64>
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <I2SEx_RxISR_I2SExt+0x94>)
 800b77e:	e001      	b.n	800b784 <I2SEx_RxISR_I2SExt+0x68>
 800b780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b788:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ff03 	bl	800b5a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40003800 	.word	0x40003800
 800b7b0:	40003400 	.word	0x40003400

0800b7b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e264      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d075      	beq.n	800b8be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7d2:	4ba3      	ldr	r3, [pc, #652]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	f003 030c 	and.w	r3, r3, #12
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d00c      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7de:	4ba0      	ldr	r3, [pc, #640]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7e6:	2b08      	cmp	r3, #8
 800b7e8:	d112      	bne.n	800b810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7ea:	4b9d      	ldr	r3, [pc, #628]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7f6:	d10b      	bne.n	800b810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7f8:	4b99      	ldr	r3, [pc, #612]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d05b      	beq.n	800b8bc <HAL_RCC_OscConfig+0x108>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d157      	bne.n	800b8bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e23f      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b818:	d106      	bne.n	800b828 <HAL_RCC_OscConfig+0x74>
 800b81a:	4b91      	ldr	r3, [pc, #580]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a90      	ldr	r2, [pc, #576]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	e01d      	b.n	800b864 <HAL_RCC_OscConfig+0xb0>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b830:	d10c      	bne.n	800b84c <HAL_RCC_OscConfig+0x98>
 800b832:	4b8b      	ldr	r3, [pc, #556]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a8a      	ldr	r2, [pc, #552]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	4b88      	ldr	r3, [pc, #544]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a87      	ldr	r2, [pc, #540]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	e00b      	b.n	800b864 <HAL_RCC_OscConfig+0xb0>
 800b84c:	4b84      	ldr	r3, [pc, #528]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a83      	ldr	r2, [pc, #524]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	4b81      	ldr	r3, [pc, #516]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a80      	ldr	r2, [pc, #512]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b86c:	f7fb fe28 	bl	80074c0 <HAL_GetTick>
 800b870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b872:	e008      	b.n	800b886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b874:	f7fb fe24 	bl	80074c0 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	2b64      	cmp	r3, #100	; 0x64
 800b880:	d901      	bls.n	800b886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e204      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b886:	4b76      	ldr	r3, [pc, #472]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0f0      	beq.n	800b874 <HAL_RCC_OscConfig+0xc0>
 800b892:	e014      	b.n	800b8be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b894:	f7fb fe14 	bl	80074c0 <HAL_GetTick>
 800b898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b89a:	e008      	b.n	800b8ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b89c:	f7fb fe10 	bl	80074c0 <HAL_GetTick>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	2b64      	cmp	r3, #100	; 0x64
 800b8a8:	d901      	bls.n	800b8ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e1f0      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ae:	4b6c      	ldr	r3, [pc, #432]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1f0      	bne.n	800b89c <HAL_RCC_OscConfig+0xe8>
 800b8ba:	e000      	b.n	800b8be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d063      	beq.n	800b992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8ca:	4b65      	ldr	r3, [pc, #404]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 030c 	and.w	r3, r3, #12
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00b      	beq.n	800b8ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8d6:	4b62      	ldr	r3, [pc, #392]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d11c      	bne.n	800b91c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8e2:	4b5f      	ldr	r3, [pc, #380]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d116      	bne.n	800b91c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8ee:	4b5c      	ldr	r3, [pc, #368]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d005      	beq.n	800b906 <HAL_RCC_OscConfig+0x152>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d001      	beq.n	800b906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e1c4      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b906:	4b56      	ldr	r3, [pc, #344]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	4952      	ldr	r1, [pc, #328]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b916:	4313      	orrs	r3, r2
 800b918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b91a:	e03a      	b.n	800b992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d020      	beq.n	800b966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b924:	4b4f      	ldr	r3, [pc, #316]	; (800ba64 <HAL_RCC_OscConfig+0x2b0>)
 800b926:	2201      	movs	r2, #1
 800b928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b92a:	f7fb fdc9 	bl	80074c0 <HAL_GetTick>
 800b92e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b930:	e008      	b.n	800b944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b932:	f7fb fdc5 	bl	80074c0 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d901      	bls.n	800b944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e1a5      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b944:	4b46      	ldr	r3, [pc, #280]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0302 	and.w	r3, r3, #2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0f0      	beq.n	800b932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b950:	4b43      	ldr	r3, [pc, #268]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	4940      	ldr	r1, [pc, #256]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b960:	4313      	orrs	r3, r2
 800b962:	600b      	str	r3, [r1, #0]
 800b964:	e015      	b.n	800b992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b966:	4b3f      	ldr	r3, [pc, #252]	; (800ba64 <HAL_RCC_OscConfig+0x2b0>)
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b96c:	f7fb fda8 	bl	80074c0 <HAL_GetTick>
 800b970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b972:	e008      	b.n	800b986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b974:	f7fb fda4 	bl	80074c0 <HAL_GetTick>
 800b978:	4602      	mov	r2, r0
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d901      	bls.n	800b986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e184      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b986:	4b36      	ldr	r3, [pc, #216]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f0      	bne.n	800b974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d030      	beq.n	800ba00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d016      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9a6:	4b30      	ldr	r3, [pc, #192]	; (800ba68 <HAL_RCC_OscConfig+0x2b4>)
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9ac:	f7fb fd88 	bl	80074c0 <HAL_GetTick>
 800b9b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9b2:	e008      	b.n	800b9c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9b4:	f7fb fd84 	bl	80074c0 <HAL_GetTick>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d901      	bls.n	800b9c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e164      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9c6:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0f0      	beq.n	800b9b4 <HAL_RCC_OscConfig+0x200>
 800b9d2:	e015      	b.n	800ba00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <HAL_RCC_OscConfig+0x2b4>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9da:	f7fb fd71 	bl	80074c0 <HAL_GetTick>
 800b9de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9e0:	e008      	b.n	800b9f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9e2:	f7fb fd6d 	bl	80074c0 <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d901      	bls.n	800b9f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e14d      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800b9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1f0      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 80a0 	beq.w	800bb4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba12:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10f      	bne.n	800ba3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60bb      	str	r3, [r7, #8]
 800ba22:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800ba24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba26:	4a0e      	ldr	r2, [pc, #56]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800ba28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba2c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <HAL_RCC_OscConfig+0x2ac>)
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba36:	60bb      	str	r3, [r7, #8]
 800ba38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba3e:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <HAL_RCC_OscConfig+0x2b8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d121      	bne.n	800ba8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba4a:	4b08      	ldr	r3, [pc, #32]	; (800ba6c <HAL_RCC_OscConfig+0x2b8>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a07      	ldr	r2, [pc, #28]	; (800ba6c <HAL_RCC_OscConfig+0x2b8>)
 800ba50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba56:	f7fb fd33 	bl	80074c0 <HAL_GetTick>
 800ba5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba5c:	e011      	b.n	800ba82 <HAL_RCC_OscConfig+0x2ce>
 800ba5e:	bf00      	nop
 800ba60:	40023800 	.word	0x40023800
 800ba64:	42470000 	.word	0x42470000
 800ba68:	42470e80 	.word	0x42470e80
 800ba6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba70:	f7fb fd26 	bl	80074c0 <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d901      	bls.n	800ba82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e106      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba82:	4b85      	ldr	r3, [pc, #532]	; (800bc98 <HAL_RCC_OscConfig+0x4e4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0f0      	beq.n	800ba70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d106      	bne.n	800baa4 <HAL_RCC_OscConfig+0x2f0>
 800ba96:	4b81      	ldr	r3, [pc, #516]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800ba98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba9a:	4a80      	ldr	r2, [pc, #512]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800ba9c:	f043 0301 	orr.w	r3, r3, #1
 800baa0:	6713      	str	r3, [r2, #112]	; 0x70
 800baa2:	e01c      	b.n	800bade <HAL_RCC_OscConfig+0x32a>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d10c      	bne.n	800bac6 <HAL_RCC_OscConfig+0x312>
 800baac:	4b7b      	ldr	r3, [pc, #492]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800baae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab0:	4a7a      	ldr	r2, [pc, #488]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bab2:	f043 0304 	orr.w	r3, r3, #4
 800bab6:	6713      	str	r3, [r2, #112]	; 0x70
 800bab8:	4b78      	ldr	r3, [pc, #480]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800baba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babc:	4a77      	ldr	r2, [pc, #476]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	6713      	str	r3, [r2, #112]	; 0x70
 800bac4:	e00b      	b.n	800bade <HAL_RCC_OscConfig+0x32a>
 800bac6:	4b75      	ldr	r3, [pc, #468]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	4a74      	ldr	r2, [pc, #464]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bacc:	f023 0301 	bic.w	r3, r3, #1
 800bad0:	6713      	str	r3, [r2, #112]	; 0x70
 800bad2:	4b72      	ldr	r3, [pc, #456]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad6:	4a71      	ldr	r2, [pc, #452]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bad8:	f023 0304 	bic.w	r3, r3, #4
 800badc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d015      	beq.n	800bb12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bae6:	f7fb fceb 	bl	80074c0 <HAL_GetTick>
 800baea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baec:	e00a      	b.n	800bb04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800baee:	f7fb fce7 	bl	80074c0 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d901      	bls.n	800bb04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bb00:	2303      	movs	r3, #3
 800bb02:	e0c5      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb04:	4b65      	ldr	r3, [pc, #404]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0ee      	beq.n	800baee <HAL_RCC_OscConfig+0x33a>
 800bb10:	e014      	b.n	800bb3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb12:	f7fb fcd5 	bl	80074c0 <HAL_GetTick>
 800bb16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb18:	e00a      	b.n	800bb30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb1a:	f7fb fcd1 	bl	80074c0 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d901      	bls.n	800bb30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e0af      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb30:	4b5a      	ldr	r3, [pc, #360]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb34:	f003 0302 	and.w	r3, r3, #2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1ee      	bne.n	800bb1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d105      	bne.n	800bb4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb42:	4b56      	ldr	r3, [pc, #344]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	4a55      	ldr	r2, [pc, #340]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 809b 	beq.w	800bc8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bb58:	4b50      	ldr	r3, [pc, #320]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f003 030c 	and.w	r3, r3, #12
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d05c      	beq.n	800bc1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d141      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb6c:	4b4c      	ldr	r3, [pc, #304]	; (800bca0 <HAL_RCC_OscConfig+0x4ec>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb72:	f7fb fca5 	bl	80074c0 <HAL_GetTick>
 800bb76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb78:	e008      	b.n	800bb8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb7a:	f7fb fca1 	bl	80074c0 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e081      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb8c:	4b43      	ldr	r3, [pc, #268]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	69da      	ldr	r2, [r3, #28]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	431a      	orrs	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	019b      	lsls	r3, r3, #6
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	085b      	lsrs	r3, r3, #1
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	041b      	lsls	r3, r3, #16
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbba:	061b      	lsls	r3, r3, #24
 800bbbc:	4937      	ldr	r1, [pc, #220]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbc2:	4b37      	ldr	r3, [pc, #220]	; (800bca0 <HAL_RCC_OscConfig+0x4ec>)
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbc8:	f7fb fc7a 	bl	80074c0 <HAL_GetTick>
 800bbcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbd0:	f7fb fc76 	bl	80074c0 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e056      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbe2:	4b2e      	ldr	r3, [pc, #184]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0f0      	beq.n	800bbd0 <HAL_RCC_OscConfig+0x41c>
 800bbee:	e04e      	b.n	800bc8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbf0:	4b2b      	ldr	r3, [pc, #172]	; (800bca0 <HAL_RCC_OscConfig+0x4ec>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbf6:	f7fb fc63 	bl	80074c0 <HAL_GetTick>
 800bbfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbfc:	e008      	b.n	800bc10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbfe:	f7fb fc5f 	bl	80074c0 <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e03f      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc10:	4b22      	ldr	r3, [pc, #136]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f0      	bne.n	800bbfe <HAL_RCC_OscConfig+0x44a>
 800bc1c:	e037      	b.n	800bc8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d101      	bne.n	800bc2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e032      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bc2a:	4b1c      	ldr	r3, [pc, #112]	; (800bc9c <HAL_RCC_OscConfig+0x4e8>)
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d028      	beq.n	800bc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d121      	bne.n	800bc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d11a      	bne.n	800bc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d111      	bne.n	800bc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	3b01      	subs	r3, #1
 800bc74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d107      	bne.n	800bc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d001      	beq.n	800bc8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	40007000 	.word	0x40007000
 800bc9c:	40023800 	.word	0x40023800
 800bca0:	42470060 	.word	0x42470060

0800bca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e0cc      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcb8:	4b68      	ldr	r3, [pc, #416]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d90c      	bls.n	800bce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcc6:	4b65      	ldr	r3, [pc, #404]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcce:	4b63      	ldr	r3, [pc, #396]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 0307 	and.w	r3, r3, #7
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d001      	beq.n	800bce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e0b8      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d020      	beq.n	800bd2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 0304 	and.w	r3, r3, #4
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bcf8:	4b59      	ldr	r3, [pc, #356]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	4a58      	ldr	r2, [pc, #352]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0308 	and.w	r3, r3, #8
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d005      	beq.n	800bd1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd10:	4b53      	ldr	r3, [pc, #332]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	4a52      	ldr	r2, [pc, #328]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd1c:	4b50      	ldr	r3, [pc, #320]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	494d      	ldr	r1, [pc, #308]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d044      	beq.n	800bdc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d107      	bne.n	800bd52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd42:	4b47      	ldr	r3, [pc, #284]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d119      	bne.n	800bd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e07f      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d003      	beq.n	800bd62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d107      	bne.n	800bd72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd62:	4b3f      	ldr	r3, [pc, #252]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e06f      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd72:	4b3b      	ldr	r3, [pc, #236]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e067      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd82:	4b37      	ldr	r3, [pc, #220]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f023 0203 	bic.w	r2, r3, #3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	4934      	ldr	r1, [pc, #208]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd94:	f7fb fb94 	bl	80074c0 <HAL_GetTick>
 800bd98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd9a:	e00a      	b.n	800bdb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd9c:	f7fb fb90 	bl	80074c0 <HAL_GetTick>
 800bda0:	4602      	mov	r2, r0
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d901      	bls.n	800bdb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e04f      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdb2:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f003 020c 	and.w	r2, r3, #12
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d1eb      	bne.n	800bd9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bdc4:	4b25      	ldr	r3, [pc, #148]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0307 	and.w	r3, r3, #7
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d20c      	bcs.n	800bdec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdd2:	4b22      	ldr	r3, [pc, #136]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdda:	4b20      	ldr	r3, [pc, #128]	; (800be5c <HAL_RCC_ClockConfig+0x1b8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d001      	beq.n	800bdec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e032      	b.n	800be52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0304 	and.w	r3, r3, #4
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d008      	beq.n	800be0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bdf8:	4b19      	ldr	r3, [pc, #100]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	4916      	ldr	r1, [pc, #88]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800be06:	4313      	orrs	r3, r2
 800be08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0308 	and.w	r3, r3, #8
 800be12:	2b00      	cmp	r3, #0
 800be14:	d009      	beq.n	800be2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be16:	4b12      	ldr	r3, [pc, #72]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	490e      	ldr	r1, [pc, #56]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800be26:	4313      	orrs	r3, r2
 800be28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be2a:	f000 f821 	bl	800be70 <HAL_RCC_GetSysClockFreq>
 800be2e:	4602      	mov	r2, r0
 800be30:	4b0b      	ldr	r3, [pc, #44]	; (800be60 <HAL_RCC_ClockConfig+0x1bc>)
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	091b      	lsrs	r3, r3, #4
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	490a      	ldr	r1, [pc, #40]	; (800be64 <HAL_RCC_ClockConfig+0x1c0>)
 800be3c:	5ccb      	ldrb	r3, [r1, r3]
 800be3e:	fa22 f303 	lsr.w	r3, r2, r3
 800be42:	4a09      	ldr	r2, [pc, #36]	; (800be68 <HAL_RCC_ClockConfig+0x1c4>)
 800be44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <HAL_RCC_ClockConfig+0x1c8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fb faf4 	bl	8007438 <HAL_InitTick>

  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	40023c00 	.word	0x40023c00
 800be60:	40023800 	.word	0x40023800
 800be64:	080118a4 	.word	0x080118a4
 800be68:	20000004 	.word	0x20000004
 800be6c:	200001e4 	.word	0x200001e4

0800be70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	607b      	str	r3, [r7, #4]
 800be7c:	2300      	movs	r3, #0
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	2300      	movs	r3, #0
 800be82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800be84:	2300      	movs	r3, #0
 800be86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be88:	4b67      	ldr	r3, [pc, #412]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f003 030c 	and.w	r3, r3, #12
 800be90:	2b08      	cmp	r3, #8
 800be92:	d00d      	beq.n	800beb0 <HAL_RCC_GetSysClockFreq+0x40>
 800be94:	2b08      	cmp	r3, #8
 800be96:	f200 80bd 	bhi.w	800c014 <HAL_RCC_GetSysClockFreq+0x1a4>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <HAL_RCC_GetSysClockFreq+0x34>
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	d003      	beq.n	800beaa <HAL_RCC_GetSysClockFreq+0x3a>
 800bea2:	e0b7      	b.n	800c014 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bea4:	4b61      	ldr	r3, [pc, #388]	; (800c02c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bea6:	60bb      	str	r3, [r7, #8]
       break;
 800bea8:	e0b7      	b.n	800c01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800beaa:	4b61      	ldr	r3, [pc, #388]	; (800c030 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800beac:	60bb      	str	r3, [r7, #8]
      break;
 800beae:	e0b4      	b.n	800c01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800beb0:	4b5d      	ldr	r3, [pc, #372]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800beba:	4b5b      	ldr	r3, [pc, #364]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d04d      	beq.n	800bf62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bec6:	4b58      	ldr	r3, [pc, #352]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	099b      	lsrs	r3, r3, #6
 800becc:	461a      	mov	r2, r3
 800bece:	f04f 0300 	mov.w	r3, #0
 800bed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bed6:	f04f 0100 	mov.w	r1, #0
 800beda:	ea02 0800 	and.w	r8, r2, r0
 800bede:	ea03 0901 	and.w	r9, r3, r1
 800bee2:	4640      	mov	r0, r8
 800bee4:	4649      	mov	r1, r9
 800bee6:	f04f 0200 	mov.w	r2, #0
 800beea:	f04f 0300 	mov.w	r3, #0
 800beee:	014b      	lsls	r3, r1, #5
 800bef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bef4:	0142      	lsls	r2, r0, #5
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	ebb0 0008 	subs.w	r0, r0, r8
 800befe:	eb61 0109 	sbc.w	r1, r1, r9
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	018b      	lsls	r3, r1, #6
 800bf0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bf10:	0182      	lsls	r2, r0, #6
 800bf12:	1a12      	subs	r2, r2, r0
 800bf14:	eb63 0301 	sbc.w	r3, r3, r1
 800bf18:	f04f 0000 	mov.w	r0, #0
 800bf1c:	f04f 0100 	mov.w	r1, #0
 800bf20:	00d9      	lsls	r1, r3, #3
 800bf22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf26:	00d0      	lsls	r0, r2, #3
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	eb12 0208 	adds.w	r2, r2, r8
 800bf30:	eb43 0309 	adc.w	r3, r3, r9
 800bf34:	f04f 0000 	mov.w	r0, #0
 800bf38:	f04f 0100 	mov.w	r1, #0
 800bf3c:	0259      	lsls	r1, r3, #9
 800bf3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bf42:	0250      	lsls	r0, r2, #9
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f04f 0300 	mov.w	r3, #0
 800bf54:	f7f4 fe1c 	bl	8000b90 <__aeabi_uldivmod>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e04a      	b.n	800bff8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf62:	4b31      	ldr	r3, [pc, #196]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	099b      	lsrs	r3, r3, #6
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bf72:	f04f 0100 	mov.w	r1, #0
 800bf76:	ea02 0400 	and.w	r4, r2, r0
 800bf7a:	ea03 0501 	and.w	r5, r3, r1
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f04f 0200 	mov.w	r2, #0
 800bf86:	f04f 0300 	mov.w	r3, #0
 800bf8a:	014b      	lsls	r3, r1, #5
 800bf8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bf90:	0142      	lsls	r2, r0, #5
 800bf92:	4610      	mov	r0, r2
 800bf94:	4619      	mov	r1, r3
 800bf96:	1b00      	subs	r0, r0, r4
 800bf98:	eb61 0105 	sbc.w	r1, r1, r5
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	018b      	lsls	r3, r1, #6
 800bfa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bfaa:	0182      	lsls	r2, r0, #6
 800bfac:	1a12      	subs	r2, r2, r0
 800bfae:	eb63 0301 	sbc.w	r3, r3, r1
 800bfb2:	f04f 0000 	mov.w	r0, #0
 800bfb6:	f04f 0100 	mov.w	r1, #0
 800bfba:	00d9      	lsls	r1, r3, #3
 800bfbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bfc0:	00d0      	lsls	r0, r2, #3
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	1912      	adds	r2, r2, r4
 800bfc8:	eb45 0303 	adc.w	r3, r5, r3
 800bfcc:	f04f 0000 	mov.w	r0, #0
 800bfd0:	f04f 0100 	mov.w	r1, #0
 800bfd4:	0299      	lsls	r1, r3, #10
 800bfd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bfda:	0290      	lsls	r0, r2, #10
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f04f 0300 	mov.w	r3, #0
 800bfec:	f7f4 fdd0 	bl	8000b90 <__aeabi_uldivmod>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4613      	mov	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bff8:	4b0b      	ldr	r3, [pc, #44]	; (800c028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	0c1b      	lsrs	r3, r3, #16
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	3301      	adds	r3, #1
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c010:	60bb      	str	r3, [r7, #8]
      break;
 800c012:	e002      	b.n	800c01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c016:	60bb      	str	r3, [r7, #8]
      break;
 800c018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c01a:	68bb      	ldr	r3, [r7, #8]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c026:	bf00      	nop
 800c028:	40023800 	.word	0x40023800
 800c02c:	00f42400 	.word	0x00f42400
 800c030:	007a1200 	.word	0x007a1200

0800c034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c034:	b480      	push	{r7}
 800c036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c038:	4b03      	ldr	r3, [pc, #12]	; (800c048 <HAL_RCC_GetHCLKFreq+0x14>)
 800c03a:	681b      	ldr	r3, [r3, #0]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	20000004 	.word	0x20000004

0800c04c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c050:	f7ff fff0 	bl	800c034 <HAL_RCC_GetHCLKFreq>
 800c054:	4602      	mov	r2, r0
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	0a9b      	lsrs	r3, r3, #10
 800c05c:	f003 0307 	and.w	r3, r3, #7
 800c060:	4903      	ldr	r1, [pc, #12]	; (800c070 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c062:	5ccb      	ldrb	r3, [r1, r3]
 800c064:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c068:	4618      	mov	r0, r3
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40023800 	.word	0x40023800
 800c070:	080118b4 	.word	0x080118b4

0800c074 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d105      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d035      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c09c:	4b62      	ldr	r3, [pc, #392]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0a2:	f7fb fa0d 	bl	80074c0 <HAL_GetTick>
 800c0a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0a8:	e008      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c0aa:	f7fb fa09 	bl	80074c0 <HAL_GetTick>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d901      	bls.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e0b0      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0bc:	4b5b      	ldr	r3, [pc, #364]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f0      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	019a      	lsls	r2, r3, #6
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	071b      	lsls	r3, r3, #28
 800c0d4:	4955      	ldr	r1, [pc, #340]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c0dc:	4b52      	ldr	r3, [pc, #328]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0e2:	f7fb f9ed 	bl	80074c0 <HAL_GetTick>
 800c0e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c0ea:	f7fb f9e9 	bl	80074c0 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e090      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0fc:	4b4b      	ldr	r3, [pc, #300]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0f0      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0302 	and.w	r3, r3, #2
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 8083 	beq.w	800c21c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	4b44      	ldr	r3, [pc, #272]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11e:	4a43      	ldr	r2, [pc, #268]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c124:	6413      	str	r3, [r2, #64]	; 0x40
 800c126:	4b41      	ldr	r3, [pc, #260]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c132:	4b3f      	ldr	r3, [pc, #252]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a3e      	ldr	r2, [pc, #248]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c13c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c13e:	f7fb f9bf 	bl	80074c0 <HAL_GetTick>
 800c142:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c144:	e008      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c146:	f7fb f9bb 	bl	80074c0 <HAL_GetTick>
 800c14a:	4602      	mov	r2, r0
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	2b02      	cmp	r3, #2
 800c152:	d901      	bls.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c154:	2303      	movs	r3, #3
 800c156:	e062      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c158:	4b35      	ldr	r3, [pc, #212]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0f0      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c164:	4b31      	ldr	r3, [pc, #196]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c16c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d02f      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d028      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c182:	4b2a      	ldr	r3, [pc, #168]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c18a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c18c:	4b29      	ldr	r3, [pc, #164]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c18e:	2201      	movs	r2, #1
 800c190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c192:	4b28      	ldr	r3, [pc, #160]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c198:	4a24      	ldr	r2, [pc, #144]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c19e:	4b23      	ldr	r3, [pc, #140]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d114      	bne.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c1aa:	f7fb f989 	bl	80074c0 <HAL_GetTick>
 800c1ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1b0:	e00a      	b.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1b2:	f7fb f985 	bl	80074c0 <HAL_GetTick>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d901      	bls.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e02a      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1c8:	4b18      	ldr	r3, [pc, #96]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1cc:	f003 0302 	and.w	r3, r3, #2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d0ee      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1e0:	d10d      	bne.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c1e2:	4b12      	ldr	r3, [pc, #72]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1f6:	490d      	ldr	r1, [pc, #52]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	608b      	str	r3, [r1, #8]
 800c1fc:	e005      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c204:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c208:	6093      	str	r3, [r2, #8]
 800c20a:	4b08      	ldr	r3, [pc, #32]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c20c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c216:	4905      	ldr	r1, [pc, #20]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c218:	4313      	orrs	r3, r2
 800c21a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	42470068 	.word	0x42470068
 800c22c:	40023800 	.word	0x40023800
 800c230:	40007000 	.word	0x40007000
 800c234:	42470e40 	.word	0x42470e40

0800c238 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d13e      	bne.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c256:	4b23      	ldr	r3, [pc, #140]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c25e:	60fb      	str	r3, [r7, #12]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d12f      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c26c:	4b1e      	ldr	r3, [pc, #120]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c26e:	617b      	str	r3, [r7, #20]
          break;
 800c270:	e02f      	b.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c27a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c27e:	d108      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c280:	4b18      	ldr	r3, [pc, #96]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c288:	4a18      	ldr	r2, [pc, #96]	; (800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	e007      	b.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c292:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c29a:	4a15      	ldr	r2, [pc, #84]	; (800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800c29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c2a2:	4b10      	ldr	r3, [pc, #64]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2a8:	099b      	lsrs	r3, r3, #6
 800c2aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2bc:	0f1b      	lsrs	r3, r3, #28
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c8:	617b      	str	r3, [r7, #20]
          break;
 800c2ca:	e002      	b.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]
          break;
 800c2d0:	bf00      	nop
        }
      }
      break;
 800c2d2:	bf00      	nop
    }
  }
  return frequency;
 800c2d4:	697b      	ldr	r3, [r7, #20]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	371c      	adds	r7, #28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	00bb8000 	.word	0x00bb8000
 800c2ec:	007a1200 	.word	0x007a1200
 800c2f0:	00f42400 	.word	0x00f42400

0800c2f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	e01c      	b.n	800c340 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	795b      	ldrb	r3, [r3, #5]
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7f5 fd90 	bl	8001e3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2202      	movs	r2, #2
 800c320:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f042 0204 	orr.w	r2, r2, #4
 800c330:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	791b      	ldrb	r3, [r3, #4]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c35e:	2302      	movs	r3, #2
 800c360:	e03d      	b.n	800c3de <HAL_RNG_GenerateRandomNumber+0x96>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	795b      	ldrb	r3, [r3, #5]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d12c      	bne.n	800c3cc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2202      	movs	r2, #2
 800c376:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c378:	f7fb f8a2 	bl	80074c0 <HAL_GetTick>
 800c37c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c37e:	e011      	b.n	800c3a4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c380:	f7fb f89e 	bl	80074c0 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d90a      	bls.n	800c3a4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e01c      	b.n	800c3de <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d1e6      	bne.n	800c380 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	715a      	strb	r2, [r3, #5]
 800c3ca:	e004      	b.n	800c3d6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	711a      	strb	r2, [r3, #4]

  return status;
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	330c      	adds	r3, #12
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ffa7 	bl	800c348 <HAL_RNG_GenerateRandomNumber>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	e000      	b.n	800c408 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800c406:	2300      	movs	r3, #0
  }
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e07b      	b.n	800c51a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	d108      	bne.n	800c43c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c432:	d009      	beq.n	800c448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	61da      	str	r2, [r3, #28]
 800c43a:	e005      	b.n	800c448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7f5 fd0c 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c47e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c490:	431a      	orrs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c49a:	431a      	orrs	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	431a      	orrs	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	431a      	orrs	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4cc:	ea42 0103 	orr.w	r1, r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	0c1b      	lsrs	r3, r3, #16
 800c4e6:	f003 0104 	and.w	r1, r3, #4
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	f003 0210 	and.w	r2, r3, #16
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b088      	sub	sp, #32
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	603b      	str	r3, [r7, #0]
 800c52e:	4613      	mov	r3, r2
 800c530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d101      	bne.n	800c544 <HAL_SPI_Transmit+0x22>
 800c540:	2302      	movs	r3, #2
 800c542:	e126      	b.n	800c792 <HAL_SPI_Transmit+0x270>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c54c:	f7fa ffb8 	bl	80074c0 <HAL_GetTick>
 800c550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c552:	88fb      	ldrh	r3, [r7, #6]
 800c554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d002      	beq.n	800c568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c562:	2302      	movs	r3, #2
 800c564:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c566:	e10b      	b.n	800c780 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <HAL_SPI_Transmit+0x52>
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c578:	e102      	b.n	800c780 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2203      	movs	r2, #3
 800c57e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	88fa      	ldrh	r2, [r7, #6]
 800c592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5c0:	d10f      	bne.n	800c5e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ec:	2b40      	cmp	r3, #64	; 0x40
 800c5ee:	d007      	beq.n	800c600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c608:	d14b      	bne.n	800c6a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <HAL_SPI_Transmit+0xf6>
 800c612:	8afb      	ldrh	r3, [r7, #22]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d13e      	bne.n	800c696 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c628:	1c9a      	adds	r2, r3, #2
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c632:	b29b      	uxth	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c63c:	e02b      	b.n	800c696 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f003 0302 	and.w	r3, r3, #2
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d112      	bne.n	800c672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c650:	881a      	ldrh	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65c:	1c9a      	adds	r2, r3, #2
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c666:	b29b      	uxth	r3, r3
 800c668:	3b01      	subs	r3, #1
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	86da      	strh	r2, [r3, #54]	; 0x36
 800c670:	e011      	b.n	800c696 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c672:	f7fa ff25 	bl	80074c0 <HAL_GetTick>
 800c676:	4602      	mov	r2, r0
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d803      	bhi.n	800c68a <HAL_SPI_Transmit+0x168>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c688:	d102      	bne.n	800c690 <HAL_SPI_Transmit+0x16e>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d102      	bne.n	800c696 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c690:	2303      	movs	r3, #3
 800c692:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c694:	e074      	b.n	800c780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1ce      	bne.n	800c63e <HAL_SPI_Transmit+0x11c>
 800c6a0:	e04c      	b.n	800c73c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <HAL_SPI_Transmit+0x18e>
 800c6aa:	8afb      	ldrh	r3, [r7, #22]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d140      	bne.n	800c732 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	7812      	ldrb	r2, [r2, #0]
 800c6bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c6d6:	e02c      	b.n	800c732 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d113      	bne.n	800c70e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c702:	b29b      	uxth	r3, r3
 800c704:	3b01      	subs	r3, #1
 800c706:	b29a      	uxth	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	86da      	strh	r2, [r3, #54]	; 0x36
 800c70c:	e011      	b.n	800c732 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c70e:	f7fa fed7 	bl	80074c0 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d803      	bhi.n	800c726 <HAL_SPI_Transmit+0x204>
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c724:	d102      	bne.n	800c72c <HAL_SPI_Transmit+0x20a>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c730:	e026      	b.n	800c780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1cd      	bne.n	800c6d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c73c:	69ba      	ldr	r2, [r7, #24]
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 f8b3 	bl	800c8ac <SPI_EndRxTxTransaction>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2220      	movs	r2, #32
 800c750:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10a      	bne.n	800c770 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c75a:	2300      	movs	r3, #0
 800c75c:	613b      	str	r3, [r7, #16]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	613b      	str	r3, [r7, #16]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	613b      	str	r3, [r7, #16]
 800c76e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	77fb      	strb	r3, [r7, #31]
 800c77c:	e000      	b.n	800c780 <HAL_SPI_Transmit+0x25e>
  }

error:
 800c77e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c790:	7ffb      	ldrb	r3, [r7, #31]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3720      	adds	r7, #32
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	603b      	str	r3, [r7, #0]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c7ac:	f7fa fe88 	bl	80074c0 <HAL_GetTick>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	1a9b      	subs	r3, r3, r2
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c7bc:	f7fa fe80 	bl	80074c0 <HAL_GetTick>
 800c7c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c7c2:	4b39      	ldr	r3, [pc, #228]	; (800c8a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	015b      	lsls	r3, r3, #5
 800c7c8:	0d1b      	lsrs	r3, r3, #20
 800c7ca:	69fa      	ldr	r2, [r7, #28]
 800c7cc:	fb02 f303 	mul.w	r3, r2, r3
 800c7d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7d2:	e054      	b.n	800c87e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7da:	d050      	beq.n	800c87e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c7dc:	f7fa fe70 	bl	80074c0 <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	69fa      	ldr	r2, [r7, #28]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d902      	bls.n	800c7f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d13d      	bne.n	800c86e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c80a:	d111      	bne.n	800c830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c814:	d004      	beq.n	800c820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c81e:	d107      	bne.n	800c830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c82e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c838:	d10f      	bne.n	800c85a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e017      	b.n	800c89e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689a      	ldr	r2, [r3, #8]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4013      	ands	r3, r2
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	bf0c      	ite	eq
 800c88e:	2301      	moveq	r3, #1
 800c890:	2300      	movne	r3, #0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	461a      	mov	r2, r3
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d19b      	bne.n	800c7d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3720      	adds	r7, #32
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000004 	.word	0x20000004

0800c8ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b088      	sub	sp, #32
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c8b8:	4b1b      	ldr	r3, [pc, #108]	; (800c928 <SPI_EndRxTxTransaction+0x7c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a1b      	ldr	r2, [pc, #108]	; (800c92c <SPI_EndRxTxTransaction+0x80>)
 800c8be:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c2:	0d5b      	lsrs	r3, r3, #21
 800c8c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8c8:	fb02 f303 	mul.w	r3, r2, r3
 800c8cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8d6:	d112      	bne.n	800c8fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2180      	movs	r1, #128	; 0x80
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f7ff ff5a 	bl	800c79c <SPI_WaitFlagStateUntilTimeout>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d016      	beq.n	800c91c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	f043 0220 	orr.w	r2, r3, #32
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	e00f      	b.n	800c91e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00a      	beq.n	800c91a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	3b01      	subs	r3, #1
 800c908:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c914:	2b80      	cmp	r3, #128	; 0x80
 800c916:	d0f2      	beq.n	800c8fe <SPI_EndRxTxTransaction+0x52>
 800c918:	e000      	b.n	800c91c <SPI_EndRxTxTransaction+0x70>
        break;
 800c91a:	bf00      	nop
  }

  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20000004 	.word	0x20000004
 800c92c:	165e9f81 	.word	0x165e9f81

0800c930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e041      	b.n	800c9c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7f5 fb78 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f000 fd68 	bl	800d444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d001      	beq.n	800c9e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e04e      	b.n	800ca86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f042 0201 	orr.w	r2, r2, #1
 800c9fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a23      	ldr	r2, [pc, #140]	; (800ca94 <HAL_TIM_Base_Start_IT+0xc4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d022      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca12:	d01d      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a1f      	ldr	r2, [pc, #124]	; (800ca98 <HAL_TIM_Base_Start_IT+0xc8>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d018      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a1e      	ldr	r2, [pc, #120]	; (800ca9c <HAL_TIM_Base_Start_IT+0xcc>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d013      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a1c      	ldr	r2, [pc, #112]	; (800caa0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d00e      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a1b      	ldr	r2, [pc, #108]	; (800caa4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d009      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a19      	ldr	r2, [pc, #100]	; (800caa8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d004      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x80>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a18      	ldr	r2, [pc, #96]	; (800caac <HAL_TIM_Base_Start_IT+0xdc>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d111      	bne.n	800ca74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2b06      	cmp	r3, #6
 800ca60:	d010      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0201 	orr.w	r2, r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca72:	e007      	b.n	800ca84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f042 0201 	orr.w	r2, r2, #1
 800ca82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	40010000 	.word	0x40010000
 800ca98:	40000400 	.word	0x40000400
 800ca9c:	40000800 	.word	0x40000800
 800caa0:	40000c00 	.word	0x40000c00
 800caa4:	40010400 	.word	0x40010400
 800caa8:	40014000 	.word	0x40014000
 800caac:	40001800 	.word	0x40001800

0800cab0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d109      	bne.n	800cad4 <HAL_TIM_OC_Start_IT+0x24>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b01      	cmp	r3, #1
 800caca:	bf14      	ite	ne
 800cacc:	2301      	movne	r3, #1
 800cace:	2300      	moveq	r3, #0
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	e022      	b.n	800cb1a <HAL_TIM_OC_Start_IT+0x6a>
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d109      	bne.n	800caee <HAL_TIM_OC_Start_IT+0x3e>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	bf14      	ite	ne
 800cae6:	2301      	movne	r3, #1
 800cae8:	2300      	moveq	r3, #0
 800caea:	b2db      	uxtb	r3, r3
 800caec:	e015      	b.n	800cb1a <HAL_TIM_OC_Start_IT+0x6a>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b08      	cmp	r3, #8
 800caf2:	d109      	bne.n	800cb08 <HAL_TIM_OC_Start_IT+0x58>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	bf14      	ite	ne
 800cb00:	2301      	movne	r3, #1
 800cb02:	2300      	moveq	r3, #0
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	e008      	b.n	800cb1a <HAL_TIM_OC_Start_IT+0x6a>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	bf14      	ite	ne
 800cb14:	2301      	movne	r3, #1
 800cb16:	2300      	moveq	r3, #0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e0c2      	b.n	800cca8 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <HAL_TIM_OC_Start_IT+0x82>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb30:	e013      	b.n	800cb5a <HAL_TIM_OC_Start_IT+0xaa>
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d104      	bne.n	800cb42 <HAL_TIM_OC_Start_IT+0x92>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb40:	e00b      	b.n	800cb5a <HAL_TIM_OC_Start_IT+0xaa>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b08      	cmp	r3, #8
 800cb46:	d104      	bne.n	800cb52 <HAL_TIM_OC_Start_IT+0xa2>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb50:	e003      	b.n	800cb5a <HAL_TIM_OC_Start_IT+0xaa>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2202      	movs	r2, #2
 800cb56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b0c      	cmp	r3, #12
 800cb5e:	d841      	bhi.n	800cbe4 <HAL_TIM_OC_Start_IT+0x134>
 800cb60:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <HAL_TIM_OC_Start_IT+0xb8>)
 800cb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb66:	bf00      	nop
 800cb68:	0800cb9d 	.word	0x0800cb9d
 800cb6c:	0800cbe5 	.word	0x0800cbe5
 800cb70:	0800cbe5 	.word	0x0800cbe5
 800cb74:	0800cbe5 	.word	0x0800cbe5
 800cb78:	0800cbaf 	.word	0x0800cbaf
 800cb7c:	0800cbe5 	.word	0x0800cbe5
 800cb80:	0800cbe5 	.word	0x0800cbe5
 800cb84:	0800cbe5 	.word	0x0800cbe5
 800cb88:	0800cbc1 	.word	0x0800cbc1
 800cb8c:	0800cbe5 	.word	0x0800cbe5
 800cb90:	0800cbe5 	.word	0x0800cbe5
 800cb94:	0800cbe5 	.word	0x0800cbe5
 800cb98:	0800cbd3 	.word	0x0800cbd3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0202 	orr.w	r2, r2, #2
 800cbaa:	60da      	str	r2, [r3, #12]
      break;
 800cbac:	e01b      	b.n	800cbe6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f042 0204 	orr.w	r2, r2, #4
 800cbbc:	60da      	str	r2, [r3, #12]
      break;
 800cbbe:	e012      	b.n	800cbe6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f042 0208 	orr.w	r2, r2, #8
 800cbce:	60da      	str	r2, [r3, #12]
      break;
 800cbd0:	e009      	b.n	800cbe6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f042 0210 	orr.w	r2, r2, #16
 800cbe0:	60da      	str	r2, [r3, #12]
      break;
 800cbe2:	e000      	b.n	800cbe6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800cbe4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2201      	movs	r2, #1
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 ff12 	bl	800da18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a2d      	ldr	r2, [pc, #180]	; (800ccb0 <HAL_TIM_OC_Start_IT+0x200>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d004      	beq.n	800cc08 <HAL_TIM_OC_Start_IT+0x158>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a2c      	ldr	r2, [pc, #176]	; (800ccb4 <HAL_TIM_OC_Start_IT+0x204>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d101      	bne.n	800cc0c <HAL_TIM_OC_Start_IT+0x15c>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e000      	b.n	800cc0e <HAL_TIM_OC_Start_IT+0x15e>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a22      	ldr	r2, [pc, #136]	; (800ccb0 <HAL_TIM_OC_Start_IT+0x200>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d022      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc34:	d01d      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a1f      	ldr	r2, [pc, #124]	; (800ccb8 <HAL_TIM_OC_Start_IT+0x208>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d018      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a1d      	ldr	r2, [pc, #116]	; (800ccbc <HAL_TIM_OC_Start_IT+0x20c>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d013      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1c      	ldr	r2, [pc, #112]	; (800ccc0 <HAL_TIM_OC_Start_IT+0x210>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00e      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a16      	ldr	r2, [pc, #88]	; (800ccb4 <HAL_TIM_OC_Start_IT+0x204>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d009      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a18      	ldr	r2, [pc, #96]	; (800ccc4 <HAL_TIM_OC_Start_IT+0x214>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d004      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x1c2>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a16      	ldr	r2, [pc, #88]	; (800ccc8 <HAL_TIM_OC_Start_IT+0x218>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d111      	bne.n	800cc96 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f003 0307 	and.w	r3, r3, #7
 800cc7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2b06      	cmp	r3, #6
 800cc82:	d010      	beq.n	800cca6 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0201 	orr.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc94:	e007      	b.n	800cca6 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f042 0201 	orr.w	r2, r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	40010000 	.word	0x40010000
 800ccb4:	40010400 	.word	0x40010400
 800ccb8:	40000400 	.word	0x40000400
 800ccbc:	40000800 	.word	0x40000800
 800ccc0:	40000c00 	.word	0x40000c00
 800ccc4:	40014000 	.word	0x40014000
 800ccc8:	40001800 	.word	0x40001800

0800cccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e041      	b.n	800cd62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f839 	bl	800cd6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3304      	adds	r3, #4
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	f000 fb9a 	bl	800d444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cd72:	bf00      	nop
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b086      	sub	sp, #24
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e097      	b.n	800cec2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7f5 f908 	bl	8001fbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	6812      	ldr	r2, [r2, #0]
 800cdbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdc2:	f023 0307 	bic.w	r3, r3, #7
 800cdc6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f000 fb36 	bl	800d444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce00:	f023 0303 	bic.w	r3, r3, #3
 800ce04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	4313      	orrs	r3, r2
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ce1e:	f023 030c 	bic.w	r3, r3, #12
 800ce22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	68da      	ldr	r2, [r3, #12]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	011a      	lsls	r2, r3, #4
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	031b      	lsls	r3, r3, #12
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ce5c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ce64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	4313      	orrs	r3, r2
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d122      	bne.n	800cf26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d11b      	bne.n	800cf26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f06f 0202 	mvn.w	r2, #2
 800cef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	f003 0303 	and.w	r3, r3, #3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d003      	beq.n	800cf14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fa7b 	bl	800d408 <HAL_TIM_IC_CaptureCallback>
 800cf12:	e005      	b.n	800cf20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fa6d 	bl	800d3f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa7e 	bl	800d41c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d122      	bne.n	800cf7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f003 0304 	and.w	r3, r3, #4
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d11b      	bne.n	800cf7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f06f 0204 	mvn.w	r2, #4
 800cf4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d003      	beq.n	800cf68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fa51 	bl	800d408 <HAL_TIM_IC_CaptureCallback>
 800cf66:	e005      	b.n	800cf74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fa43 	bl	800d3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa54 	bl	800d41c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f003 0308 	and.w	r3, r3, #8
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d122      	bne.n	800cfce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	f003 0308 	and.w	r3, r3, #8
 800cf92:	2b08      	cmp	r3, #8
 800cf94:	d11b      	bne.n	800cfce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f06f 0208 	mvn.w	r2, #8
 800cf9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69db      	ldr	r3, [r3, #28]
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d003      	beq.n	800cfbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa27 	bl	800d408 <HAL_TIM_IC_CaptureCallback>
 800cfba:	e005      	b.n	800cfc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fa19 	bl	800d3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fa2a 	bl	800d41c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f003 0310 	and.w	r3, r3, #16
 800cfd8:	2b10      	cmp	r3, #16
 800cfda:	d122      	bne.n	800d022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f003 0310 	and.w	r3, r3, #16
 800cfe6:	2b10      	cmp	r3, #16
 800cfe8:	d11b      	bne.n	800d022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f06f 0210 	mvn.w	r2, #16
 800cff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2208      	movs	r2, #8
 800cff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d004:	2b00      	cmp	r3, #0
 800d006:	d003      	beq.n	800d010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9fd 	bl	800d408 <HAL_TIM_IC_CaptureCallback>
 800d00e:	e005      	b.n	800d01c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f9ef 	bl	800d3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fa00 	bl	800d41c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d10e      	bne.n	800d04e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d107      	bne.n	800d04e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f06f 0201 	mvn.w	r2, #1
 800d046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f9c9 	bl	800d3e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d058:	2b80      	cmp	r3, #128	; 0x80
 800d05a:	d10e      	bne.n	800d07a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d066:	2b80      	cmp	r3, #128	; 0x80
 800d068:	d107      	bne.n	800d07a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fd7b 	bl	800db70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d084:	2b40      	cmp	r3, #64	; 0x40
 800d086:	d10e      	bne.n	800d0a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d092:	2b40      	cmp	r3, #64	; 0x40
 800d094:	d107      	bne.n	800d0a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f9c5 	bl	800d430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	f003 0320 	and.w	r3, r3, #32
 800d0b0:	2b20      	cmp	r3, #32
 800d0b2:	d10e      	bne.n	800d0d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	f003 0320 	and.w	r3, r3, #32
 800d0be:	2b20      	cmp	r3, #32
 800d0c0:	d107      	bne.n	800d0d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f06f 0220 	mvn.w	r2, #32
 800d0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fd45 	bl	800db5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0d2:	bf00      	nop
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
	...

0800d0dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d101      	bne.n	800d0f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e0ac      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x174>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b0c      	cmp	r3, #12
 800d102:	f200 809f 	bhi.w	800d244 <HAL_TIM_PWM_ConfigChannel+0x168>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d141 	.word	0x0800d141
 800d110:	0800d245 	.word	0x0800d245
 800d114:	0800d245 	.word	0x0800d245
 800d118:	0800d245 	.word	0x0800d245
 800d11c:	0800d181 	.word	0x0800d181
 800d120:	0800d245 	.word	0x0800d245
 800d124:	0800d245 	.word	0x0800d245
 800d128:	0800d245 	.word	0x0800d245
 800d12c:	0800d1c3 	.word	0x0800d1c3
 800d130:	0800d245 	.word	0x0800d245
 800d134:	0800d245 	.word	0x0800d245
 800d138:	0800d245 	.word	0x0800d245
 800d13c:	0800d203 	.word	0x0800d203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68b9      	ldr	r1, [r7, #8]
 800d146:	4618      	mov	r0, r3
 800d148:	f000 fa1c 	bl	800d584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	699a      	ldr	r2, [r3, #24]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f042 0208 	orr.w	r2, r2, #8
 800d15a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	699a      	ldr	r2, [r3, #24]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f022 0204 	bic.w	r2, r2, #4
 800d16a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6999      	ldr	r1, [r3, #24]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	691a      	ldr	r2, [r3, #16]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	619a      	str	r2, [r3, #24]
      break;
 800d17e:	e062      	b.n	800d246 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68b9      	ldr	r1, [r7, #8]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fa6c 	bl	800d664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	699a      	ldr	r2, [r3, #24]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d19a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6999      	ldr	r1, [r3, #24]
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	021a      	lsls	r2, r3, #8
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	430a      	orrs	r2, r1
 800d1be:	619a      	str	r2, [r3, #24]
      break;
 800d1c0:	e041      	b.n	800d246 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fac1 	bl	800d750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	69da      	ldr	r2, [r3, #28]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f042 0208 	orr.w	r2, r2, #8
 800d1dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	69da      	ldr	r2, [r3, #28]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 0204 	bic.w	r2, r2, #4
 800d1ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	69d9      	ldr	r1, [r3, #28]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	691a      	ldr	r2, [r3, #16]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	61da      	str	r2, [r3, #28]
      break;
 800d200:	e021      	b.n	800d246 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fb15 	bl	800d838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	69da      	ldr	r2, [r3, #28]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d21c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	69da      	ldr	r2, [r3, #28]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d22c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69d9      	ldr	r1, [r3, #28]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	021a      	lsls	r2, r3, #8
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	61da      	str	r2, [r3, #28]
      break;
 800d242:	e000      	b.n	800d246 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800d244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d101      	bne.n	800d270 <HAL_TIM_ConfigClockSource+0x18>
 800d26c:	2302      	movs	r3, #2
 800d26e:	e0b3      	b.n	800d3d8 <HAL_TIM_ConfigClockSource+0x180>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d28e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d296:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2a8:	d03e      	beq.n	800d328 <HAL_TIM_ConfigClockSource+0xd0>
 800d2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2ae:	f200 8087 	bhi.w	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2b6:	f000 8085 	beq.w	800d3c4 <HAL_TIM_ConfigClockSource+0x16c>
 800d2ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2be:	d87f      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2c0:	2b70      	cmp	r3, #112	; 0x70
 800d2c2:	d01a      	beq.n	800d2fa <HAL_TIM_ConfigClockSource+0xa2>
 800d2c4:	2b70      	cmp	r3, #112	; 0x70
 800d2c6:	d87b      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2c8:	2b60      	cmp	r3, #96	; 0x60
 800d2ca:	d050      	beq.n	800d36e <HAL_TIM_ConfigClockSource+0x116>
 800d2cc:	2b60      	cmp	r3, #96	; 0x60
 800d2ce:	d877      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2d0:	2b50      	cmp	r3, #80	; 0x50
 800d2d2:	d03c      	beq.n	800d34e <HAL_TIM_ConfigClockSource+0xf6>
 800d2d4:	2b50      	cmp	r3, #80	; 0x50
 800d2d6:	d873      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2d8:	2b40      	cmp	r3, #64	; 0x40
 800d2da:	d058      	beq.n	800d38e <HAL_TIM_ConfigClockSource+0x136>
 800d2dc:	2b40      	cmp	r3, #64	; 0x40
 800d2de:	d86f      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2e0:	2b30      	cmp	r3, #48	; 0x30
 800d2e2:	d064      	beq.n	800d3ae <HAL_TIM_ConfigClockSource+0x156>
 800d2e4:	2b30      	cmp	r3, #48	; 0x30
 800d2e6:	d86b      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2e8:	2b20      	cmp	r3, #32
 800d2ea:	d060      	beq.n	800d3ae <HAL_TIM_ConfigClockSource+0x156>
 800d2ec:	2b20      	cmp	r3, #32
 800d2ee:	d867      	bhi.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d05c      	beq.n	800d3ae <HAL_TIM_ConfigClockSource+0x156>
 800d2f4:	2b10      	cmp	r3, #16
 800d2f6:	d05a      	beq.n	800d3ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d2f8:	e062      	b.n	800d3c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	6899      	ldr	r1, [r3, #8]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	f000 fb65 	bl	800d9d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d31c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	609a      	str	r2, [r3, #8]
      break;
 800d326:	e04e      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	6899      	ldr	r1, [r3, #8]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f000 fb4e 	bl	800d9d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d34a:	609a      	str	r2, [r3, #8]
      break;
 800d34c:	e03b      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6818      	ldr	r0, [r3, #0]
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	6859      	ldr	r1, [r3, #4]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f000 fac2 	bl	800d8e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2150      	movs	r1, #80	; 0x50
 800d366:	4618      	mov	r0, r3
 800d368:	f000 fb1b 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d36c:	e02b      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6818      	ldr	r0, [r3, #0]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	6859      	ldr	r1, [r3, #4]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	461a      	mov	r2, r3
 800d37c:	f000 fae1 	bl	800d942 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2160      	movs	r1, #96	; 0x60
 800d386:	4618      	mov	r0, r3
 800d388:	f000 fb0b 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d38c:	e01b      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	6859      	ldr	r1, [r3, #4]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	461a      	mov	r2, r3
 800d39c:	f000 faa2 	bl	800d8e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2140      	movs	r1, #64	; 0x40
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 fafb 	bl	800d9a2 <TIM_ITRx_SetConfig>
      break;
 800d3ac:	e00b      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f000 faf2 	bl	800d9a2 <TIM_ITRx_SetConfig>
        break;
 800d3be:	e002      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d3c0:	bf00      	nop
 800d3c2:	e000      	b.n	800d3c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d3c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3fc:	bf00      	nop
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a40      	ldr	r2, [pc, #256]	; (800d558 <TIM_Base_SetConfig+0x114>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d013      	beq.n	800d484 <TIM_Base_SetConfig+0x40>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d462:	d00f      	beq.n	800d484 <TIM_Base_SetConfig+0x40>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a3d      	ldr	r2, [pc, #244]	; (800d55c <TIM_Base_SetConfig+0x118>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d00b      	beq.n	800d484 <TIM_Base_SetConfig+0x40>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a3c      	ldr	r2, [pc, #240]	; (800d560 <TIM_Base_SetConfig+0x11c>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d007      	beq.n	800d484 <TIM_Base_SetConfig+0x40>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a3b      	ldr	r2, [pc, #236]	; (800d564 <TIM_Base_SetConfig+0x120>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d003      	beq.n	800d484 <TIM_Base_SetConfig+0x40>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a3a      	ldr	r2, [pc, #232]	; (800d568 <TIM_Base_SetConfig+0x124>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d108      	bne.n	800d496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d48a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	4313      	orrs	r3, r2
 800d494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a2f      	ldr	r2, [pc, #188]	; (800d558 <TIM_Base_SetConfig+0x114>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d02b      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4a4:	d027      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a2c      	ldr	r2, [pc, #176]	; (800d55c <TIM_Base_SetConfig+0x118>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d023      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a2b      	ldr	r2, [pc, #172]	; (800d560 <TIM_Base_SetConfig+0x11c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d01f      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a2a      	ldr	r2, [pc, #168]	; (800d564 <TIM_Base_SetConfig+0x120>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d01b      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a29      	ldr	r2, [pc, #164]	; (800d568 <TIM_Base_SetConfig+0x124>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d017      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4a28      	ldr	r2, [pc, #160]	; (800d56c <TIM_Base_SetConfig+0x128>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d013      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4a27      	ldr	r2, [pc, #156]	; (800d570 <TIM_Base_SetConfig+0x12c>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d00f      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4a26      	ldr	r2, [pc, #152]	; (800d574 <TIM_Base_SetConfig+0x130>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d00b      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4a25      	ldr	r2, [pc, #148]	; (800d578 <TIM_Base_SetConfig+0x134>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d007      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a24      	ldr	r2, [pc, #144]	; (800d57c <TIM_Base_SetConfig+0x138>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d003      	beq.n	800d4f6 <TIM_Base_SetConfig+0xb2>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a23      	ldr	r2, [pc, #140]	; (800d580 <TIM_Base_SetConfig+0x13c>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d108      	bne.n	800d508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	4313      	orrs	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	4313      	orrs	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a0a      	ldr	r2, [pc, #40]	; (800d558 <TIM_Base_SetConfig+0x114>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d003      	beq.n	800d53c <TIM_Base_SetConfig+0xf8>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a0c      	ldr	r2, [pc, #48]	; (800d568 <TIM_Base_SetConfig+0x124>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d103      	bne.n	800d544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	691a      	ldr	r2, [r3, #16]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	615a      	str	r2, [r3, #20]
}
 800d54a:	bf00      	nop
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	40010000 	.word	0x40010000
 800d55c:	40000400 	.word	0x40000400
 800d560:	40000800 	.word	0x40000800
 800d564:	40000c00 	.word	0x40000c00
 800d568:	40010400 	.word	0x40010400
 800d56c:	40014000 	.word	0x40014000
 800d570:	40014400 	.word	0x40014400
 800d574:	40014800 	.word	0x40014800
 800d578:	40001800 	.word	0x40001800
 800d57c:	40001c00 	.word	0x40001c00
 800d580:	40002000 	.word	0x40002000

0800d584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a1b      	ldr	r3, [r3, #32]
 800d592:	f023 0201 	bic.w	r2, r3, #1
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a1b      	ldr	r3, [r3, #32]
 800d59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f023 0303 	bic.w	r3, r3, #3
 800d5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f023 0302 	bic.w	r3, r3, #2
 800d5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a20      	ldr	r2, [pc, #128]	; (800d65c <TIM_OC1_SetConfig+0xd8>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d003      	beq.n	800d5e8 <TIM_OC1_SetConfig+0x64>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <TIM_OC1_SetConfig+0xdc>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d10c      	bne.n	800d602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	f023 0308 	bic.w	r3, r3, #8
 800d5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f023 0304 	bic.w	r3, r3, #4
 800d600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a15      	ldr	r2, [pc, #84]	; (800d65c <TIM_OC1_SetConfig+0xd8>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d003      	beq.n	800d612 <TIM_OC1_SetConfig+0x8e>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a14      	ldr	r2, [pc, #80]	; (800d660 <TIM_OC1_SetConfig+0xdc>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d111      	bne.n	800d636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	4313      	orrs	r3, r2
 800d62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	4313      	orrs	r3, r2
 800d634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	621a      	str	r2, [r3, #32]
}
 800d650:	bf00      	nop
 800d652:	371c      	adds	r7, #28
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	40010000 	.word	0x40010000
 800d660:	40010400 	.word	0x40010400

0800d664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	f023 0210 	bic.w	r2, r3, #16
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a1b      	ldr	r3, [r3, #32]
 800d67e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d69a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	021b      	lsls	r3, r3, #8
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f023 0320 	bic.w	r3, r3, #32
 800d6ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a22      	ldr	r2, [pc, #136]	; (800d748 <TIM_OC2_SetConfig+0xe4>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d003      	beq.n	800d6cc <TIM_OC2_SetConfig+0x68>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a21      	ldr	r2, [pc, #132]	; (800d74c <TIM_OC2_SetConfig+0xe8>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d10d      	bne.n	800d6e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a17      	ldr	r2, [pc, #92]	; (800d748 <TIM_OC2_SetConfig+0xe4>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d003      	beq.n	800d6f8 <TIM_OC2_SetConfig+0x94>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a16      	ldr	r2, [pc, #88]	; (800d74c <TIM_OC2_SetConfig+0xe8>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d113      	bne.n	800d720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	695b      	ldr	r3, [r3, #20]
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	4313      	orrs	r3, r2
 800d712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	621a      	str	r2, [r3, #32]
}
 800d73a:	bf00      	nop
 800d73c:	371c      	adds	r7, #28
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	40010000 	.word	0x40010000
 800d74c:	40010400 	.word	0x40010400

0800d750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d750:	b480      	push	{r7}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a1b      	ldr	r3, [r3, #32]
 800d76a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f023 0303 	bic.w	r3, r3, #3
 800d786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4313      	orrs	r3, r2
 800d790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	021b      	lsls	r3, r3, #8
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a21      	ldr	r2, [pc, #132]	; (800d830 <TIM_OC3_SetConfig+0xe0>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d003      	beq.n	800d7b6 <TIM_OC3_SetConfig+0x66>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a20      	ldr	r2, [pc, #128]	; (800d834 <TIM_OC3_SetConfig+0xe4>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d10d      	bne.n	800d7d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a16      	ldr	r2, [pc, #88]	; (800d830 <TIM_OC3_SetConfig+0xe0>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d003      	beq.n	800d7e2 <TIM_OC3_SetConfig+0x92>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a15      	ldr	r2, [pc, #84]	; (800d834 <TIM_OC3_SetConfig+0xe4>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d113      	bne.n	800d80a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	695b      	ldr	r3, [r3, #20]
 800d7f6:	011b      	lsls	r3, r3, #4
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	011b      	lsls	r3, r3, #4
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	693a      	ldr	r2, [r7, #16]
 800d80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	621a      	str	r2, [r3, #32]
}
 800d824:	bf00      	nop
 800d826:	371c      	adds	r7, #28
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	40010000 	.word	0x40010000
 800d834:	40010400 	.word	0x40010400

0800d838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d838:	b480      	push	{r7}
 800d83a:	b087      	sub	sp, #28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	4313      	orrs	r3, r2
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	031b      	lsls	r3, r3, #12
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a12      	ldr	r2, [pc, #72]	; (800d8dc <TIM_OC4_SetConfig+0xa4>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d003      	beq.n	800d8a0 <TIM_OC4_SetConfig+0x68>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a11      	ldr	r2, [pc, #68]	; (800d8e0 <TIM_OC4_SetConfig+0xa8>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d109      	bne.n	800d8b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	019b      	lsls	r3, r3, #6
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	621a      	str	r2, [r3, #32]
}
 800d8ce:	bf00      	nop
 800d8d0:	371c      	adds	r7, #28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	40010000 	.word	0x40010000
 800d8e0:	40010400 	.word	0x40010400

0800d8e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	f023 0201 	bic.w	r2, r3, #1
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d90e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	4313      	orrs	r3, r2
 800d918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f023 030a 	bic.w	r3, r3, #10
 800d920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	4313      	orrs	r3, r2
 800d928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	693a      	ldr	r2, [r7, #16]
 800d92e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	621a      	str	r2, [r3, #32]
}
 800d936:	bf00      	nop
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d942:	b480      	push	{r7}
 800d944:	b087      	sub	sp, #28
 800d946:	af00      	add	r7, sp, #0
 800d948:	60f8      	str	r0, [r7, #12]
 800d94a:	60b9      	str	r1, [r7, #8]
 800d94c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	f023 0210 	bic.w	r2, r3, #16
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d96c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	031b      	lsls	r3, r3, #12
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	4313      	orrs	r3, r2
 800d976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d97e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	011b      	lsls	r3, r3, #4
 800d984:	693a      	ldr	r2, [r7, #16]
 800d986:	4313      	orrs	r3, r2
 800d988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	621a      	str	r2, [r3, #32]
}
 800d996:	bf00      	nop
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	f043 0307 	orr.w	r3, r3, #7
 800d9c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	609a      	str	r2, [r3, #8]
}
 800d9cc:	bf00      	nop
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	021a      	lsls	r2, r3, #8
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4313      	orrs	r3, r2
 800da04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	609a      	str	r2, [r3, #8]
}
 800da0c:	bf00      	nop
 800da0e:	371c      	adds	r7, #28
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da18:	b480      	push	{r7}
 800da1a:	b087      	sub	sp, #28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	f003 031f 	and.w	r3, r3, #31
 800da2a:	2201      	movs	r2, #1
 800da2c:	fa02 f303 	lsl.w	r3, r2, r3
 800da30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	6a1a      	ldr	r2, [r3, #32]
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	43db      	mvns	r3, r3
 800da3a:	401a      	ands	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6a1a      	ldr	r2, [r3, #32]
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	f003 031f 	and.w	r3, r3, #31
 800da4a:	6879      	ldr	r1, [r7, #4]
 800da4c:	fa01 f303 	lsl.w	r3, r1, r3
 800da50:	431a      	orrs	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	621a      	str	r2, [r3, #32]
}
 800da56:	bf00      	nop
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
	...

0800da64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da74:	2b01      	cmp	r3, #1
 800da76:	d101      	bne.n	800da7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da78:	2302      	movs	r3, #2
 800da7a:	e05a      	b.n	800db32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	4313      	orrs	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a21      	ldr	r2, [pc, #132]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d022      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac8:	d01d      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d018      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a1b      	ldr	r2, [pc, #108]	; (800db48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d013      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a1a      	ldr	r2, [pc, #104]	; (800db4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d00e      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a18      	ldr	r2, [pc, #96]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d009      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a17      	ldr	r2, [pc, #92]	; (800db54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d004      	beq.n	800db06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a15      	ldr	r2, [pc, #84]	; (800db58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d10c      	bne.n	800db20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	4313      	orrs	r3, r2
 800db16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	40010000 	.word	0x40010000
 800db44:	40000400 	.word	0x40000400
 800db48:	40000800 	.word	0x40000800
 800db4c:	40000c00 	.word	0x40000c00
 800db50:	40010400 	.word	0x40010400
 800db54:	40014000 	.word	0x40014000
 800db58:	40001800 	.word	0x40001800

0800db5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db84:	b084      	sub	sp, #16
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	f107 001c 	add.w	r0, r7, #28
 800db92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d122      	bne.n	800dbe2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dbb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d105      	bne.n	800dbd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f94a 	bl	800de70 <USB_CoreReset>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
 800dbe0:	e01a      	b.n	800dc18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f93e 	bl	800de70 <USB_CoreReset>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	639a      	str	r2, [r3, #56]	; 0x38
 800dc0a:	e005      	b.n	800dc18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d10b      	bne.n	800dc36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f043 0206 	orr.w	r2, r3, #6
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f043 0220 	orr.w	r2, r3, #32
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc42:	b004      	add	sp, #16
 800dc44:	4770      	bx	lr

0800dc46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b083      	sub	sp, #12
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	f043 0201 	orr.w	r2, r3, #1
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	f023 0201 	bic.w	r2, r3, #1
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	460b      	mov	r3, r1
 800dc94:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dca2:	78fb      	ldrb	r3, [r7, #3]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d106      	bne.n	800dcb6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60da      	str	r2, [r3, #12]
 800dcb4:	e00b      	b.n	800dcce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dcb6:	78fb      	ldrb	r3, [r7, #3]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60da      	str	r2, [r3, #12]
 800dcc8:	e001      	b.n	800dcce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e003      	b.n	800dcd6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dcce:	2032      	movs	r0, #50	; 0x32
 800dcd0:	f7f9 fc02 	bl	80074d8 <HAL_Delay>

  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	019b      	lsls	r3, r3, #6
 800dcf2:	f043 0220 	orr.w	r2, r3, #32
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	4a09      	ldr	r2, [pc, #36]	; (800dd28 <USB_FlushTxFifo+0x48>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d901      	bls.n	800dd0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e006      	b.n	800dd1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	f003 0320 	and.w	r3, r3, #32
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d0f0      	beq.n	800dcfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	00030d40 	.word	0x00030d40

0800dd2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b085      	sub	sp, #20
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2210      	movs	r2, #16
 800dd3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3301      	adds	r3, #1
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	4a09      	ldr	r2, [pc, #36]	; (800dd6c <USB_FlushRxFifo+0x40>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d901      	bls.n	800dd50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	e006      	b.n	800dd5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	f003 0310 	and.w	r3, r3, #16
 800dd58:	2b10      	cmp	r3, #16
 800dd5a:	d0f0      	beq.n	800dd3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3714      	adds	r7, #20
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	00030d40 	.word	0x00030d40

0800dd70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b089      	sub	sp, #36	; 0x24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	460b      	mov	r3, r1
 800dd80:	71fb      	strb	r3, [r7, #7]
 800dd82:	4613      	mov	r3, r2
 800dd84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dd8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d11a      	bne.n	800ddcc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dd96:	88bb      	ldrh	r3, [r7, #4]
 800dd98:	3303      	adds	r3, #3
 800dd9a:	089b      	lsrs	r3, r3, #2
 800dd9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61bb      	str	r3, [r7, #24]
 800dda2:	e00f      	b.n	800ddc4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	031a      	lsls	r2, r3, #12
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	61bb      	str	r3, [r7, #24]
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d3eb      	bcc.n	800dda4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3724      	adds	r7, #36	; 0x24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b089      	sub	sp, #36	; 0x24
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	4613      	mov	r3, r2
 800dde6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ddf0:	88fb      	ldrh	r3, [r7, #6]
 800ddf2:	3303      	adds	r3, #3
 800ddf4:	089b      	lsrs	r3, r3, #2
 800ddf6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e00b      	b.n	800de16 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	601a      	str	r2, [r3, #0]
    pDest++;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	3304      	adds	r3, #4
 800de0e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	3301      	adds	r3, #1
 800de14:	61bb      	str	r3, [r7, #24]
 800de16:	69ba      	ldr	r2, [r7, #24]
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d3ef      	bcc.n	800ddfe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800de1e:	69fb      	ldr	r3, [r7, #28]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3724      	adds	r7, #36	; 0x24
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	4013      	ands	r3, r2
 800de42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800de44:	68fb      	ldr	r3, [r7, #12]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800de52:	b480      	push	{r7}
 800de54:	b083      	sub	sp, #12
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	f003 0301 	and.w	r3, r3, #1
}
 800de62:	4618      	mov	r0, r3
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4a13      	ldr	r2, [pc, #76]	; (800ded4 <USB_CoreReset+0x64>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d901      	bls.n	800de8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de8a:	2303      	movs	r3, #3
 800de8c:	e01b      	b.n	800dec6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	daf2      	bge.n	800de7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	f043 0201 	orr.w	r2, r3, #1
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3301      	adds	r3, #1
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4a09      	ldr	r2, [pc, #36]	; (800ded4 <USB_CoreReset+0x64>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d901      	bls.n	800deb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800deb4:	2303      	movs	r3, #3
 800deb6:	e006      	b.n	800dec6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d0f0      	beq.n	800dea6 <USB_CoreReset+0x36>

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	00030d40 	.word	0x00030d40

0800ded8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ded8:	b084      	sub	sp, #16
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	f107 001c 	add.w	r0, r7, #28
 800dee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800def4:	461a      	mov	r2, r3
 800def6:	2300      	movs	r3, #0
 800def8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df26:	2b00      	cmp	r3, #0
 800df28:	d018      	beq.n	800df5c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d10a      	bne.n	800df46 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df3e:	f043 0304 	orr.w	r3, r3, #4
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	e014      	b.n	800df70 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df54:	f023 0304 	bic.w	r3, r3, #4
 800df58:	6013      	str	r3, [r2, #0]
 800df5a:	e009      	b.n	800df70 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df6a:	f023 0304 	bic.w	r3, r3, #4
 800df6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800df70:	2110      	movs	r1, #16
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff feb4 	bl	800dce0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff fed7 	bl	800dd2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800df7e:	2300      	movs	r3, #0
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e015      	b.n	800dfb0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	015a      	lsls	r2, r3, #5
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	4413      	add	r3, r2
 800df8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df90:	461a      	mov	r2, r3
 800df92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df96:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	015a      	lsls	r2, r3, #5
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	4413      	add	r3, r2
 800dfa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3301      	adds	r3, #1
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	6a3b      	ldr	r3, [r7, #32]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d3e5      	bcc.n	800df84 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800dfb8:	2101      	movs	r1, #1
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f8ac 	bl	800e118 <USB_DriveVbus>

  HAL_Delay(200U);
 800dfc0:	20c8      	movs	r0, #200	; 0xc8
 800dfc2:	f7f9 fa89 	bl	80074d8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00b      	beq.n	800dff8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfe6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a14      	ldr	r2, [pc, #80]	; (800e03c <USB_HostInit+0x164>)
 800dfec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a13      	ldr	r2, [pc, #76]	; (800e040 <USB_HostInit+0x168>)
 800dff2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800dff6:	e009      	b.n	800e00c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2280      	movs	r2, #128	; 0x80
 800dffc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a10      	ldr	r2, [pc, #64]	; (800e044 <USB_HostInit+0x16c>)
 800e002:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a10      	ldr	r2, [pc, #64]	; (800e048 <USB_HostInit+0x170>)
 800e008:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	699b      	ldr	r3, [r3, #24]
 800e016:	f043 0210 	orr.w	r2, r3, #16
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <USB_HostInit+0x174>)
 800e024:	4313      	orrs	r3, r2
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e036:	b004      	add	sp, #16
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	01000200 	.word	0x01000200
 800e040:	00e00300 	.word	0x00e00300
 800e044:	00600080 	.word	0x00600080
 800e048:	004000e0 	.word	0x004000e0
 800e04c:	a3200008 	.word	0xa3200008

0800e050 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e06e:	f023 0303 	bic.w	r3, r3, #3
 800e072:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	78fb      	ldrb	r3, [r7, #3]
 800e07e:	f003 0303 	and.w	r3, r3, #3
 800e082:	68f9      	ldr	r1, [r7, #12]
 800e084:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e088:	4313      	orrs	r3, r2
 800e08a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e08c:	78fb      	ldrb	r3, [r7, #3]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d107      	bne.n	800e0a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e098:	461a      	mov	r2, r3
 800e09a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e09e:	6053      	str	r3, [r2, #4]
 800e0a0:	e009      	b.n	800e0b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e0a2:	78fb      	ldrb	r3, [r7, #3]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d106      	bne.n	800e0b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f241 7370 	movw	r3, #6000	; 0x1770
 800e0b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e0e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e0f4:	2064      	movs	r0, #100	; 0x64
 800e0f6:	f7f9 f9ef 	bl	80074d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e106:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e108:	200a      	movs	r0, #10
 800e10a:	f7f9 f9e5 	bl	80074d8 <HAL_Delay>

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e13c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <USB_DriveVbus+0x44>
 800e148:	78fb      	ldrb	r3, [r7, #3]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d106      	bne.n	800e15c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e15a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e166:	d109      	bne.n	800e17c <USB_DriveVbus+0x64>
 800e168:	78fb      	ldrb	r3, [r7, #3]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d106      	bne.n	800e17c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e17a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e18a:	b480      	push	{r7}
 800e18c:	b085      	sub	sp, #20
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e196:	2300      	movs	r3, #0
 800e198:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	0c5b      	lsrs	r3, r3, #17
 800e1a8:	f003 0303 	and.w	r3, r3, #3
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	b29b      	uxth	r3, r3
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
	...

0800e1dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	70fb      	strb	r3, [r7, #3]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70bb      	strb	r3, [r7, #2]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800e1fe:	78fb      	ldrb	r3, [r7, #3]
 800e200:	015a      	lsls	r2, r3, #5
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	4413      	add	r3, r2
 800e206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e20a:	461a      	mov	r2, r3
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e216:	2b03      	cmp	r3, #3
 800e218:	d87e      	bhi.n	800e318 <USB_HC_Init+0x13c>
 800e21a:	a201      	add	r2, pc, #4	; (adr r2, 800e220 <USB_HC_Init+0x44>)
 800e21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e220:	0800e231 	.word	0x0800e231
 800e224:	0800e2db 	.word	0x0800e2db
 800e228:	0800e231 	.word	0x0800e231
 800e22c:	0800e29d 	.word	0x0800e29d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e230:	78fb      	ldrb	r3, [r7, #3]
 800e232:	015a      	lsls	r2, r3, #5
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	4413      	add	r3, r2
 800e238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e23c:	461a      	mov	r2, r3
 800e23e:	f240 439d 	movw	r3, #1181	; 0x49d
 800e242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da10      	bge.n	800e26e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e24c:	78fb      	ldrb	r3, [r7, #3]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	4413      	add	r3, r2
 800e254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	78fa      	ldrb	r2, [r7, #3]
 800e25c:	0151      	lsls	r1, r2, #5
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	440a      	add	r2, r1
 800e262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e26a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800e26c:	e057      	b.n	800e31e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e276:	2b00      	cmp	r3, #0
 800e278:	d051      	beq.n	800e31e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	015a      	lsls	r2, r3, #5
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	4413      	add	r3, r2
 800e282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	0151      	lsls	r1, r2, #5
 800e28c:	693a      	ldr	r2, [r7, #16]
 800e28e:	440a      	add	r2, r1
 800e290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e298:	60d3      	str	r3, [r2, #12]
      break;
 800e29a:	e040      	b.n	800e31e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e29c:	78fb      	ldrb	r3, [r7, #3]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	f240 639d 	movw	r3, #1693	; 0x69d
 800e2ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e2b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	da34      	bge.n	800e322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e2b8:	78fb      	ldrb	r3, [r7, #3]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	78fa      	ldrb	r2, [r7, #3]
 800e2c8:	0151      	lsls	r1, r2, #5
 800e2ca:	693a      	ldr	r2, [r7, #16]
 800e2cc:	440a      	add	r2, r1
 800e2ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e2d8:	e023      	b.n	800e322 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	f240 2325 	movw	r3, #549	; 0x225
 800e2ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e2ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da17      	bge.n	800e326 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e2f6:	78fb      	ldrb	r3, [r7, #3]
 800e2f8:	015a      	lsls	r2, r3, #5
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	78fa      	ldrb	r2, [r7, #3]
 800e306:	0151      	lsls	r1, r2, #5
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	440a      	add	r2, r1
 800e30c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e310:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800e314:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e316:	e006      	b.n	800e326 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	77fb      	strb	r3, [r7, #31]
      break;
 800e31c:	e004      	b.n	800e328 <USB_HC_Init+0x14c>
      break;
 800e31e:	bf00      	nop
 800e320:	e002      	b.n	800e328 <USB_HC_Init+0x14c>
      break;
 800e322:	bf00      	nop
 800e324:	e000      	b.n	800e328 <USB_HC_Init+0x14c>
      break;
 800e326:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e32e:	699a      	ldr	r2, [r3, #24]
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	f003 030f 	and.w	r3, r3, #15
 800e336:	2101      	movs	r1, #1
 800e338:	fa01 f303 	lsl.w	r3, r1, r3
 800e33c:	6939      	ldr	r1, [r7, #16]
 800e33e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e342:	4313      	orrs	r3, r2
 800e344:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	699b      	ldr	r3, [r3, #24]
 800e34a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e356:	2b00      	cmp	r3, #0
 800e358:	da03      	bge.n	800e362 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e35e:	61bb      	str	r3, [r7, #24]
 800e360:	e001      	b.n	800e366 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800e362:	2300      	movs	r3, #0
 800e364:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff ff0f 	bl	800e18a <USB_GetHostSpeed>
 800e36c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e36e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e372:	2b02      	cmp	r3, #2
 800e374:	d106      	bne.n	800e384 <USB_HC_Init+0x1a8>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b02      	cmp	r3, #2
 800e37a:	d003      	beq.n	800e384 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e37c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e380:	617b      	str	r3, [r7, #20]
 800e382:	e001      	b.n	800e388 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e384:	2300      	movs	r3, #0
 800e386:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e388:	787b      	ldrb	r3, [r7, #1]
 800e38a:	059b      	lsls	r3, r3, #22
 800e38c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e390:	78bb      	ldrb	r3, [r7, #2]
 800e392:	02db      	lsls	r3, r3, #11
 800e394:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e398:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e39a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e39e:	049b      	lsls	r3, r3, #18
 800e3a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e3a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e3a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e3a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e3ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e3b2:	78fb      	ldrb	r3, [r7, #3]
 800e3b4:	0159      	lsls	r1, r3, #5
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	440b      	add	r3, r1
 800e3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e3c4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800e3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d10f      	bne.n	800e3ee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	015a      	lsls	r2, r3, #5
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	78fa      	ldrb	r2, [r7, #3]
 800e3de:	0151      	lsls	r1, r2, #5
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	440a      	add	r2, r1
 800e3e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e3ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e3ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3720      	adds	r7, #32
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08c      	sub	sp, #48	; 0x30
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	785b      	ldrb	r3, [r3, #1]
 800e40e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800e410:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e414:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d02d      	beq.n	800e47e <USB_HC_StartXfer+0x86>
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	791b      	ldrb	r3, [r3, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d129      	bne.n	800e47e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d117      	bne.n	800e460 <USB_HC_StartXfer+0x68>
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	79db      	ldrb	r3, [r3, #7]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <USB_HC_StartXfer+0x48>
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	79db      	ldrb	r3, [r3, #7]
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d10f      	bne.n	800e460 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	015a      	lsls	r2, r3, #5
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	4413      	add	r3, r2
 800e448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	69fa      	ldr	r2, [r7, #28]
 800e450:	0151      	lsls	r1, r2, #5
 800e452:	6a3a      	ldr	r2, [r7, #32]
 800e454:	440a      	add	r2, r1
 800e456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e45e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800e460:	79fb      	ldrb	r3, [r7, #7]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10b      	bne.n	800e47e <USB_HC_StartXfer+0x86>
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	795b      	ldrb	r3, [r3, #5]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d107      	bne.n	800e47e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	785b      	ldrb	r3, [r3, #1]
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fa2f 	bl	800e8d8 <USB_DoPing>
      return HAL_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	e0f8      	b.n	800e670 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d018      	beq.n	800e4b8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	695b      	ldr	r3, [r3, #20]
 800e48a:	68ba      	ldr	r2, [r7, #8]
 800e48c:	8912      	ldrh	r2, [r2, #8]
 800e48e:	4413      	add	r3, r2
 800e490:	3b01      	subs	r3, #1
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	8912      	ldrh	r2, [r2, #8]
 800e496:	fbb3 f3f2 	udiv	r3, r3, r2
 800e49a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e49c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e49e:	8b7b      	ldrh	r3, [r7, #26]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d90b      	bls.n	800e4bc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800e4a4:	8b7b      	ldrh	r3, [r7, #26]
 800e4a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e4a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	8912      	ldrh	r2, [r2, #8]
 800e4ae:	fb02 f203 	mul.w	r2, r2, r3
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	611a      	str	r2, [r3, #16]
 800e4b6:	e001      	b.n	800e4bc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	78db      	ldrb	r3, [r3, #3]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d007      	beq.n	800e4d4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e4c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	8912      	ldrh	r2, [r2, #8]
 800e4ca:	fb02 f203 	mul.w	r2, r2, r3
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	611a      	str	r2, [r3, #16]
 800e4d2:	e003      	b.n	800e4dc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	695a      	ldr	r2, [r3, #20]
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	691b      	ldr	r3, [r3, #16]
 800e4e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e4e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4e6:	04d9      	lsls	r1, r3, #19
 800e4e8:	4b63      	ldr	r3, [pc, #396]	; (800e678 <USB_HC_StartXfer+0x280>)
 800e4ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e4ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	7a9b      	ldrb	r3, [r3, #10]
 800e4f2:	075b      	lsls	r3, r3, #29
 800e4f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e4f8:	69f9      	ldr	r1, [r7, #28]
 800e4fa:	0148      	lsls	r0, r1, #5
 800e4fc:	6a39      	ldr	r1, [r7, #32]
 800e4fe:	4401      	add	r1, r0
 800e500:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e504:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e506:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e508:	79fb      	ldrb	r3, [r7, #7]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	68d9      	ldr	r1, [r3, #12]
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	015a      	lsls	r2, r3, #5
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	4413      	add	r3, r2
 800e51a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e51e:	460a      	mov	r2, r1
 800e520:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	bf0c      	ite	eq
 800e532:	2301      	moveq	r3, #1
 800e534:	2300      	movne	r3, #0
 800e536:	b2db      	uxtb	r3, r3
 800e538:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	4413      	add	r3, r2
 800e542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	69fa      	ldr	r2, [r7, #28]
 800e54a:	0151      	lsls	r1, r2, #5
 800e54c:	6a3a      	ldr	r2, [r7, #32]
 800e54e:	440a      	add	r2, r1
 800e550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e554:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e558:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	015a      	lsls	r2, r3, #5
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	4413      	add	r3, r2
 800e562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	7e7b      	ldrb	r3, [r7, #25]
 800e56a:	075b      	lsls	r3, r3, #29
 800e56c:	69f9      	ldr	r1, [r7, #28]
 800e56e:	0148      	lsls	r0, r1, #5
 800e570:	6a39      	ldr	r1, [r7, #32]
 800e572:	4401      	add	r1, r0
 800e574:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e578:	4313      	orrs	r3, r2
 800e57a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	4413      	add	r3, r2
 800e584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e592:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	78db      	ldrb	r3, [r3, #3]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5a2:	613b      	str	r3, [r7, #16]
 800e5a4:	e003      	b.n	800e5ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e5ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e5b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e04e      	b.n	800e670 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	78db      	ldrb	r3, [r3, #3]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d149      	bne.n	800e66e <USB_HC_StartXfer+0x276>
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d045      	beq.n	800e66e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	79db      	ldrb	r3, [r3, #7]
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d830      	bhi.n	800e64c <USB_HC_StartXfer+0x254>
 800e5ea:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <USB_HC_StartXfer+0x1f8>)
 800e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f0:	0800e601 	.word	0x0800e601
 800e5f4:	0800e625 	.word	0x0800e625
 800e5f8:	0800e601 	.word	0x0800e601
 800e5fc:	0800e625 	.word	0x0800e625
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	3303      	adds	r3, #3
 800e606:	089b      	lsrs	r3, r3, #2
 800e608:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e60a:	8afa      	ldrh	r2, [r7, #22]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	b29b      	uxth	r3, r3
 800e612:	429a      	cmp	r2, r3
 800e614:	d91c      	bls.n	800e650 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	f043 0220 	orr.w	r2, r3, #32
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	619a      	str	r2, [r3, #24]
        }
        break;
 800e622:	e015      	b.n	800e650 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	3303      	adds	r3, #3
 800e62a:	089b      	lsrs	r3, r3, #2
 800e62c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e62e:	8afa      	ldrh	r2, [r7, #22]
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d90a      	bls.n	800e654 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	619a      	str	r2, [r3, #24]
        }
        break;
 800e64a:	e003      	b.n	800e654 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e64c:	bf00      	nop
 800e64e:	e002      	b.n	800e656 <USB_HC_StartXfer+0x25e>
        break;
 800e650:	bf00      	nop
 800e652:	e000      	b.n	800e656 <USB_HC_StartXfer+0x25e>
        break;
 800e654:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	68d9      	ldr	r1, [r3, #12]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	785a      	ldrb	r2, [r3, #1]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	695b      	ldr	r3, [r3, #20]
 800e662:	b29b      	uxth	r3, r3
 800e664:	2000      	movs	r0, #0
 800e666:	9000      	str	r0, [sp, #0]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff fb81 	bl	800dd70 <USB_WritePacket>
  }

  return HAL_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3728      	adds	r7, #40	; 0x28
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	1ff80000 	.word	0x1ff80000

0800e67c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	b29b      	uxth	r3, r3
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b089      	sub	sp, #36	; 0x24
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e6ae:	78fb      	ldrb	r3, [r7, #3]
 800e6b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	015a      	lsls	r2, r3, #5
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	4413      	add	r3, r2
 800e6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	0c9b      	lsrs	r3, r3, #18
 800e6c6:	f003 0303 	and.w	r3, r3, #3
 800e6ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	015a      	lsls	r2, r3, #5
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	0fdb      	lsrs	r3, r3, #31
 800e6dc:	f003 0301 	and.w	r3, r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f003 0320 	and.w	r3, r3, #32
 800e6ea:	2b20      	cmp	r3, #32
 800e6ec:	d104      	bne.n	800e6f8 <USB_HC_Halt+0x5a>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	e0e8      	b.n	800e8ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <USB_HC_Halt+0x66>
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d173      	bne.n	800e7ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	0151      	lsls	r1, r2, #5
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	440a      	add	r2, r1
 800e71a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e71e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e722:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f003 0320 	and.w	r3, r3, #32
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f040 80cb 	bne.w	800e8c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d143      	bne.n	800e7c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	4413      	add	r3, r2
 800e746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	0151      	lsls	r1, r2, #5
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	440a      	add	r2, r1
 800e754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e75c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	015a      	lsls	r2, r3, #5
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	4413      	add	r3, r2
 800e766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	0151      	lsls	r1, r2, #5
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	440a      	add	r2, r1
 800e774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e77c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	015a      	lsls	r2, r3, #5
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	4413      	add	r3, r2
 800e786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	0151      	lsls	r1, r2, #5
 800e790:	69ba      	ldr	r2, [r7, #24]
 800e792:	440a      	add	r2, r1
 800e794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e79c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	61fb      	str	r3, [r7, #28]
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7aa:	d81d      	bhi.n	800e7e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7c2:	d0ec      	beq.n	800e79e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e7c4:	e080      	b.n	800e8c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	0151      	lsls	r1, r2, #5
 800e7d8:	69ba      	ldr	r2, [r7, #24]
 800e7da:	440a      	add	r2, r1
 800e7dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e7e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e7e6:	e06f      	b.n	800e8c8 <USB_HC_Halt+0x22a>
            break;
 800e7e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e7ea:	e06d      	b.n	800e8c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	015a      	lsls	r2, r3, #5
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	0151      	lsls	r1, r2, #5
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	440a      	add	r2, r1
 800e802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e80a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d143      	bne.n	800e8a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	015a      	lsls	r2, r3, #5
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	4413      	add	r3, r2
 800e824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	0151      	lsls	r1, r2, #5
 800e82e:	69ba      	ldr	r2, [r7, #24]
 800e830:	440a      	add	r2, r1
 800e832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e83a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	4413      	add	r3, r2
 800e844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	697a      	ldr	r2, [r7, #20]
 800e84c:	0151      	lsls	r1, r2, #5
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	440a      	add	r2, r1
 800e852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e85a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	4413      	add	r3, r2
 800e864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	0151      	lsls	r1, r2, #5
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	440a      	add	r2, r1
 800e872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e87a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	3301      	adds	r3, #1
 800e880:	61fb      	str	r3, [r7, #28]
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e888:	d81d      	bhi.n	800e8c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	015a      	lsls	r2, r3, #5
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	4413      	add	r3, r2
 800e892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e89c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8a0:	d0ec      	beq.n	800e87c <USB_HC_Halt+0x1de>
 800e8a2:	e011      	b.n	800e8c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	015a      	lsls	r2, r3, #5
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	0151      	lsls	r1, r2, #5
 800e8b6:	69ba      	ldr	r2, [r7, #24]
 800e8b8:	440a      	add	r2, r1
 800e8ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e8be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	e000      	b.n	800e8c8 <USB_HC_Halt+0x22a>
          break;
 800e8c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3724      	adds	r7, #36	; 0x24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
	...

0800e8d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b087      	sub	sp, #28
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e8e8:	78fb      	ldrb	r3, [r7, #3]
 800e8ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	04da      	lsls	r2, r3, #19
 800e8f4:	4b15      	ldr	r3, [pc, #84]	; (800e94c <USB_DoPing+0x74>)
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	0151      	lsls	r1, r2, #5
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	440a      	add	r2, r1
 800e900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e908:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	015a      	lsls	r2, r3, #5
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	4413      	add	r3, r2
 800e912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e920:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e928:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	015a      	lsls	r2, r3, #5
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	4413      	add	r3, r2
 800e932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e936:	461a      	mov	r2, r3
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	371c      	adds	r7, #28
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	1ff80000 	.word	0x1ff80000

0800e950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e95c:	2300      	movs	r3, #0
 800e95e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff f981 	bl	800dc68 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e966:	2110      	movs	r1, #16
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7ff f9b9 	bl	800dce0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff f9dc 	bl	800dd2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e974:	2300      	movs	r3, #0
 800e976:	613b      	str	r3, [r7, #16]
 800e978:	e01f      	b.n	800e9ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	4413      	add	r3, r2
 800e982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e998:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e9a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	015a      	lsls	r2, r3, #5
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	613b      	str	r3, [r7, #16]
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	2b0f      	cmp	r3, #15
 800e9be:	d9dc      	bls.n	800e97a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	613b      	str	r3, [r7, #16]
 800e9c4:	e034      	b.n	800ea30 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e9e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e9ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	015a      	lsls	r2, r3, #5
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	3301      	adds	r3, #1
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea0c:	d80c      	bhi.n	800ea28 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea24:	d0ec      	beq.n	800ea00 <USB_StopHost+0xb0>
 800ea26:	e000      	b.n	800ea2a <USB_StopHost+0xda>
        break;
 800ea28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	613b      	str	r3, [r7, #16]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	2b0f      	cmp	r3, #15
 800ea34:	d9c7      	bls.n	800e9c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7ff f8fa 	bl	800dc46 <USB_EnableGlobalInt>

  return HAL_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ea5c:	b590      	push	{r4, r7, lr}
 800ea5e:	b089      	sub	sp, #36	; 0x24
 800ea60:	af04      	add	r7, sp, #16
 800ea62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ea64:	2301      	movs	r3, #1
 800ea66:	2202      	movs	r2, #2
 800ea68:	2102      	movs	r1, #2
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fc66 	bl	800f33c <USBH_FindInterface>
 800ea70:	4603      	mov	r3, r0
 800ea72:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
 800ea76:	2bff      	cmp	r3, #255	; 0xff
 800ea78:	d002      	beq.n	800ea80 <USBH_CDC_InterfaceInit+0x24>
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d901      	bls.n	800ea84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ea80:	2302      	movs	r3, #2
 800ea82:	e13d      	b.n	800ed00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	4619      	mov	r1, r3
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fc3b 	bl	800f304 <USBH_SelectInterface>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e131      	b.n	800ed00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800eaa2:	2050      	movs	r0, #80	; 0x50
 800eaa4:	f002 fa00 	bl	8010ea8 <malloc>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800eabc:	2302      	movs	r3, #2
 800eabe:	e11f      	b.n	800ed00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800eac0:	2250      	movs	r2, #80	; 0x50
 800eac2:	2100      	movs	r1, #0
 800eac4:	68b8      	ldr	r0, [r7, #8]
 800eac6:	f002 fa0d 	bl	8010ee4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	211a      	movs	r1, #26
 800ead0:	fb01 f303 	mul.w	r3, r1, r3
 800ead4:	4413      	add	r3, r2
 800ead6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	b25b      	sxtb	r3, r3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	da15      	bge.n	800eb0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	211a      	movs	r1, #26
 800eae8:	fb01 f303 	mul.w	r3, r1, r3
 800eaec:	4413      	add	r3, r2
 800eaee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eaf2:	781a      	ldrb	r2, [r3, #0]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	211a      	movs	r1, #26
 800eafe:	fb01 f303 	mul.w	r3, r1, r3
 800eb02:	4413      	add	r3, r2
 800eb04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800eb08:	881a      	ldrh	r2, [r3, #0]
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	785b      	ldrb	r3, [r3, #1]
 800eb12:	4619      	mov	r1, r3
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f001 fe32 	bl	801077e <USBH_AllocPipe>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	7819      	ldrb	r1, [r3, #0]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	7858      	ldrb	r0, [r3, #1]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	8952      	ldrh	r2, [r2, #10]
 800eb3a:	9202      	str	r2, [sp, #8]
 800eb3c:	2203      	movs	r2, #3
 800eb3e:	9201      	str	r2, [sp, #4]
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	4623      	mov	r3, r4
 800eb44:	4602      	mov	r2, r0
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f001 fdea 	bl	8010720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2200      	movs	r2, #0
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f002 f8f9 	bl	8010d4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	210a      	movs	r1, #10
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fbeb 	bl	800f33c <USBH_FindInterface>
 800eb66:	4603      	mov	r3, r0
 800eb68:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
 800eb6c:	2bff      	cmp	r3, #255	; 0xff
 800eb6e:	d002      	beq.n	800eb76 <USBH_CDC_InterfaceInit+0x11a>
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d901      	bls.n	800eb7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800eb76:	2302      	movs	r3, #2
 800eb78:	e0c2      	b.n	800ed00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	211a      	movs	r1, #26
 800eb80:	fb01 f303 	mul.w	r3, r1, r3
 800eb84:	4413      	add	r3, r2
 800eb86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	b25b      	sxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	da16      	bge.n	800ebc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800eb92:	7bfb      	ldrb	r3, [r7, #15]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	211a      	movs	r1, #26
 800eb98:	fb01 f303 	mul.w	r3, r1, r3
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eba2:	781a      	ldrb	r2, [r3, #0]
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800eba8:	7bfb      	ldrb	r3, [r7, #15]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	211a      	movs	r1, #26
 800ebae:	fb01 f303 	mul.w	r3, r1, r3
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ebb8:	881a      	ldrh	r2, [r3, #0]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	835a      	strh	r2, [r3, #26]
 800ebbe:	e015      	b.n	800ebec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	211a      	movs	r1, #26
 800ebc6:	fb01 f303 	mul.w	r3, r1, r3
 800ebca:	4413      	add	r3, r2
 800ebcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ebd0:	781a      	ldrb	r2, [r3, #0]
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	211a      	movs	r1, #26
 800ebdc:	fb01 f303 	mul.w	r3, r1, r3
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ebe6:	881a      	ldrh	r2, [r3, #0]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	211a      	movs	r1, #26
 800ebf2:	fb01 f303 	mul.w	r3, r1, r3
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	b25b      	sxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	da16      	bge.n	800ec32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	211a      	movs	r1, #26
 800ec0a:	fb01 f303 	mul.w	r3, r1, r3
 800ec0e:	4413      	add	r3, r2
 800ec10:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ec14:	781a      	ldrb	r2, [r3, #0]
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ec1a:	7bfb      	ldrb	r3, [r7, #15]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	211a      	movs	r1, #26
 800ec20:	fb01 f303 	mul.w	r3, r1, r3
 800ec24:	4413      	add	r3, r2
 800ec26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ec2a:	881a      	ldrh	r2, [r3, #0]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	835a      	strh	r2, [r3, #26]
 800ec30:	e015      	b.n	800ec5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	211a      	movs	r1, #26
 800ec38:	fb01 f303 	mul.w	r3, r1, r3
 800ec3c:	4413      	add	r3, r2
 800ec3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ec42:	781a      	ldrb	r2, [r3, #0]
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	211a      	movs	r1, #26
 800ec4e:	fb01 f303 	mul.w	r3, r1, r3
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ec58:	881a      	ldrh	r2, [r3, #0]
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	7b9b      	ldrb	r3, [r3, #14]
 800ec62:	4619      	mov	r1, r3
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 fd8a 	bl	801077e <USBH_AllocPipe>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	7bdb      	ldrb	r3, [r3, #15]
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 fd80 	bl	801077e <USBH_AllocPipe>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	461a      	mov	r2, r3
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	7b59      	ldrb	r1, [r3, #13]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	7b98      	ldrb	r0, [r3, #14]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	8b12      	ldrh	r2, [r2, #24]
 800ec9e:	9202      	str	r2, [sp, #8]
 800eca0:	2202      	movs	r2, #2
 800eca2:	9201      	str	r2, [sp, #4]
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	4623      	mov	r3, r4
 800eca8:	4602      	mov	r2, r0
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f001 fd38 	bl	8010720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	7b19      	ldrb	r1, [r3, #12]
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	7bd8      	ldrb	r0, [r3, #15]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	8b52      	ldrh	r2, [r2, #26]
 800ecc8:	9202      	str	r2, [sp, #8]
 800ecca:	2202      	movs	r2, #2
 800eccc:	9201      	str	r2, [sp, #4]
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	4623      	mov	r3, r4
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f001 fd23 	bl	8010720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	7b5b      	ldrb	r3, [r3, #13]
 800ece6:	2200      	movs	r2, #0
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f002 f82e 	bl	8010d4c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	7b1b      	ldrb	r3, [r3, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f002 f827 	bl	8010d4c <USBH_LL_SetToggle>

  return USBH_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd90      	pop	{r4, r7, pc}

0800ed08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed16:	69db      	ldr	r3, [r3, #28]
 800ed18:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00e      	beq.n	800ed40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	4619      	mov	r1, r3
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f001 fd18 	bl	801075e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f001 fd43 	bl	80107c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	7b1b      	ldrb	r3, [r3, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00e      	beq.n	800ed66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	7b1b      	ldrb	r3, [r3, #12]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f001 fd05 	bl	801075e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	7b1b      	ldrb	r3, [r3, #12]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 fd30 	bl	80107c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	7b5b      	ldrb	r3, [r3, #13]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00e      	beq.n	800ed8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	7b5b      	ldrb	r3, [r3, #13]
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 fcf2 	bl	801075e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	7b5b      	ldrb	r3, [r3, #13]
 800ed7e:	4619      	mov	r1, r3
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f001 fd1d 	bl	80107c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed92:	69db      	ldr	r3, [r3, #28]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f002 f889 	bl	8010eb8 <free>
    phost->pActiveClass->pData = 0U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edac:	2200      	movs	r2, #0
 800edae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b084      	sub	sp, #16
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	3340      	adds	r3, #64	; 0x40
 800edd0:	4619      	mov	r1, r3
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 f8b1 	bl	800ef3a <GetLineCoding>
 800edd8:	4603      	mov	r3, r0
 800edda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800eddc:	7afb      	ldrb	r3, [r7, #11]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ede8:	2102      	movs	r1, #2
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800edee:	7afb      	ldrb	r3, [r7, #11]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ee00:	2301      	movs	r3, #1
 800ee02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ee04:	2300      	movs	r3, #0
 800ee06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee0e:	69db      	ldr	r3, [r3, #28]
 800ee10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ee18:	2b04      	cmp	r3, #4
 800ee1a:	d877      	bhi.n	800ef0c <USBH_CDC_Process+0x114>
 800ee1c:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <USBH_CDC_Process+0x2c>)
 800ee1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee22:	bf00      	nop
 800ee24:	0800ee39 	.word	0x0800ee39
 800ee28:	0800ee3f 	.word	0x0800ee3f
 800ee2c:	0800ee6f 	.word	0x0800ee6f
 800ee30:	0800eee3 	.word	0x0800eee3
 800ee34:	0800eef1 	.word	0x0800eef1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee3c:	e06d      	b.n	800ef1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee42:	4619      	mov	r1, r3
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f897 	bl	800ef78 <SetLineCoding>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ee4e:	7bbb      	ldrb	r3, [r7, #14]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d104      	bne.n	800ee5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ee5c:	e058      	b.n	800ef10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d055      	beq.n	800ef10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	2204      	movs	r2, #4
 800ee68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ee6c:	e050      	b.n	800ef10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3340      	adds	r3, #64	; 0x40
 800ee72:	4619      	mov	r1, r3
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f860 	bl	800ef3a <GetLineCoding>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d126      	bne.n	800eed2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee96:	791b      	ldrb	r3, [r3, #4]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d13b      	bne.n	800ef14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eea6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d133      	bne.n	800ef14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d12b      	bne.n	800ef14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eec4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d124      	bne.n	800ef14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f958 	bl	800f180 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eed0:	e020      	b.n	800ef14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d01d      	beq.n	800ef14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2204      	movs	r2, #4
 800eedc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800eee0:	e018      	b.n	800ef14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 f867 	bl	800efb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f8da 	bl	800f0a2 <CDC_ProcessReception>
      break;
 800eeee:	e014      	b.n	800ef1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eef0:	2100      	movs	r1, #0
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 ffe3 	bl	800febe <USBH_ClrFeature>
 800eef8:	4603      	mov	r3, r0
 800eefa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10a      	bne.n	800ef18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ef0a:	e005      	b.n	800ef18 <USBH_CDC_Process+0x120>

    default:
      break;
 800ef0c:	bf00      	nop
 800ef0e:	e004      	b.n	800ef1a <USBH_CDC_Process+0x122>
      break;
 800ef10:	bf00      	nop
 800ef12:	e002      	b.n	800ef1a <USBH_CDC_Process+0x122>
      break;
 800ef14:	bf00      	nop
 800ef16:	e000      	b.n	800ef1a <USBH_CDC_Process+0x122>
      break;
 800ef18:	bf00      	nop

  }

  return status;
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b082      	sub	sp, #8
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	22a1      	movs	r2, #161	; 0xa1
 800ef48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2221      	movs	r2, #33	; 0x21
 800ef4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2207      	movs	r2, #7
 800ef60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2207      	movs	r2, #7
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f001 f988 	bl	801027e <USBH_CtlReq>
 800ef6e:	4603      	mov	r3, r0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2221      	movs	r2, #33	; 0x21
 800ef86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2220      	movs	r2, #32
 800ef8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2207      	movs	r2, #7
 800ef9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2207      	movs	r2, #7
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f001 f969 	bl	801027e <USBH_CtlReq>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b086      	sub	sp, #24
 800efba:	af02      	add	r7, sp, #8
 800efbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efc4:	69db      	ldr	r3, [r3, #28]
 800efc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800efc8:	2300      	movs	r3, #0
 800efca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d002      	beq.n	800efdc <CDC_ProcessTransmission+0x26>
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	d023      	beq.n	800f022 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800efda:	e05e      	b.n	800f09a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	8b12      	ldrh	r2, [r2, #24]
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d90b      	bls.n	800f000 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	69d9      	ldr	r1, [r3, #28]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	8b1a      	ldrh	r2, [r3, #24]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	7b5b      	ldrb	r3, [r3, #13]
 800eff4:	2001      	movs	r0, #1
 800eff6:	9000      	str	r0, [sp, #0]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f001 fb4e 	bl	801069a <USBH_BulkSendData>
 800effe:	e00b      	b.n	800f018 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800f008:	b29a      	uxth	r2, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	7b5b      	ldrb	r3, [r3, #13]
 800f00e:	2001      	movs	r0, #1
 800f010:	9000      	str	r0, [sp, #0]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f001 fb41 	bl	801069a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2202      	movs	r2, #2
 800f01c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f020:	e03b      	b.n	800f09a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	7b5b      	ldrb	r3, [r3, #13]
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f001 fe65 	bl	8010cf8 <USBH_LL_GetURBState>
 800f02e:	4603      	mov	r3, r0
 800f030:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f032:	7afb      	ldrb	r3, [r7, #11]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d128      	bne.n	800f08a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	8b12      	ldrh	r2, [r2, #24]
 800f040:	4293      	cmp	r3, r2
 800f042:	d90e      	bls.n	800f062 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	8b12      	ldrh	r2, [r2, #24]
 800f04c:	1a9a      	subs	r2, r3, r2
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	69db      	ldr	r3, [r3, #28]
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	8b12      	ldrh	r2, [r2, #24]
 800f05a:	441a      	add	r2, r3
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	61da      	str	r2, [r3, #28]
 800f060:	e002      	b.n	800f068 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d004      	beq.n	800f07a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f078:	e00e      	b.n	800f098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f868 	bl	800f158 <USBH_CDC_TransmitCallback>
      break;
 800f088:	e006      	b.n	800f098 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f08a:	7afb      	ldrb	r3, [r7, #11]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d103      	bne.n	800f098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f098:	bf00      	nop
  }
}
 800f09a:	bf00      	nop
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b086      	sub	sp, #24
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d002      	beq.n	800f0c8 <CDC_ProcessReception+0x26>
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d00e      	beq.n	800f0e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f0c6:	e043      	b.n	800f150 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	6a19      	ldr	r1, [r3, #32]
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	8b5a      	ldrh	r2, [r3, #26]
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	7b1b      	ldrb	r3, [r3, #12]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 fb05 	bl	80106e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	2204      	movs	r2, #4
 800f0de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f0e2:	e035      	b.n	800f150 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	7b1b      	ldrb	r3, [r3, #12]
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f001 fe04 	bl	8010cf8 <USBH_LL_GetURBState>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f0f4:	7cfb      	ldrb	r3, [r7, #19]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d129      	bne.n	800f14e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	7b1b      	ldrb	r3, [r3, #12]
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f001 fd67 	bl	8010bd4 <USBH_LL_GetLastXferSize>
 800f106:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d016      	beq.n	800f140 <CDC_ProcessReception+0x9e>
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	8b5b      	ldrh	r3, [r3, #26]
 800f116:	461a      	mov	r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d910      	bls.n	800f140 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	1ad2      	subs	r2, r2, r3
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	6a1a      	ldr	r2, [r3, #32]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	441a      	add	r2, r3
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2203      	movs	r2, #3
 800f13a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f13e:	e006      	b.n	800f14e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 f80f 	bl	800f16c <USBH_CDC_ReceiveCallback>
      break;
 800f14e:	bf00      	nop
  }
}
 800f150:	bf00      	nop
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f160:	bf00      	nop
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d101      	bne.n	800f1ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f1a8:	2302      	movs	r3, #2
 800f1aa:	e029      	b.n	800f200 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	79fa      	ldrb	r2, [r7, #7]
 800f1b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f000 f81f 	bl	800f208 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f001 fc37 	bl	8010a6c <USBH_LL_Init>

  return USBH_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f210:	2300      	movs	r3, #0
 800f212:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f214:	2300      	movs	r3, #0
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	e009      	b.n	800f22e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	33e0      	adds	r3, #224	; 0xe0
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	4413      	add	r3, r2
 800f224:	2200      	movs	r2, #0
 800f226:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	3301      	adds	r3, #1
 800f22c:	60fb      	str	r3, [r7, #12]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b0e      	cmp	r3, #14
 800f232:	d9f2      	bls.n	800f21a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f234:	2300      	movs	r3, #0
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	e009      	b.n	800f24e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f244:	2200      	movs	r2, #0
 800f246:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3301      	adds	r3, #1
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f254:	d3f1      	bcc.n	800f23a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2201      	movs	r2, #1
 800f266:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2240      	movs	r2, #64	; 0x40
 800f27a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3714      	adds	r7, #20
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d016      	beq.n	800f2f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10e      	bne.n	800f2ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f2d4:	1c59      	adds	r1, r3, #1
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	33de      	adds	r3, #222	; 0xde
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	73fb      	strb	r3, [r7, #15]
 800f2ea:	e004      	b.n	800f2f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	73fb      	strb	r3, [r7, #15]
 800f2f0:	e001      	b.n	800f2f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f2f2:	2302      	movs	r3, #2
 800f2f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3714      	adds	r7, #20
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f31a:	78fa      	ldrb	r2, [r7, #3]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d204      	bcs.n	800f32a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	78fa      	ldrb	r2, [r7, #3]
 800f324:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f328:	e001      	b.n	800f32e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f32a:	2302      	movs	r3, #2
 800f32c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	4608      	mov	r0, r1
 800f346:	4611      	mov	r1, r2
 800f348:	461a      	mov	r2, r3
 800f34a:	4603      	mov	r3, r0
 800f34c:	70fb      	strb	r3, [r7, #3]
 800f34e:	460b      	mov	r3, r1
 800f350:	70bb      	strb	r3, [r7, #2]
 800f352:	4613      	mov	r3, r2
 800f354:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f364:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f366:	e025      	b.n	800f3b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f368:	7dfb      	ldrb	r3, [r7, #23]
 800f36a:	221a      	movs	r2, #26
 800f36c:	fb02 f303 	mul.w	r3, r2, r3
 800f370:	3308      	adds	r3, #8
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4413      	add	r3, r2
 800f376:	3302      	adds	r3, #2
 800f378:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	795b      	ldrb	r3, [r3, #5]
 800f37e:	78fa      	ldrb	r2, [r7, #3]
 800f380:	429a      	cmp	r2, r3
 800f382:	d002      	beq.n	800f38a <USBH_FindInterface+0x4e>
 800f384:	78fb      	ldrb	r3, [r7, #3]
 800f386:	2bff      	cmp	r3, #255	; 0xff
 800f388:	d111      	bne.n	800f3ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f38e:	78ba      	ldrb	r2, [r7, #2]
 800f390:	429a      	cmp	r2, r3
 800f392:	d002      	beq.n	800f39a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f394:	78bb      	ldrb	r3, [r7, #2]
 800f396:	2bff      	cmp	r3, #255	; 0xff
 800f398:	d109      	bne.n	800f3ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f39e:	787a      	ldrb	r2, [r7, #1]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d002      	beq.n	800f3aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f3a4:	787b      	ldrb	r3, [r7, #1]
 800f3a6:	2bff      	cmp	r3, #255	; 0xff
 800f3a8:	d101      	bne.n	800f3ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f3aa:	7dfb      	ldrb	r3, [r7, #23]
 800f3ac:	e006      	b.n	800f3bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f3b4:	7dfb      	ldrb	r3, [r7, #23]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d9d6      	bls.n	800f368 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f3ba:	23ff      	movs	r3, #255	; 0xff
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	371c      	adds	r7, #28
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 fb87 	bl	8010ae4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 fca0 	bl	8010d1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b088      	sub	sp, #32
 800f3ec:	af04      	add	r7, sp, #16
 800f3ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b01      	cmp	r3, #1
 800f402:	d102      	bne.n	800f40a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2203      	movs	r2, #3
 800f408:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	2b0b      	cmp	r3, #11
 800f412:	f200 81b3 	bhi.w	800f77c <USBH_Process+0x394>
 800f416:	a201      	add	r2, pc, #4	; (adr r2, 800f41c <USBH_Process+0x34>)
 800f418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41c:	0800f44d 	.word	0x0800f44d
 800f420:	0800f47f 	.word	0x0800f47f
 800f424:	0800f4e7 	.word	0x0800f4e7
 800f428:	0800f717 	.word	0x0800f717
 800f42c:	0800f77d 	.word	0x0800f77d
 800f430:	0800f58b 	.word	0x0800f58b
 800f434:	0800f6bd 	.word	0x0800f6bd
 800f438:	0800f5c1 	.word	0x0800f5c1
 800f43c:	0800f5e1 	.word	0x0800f5e1
 800f440:	0800f601 	.word	0x0800f601
 800f444:	0800f62f 	.word	0x0800f62f
 800f448:	0800f6ff 	.word	0x0800f6ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 8193 	beq.w	800f780 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f460:	20c8      	movs	r0, #200	; 0xc8
 800f462:	f001 fca3 	bl	8010dac <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f001 fb99 	bl	8010b9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f47c:	e180      	b.n	800f780 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f484:	2b01      	cmp	r3, #1
 800f486:	d107      	bne.n	800f498 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2202      	movs	r2, #2
 800f494:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f496:	e182      	b.n	800f79e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f49e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f4a2:	d914      	bls.n	800f4ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	b2da      	uxtb	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d903      	bls.n	800f4c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	220d      	movs	r2, #13
 800f4c2:	701a      	strb	r2, [r3, #0]
      break;
 800f4c4:	e16b      	b.n	800f79e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	701a      	strb	r2, [r3, #0]
      break;
 800f4cc:	e167      	b.n	800f79e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f4d4:	f103 020a 	add.w	r2, r3, #10
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f4de:	200a      	movs	r0, #10
 800f4e0:	f001 fc64 	bl	8010dac <USBH_Delay>
      break;
 800f4e4:	e15b      	b.n	800f79e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d005      	beq.n	800f4fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4f6:	2104      	movs	r1, #4
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f4fc:	2064      	movs	r0, #100	; 0x64
 800f4fe:	f001 fc55 	bl	8010dac <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f001 fb24 	bl	8010b50 <USBH_LL_GetSpeed>
 800f508:	4603      	mov	r3, r0
 800f50a:	461a      	mov	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2205      	movs	r2, #5
 800f516:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f518:	2100      	movs	r1, #0
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 f92f 	bl	801077e <USBH_AllocPipe>
 800f520:	4603      	mov	r3, r0
 800f522:	461a      	mov	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f528:	2180      	movs	r1, #128	; 0x80
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f001 f927 	bl	801077e <USBH_AllocPipe>
 800f530:	4603      	mov	r3, r0
 800f532:	461a      	mov	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7919      	ldrb	r1, [r3, #4]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f54c:	b292      	uxth	r2, r2
 800f54e:	9202      	str	r2, [sp, #8]
 800f550:	2200      	movs	r2, #0
 800f552:	9201      	str	r2, [sp, #4]
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	4603      	mov	r3, r0
 800f558:	2280      	movs	r2, #128	; 0x80
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f001 f8e0 	bl	8010720 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	7959      	ldrb	r1, [r3, #5]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f574:	b292      	uxth	r2, r2
 800f576:	9202      	str	r2, [sp, #8]
 800f578:	2200      	movs	r2, #0
 800f57a:	9201      	str	r2, [sp, #4]
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	4603      	mov	r3, r0
 800f580:	2200      	movs	r2, #0
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f001 f8cc 	bl	8010720 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f588:	e109      	b.n	800f79e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f90c 	bl	800f7a8 <USBH_HandleEnum>
 800f590:	4603      	mov	r3, r0
 800f592:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f594:	7bbb      	ldrb	r3, [r7, #14]
 800f596:	b2db      	uxtb	r3, r3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f040 80f3 	bne.w	800f784 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d103      	bne.n	800f5b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f5b6:	e0e5      	b.n	800f784 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2207      	movs	r2, #7
 800f5bc:	701a      	strb	r2, [r3, #0]
      break;
 800f5be:	e0e1      	b.n	800f784 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 80de 	beq.w	800f788 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5d2:	2101      	movs	r1, #1
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2208      	movs	r2, #8
 800f5dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f5de:	e0d3      	b.n	800f788 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fc20 	bl	800fe30 <USBH_SetCfg>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f040 80ca 	bne.w	800f78c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2209      	movs	r2, #9
 800f5fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f5fe:	e0c5      	b.n	800f78c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f606:	f003 0320 	and.w	r3, r3, #32
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f60e:	2101      	movs	r1, #1
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fc30 	bl	800fe76 <USBH_SetFeature>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f040 80b9 	bne.w	800f790 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	220a      	movs	r2, #10
 800f622:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f624:	e0b4      	b.n	800f790 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	220a      	movs	r2, #10
 800f62a:	701a      	strb	r2, [r3, #0]
      break;
 800f62c:	e0b0      	b.n	800f790 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 80ad 	beq.w	800f794 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f642:	2300      	movs	r3, #0
 800f644:	73fb      	strb	r3, [r7, #15]
 800f646:	e016      	b.n	800f676 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f648:	7bfa      	ldrb	r2, [r7, #15]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	32de      	adds	r2, #222	; 0xde
 800f64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f652:	791a      	ldrb	r2, [r3, #4]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d108      	bne.n	800f670 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f65e:	7bfa      	ldrb	r2, [r7, #15]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	32de      	adds	r2, #222	; 0xde
 800f664:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f66e:	e005      	b.n	800f67c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	3301      	adds	r3, #1
 800f674:	73fb      	strb	r3, [r7, #15]
 800f676:	7bfb      	ldrb	r3, [r7, #15]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d0e5      	beq.n	800f648 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f682:	2b00      	cmp	r3, #0
 800f684:	d016      	beq.n	800f6b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f68c:	689b      	ldr	r3, [r3, #8]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	4798      	blx	r3
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d109      	bne.n	800f6ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2206      	movs	r2, #6
 800f69c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f6a4:	2103      	movs	r1, #3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f6aa:	e073      	b.n	800f794 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	220d      	movs	r2, #13
 800f6b0:	701a      	strb	r2, [r3, #0]
      break;
 800f6b2:	e06f      	b.n	800f794 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	220d      	movs	r2, #13
 800f6b8:	701a      	strb	r2, [r3, #0]
      break;
 800f6ba:	e06b      	b.n	800f794 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d017      	beq.n	800f6f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6cc:	691b      	ldr	r3, [r3, #16]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	4798      	blx	r3
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f6d6:	7bbb      	ldrb	r3, [r7, #14]
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d103      	bne.n	800f6e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	220b      	movs	r2, #11
 800f6e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f6e4:	e058      	b.n	800f798 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f6e6:	7bbb      	ldrb	r3, [r7, #14]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d154      	bne.n	800f798 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	220d      	movs	r2, #13
 800f6f2:	701a      	strb	r2, [r3, #0]
      break;
 800f6f4:	e050      	b.n	800f798 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	220d      	movs	r2, #13
 800f6fa:	701a      	strb	r2, [r3, #0]
      break;
 800f6fc:	e04c      	b.n	800f798 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f704:	2b00      	cmp	r3, #0
 800f706:	d049      	beq.n	800f79c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	4798      	blx	r3
      }
      break;
 800f714:	e042      	b.n	800f79c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7ff fd72 	bl	800f208 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d009      	beq.n	800f742 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d005      	beq.n	800f758 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f752:	2105      	movs	r1, #5
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b01      	cmp	r3, #1
 800f762:	d107      	bne.n	800f774 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff fe2b 	bl	800f3c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f772:	e014      	b.n	800f79e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f001 f9b5 	bl	8010ae4 <USBH_LL_Start>
      break;
 800f77a:	e010      	b.n	800f79e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f77c:	bf00      	nop
 800f77e:	e00e      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f780:	bf00      	nop
 800f782:	e00c      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f784:	bf00      	nop
 800f786:	e00a      	b.n	800f79e <USBH_Process+0x3b6>
    break;
 800f788:	bf00      	nop
 800f78a:	e008      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f78c:	bf00      	nop
 800f78e:	e006      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f790:	bf00      	nop
 800f792:	e004      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f794:	bf00      	nop
 800f796:	e002      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f798:	bf00      	nop
 800f79a:	e000      	b.n	800f79e <USBH_Process+0x3b6>
      break;
 800f79c:	bf00      	nop
  }
  return USBH_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b088      	sub	sp, #32
 800f7ac:	af04      	add	r7, sp, #16
 800f7ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	785b      	ldrb	r3, [r3, #1]
 800f7bc:	2b07      	cmp	r3, #7
 800f7be:	f200 81c1 	bhi.w	800fb44 <USBH_HandleEnum+0x39c>
 800f7c2:	a201      	add	r2, pc, #4	; (adr r2, 800f7c8 <USBH_HandleEnum+0x20>)
 800f7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f8a7 	.word	0x0800f8a7
 800f7d0:	0800f911 	.word	0x0800f911
 800f7d4:	0800f99f 	.word	0x0800f99f
 800f7d8:	0800fa09 	.word	0x0800fa09
 800f7dc:	0800fa79 	.word	0x0800fa79
 800f7e0:	0800fabf 	.word	0x0800fabf
 800f7e4:	0800fb05 	.word	0x0800fb05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f7e8:	2108      	movs	r1, #8
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa50 	bl	800fc90 <USBH_Get_DevDesc>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f7f4:	7bbb      	ldrb	r3, [r7, #14]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d130      	bne.n	800f85c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7919      	ldrb	r1, [r3, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f81e:	b292      	uxth	r2, r2
 800f820:	9202      	str	r2, [sp, #8]
 800f822:	2200      	movs	r2, #0
 800f824:	9201      	str	r2, [sp, #4]
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	4603      	mov	r3, r0
 800f82a:	2280      	movs	r2, #128	; 0x80
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 ff77 	bl	8010720 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	7959      	ldrb	r1, [r3, #5]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f846:	b292      	uxth	r2, r2
 800f848:	9202      	str	r2, [sp, #8]
 800f84a:	2200      	movs	r2, #0
 800f84c:	9201      	str	r2, [sp, #4]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	4603      	mov	r3, r0
 800f852:	2200      	movs	r2, #0
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 ff63 	bl	8010720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f85a:	e175      	b.n	800fb48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f85c:	7bbb      	ldrb	r3, [r7, #14]
 800f85e:	2b03      	cmp	r3, #3
 800f860:	f040 8172 	bne.w	800fb48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f86a:	3301      	adds	r3, #1
 800f86c:	b2da      	uxtb	r2, r3
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f87a:	2b03      	cmp	r3, #3
 800f87c:	d903      	bls.n	800f886 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	220d      	movs	r2, #13
 800f882:	701a      	strb	r2, [r3, #0]
      break;
 800f884:	e160      	b.n	800fb48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	795b      	ldrb	r3, [r3, #5]
 800f88a:	4619      	mov	r1, r3
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 ff97 	bl	80107c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	791b      	ldrb	r3, [r3, #4]
 800f896:	4619      	mov	r1, r3
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 ff91 	bl	80107c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	701a      	strb	r2, [r3, #0]
      break;
 800f8a4:	e150      	b.n	800fb48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f8a6:	2112      	movs	r1, #18
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f9f1 	bl	800fc90 <USBH_Get_DevDesc>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f8b2:	7bbb      	ldrb	r3, [r7, #14]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d103      	bne.n	800f8c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f8be:	e145      	b.n	800fb4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	f040 8142 	bne.w	800fb4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	d903      	bls.n	800f8ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	220d      	movs	r2, #13
 800f8e6:	701a      	strb	r2, [r3, #0]
      break;
 800f8e8:	e130      	b.n	800fb4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	795b      	ldrb	r3, [r3, #5]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 ff65 	bl	80107c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	791b      	ldrb	r3, [r3, #4]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 ff5f 	bl	80107c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
      break;
 800f90e:	e11d      	b.n	800fb4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f910:	2101      	movs	r1, #1
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fa68 	bl	800fde8 <USBH_SetAddress>
 800f918:	4603      	mov	r3, r0
 800f91a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f91c:	7bbb      	ldrb	r3, [r7, #14]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d132      	bne.n	800f988 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f922:	2002      	movs	r0, #2
 800f924:	f001 fa42 	bl	8010dac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2203      	movs	r2, #3
 800f934:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	7919      	ldrb	r1, [r3, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f94a:	b292      	uxth	r2, r2
 800f94c:	9202      	str	r2, [sp, #8]
 800f94e:	2200      	movs	r2, #0
 800f950:	9201      	str	r2, [sp, #4]
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	4603      	mov	r3, r0
 800f956:	2280      	movs	r2, #128	; 0x80
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 fee1 	bl	8010720 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	7959      	ldrb	r1, [r3, #5]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f972:	b292      	uxth	r2, r2
 800f974:	9202      	str	r2, [sp, #8]
 800f976:	2200      	movs	r2, #0
 800f978:	9201      	str	r2, [sp, #4]
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	4603      	mov	r3, r0
 800f97e:	2200      	movs	r2, #0
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 fecd 	bl	8010720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f986:	e0e3      	b.n	800fb50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f988:	7bbb      	ldrb	r3, [r7, #14]
 800f98a:	2b03      	cmp	r3, #3
 800f98c:	f040 80e0 	bne.w	800fb50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	220d      	movs	r2, #13
 800f994:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	705a      	strb	r2, [r3, #1]
      break;
 800f99c:	e0d8      	b.n	800fb50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f99e:	2109      	movs	r1, #9
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f99d 	bl	800fce0 <USBH_Get_CfgDesc>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d103      	bne.n	800f9b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2204      	movs	r2, #4
 800f9b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f9b6:	e0cd      	b.n	800fb54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b03      	cmp	r3, #3
 800f9bc:	f040 80ca 	bne.w	800fb54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	b2da      	uxtb	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f9d6:	2b03      	cmp	r3, #3
 800f9d8:	d903      	bls.n	800f9e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	220d      	movs	r2, #13
 800f9de:	701a      	strb	r2, [r3, #0]
      break;
 800f9e0:	e0b8      	b.n	800fb54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	795b      	ldrb	r3, [r3, #5]
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 fee9 	bl	80107c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	791b      	ldrb	r3, [r3, #4]
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fee3 	bl	80107c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	701a      	strb	r2, [r3, #0]
      break;
 800fa06:	e0a5      	b.n	800fb54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f965 	bl	800fce0 <USBH_Get_CfgDesc>
 800fa16:	4603      	mov	r3, r0
 800fa18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fa1a:	7bbb      	ldrb	r3, [r7, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d103      	bne.n	800fa28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2205      	movs	r2, #5
 800fa24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fa26:	e097      	b.n	800fb58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	f040 8094 	bne.w	800fb58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fa36:	3301      	adds	r3, #1
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fa46:	2b03      	cmp	r3, #3
 800fa48:	d903      	bls.n	800fa52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	220d      	movs	r2, #13
 800fa4e:	701a      	strb	r2, [r3, #0]
      break;
 800fa50:	e082      	b.n	800fb58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	795b      	ldrb	r3, [r3, #5]
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 feb1 	bl	80107c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	791b      	ldrb	r3, [r3, #4]
 800fa62:	4619      	mov	r1, r3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 feab 	bl	80107c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
      break;
 800fa76:	e06f      	b.n	800fb58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d019      	beq.n	800fab6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fa8e:	23ff      	movs	r3, #255	; 0xff
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f949 	bl	800fd28 <USBH_Get_StringDesc>
 800fa96:	4603      	mov	r3, r0
 800fa98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fa9a:	7bbb      	ldrb	r3, [r7, #14]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d103      	bne.n	800faa8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2206      	movs	r2, #6
 800faa4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800faa6:	e059      	b.n	800fb5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d156      	bne.n	800fb5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2206      	movs	r2, #6
 800fab2:	705a      	strb	r2, [r3, #1]
      break;
 800fab4:	e052      	b.n	800fb5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2206      	movs	r2, #6
 800faba:	705a      	strb	r2, [r3, #1]
      break;
 800fabc:	e04e      	b.n	800fb5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d019      	beq.n	800fafc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fad4:	23ff      	movs	r3, #255	; 0xff
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f926 	bl	800fd28 <USBH_Get_StringDesc>
 800fadc:	4603      	mov	r3, r0
 800fade:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d103      	bne.n	800faee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2207      	movs	r2, #7
 800faea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800faec:	e038      	b.n	800fb60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800faee:	7bbb      	ldrb	r3, [r7, #14]
 800faf0:	2b03      	cmp	r3, #3
 800faf2:	d135      	bne.n	800fb60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2207      	movs	r2, #7
 800faf8:	705a      	strb	r2, [r3, #1]
      break;
 800fafa:	e031      	b.n	800fb60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2207      	movs	r2, #7
 800fb00:	705a      	strb	r2, [r3, #1]
      break;
 800fb02:	e02d      	b.n	800fb60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d017      	beq.n	800fb3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fb1a:	23ff      	movs	r3, #255	; 0xff
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f903 	bl	800fd28 <USBH_Get_StringDesc>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fb26:	7bbb      	ldrb	r3, [r7, #14]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d102      	bne.n	800fb32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fb30:	e018      	b.n	800fb64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb32:	7bbb      	ldrb	r3, [r7, #14]
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d115      	bne.n	800fb64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb3c:	e012      	b.n	800fb64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
      break;
 800fb42:	e00f      	b.n	800fb64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800fb44:	bf00      	nop
 800fb46:	e00e      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb48:	bf00      	nop
 800fb4a:	e00c      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb4c:	bf00      	nop
 800fb4e:	e00a      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb50:	bf00      	nop
 800fb52:	e008      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb54:	bf00      	nop
 800fb56:	e006      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb58:	bf00      	nop
 800fb5a:	e004      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb5c:	bf00      	nop
 800fb5e:	e002      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb60:	bf00      	nop
 800fb62:	e000      	b.n	800fb66 <USBH_HandleEnum+0x3be>
      break;
 800fb64:	bf00      	nop
  }
  return Status;
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800fb82:	bf00      	nop
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 f804 	bl	800fbb2 <USBH_HandleSof>
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b082      	sub	sp, #8
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	2b0b      	cmp	r3, #11
 800fbc2:	d10a      	bne.n	800fbda <USBH_HandleSof+0x28>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d005      	beq.n	800fbda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	4798      	blx	r3
  }
}
 800fbda:	bf00      	nop
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800fbf2:	bf00      	nop
}
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fc0e:	bf00      	nop
}
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2201      	movs	r2, #1
 800fc26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 ff56 	bl	8010b1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	791b      	ldrb	r3, [r3, #4]
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fda3 	bl	80107c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	795b      	ldrb	r3, [r3, #5]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fd9d 	bl	80107c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af02      	add	r7, sp, #8
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fca2:	78fb      	ldrb	r3, [r7, #3]
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcae:	2100      	movs	r1, #0
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 f864 	bl	800fd7e <USBH_GetDescriptor>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10a      	bne.n	800fcd6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fccc:	78fa      	ldrb	r2, [r7, #3]
 800fcce:	b292      	uxth	r2, r2
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	f000 f918 	bl	800ff06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af02      	add	r7, sp, #8
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	331c      	adds	r3, #28
 800fcf0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fcf2:	887b      	ldrh	r3, [r7, #2]
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f83d 	bl	800fd7e <USBH_GetDescriptor>
 800fd04:	4603      	mov	r3, r0
 800fd06:	72fb      	strb	r3, [r7, #11]
 800fd08:	7afb      	ldrb	r3, [r7, #11]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d107      	bne.n	800fd1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800fd14:	887a      	ldrh	r2, [r7, #2]
 800fd16:	68f9      	ldr	r1, [r7, #12]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f000 f964 	bl	800ffe6 <USBH_ParseCfgDesc>
  }

  return status;
 800fd1e:	7afb      	ldrb	r3, [r7, #11]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	607a      	str	r2, [r7, #4]
 800fd32:	461a      	mov	r2, r3
 800fd34:	460b      	mov	r3, r1
 800fd36:	72fb      	strb	r3, [r7, #11]
 800fd38:	4613      	mov	r3, r2
 800fd3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800fd3c:	7afb      	ldrb	r3, [r7, #11]
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fd44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fd4c:	893b      	ldrh	r3, [r7, #8]
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	460b      	mov	r3, r1
 800fd52:	2100      	movs	r1, #0
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f000 f812 	bl	800fd7e <USBH_GetDescriptor>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	75fb      	strb	r3, [r7, #23]
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d107      	bne.n	800fd74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fd6a:	893a      	ldrh	r2, [r7, #8]
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 fa37 	bl	80101e2 <USBH_ParseStringDesc>
  }

  return status;
 800fd74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b084      	sub	sp, #16
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	60f8      	str	r0, [r7, #12]
 800fd86:	607b      	str	r3, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	72fb      	strb	r3, [r7, #11]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	789b      	ldrb	r3, [r3, #2]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d11c      	bne.n	800fdd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fd98:	7afb      	ldrb	r3, [r7, #11]
 800fd9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2206      	movs	r2, #6
 800fda8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	893a      	ldrh	r2, [r7, #8]
 800fdae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fdb0:	893b      	ldrh	r3, [r7, #8]
 800fdb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fdb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdba:	d104      	bne.n	800fdc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f240 4209 	movw	r2, #1033	; 0x409
 800fdc2:	829a      	strh	r2, [r3, #20]
 800fdc4:	e002      	b.n	800fdcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8b3a      	ldrh	r2, [r7, #24]
 800fdd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fdd2:	8b3b      	ldrh	r3, [r7, #24]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	6879      	ldr	r1, [r7, #4]
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 fa50 	bl	801027e <USBH_CtlReq>
 800fdde:	4603      	mov	r3, r0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	789b      	ldrb	r3, [r3, #2]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d10f      	bne.n	800fe1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2205      	movs	r2, #5
 800fe06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fe08:	78fb      	ldrb	r3, [r7, #3]
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2100      	movs	r1, #0
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fa2c 	bl	801027e <USBH_CtlReq>
 800fe26:	4603      	mov	r3, r0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	789b      	ldrb	r3, [r3, #2]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d10e      	bne.n	800fe62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2209      	movs	r2, #9
 800fe4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	887a      	ldrh	r2, [r7, #2]
 800fe54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fe62:	2200      	movs	r2, #0
 800fe64:	2100      	movs	r1, #0
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fa09 	bl	801027e <USBH_CtlReq>
 800fe6c:	4603      	mov	r3, r0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b082      	sub	sp, #8
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	460b      	mov	r3, r1
 800fe80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	789b      	ldrb	r3, [r3, #2]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d10f      	bne.n	800feaa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2203      	movs	r2, #3
 800fe94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fe96:	78fb      	ldrb	r3, [r7, #3]
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800feaa:	2200      	movs	r2, #0
 800feac:	2100      	movs	r1, #0
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f9e5 	bl	801027e <USBH_CtlReq>
 800feb4:	4603      	mov	r3, r0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	460b      	mov	r3, r1
 800fec8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	789b      	ldrb	r3, [r3, #2]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d10f      	bne.n	800fef2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2202      	movs	r2, #2
 800fed6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800fef2:	2200      	movs	r2, #0
 800fef4:	2100      	movs	r1, #0
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 f9c1 	bl	801027e <USBH_CtlReq>
 800fefc:	4603      	mov	r3, r0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ff06:	b480      	push	{r7}
 800ff08:	b085      	sub	sp, #20
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	60f8      	str	r0, [r7, #12]
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	4613      	mov	r3, r2
 800ff12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	785a      	ldrb	r2, [r3, #1]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	3302      	adds	r3, #2
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	3303      	adds	r3, #3
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	021b      	lsls	r3, r3, #8
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	791a      	ldrb	r2, [r3, #4]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	795a      	ldrb	r2, [r3, #5]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	799a      	ldrb	r2, [r3, #6]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	79da      	ldrb	r2, [r3, #7]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ff60:	88fb      	ldrh	r3, [r7, #6]
 800ff62:	2b08      	cmp	r3, #8
 800ff64:	d939      	bls.n	800ffda <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	3308      	adds	r3, #8
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	3309      	adds	r3, #9
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	021b      	lsls	r3, r3, #8
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	330a      	adds	r3, #10
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	330b      	adds	r3, #11
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	021b      	lsls	r3, r3, #8
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	4313      	orrs	r3, r2
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	330c      	adds	r3, #12
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	330d      	adds	r3, #13
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	021b      	lsls	r3, r3, #8
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	7b9a      	ldrb	r2, [r3, #14]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	7bda      	ldrb	r2, [r3, #15]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	7c1a      	ldrb	r2, [r3, #16]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	7c5a      	ldrb	r2, [r3, #17]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	745a      	strb	r2, [r3, #17]
  }
}
 800ffda:	bf00      	nop
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b08a      	sub	sp, #40	; 0x28
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	60b9      	str	r1, [r7, #8]
 800fff0:	4613      	mov	r3, r2
 800fff2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fff8:	2300      	movs	r3, #0
 800fffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fffe:	2300      	movs	r3, #0
 8010000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	781a      	ldrb	r2, [r3, #0]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	785a      	ldrb	r2, [r3, #1]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	3302      	adds	r3, #2
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	b29a      	uxth	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	3303      	adds	r3, #3
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	b29b      	uxth	r3, r3
 8010028:	021b      	lsls	r3, r3, #8
 801002a:	b29b      	uxth	r3, r3
 801002c:	4313      	orrs	r3, r2
 801002e:	b29a      	uxth	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	791a      	ldrb	r2, [r3, #4]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	795a      	ldrb	r2, [r3, #5]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	799a      	ldrb	r2, [r3, #6]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	79da      	ldrb	r2, [r3, #7]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	7a1a      	ldrb	r2, [r3, #8]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801005c:	88fb      	ldrh	r3, [r7, #6]
 801005e:	2b09      	cmp	r3, #9
 8010060:	d95f      	bls.n	8010122 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8010062:	2309      	movs	r3, #9
 8010064:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8010066:	2300      	movs	r3, #0
 8010068:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801006a:	e051      	b.n	8010110 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801006c:	f107 0316 	add.w	r3, r7, #22
 8010070:	4619      	mov	r1, r3
 8010072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010074:	f000 f8e8 	bl	8010248 <USBH_GetNextDesc>
 8010078:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	785b      	ldrb	r3, [r3, #1]
 801007e:	2b04      	cmp	r3, #4
 8010080:	d146      	bne.n	8010110 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8010082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010086:	221a      	movs	r2, #26
 8010088:	fb02 f303 	mul.w	r3, r2, r3
 801008c:	3308      	adds	r3, #8
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	4413      	add	r3, r2
 8010092:	3302      	adds	r3, #2
 8010094:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010098:	69f8      	ldr	r0, [r7, #28]
 801009a:	f000 f846 	bl	801012a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801009e:	2300      	movs	r3, #0
 80100a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80100a8:	e022      	b.n	80100f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80100aa:	f107 0316 	add.w	r3, r7, #22
 80100ae:	4619      	mov	r1, r3
 80100b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100b2:	f000 f8c9 	bl	8010248 <USBH_GetNextDesc>
 80100b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	785b      	ldrb	r3, [r3, #1]
 80100bc:	2b05      	cmp	r3, #5
 80100be:	d117      	bne.n	80100f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80100c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80100c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80100c8:	3201      	adds	r2, #1
 80100ca:	00d2      	lsls	r2, r2, #3
 80100cc:	211a      	movs	r1, #26
 80100ce:	fb01 f303 	mul.w	r3, r1, r3
 80100d2:	4413      	add	r3, r2
 80100d4:	3308      	adds	r3, #8
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	4413      	add	r3, r2
 80100da:	3304      	adds	r3, #4
 80100dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80100de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100e0:	69b8      	ldr	r0, [r7, #24]
 80100e2:	f000 f851 	bl	8010188 <USBH_ParseEPDesc>
            ep_ix++;
 80100e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80100ea:	3301      	adds	r3, #1
 80100ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	791b      	ldrb	r3, [r3, #4]
 80100f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d204      	bcs.n	8010106 <USBH_ParseCfgDesc+0x120>
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	885a      	ldrh	r2, [r3, #2]
 8010100:	8afb      	ldrh	r3, [r7, #22]
 8010102:	429a      	cmp	r2, r3
 8010104:	d8d1      	bhi.n	80100aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8010106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801010a:	3301      	adds	r3, #1
 801010c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010114:	2b01      	cmp	r3, #1
 8010116:	d804      	bhi.n	8010122 <USBH_ParseCfgDesc+0x13c>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	885a      	ldrh	r2, [r3, #2]
 801011c:	8afb      	ldrh	r3, [r7, #22]
 801011e:	429a      	cmp	r2, r3
 8010120:	d8a4      	bhi.n	801006c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8010122:	bf00      	nop
 8010124:	3728      	adds	r7, #40	; 0x28
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801012a:	b480      	push	{r7}
 801012c:	b083      	sub	sp, #12
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	781a      	ldrb	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	785a      	ldrb	r2, [r3, #1]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	789a      	ldrb	r2, [r3, #2]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	78da      	ldrb	r2, [r3, #3]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	791a      	ldrb	r2, [r3, #4]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	795a      	ldrb	r2, [r3, #5]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	799a      	ldrb	r2, [r3, #6]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	79da      	ldrb	r2, [r3, #7]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	7a1a      	ldrb	r2, [r3, #8]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	721a      	strb	r2, [r3, #8]
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	781a      	ldrb	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	785a      	ldrb	r2, [r3, #1]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	789a      	ldrb	r2, [r3, #2]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	78da      	ldrb	r2, [r3, #3]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	3304      	adds	r3, #4
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	3305      	adds	r3, #5
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	4313      	orrs	r3, r2
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	799a      	ldrb	r2, [r3, #6]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	719a      	strb	r2, [r3, #6]
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80101e2:	b480      	push	{r7}
 80101e4:	b087      	sub	sp, #28
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	60f8      	str	r0, [r7, #12]
 80101ea:	60b9      	str	r1, [r7, #8]
 80101ec:	4613      	mov	r3, r2
 80101ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	3301      	adds	r3, #1
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d120      	bne.n	801023c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	1e9a      	subs	r2, r3, #2
 8010200:	88fb      	ldrh	r3, [r7, #6]
 8010202:	4293      	cmp	r3, r2
 8010204:	bf28      	it	cs
 8010206:	4613      	movcs	r3, r2
 8010208:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3302      	adds	r3, #2
 801020e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010210:	2300      	movs	r3, #0
 8010212:	82fb      	strh	r3, [r7, #22]
 8010214:	e00b      	b.n	801022e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010216:	8afb      	ldrh	r3, [r7, #22]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4413      	add	r3, r2
 801021c:	781a      	ldrb	r2, [r3, #0]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	3301      	adds	r3, #1
 8010226:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010228:	8afb      	ldrh	r3, [r7, #22]
 801022a:	3302      	adds	r3, #2
 801022c:	82fb      	strh	r3, [r7, #22]
 801022e:	8afa      	ldrh	r2, [r7, #22]
 8010230:	8abb      	ldrh	r3, [r7, #20]
 8010232:	429a      	cmp	r2, r3
 8010234:	d3ef      	bcc.n	8010216 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2200      	movs	r2, #0
 801023a:	701a      	strb	r2, [r3, #0]
  }
}
 801023c:	bf00      	nop
 801023e:	371c      	adds	r7, #28
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	881a      	ldrh	r2, [r3, #0]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4413      	add	r3, r2
 801025e:	b29a      	uxth	r2, r3
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	4413      	add	r3, r2
 801026e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010270:	68fb      	ldr	r3, [r7, #12]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3714      	adds	r7, #20
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b086      	sub	sp, #24
 8010282:	af00      	add	r7, sp, #0
 8010284:	60f8      	str	r0, [r7, #12]
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	4613      	mov	r3, r2
 801028a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801028c:	2301      	movs	r3, #1
 801028e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	789b      	ldrb	r3, [r3, #2]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d002      	beq.n	801029e <USBH_CtlReq+0x20>
 8010298:	2b02      	cmp	r3, #2
 801029a:	d00f      	beq.n	80102bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801029c:	e027      	b.n	80102ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	88fa      	ldrh	r2, [r7, #6]
 80102a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2201      	movs	r2, #1
 80102ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2202      	movs	r2, #2
 80102b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80102b6:	2301      	movs	r3, #1
 80102b8:	75fb      	strb	r3, [r7, #23]
      break;
 80102ba:	e018      	b.n	80102ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f000 f81b 	bl	80102f8 <USBH_HandleControl>
 80102c2:	4603      	mov	r3, r0
 80102c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <USBH_CtlReq+0x54>
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b03      	cmp	r3, #3
 80102d0:	d106      	bne.n	80102e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2201      	movs	r2, #1
 80102d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2200      	movs	r2, #0
 80102dc:	761a      	strb	r2, [r3, #24]
      break;
 80102de:	e005      	b.n	80102ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d102      	bne.n	80102ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	709a      	strb	r2, [r3, #2]
      break;
 80102ec:	bf00      	nop
  }
  return status;
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3718      	adds	r7, #24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010300:	2301      	movs	r3, #1
 8010302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010304:	2300      	movs	r3, #0
 8010306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	7e1b      	ldrb	r3, [r3, #24]
 801030c:	3b01      	subs	r3, #1
 801030e:	2b0a      	cmp	r3, #10
 8010310:	f200 8156 	bhi.w	80105c0 <USBH_HandleControl+0x2c8>
 8010314:	a201      	add	r2, pc, #4	; (adr r2, 801031c <USBH_HandleControl+0x24>)
 8010316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031a:	bf00      	nop
 801031c:	08010349 	.word	0x08010349
 8010320:	08010363 	.word	0x08010363
 8010324:	080103cd 	.word	0x080103cd
 8010328:	080103f3 	.word	0x080103f3
 801032c:	0801042b 	.word	0x0801042b
 8010330:	08010455 	.word	0x08010455
 8010334:	080104a7 	.word	0x080104a7
 8010338:	080104c9 	.word	0x080104c9
 801033c:	08010505 	.word	0x08010505
 8010340:	0801052b 	.word	0x0801052b
 8010344:	08010569 	.word	0x08010569
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f103 0110 	add.w	r1, r3, #16
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	795b      	ldrb	r3, [r3, #5]
 8010352:	461a      	mov	r2, r3
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 f943 	bl	80105e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2202      	movs	r2, #2
 801035e:	761a      	strb	r2, [r3, #24]
      break;
 8010360:	e139      	b.n	80105d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	795b      	ldrb	r3, [r3, #5]
 8010366:	4619      	mov	r1, r3
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 fcc5 	bl	8010cf8 <USBH_LL_GetURBState>
 801036e:	4603      	mov	r3, r0
 8010370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010372:	7bbb      	ldrb	r3, [r7, #14]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d11e      	bne.n	80103b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7c1b      	ldrb	r3, [r3, #16]
 801037c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8adb      	ldrh	r3, [r3, #22]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801038a:	7b7b      	ldrb	r3, [r7, #13]
 801038c:	2b80      	cmp	r3, #128	; 0x80
 801038e:	d103      	bne.n	8010398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2203      	movs	r2, #3
 8010394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010396:	e115      	b.n	80105c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2205      	movs	r2, #5
 801039c:	761a      	strb	r2, [r3, #24]
      break;
 801039e:	e111      	b.n	80105c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80103a0:	7b7b      	ldrb	r3, [r7, #13]
 80103a2:	2b80      	cmp	r3, #128	; 0x80
 80103a4:	d103      	bne.n	80103ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2209      	movs	r2, #9
 80103aa:	761a      	strb	r2, [r3, #24]
      break;
 80103ac:	e10a      	b.n	80105c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2207      	movs	r2, #7
 80103b2:	761a      	strb	r2, [r3, #24]
      break;
 80103b4:	e106      	b.n	80105c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80103b6:	7bbb      	ldrb	r3, [r7, #14]
 80103b8:	2b04      	cmp	r3, #4
 80103ba:	d003      	beq.n	80103c4 <USBH_HandleControl+0xcc>
 80103bc:	7bbb      	ldrb	r3, [r7, #14]
 80103be:	2b02      	cmp	r3, #2
 80103c0:	f040 8100 	bne.w	80105c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	220b      	movs	r2, #11
 80103c8:	761a      	strb	r2, [r3, #24]
      break;
 80103ca:	e0fb      	b.n	80105c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6899      	ldr	r1, [r3, #8]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	899a      	ldrh	r2, [r3, #12]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	791b      	ldrb	r3, [r3, #4]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 f93a 	bl	801065e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2204      	movs	r2, #4
 80103ee:	761a      	strb	r2, [r3, #24]
      break;
 80103f0:	e0f1      	b.n	80105d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	791b      	ldrb	r3, [r3, #4]
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fc7d 	bl	8010cf8 <USBH_LL_GetURBState>
 80103fe:	4603      	mov	r3, r0
 8010400:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010402:	7bbb      	ldrb	r3, [r7, #14]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d102      	bne.n	801040e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2209      	movs	r2, #9
 801040c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801040e:	7bbb      	ldrb	r3, [r7, #14]
 8010410:	2b05      	cmp	r3, #5
 8010412:	d102      	bne.n	801041a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010414:	2303      	movs	r3, #3
 8010416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010418:	e0d6      	b.n	80105c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801041a:	7bbb      	ldrb	r3, [r7, #14]
 801041c:	2b04      	cmp	r3, #4
 801041e:	f040 80d3 	bne.w	80105c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	220b      	movs	r2, #11
 8010426:	761a      	strb	r2, [r3, #24]
      break;
 8010428:	e0ce      	b.n	80105c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6899      	ldr	r1, [r3, #8]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	899a      	ldrh	r2, [r3, #12]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	795b      	ldrb	r3, [r3, #5]
 8010436:	2001      	movs	r0, #1
 8010438:	9000      	str	r0, [sp, #0]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f8ea 	bl	8010614 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010446:	b29a      	uxth	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2206      	movs	r2, #6
 8010450:	761a      	strb	r2, [r3, #24]
      break;
 8010452:	e0c0      	b.n	80105d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	795b      	ldrb	r3, [r3, #5]
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fc4c 	bl	8010cf8 <USBH_LL_GetURBState>
 8010460:	4603      	mov	r3, r0
 8010462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010464:	7bbb      	ldrb	r3, [r7, #14]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d103      	bne.n	8010472 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2207      	movs	r2, #7
 801046e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010470:	e0ac      	b.n	80105cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010472:	7bbb      	ldrb	r3, [r7, #14]
 8010474:	2b05      	cmp	r3, #5
 8010476:	d105      	bne.n	8010484 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	220c      	movs	r2, #12
 801047c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801047e:	2303      	movs	r3, #3
 8010480:	73fb      	strb	r3, [r7, #15]
      break;
 8010482:	e0a3      	b.n	80105cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010484:	7bbb      	ldrb	r3, [r7, #14]
 8010486:	2b02      	cmp	r3, #2
 8010488:	d103      	bne.n	8010492 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2205      	movs	r2, #5
 801048e:	761a      	strb	r2, [r3, #24]
      break;
 8010490:	e09c      	b.n	80105cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010492:	7bbb      	ldrb	r3, [r7, #14]
 8010494:	2b04      	cmp	r3, #4
 8010496:	f040 8099 	bne.w	80105cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	220b      	movs	r2, #11
 801049e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80104a0:	2302      	movs	r3, #2
 80104a2:	73fb      	strb	r3, [r7, #15]
      break;
 80104a4:	e092      	b.n	80105cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	791b      	ldrb	r3, [r3, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	2100      	movs	r1, #0
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 f8d5 	bl	801065e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2208      	movs	r2, #8
 80104c4:	761a      	strb	r2, [r3, #24]

      break;
 80104c6:	e086      	b.n	80105d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	791b      	ldrb	r3, [r3, #4]
 80104cc:	4619      	mov	r1, r3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fc12 	bl	8010cf8 <USBH_LL_GetURBState>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80104d8:	7bbb      	ldrb	r3, [r7, #14]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d105      	bne.n	80104ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	220d      	movs	r2, #13
 80104e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80104e8:	e072      	b.n	80105d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	d103      	bne.n	80104f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	220b      	movs	r2, #11
 80104f4:	761a      	strb	r2, [r3, #24]
      break;
 80104f6:	e06b      	b.n	80105d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	2b05      	cmp	r3, #5
 80104fc:	d168      	bne.n	80105d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80104fe:	2303      	movs	r3, #3
 8010500:	73fb      	strb	r3, [r7, #15]
      break;
 8010502:	e065      	b.n	80105d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	795b      	ldrb	r3, [r3, #5]
 8010508:	2201      	movs	r2, #1
 801050a:	9200      	str	r2, [sp, #0]
 801050c:	2200      	movs	r2, #0
 801050e:	2100      	movs	r1, #0
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 f87f 	bl	8010614 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801051c:	b29a      	uxth	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	220a      	movs	r2, #10
 8010526:	761a      	strb	r2, [r3, #24]
      break;
 8010528:	e055      	b.n	80105d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	795b      	ldrb	r3, [r3, #5]
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fbe1 	bl	8010cf8 <USBH_LL_GetURBState>
 8010536:	4603      	mov	r3, r0
 8010538:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801053a:	7bbb      	ldrb	r3, [r7, #14]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d105      	bne.n	801054c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	220d      	movs	r2, #13
 8010548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801054a:	e043      	b.n	80105d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801054c:	7bbb      	ldrb	r3, [r7, #14]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d103      	bne.n	801055a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2209      	movs	r2, #9
 8010556:	761a      	strb	r2, [r3, #24]
      break;
 8010558:	e03c      	b.n	80105d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801055a:	7bbb      	ldrb	r3, [r7, #14]
 801055c:	2b04      	cmp	r3, #4
 801055e:	d139      	bne.n	80105d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	220b      	movs	r2, #11
 8010564:	761a      	strb	r2, [r3, #24]
      break;
 8010566:	e035      	b.n	80105d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7e5b      	ldrb	r3, [r3, #25]
 801056c:	3301      	adds	r3, #1
 801056e:	b2da      	uxtb	r2, r3
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	765a      	strb	r2, [r3, #25]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	7e5b      	ldrb	r3, [r3, #25]
 8010578:	2b02      	cmp	r3, #2
 801057a:	d806      	bhi.n	801058a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2201      	movs	r2, #1
 8010586:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010588:	e025      	b.n	80105d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010590:	2106      	movs	r1, #6
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	795b      	ldrb	r3, [r3, #5]
 80105a0:	4619      	mov	r1, r3
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f90c 	bl	80107c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	791b      	ldrb	r3, [r3, #4]
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 f906 	bl	80107c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80105ba:	2302      	movs	r3, #2
 80105bc:	73fb      	strb	r3, [r7, #15]
      break;
 80105be:	e00a      	b.n	80105d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80105c0:	bf00      	nop
 80105c2:	e008      	b.n	80105d6 <USBH_HandleControl+0x2de>
      break;
 80105c4:	bf00      	nop
 80105c6:	e006      	b.n	80105d6 <USBH_HandleControl+0x2de>
      break;
 80105c8:	bf00      	nop
 80105ca:	e004      	b.n	80105d6 <USBH_HandleControl+0x2de>
      break;
 80105cc:	bf00      	nop
 80105ce:	e002      	b.n	80105d6 <USBH_HandleControl+0x2de>
      break;
 80105d0:	bf00      	nop
 80105d2:	e000      	b.n	80105d6 <USBH_HandleControl+0x2de>
      break;
 80105d4:	bf00      	nop
  }

  return status;
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b088      	sub	sp, #32
 80105e4:	af04      	add	r7, sp, #16
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	4613      	mov	r3, r2
 80105ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80105ee:	79f9      	ldrb	r1, [r7, #7]
 80105f0:	2300      	movs	r3, #0
 80105f2:	9303      	str	r3, [sp, #12]
 80105f4:	2308      	movs	r3, #8
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	2300      	movs	r3, #0
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	2300      	movs	r3, #0
 8010602:	2200      	movs	r2, #0
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f000 fb46 	bl	8010c96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b088      	sub	sp, #32
 8010618:	af04      	add	r7, sp, #16
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	4611      	mov	r1, r2
 8010620:	461a      	mov	r2, r3
 8010622:	460b      	mov	r3, r1
 8010624:	80fb      	strh	r3, [r7, #6]
 8010626:	4613      	mov	r3, r2
 8010628:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010638:	7979      	ldrb	r1, [r7, #5]
 801063a:	7e3b      	ldrb	r3, [r7, #24]
 801063c:	9303      	str	r3, [sp, #12]
 801063e:	88fb      	ldrh	r3, [r7, #6]
 8010640:	9302      	str	r3, [sp, #8]
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	9301      	str	r3, [sp, #4]
 8010646:	2301      	movs	r3, #1
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	2300      	movs	r3, #0
 801064c:	2200      	movs	r2, #0
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f000 fb21 	bl	8010c96 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801065e:	b580      	push	{r7, lr}
 8010660:	b088      	sub	sp, #32
 8010662:	af04      	add	r7, sp, #16
 8010664:	60f8      	str	r0, [r7, #12]
 8010666:	60b9      	str	r1, [r7, #8]
 8010668:	4611      	mov	r1, r2
 801066a:	461a      	mov	r2, r3
 801066c:	460b      	mov	r3, r1
 801066e:	80fb      	strh	r3, [r7, #6]
 8010670:	4613      	mov	r3, r2
 8010672:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010674:	7979      	ldrb	r1, [r7, #5]
 8010676:	2300      	movs	r3, #0
 8010678:	9303      	str	r3, [sp, #12]
 801067a:	88fb      	ldrh	r3, [r7, #6]
 801067c:	9302      	str	r3, [sp, #8]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	9301      	str	r3, [sp, #4]
 8010682:	2301      	movs	r3, #1
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	2300      	movs	r3, #0
 8010688:	2201      	movs	r2, #1
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f000 fb03 	bl	8010c96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010690:	2300      	movs	r3, #0

}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b088      	sub	sp, #32
 801069e:	af04      	add	r7, sp, #16
 80106a0:	60f8      	str	r0, [r7, #12]
 80106a2:	60b9      	str	r1, [r7, #8]
 80106a4:	4611      	mov	r1, r2
 80106a6:	461a      	mov	r2, r3
 80106a8:	460b      	mov	r3, r1
 80106aa:	80fb      	strh	r3, [r7, #6]
 80106ac:	4613      	mov	r3, r2
 80106ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80106ba:	2300      	movs	r3, #0
 80106bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80106be:	7979      	ldrb	r1, [r7, #5]
 80106c0:	7e3b      	ldrb	r3, [r7, #24]
 80106c2:	9303      	str	r3, [sp, #12]
 80106c4:	88fb      	ldrh	r3, [r7, #6]
 80106c6:	9302      	str	r3, [sp, #8]
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	9301      	str	r3, [sp, #4]
 80106cc:	2301      	movs	r3, #1
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	2302      	movs	r3, #2
 80106d2:	2200      	movs	r2, #0
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 fade 	bl	8010c96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af04      	add	r7, sp, #16
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	4611      	mov	r1, r2
 80106f0:	461a      	mov	r2, r3
 80106f2:	460b      	mov	r3, r1
 80106f4:	80fb      	strh	r3, [r7, #6]
 80106f6:	4613      	mov	r3, r2
 80106f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80106fa:	7979      	ldrb	r1, [r7, #5]
 80106fc:	2300      	movs	r3, #0
 80106fe:	9303      	str	r3, [sp, #12]
 8010700:	88fb      	ldrh	r3, [r7, #6]
 8010702:	9302      	str	r3, [sp, #8]
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	9301      	str	r3, [sp, #4]
 8010708:	2301      	movs	r3, #1
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	2302      	movs	r3, #2
 801070e:	2201      	movs	r2, #1
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f000 fac0 	bl	8010c96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010716:	2300      	movs	r3, #0
}
 8010718:	4618      	mov	r0, r3
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b086      	sub	sp, #24
 8010724:	af04      	add	r7, sp, #16
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	4608      	mov	r0, r1
 801072a:	4611      	mov	r1, r2
 801072c:	461a      	mov	r2, r3
 801072e:	4603      	mov	r3, r0
 8010730:	70fb      	strb	r3, [r7, #3]
 8010732:	460b      	mov	r3, r1
 8010734:	70bb      	strb	r3, [r7, #2]
 8010736:	4613      	mov	r3, r2
 8010738:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801073a:	7878      	ldrb	r0, [r7, #1]
 801073c:	78ba      	ldrb	r2, [r7, #2]
 801073e:	78f9      	ldrb	r1, [r7, #3]
 8010740:	8b3b      	ldrh	r3, [r7, #24]
 8010742:	9302      	str	r3, [sp, #8]
 8010744:	7d3b      	ldrb	r3, [r7, #20]
 8010746:	9301      	str	r3, [sp, #4]
 8010748:	7c3b      	ldrb	r3, [r7, #16]
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	4603      	mov	r3, r0
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fa53 	bl	8010bfa <USBH_LL_OpenPipe>

  return USBH_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	460b      	mov	r3, r1
 8010768:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801076a:	78fb      	ldrb	r3, [r7, #3]
 801076c:	4619      	mov	r1, r3
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa72 	bl	8010c58 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b084      	sub	sp, #16
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	460b      	mov	r3, r1
 8010788:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f836 	bl	80107fc <USBH_GetFreePipe>
 8010790:	4603      	mov	r3, r0
 8010792:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010794:	89fb      	ldrh	r3, [r7, #14]
 8010796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801079a:	4293      	cmp	r3, r2
 801079c:	d00a      	beq.n	80107b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801079e:	78fa      	ldrb	r2, [r7, #3]
 80107a0:	89fb      	ldrh	r3, [r7, #14]
 80107a2:	f003 030f 	and.w	r3, r3, #15
 80107a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80107aa:	6879      	ldr	r1, [r7, #4]
 80107ac:	33e0      	adds	r3, #224	; 0xe0
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	440b      	add	r3, r1
 80107b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80107b4:	89fb      	ldrh	r3, [r7, #14]
 80107b6:	b2db      	uxtb	r3, r3
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80107cc:	78fb      	ldrb	r3, [r7, #3]
 80107ce:	2b0a      	cmp	r3, #10
 80107d0:	d80d      	bhi.n	80107ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80107d2:	78fb      	ldrb	r3, [r7, #3]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	33e0      	adds	r3, #224	; 0xe0
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	685a      	ldr	r2, [r3, #4]
 80107de:	78fb      	ldrb	r3, [r7, #3]
 80107e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	33e0      	adds	r3, #224	; 0xe0
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	440b      	add	r3, r1
 80107ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr

080107fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]
 801080c:	e00f      	b.n	801082e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801080e:	7bfb      	ldrb	r3, [r7, #15]
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	33e0      	adds	r3, #224	; 0xe0
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	b29b      	uxth	r3, r3
 8010826:	e007      	b.n	8010838 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010828:	7bfb      	ldrb	r3, [r7, #15]
 801082a:	3301      	adds	r3, #1
 801082c:	73fb      	strb	r3, [r7, #15]
 801082e:	7bfb      	ldrb	r3, [r7, #15]
 8010830:	2b0a      	cmp	r3, #10
 8010832:	d9ec      	bls.n	801080e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010834:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010838:	4618      	mov	r0, r3
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010848:	2201      	movs	r2, #1
 801084a:	490e      	ldr	r1, [pc, #56]	; (8010884 <MX_USB_HOST_Init+0x40>)
 801084c:	480e      	ldr	r0, [pc, #56]	; (8010888 <MX_USB_HOST_Init+0x44>)
 801084e:	f7fe fca1 	bl	800f194 <USBH_Init>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010858:	f7f1 f9b2 	bl	8001bc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801085c:	490b      	ldr	r1, [pc, #44]	; (801088c <MX_USB_HOST_Init+0x48>)
 801085e:	480a      	ldr	r0, [pc, #40]	; (8010888 <MX_USB_HOST_Init+0x44>)
 8010860:	f7fe fd26 	bl	800f2b0 <USBH_RegisterClass>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801086a:	f7f1 f9a9 	bl	8001bc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801086e:	4806      	ldr	r0, [pc, #24]	; (8010888 <MX_USB_HOST_Init+0x44>)
 8010870:	f7fe fdaa 	bl	800f3c8 <USBH_Start>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d001      	beq.n	801087e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801087a:	f7f1 f9a1 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801087e:	bf00      	nop
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	080108a5 	.word	0x080108a5
 8010888:	20000738 	.word	0x20000738
 801088c:	200001ec 	.word	0x200001ec

08010890 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010894:	4802      	ldr	r0, [pc, #8]	; (80108a0 <MX_USB_HOST_Process+0x10>)
 8010896:	f7fe fda7 	bl	800f3e8 <USBH_Process>
}
 801089a:	bf00      	nop
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20000738 	.word	0x20000738

080108a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	3b01      	subs	r3, #1
 80108b4:	2b04      	cmp	r3, #4
 80108b6:	d819      	bhi.n	80108ec <USBH_UserProcess+0x48>
 80108b8:	a201      	add	r2, pc, #4	; (adr r2, 80108c0 <USBH_UserProcess+0x1c>)
 80108ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108be:	bf00      	nop
 80108c0:	080108ed 	.word	0x080108ed
 80108c4:	080108dd 	.word	0x080108dd
 80108c8:	080108ed 	.word	0x080108ed
 80108cc:	080108e5 	.word	0x080108e5
 80108d0:	080108d5 	.word	0x080108d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80108d4:	4b09      	ldr	r3, [pc, #36]	; (80108fc <USBH_UserProcess+0x58>)
 80108d6:	2203      	movs	r2, #3
 80108d8:	701a      	strb	r2, [r3, #0]
  break;
 80108da:	e008      	b.n	80108ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80108dc:	4b07      	ldr	r3, [pc, #28]	; (80108fc <USBH_UserProcess+0x58>)
 80108de:	2202      	movs	r2, #2
 80108e0:	701a      	strb	r2, [r3, #0]
  break;
 80108e2:	e004      	b.n	80108ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80108e4:	4b05      	ldr	r3, [pc, #20]	; (80108fc <USBH_UserProcess+0x58>)
 80108e6:	2201      	movs	r2, #1
 80108e8:	701a      	strb	r2, [r3, #0]
  break;
 80108ea:	e000      	b.n	80108ee <USBH_UserProcess+0x4a>

  default:
  break;
 80108ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80108ee:	bf00      	nop
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	200002a1 	.word	0x200002a1

08010900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b08a      	sub	sp, #40	; 0x28
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010908:	f107 0314 	add.w	r3, r7, #20
 801090c:	2200      	movs	r2, #0
 801090e:	601a      	str	r2, [r3, #0]
 8010910:	605a      	str	r2, [r3, #4]
 8010912:	609a      	str	r2, [r3, #8]
 8010914:	60da      	str	r2, [r3, #12]
 8010916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010920:	d147      	bne.n	80109b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010922:	2300      	movs	r3, #0
 8010924:	613b      	str	r3, [r7, #16]
 8010926:	4b25      	ldr	r3, [pc, #148]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 8010928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801092a:	4a24      	ldr	r2, [pc, #144]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 801092c:	f043 0301 	orr.w	r3, r3, #1
 8010930:	6313      	str	r3, [r2, #48]	; 0x30
 8010932:	4b22      	ldr	r3, [pc, #136]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 8010934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010936:	f003 0301 	and.w	r3, r3, #1
 801093a:	613b      	str	r3, [r7, #16]
 801093c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010944:	2300      	movs	r3, #0
 8010946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010948:	2300      	movs	r3, #0
 801094a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801094c:	f107 0314 	add.w	r3, r7, #20
 8010950:	4619      	mov	r1, r3
 8010952:	481b      	ldr	r0, [pc, #108]	; (80109c0 <HAL_HCD_MspInit+0xc0>)
 8010954:	f7f6 fef6 	bl	8007744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801095e:	2302      	movs	r3, #2
 8010960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010962:	2300      	movs	r3, #0
 8010964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010966:	2300      	movs	r3, #0
 8010968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801096a:	230a      	movs	r3, #10
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801096e:	f107 0314 	add.w	r3, r7, #20
 8010972:	4619      	mov	r1, r3
 8010974:	4812      	ldr	r0, [pc, #72]	; (80109c0 <HAL_HCD_MspInit+0xc0>)
 8010976:	f7f6 fee5 	bl	8007744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801097a:	4b10      	ldr	r3, [pc, #64]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 801097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801097e:	4a0f      	ldr	r2, [pc, #60]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 8010980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010984:	6353      	str	r3, [r2, #52]	; 0x34
 8010986:	2300      	movs	r3, #0
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	4b0c      	ldr	r3, [pc, #48]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 801098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801098e:	4a0b      	ldr	r2, [pc, #44]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 8010990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010994:	6453      	str	r3, [r2, #68]	; 0x44
 8010996:	4b09      	ldr	r3, [pc, #36]	; (80109bc <HAL_HCD_MspInit+0xbc>)
 8010998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801099e:	60fb      	str	r3, [r7, #12]
 80109a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80109a2:	2200      	movs	r2, #0
 80109a4:	2100      	movs	r1, #0
 80109a6:	2043      	movs	r0, #67	; 0x43
 80109a8:	f7f6 fe95 	bl	80076d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80109ac:	2043      	movs	r0, #67	; 0x43
 80109ae:	f7f6 feae 	bl	800770e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80109b2:	bf00      	nop
 80109b4:	3728      	adds	r7, #40	; 0x28
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	40023800 	.word	0x40023800
 80109c0:	40020000 	.word	0x40020000

080109c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff f8db 	bl	800fb8e <USBH_LL_IncTimer>
}
 80109d8:	bf00      	nop
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7ff f913 	bl	800fc1a <USBH_LL_Connect>
}
 80109f4:	bf00      	nop
 80109f6:	3708      	adds	r7, #8
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff f91c 	bl	800fc48 <USBH_LL_Disconnect>
}
 8010a10:	bf00      	nop
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	460b      	mov	r3, r1
 8010a22:	70fb      	strb	r3, [r7, #3]
 8010a24:	4613      	mov	r3, r2
 8010a26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010a28:	bf00      	nop
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7ff f8cd 	bl	800fbe2 <USBH_LL_PortEnabled>
}
 8010a48:	bf00      	nop
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff f8cd 	bl	800fbfe <USBH_LL_PortDisabled>
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d12a      	bne.n	8010ad4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010a7e:	4a18      	ldr	r2, [pc, #96]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4a15      	ldr	r2, [pc, #84]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010a8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a8e:	4b14      	ldr	r3, [pc, #80]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010a90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010a94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010a96:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010a98:	2208      	movs	r2, #8
 8010a9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010a9c:	4b10      	ldr	r3, [pc, #64]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010aa8:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010aaa:	2202      	movs	r2, #2
 8010aac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010aae:	4b0c      	ldr	r3, [pc, #48]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010ab4:	480a      	ldr	r0, [pc, #40]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010ab6:	f7f7 f845 	bl	8007b44 <HAL_HCD_Init>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d001      	beq.n	8010ac4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010ac0:	f7f1 f87e 	bl	8001bc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010ac4:	4806      	ldr	r0, [pc, #24]	; (8010ae0 <USBH_LL_Init+0x74>)
 8010ac6:	f7f7 fc21 	bl	800830c <HAL_HCD_GetCurrentFrame>
 8010aca:	4603      	mov	r3, r0
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff f84e 	bl	800fb70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	20000b10 	.word	0x20000b10

08010ae4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aec:	2300      	movs	r3, #0
 8010aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010af0:	2300      	movs	r3, #0
 8010af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f7 fb90 	bl	8008220 <HAL_HCD_Start>
 8010b00:	4603      	mov	r3, r0
 8010b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b04:	7bfb      	ldrb	r3, [r7, #15]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f000 f95c 	bl	8010dc4 <USBH_Get_USB_Status>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7f7 fb98 	bl	8008266 <HAL_HCD_Stop>
 8010b36:	4603      	mov	r3, r0
 8010b38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b3a:	7bfb      	ldrb	r3, [r7, #15]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f000 f941 	bl	8010dc4 <USBH_Get_USB_Status>
 8010b42:	4603      	mov	r3, r0
 8010b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3710      	adds	r7, #16
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f7 fbe0 	bl	8008328 <HAL_HCD_GetCurrentSpeed>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	d00c      	beq.n	8010b88 <USBH_LL_GetSpeed+0x38>
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d80d      	bhi.n	8010b8e <USBH_LL_GetSpeed+0x3e>
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d002      	beq.n	8010b7c <USBH_LL_GetSpeed+0x2c>
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d003      	beq.n	8010b82 <USBH_LL_GetSpeed+0x32>
 8010b7a:	e008      	b.n	8010b8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b80:	e008      	b.n	8010b94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010b82:	2301      	movs	r3, #1
 8010b84:	73fb      	strb	r3, [r7, #15]
    break;
 8010b86:	e005      	b.n	8010b94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010b88:	2302      	movs	r3, #2
 8010b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b8c:	e002      	b.n	8010b94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	73fb      	strb	r3, [r7, #15]
    break;
 8010b92:	bf00      	nop
  }
  return  speed;
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7f7 fb73 	bl	80082a0 <HAL_HCD_ResetPort>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bbe:	7bfb      	ldrb	r3, [r7, #15]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 f8ff 	bl	8010dc4 <USBH_Get_USB_Status>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	460b      	mov	r3, r1
 8010bde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010be6:	78fa      	ldrb	r2, [r7, #3]
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7f7 fb7a 	bl	80082e4 <HAL_HCD_HC_GetXferCount>
 8010bf0:	4603      	mov	r3, r0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010bfa:	b590      	push	{r4, r7, lr}
 8010bfc:	b089      	sub	sp, #36	; 0x24
 8010bfe:	af04      	add	r7, sp, #16
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	4608      	mov	r0, r1
 8010c04:	4611      	mov	r1, r2
 8010c06:	461a      	mov	r2, r3
 8010c08:	4603      	mov	r3, r0
 8010c0a:	70fb      	strb	r3, [r7, #3]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	70bb      	strb	r3, [r7, #2]
 8010c10:	4613      	mov	r3, r2
 8010c12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c14:	2300      	movs	r3, #0
 8010c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c22:	787c      	ldrb	r4, [r7, #1]
 8010c24:	78ba      	ldrb	r2, [r7, #2]
 8010c26:	78f9      	ldrb	r1, [r7, #3]
 8010c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c2a:	9302      	str	r3, [sp, #8]
 8010c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4623      	mov	r3, r4
 8010c3a:	f7f6 ffe5 	bl	8007c08 <HAL_HCD_HC_Init>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 f8bd 	bl	8010dc4 <USBH_Get_USB_Status>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3714      	adds	r7, #20
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd90      	pop	{r4, r7, pc}

08010c58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c72:	78fa      	ldrb	r2, [r7, #3]
 8010c74:	4611      	mov	r1, r2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f7 f855 	bl	8007d26 <HAL_HCD_HC_Halt>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f89e 	bl	8010dc4 <USBH_Get_USB_Status>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010c96:	b590      	push	{r4, r7, lr}
 8010c98:	b089      	sub	sp, #36	; 0x24
 8010c9a:	af04      	add	r7, sp, #16
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	4608      	mov	r0, r1
 8010ca0:	4611      	mov	r1, r2
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	70fb      	strb	r3, [r7, #3]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	70bb      	strb	r3, [r7, #2]
 8010cac:	4613      	mov	r3, r2
 8010cae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010cbe:	787c      	ldrb	r4, [r7, #1]
 8010cc0:	78ba      	ldrb	r2, [r7, #2]
 8010cc2:	78f9      	ldrb	r1, [r7, #3]
 8010cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010cc8:	9303      	str	r3, [sp, #12]
 8010cca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010ccc:	9302      	str	r3, [sp, #8]
 8010cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd0:	9301      	str	r3, [sp, #4]
 8010cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	4623      	mov	r3, r4
 8010cda:	f7f7 f847 	bl	8007d6c <HAL_HCD_HC_SubmitRequest>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f000 f86d 	bl	8010dc4 <USBH_Get_USB_Status>
 8010cea:	4603      	mov	r3, r0
 8010cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd90      	pop	{r4, r7, pc}

08010cf8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	460b      	mov	r3, r1
 8010d02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d0a:	78fa      	ldrb	r2, [r7, #3]
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7f7 fad4 	bl	80082bc <HAL_HCD_HC_GetURBState>
 8010d14:	4603      	mov	r3, r0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b082      	sub	sp, #8
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
 8010d26:	460b      	mov	r3, r1
 8010d28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d103      	bne.n	8010d3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d34:	78fb      	ldrb	r3, [r7, #3]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f000 f870 	bl	8010e1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d3c:	20c8      	movs	r0, #200	; 0xc8
 8010d3e:	f7f6 fbcb 	bl	80074d8 <HAL_Delay>
  return USBH_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70fb      	strb	r3, [r7, #3]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d64:	78fb      	ldrb	r3, [r7, #3]
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	212c      	movs	r1, #44	; 0x2c
 8010d6a:	fb01 f303 	mul.w	r3, r1, r3
 8010d6e:	4413      	add	r3, r2
 8010d70:	333b      	adds	r3, #59	; 0x3b
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d009      	beq.n	8010d8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	212c      	movs	r1, #44	; 0x2c
 8010d7e:	fb01 f303 	mul.w	r3, r1, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	3354      	adds	r3, #84	; 0x54
 8010d86:	78ba      	ldrb	r2, [r7, #2]
 8010d88:	701a      	strb	r2, [r3, #0]
 8010d8a:	e008      	b.n	8010d9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010d8c:	78fb      	ldrb	r3, [r7, #3]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	212c      	movs	r1, #44	; 0x2c
 8010d92:	fb01 f303 	mul.w	r3, r1, r3
 8010d96:	4413      	add	r3, r2
 8010d98:	3355      	adds	r3, #85	; 0x55
 8010d9a:	78ba      	ldrb	r2, [r7, #2]
 8010d9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3714      	adds	r7, #20
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7f6 fb8f 	bl	80074d8 <HAL_Delay>
}
 8010dba:	bf00      	nop
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
	...

08010dc4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dd2:	79fb      	ldrb	r3, [r7, #7]
 8010dd4:	2b03      	cmp	r3, #3
 8010dd6:	d817      	bhi.n	8010e08 <USBH_Get_USB_Status+0x44>
 8010dd8:	a201      	add	r2, pc, #4	; (adr r2, 8010de0 <USBH_Get_USB_Status+0x1c>)
 8010dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dde:	bf00      	nop
 8010de0:	08010df1 	.word	0x08010df1
 8010de4:	08010df7 	.word	0x08010df7
 8010de8:	08010dfd 	.word	0x08010dfd
 8010dec:	08010e03 	.word	0x08010e03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010df0:	2300      	movs	r3, #0
 8010df2:	73fb      	strb	r3, [r7, #15]
    break;
 8010df4:	e00b      	b.n	8010e0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010df6:	2302      	movs	r3, #2
 8010df8:	73fb      	strb	r3, [r7, #15]
    break;
 8010dfa:	e008      	b.n	8010e0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8010e00:	e005      	b.n	8010e0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010e02:	2302      	movs	r3, #2
 8010e04:	73fb      	strb	r3, [r7, #15]
    break;
 8010e06:	e002      	b.n	8010e0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010e08:	2302      	movs	r3, #2
 8010e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e0c:	bf00      	nop
  }
  return usb_status;
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d102      	bne.n	8010e36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010e30:	2301      	movs	r3, #1
 8010e32:	73fb      	strb	r3, [r7, #15]
 8010e34:	e001      	b.n	8010e3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010e3a:	7bfb      	ldrb	r3, [r7, #15]
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	2101      	movs	r1, #1
 8010e40:	4803      	ldr	r0, [pc, #12]	; (8010e50 <MX_DriverVbusFS+0x34>)
 8010e42:	f7f6 fe33 	bl	8007aac <HAL_GPIO_WritePin>
}
 8010e46:	bf00      	nop
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	40020800 	.word	0x40020800

08010e54 <__errno>:
 8010e54:	4b01      	ldr	r3, [pc, #4]	; (8010e5c <__errno+0x8>)
 8010e56:	6818      	ldr	r0, [r3, #0]
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	2000020c 	.word	0x2000020c

08010e60 <__libc_init_array>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	4d0d      	ldr	r5, [pc, #52]	; (8010e98 <__libc_init_array+0x38>)
 8010e64:	4c0d      	ldr	r4, [pc, #52]	; (8010e9c <__libc_init_array+0x3c>)
 8010e66:	1b64      	subs	r4, r4, r5
 8010e68:	10a4      	asrs	r4, r4, #2
 8010e6a:	2600      	movs	r6, #0
 8010e6c:	42a6      	cmp	r6, r4
 8010e6e:	d109      	bne.n	8010e84 <__libc_init_array+0x24>
 8010e70:	4d0b      	ldr	r5, [pc, #44]	; (8010ea0 <__libc_init_array+0x40>)
 8010e72:	4c0c      	ldr	r4, [pc, #48]	; (8010ea4 <__libc_init_array+0x44>)
 8010e74:	f000 fc7a 	bl	801176c <_init>
 8010e78:	1b64      	subs	r4, r4, r5
 8010e7a:	10a4      	asrs	r4, r4, #2
 8010e7c:	2600      	movs	r6, #0
 8010e7e:	42a6      	cmp	r6, r4
 8010e80:	d105      	bne.n	8010e8e <__libc_init_array+0x2e>
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e88:	4798      	blx	r3
 8010e8a:	3601      	adds	r6, #1
 8010e8c:	e7ee      	b.n	8010e6c <__libc_init_array+0xc>
 8010e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e92:	4798      	blx	r3
 8010e94:	3601      	adds	r6, #1
 8010e96:	e7f2      	b.n	8010e7e <__libc_init_array+0x1e>
 8010e98:	08011d68 	.word	0x08011d68
 8010e9c:	08011d68 	.word	0x08011d68
 8010ea0:	08011d68 	.word	0x08011d68
 8010ea4:	08011d6c 	.word	0x08011d6c

08010ea8 <malloc>:
 8010ea8:	4b02      	ldr	r3, [pc, #8]	; (8010eb4 <malloc+0xc>)
 8010eaa:	4601      	mov	r1, r0
 8010eac:	6818      	ldr	r0, [r3, #0]
 8010eae:	f000 b871 	b.w	8010f94 <_malloc_r>
 8010eb2:	bf00      	nop
 8010eb4:	2000020c 	.word	0x2000020c

08010eb8 <free>:
 8010eb8:	4b02      	ldr	r3, [pc, #8]	; (8010ec4 <free+0xc>)
 8010eba:	4601      	mov	r1, r0
 8010ebc:	6818      	ldr	r0, [r3, #0]
 8010ebe:	f000 b819 	b.w	8010ef4 <_free_r>
 8010ec2:	bf00      	nop
 8010ec4:	2000020c 	.word	0x2000020c

08010ec8 <memcpy>:
 8010ec8:	440a      	add	r2, r1
 8010eca:	4291      	cmp	r1, r2
 8010ecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ed0:	d100      	bne.n	8010ed4 <memcpy+0xc>
 8010ed2:	4770      	bx	lr
 8010ed4:	b510      	push	{r4, lr}
 8010ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ede:	4291      	cmp	r1, r2
 8010ee0:	d1f9      	bne.n	8010ed6 <memcpy+0xe>
 8010ee2:	bd10      	pop	{r4, pc}

08010ee4 <memset>:
 8010ee4:	4402      	add	r2, r0
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d100      	bne.n	8010eee <memset+0xa>
 8010eec:	4770      	bx	lr
 8010eee:	f803 1b01 	strb.w	r1, [r3], #1
 8010ef2:	e7f9      	b.n	8010ee8 <memset+0x4>

08010ef4 <_free_r>:
 8010ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ef6:	2900      	cmp	r1, #0
 8010ef8:	d048      	beq.n	8010f8c <_free_r+0x98>
 8010efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010efe:	9001      	str	r0, [sp, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f1a1 0404 	sub.w	r4, r1, #4
 8010f06:	bfb8      	it	lt
 8010f08:	18e4      	addlt	r4, r4, r3
 8010f0a:	f000 f8c1 	bl	8011090 <__malloc_lock>
 8010f0e:	4a20      	ldr	r2, [pc, #128]	; (8010f90 <_free_r+0x9c>)
 8010f10:	9801      	ldr	r0, [sp, #4]
 8010f12:	6813      	ldr	r3, [r2, #0]
 8010f14:	4615      	mov	r5, r2
 8010f16:	b933      	cbnz	r3, 8010f26 <_free_r+0x32>
 8010f18:	6063      	str	r3, [r4, #4]
 8010f1a:	6014      	str	r4, [r2, #0]
 8010f1c:	b003      	add	sp, #12
 8010f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f22:	f000 b8bb 	b.w	801109c <__malloc_unlock>
 8010f26:	42a3      	cmp	r3, r4
 8010f28:	d90b      	bls.n	8010f42 <_free_r+0x4e>
 8010f2a:	6821      	ldr	r1, [r4, #0]
 8010f2c:	1862      	adds	r2, r4, r1
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	bf04      	itt	eq
 8010f32:	681a      	ldreq	r2, [r3, #0]
 8010f34:	685b      	ldreq	r3, [r3, #4]
 8010f36:	6063      	str	r3, [r4, #4]
 8010f38:	bf04      	itt	eq
 8010f3a:	1852      	addeq	r2, r2, r1
 8010f3c:	6022      	streq	r2, [r4, #0]
 8010f3e:	602c      	str	r4, [r5, #0]
 8010f40:	e7ec      	b.n	8010f1c <_free_r+0x28>
 8010f42:	461a      	mov	r2, r3
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	b10b      	cbz	r3, 8010f4c <_free_r+0x58>
 8010f48:	42a3      	cmp	r3, r4
 8010f4a:	d9fa      	bls.n	8010f42 <_free_r+0x4e>
 8010f4c:	6811      	ldr	r1, [r2, #0]
 8010f4e:	1855      	adds	r5, r2, r1
 8010f50:	42a5      	cmp	r5, r4
 8010f52:	d10b      	bne.n	8010f6c <_free_r+0x78>
 8010f54:	6824      	ldr	r4, [r4, #0]
 8010f56:	4421      	add	r1, r4
 8010f58:	1854      	adds	r4, r2, r1
 8010f5a:	42a3      	cmp	r3, r4
 8010f5c:	6011      	str	r1, [r2, #0]
 8010f5e:	d1dd      	bne.n	8010f1c <_free_r+0x28>
 8010f60:	681c      	ldr	r4, [r3, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	6053      	str	r3, [r2, #4]
 8010f66:	4421      	add	r1, r4
 8010f68:	6011      	str	r1, [r2, #0]
 8010f6a:	e7d7      	b.n	8010f1c <_free_r+0x28>
 8010f6c:	d902      	bls.n	8010f74 <_free_r+0x80>
 8010f6e:	230c      	movs	r3, #12
 8010f70:	6003      	str	r3, [r0, #0]
 8010f72:	e7d3      	b.n	8010f1c <_free_r+0x28>
 8010f74:	6825      	ldr	r5, [r4, #0]
 8010f76:	1961      	adds	r1, r4, r5
 8010f78:	428b      	cmp	r3, r1
 8010f7a:	bf04      	itt	eq
 8010f7c:	6819      	ldreq	r1, [r3, #0]
 8010f7e:	685b      	ldreq	r3, [r3, #4]
 8010f80:	6063      	str	r3, [r4, #4]
 8010f82:	bf04      	itt	eq
 8010f84:	1949      	addeq	r1, r1, r5
 8010f86:	6021      	streq	r1, [r4, #0]
 8010f88:	6054      	str	r4, [r2, #4]
 8010f8a:	e7c7      	b.n	8010f1c <_free_r+0x28>
 8010f8c:	b003      	add	sp, #12
 8010f8e:	bd30      	pop	{r4, r5, pc}
 8010f90:	200002a4 	.word	0x200002a4

08010f94 <_malloc_r>:
 8010f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f96:	1ccd      	adds	r5, r1, #3
 8010f98:	f025 0503 	bic.w	r5, r5, #3
 8010f9c:	3508      	adds	r5, #8
 8010f9e:	2d0c      	cmp	r5, #12
 8010fa0:	bf38      	it	cc
 8010fa2:	250c      	movcc	r5, #12
 8010fa4:	2d00      	cmp	r5, #0
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	db01      	blt.n	8010fae <_malloc_r+0x1a>
 8010faa:	42a9      	cmp	r1, r5
 8010fac:	d903      	bls.n	8010fb6 <_malloc_r+0x22>
 8010fae:	230c      	movs	r3, #12
 8010fb0:	6033      	str	r3, [r6, #0]
 8010fb2:	2000      	movs	r0, #0
 8010fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb6:	f000 f86b 	bl	8011090 <__malloc_lock>
 8010fba:	4921      	ldr	r1, [pc, #132]	; (8011040 <_malloc_r+0xac>)
 8010fbc:	680a      	ldr	r2, [r1, #0]
 8010fbe:	4614      	mov	r4, r2
 8010fc0:	b99c      	cbnz	r4, 8010fea <_malloc_r+0x56>
 8010fc2:	4f20      	ldr	r7, [pc, #128]	; (8011044 <_malloc_r+0xb0>)
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	b923      	cbnz	r3, 8010fd2 <_malloc_r+0x3e>
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f000 f83c 	bl	8011048 <_sbrk_r>
 8010fd0:	6038      	str	r0, [r7, #0]
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	f000 f837 	bl	8011048 <_sbrk_r>
 8010fda:	1c43      	adds	r3, r0, #1
 8010fdc:	d123      	bne.n	8011026 <_malloc_r+0x92>
 8010fde:	230c      	movs	r3, #12
 8010fe0:	6033      	str	r3, [r6, #0]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f000 f85a 	bl	801109c <__malloc_unlock>
 8010fe8:	e7e3      	b.n	8010fb2 <_malloc_r+0x1e>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	1b5b      	subs	r3, r3, r5
 8010fee:	d417      	bmi.n	8011020 <_malloc_r+0x8c>
 8010ff0:	2b0b      	cmp	r3, #11
 8010ff2:	d903      	bls.n	8010ffc <_malloc_r+0x68>
 8010ff4:	6023      	str	r3, [r4, #0]
 8010ff6:	441c      	add	r4, r3
 8010ff8:	6025      	str	r5, [r4, #0]
 8010ffa:	e004      	b.n	8011006 <_malloc_r+0x72>
 8010ffc:	6863      	ldr	r3, [r4, #4]
 8010ffe:	42a2      	cmp	r2, r4
 8011000:	bf0c      	ite	eq
 8011002:	600b      	streq	r3, [r1, #0]
 8011004:	6053      	strne	r3, [r2, #4]
 8011006:	4630      	mov	r0, r6
 8011008:	f000 f848 	bl	801109c <__malloc_unlock>
 801100c:	f104 000b 	add.w	r0, r4, #11
 8011010:	1d23      	adds	r3, r4, #4
 8011012:	f020 0007 	bic.w	r0, r0, #7
 8011016:	1ac2      	subs	r2, r0, r3
 8011018:	d0cc      	beq.n	8010fb4 <_malloc_r+0x20>
 801101a:	1a1b      	subs	r3, r3, r0
 801101c:	50a3      	str	r3, [r4, r2]
 801101e:	e7c9      	b.n	8010fb4 <_malloc_r+0x20>
 8011020:	4622      	mov	r2, r4
 8011022:	6864      	ldr	r4, [r4, #4]
 8011024:	e7cc      	b.n	8010fc0 <_malloc_r+0x2c>
 8011026:	1cc4      	adds	r4, r0, #3
 8011028:	f024 0403 	bic.w	r4, r4, #3
 801102c:	42a0      	cmp	r0, r4
 801102e:	d0e3      	beq.n	8010ff8 <_malloc_r+0x64>
 8011030:	1a21      	subs	r1, r4, r0
 8011032:	4630      	mov	r0, r6
 8011034:	f000 f808 	bl	8011048 <_sbrk_r>
 8011038:	3001      	adds	r0, #1
 801103a:	d1dd      	bne.n	8010ff8 <_malloc_r+0x64>
 801103c:	e7cf      	b.n	8010fde <_malloc_r+0x4a>
 801103e:	bf00      	nop
 8011040:	200002a4 	.word	0x200002a4
 8011044:	200002a8 	.word	0x200002a8

08011048 <_sbrk_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d06      	ldr	r5, [pc, #24]	; (8011064 <_sbrk_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	602b      	str	r3, [r5, #0]
 8011054:	f7f1 f8d0 	bl	80021f8 <_sbrk>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_sbrk_r+0x1a>
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	b103      	cbz	r3, 8011062 <_sbrk_r+0x1a>
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20000e14 	.word	0x20000e14

08011068 <strncat>:
 8011068:	b530      	push	{r4, r5, lr}
 801106a:	4604      	mov	r4, r0
 801106c:	7825      	ldrb	r5, [r4, #0]
 801106e:	4623      	mov	r3, r4
 8011070:	3401      	adds	r4, #1
 8011072:	2d00      	cmp	r5, #0
 8011074:	d1fa      	bne.n	801106c <strncat+0x4>
 8011076:	3a01      	subs	r2, #1
 8011078:	d304      	bcc.n	8011084 <strncat+0x1c>
 801107a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801107e:	f803 4b01 	strb.w	r4, [r3], #1
 8011082:	b904      	cbnz	r4, 8011086 <strncat+0x1e>
 8011084:	bd30      	pop	{r4, r5, pc}
 8011086:	2a00      	cmp	r2, #0
 8011088:	d1f5      	bne.n	8011076 <strncat+0xe>
 801108a:	701a      	strb	r2, [r3, #0]
 801108c:	e7f3      	b.n	8011076 <strncat+0xe>
	...

08011090 <__malloc_lock>:
 8011090:	4801      	ldr	r0, [pc, #4]	; (8011098 <__malloc_lock+0x8>)
 8011092:	f000 b809 	b.w	80110a8 <__retarget_lock_acquire_recursive>
 8011096:	bf00      	nop
 8011098:	20000e1c 	.word	0x20000e1c

0801109c <__malloc_unlock>:
 801109c:	4801      	ldr	r0, [pc, #4]	; (80110a4 <__malloc_unlock+0x8>)
 801109e:	f000 b804 	b.w	80110aa <__retarget_lock_release_recursive>
 80110a2:	bf00      	nop
 80110a4:	20000e1c 	.word	0x20000e1c

080110a8 <__retarget_lock_acquire_recursive>:
 80110a8:	4770      	bx	lr

080110aa <__retarget_lock_release_recursive>:
 80110aa:	4770      	bx	lr
 80110ac:	0000      	movs	r0, r0
	...

080110b0 <atan>:
 80110b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	ec55 4b10 	vmov	r4, r5, d0
 80110b8:	4bc3      	ldr	r3, [pc, #780]	; (80113c8 <atan+0x318>)
 80110ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110be:	429e      	cmp	r6, r3
 80110c0:	46ab      	mov	fp, r5
 80110c2:	dd18      	ble.n	80110f6 <atan+0x46>
 80110c4:	4bc1      	ldr	r3, [pc, #772]	; (80113cc <atan+0x31c>)
 80110c6:	429e      	cmp	r6, r3
 80110c8:	dc01      	bgt.n	80110ce <atan+0x1e>
 80110ca:	d109      	bne.n	80110e0 <atan+0x30>
 80110cc:	b144      	cbz	r4, 80110e0 <atan+0x30>
 80110ce:	4622      	mov	r2, r4
 80110d0:	462b      	mov	r3, r5
 80110d2:	4620      	mov	r0, r4
 80110d4:	4629      	mov	r1, r5
 80110d6:	f7ef f87d 	bl	80001d4 <__adddf3>
 80110da:	4604      	mov	r4, r0
 80110dc:	460d      	mov	r5, r1
 80110de:	e006      	b.n	80110ee <atan+0x3e>
 80110e0:	f1bb 0f00 	cmp.w	fp, #0
 80110e4:	f300 8131 	bgt.w	801134a <atan+0x29a>
 80110e8:	a59b      	add	r5, pc, #620	; (adr r5, 8011358 <atan+0x2a8>)
 80110ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80110ee:	ec45 4b10 	vmov	d0, r4, r5
 80110f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f6:	4bb6      	ldr	r3, [pc, #728]	; (80113d0 <atan+0x320>)
 80110f8:	429e      	cmp	r6, r3
 80110fa:	dc14      	bgt.n	8011126 <atan+0x76>
 80110fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011100:	429e      	cmp	r6, r3
 8011102:	dc0d      	bgt.n	8011120 <atan+0x70>
 8011104:	a396      	add	r3, pc, #600	; (adr r3, 8011360 <atan+0x2b0>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	ee10 0a10 	vmov	r0, s0
 801110e:	4629      	mov	r1, r5
 8011110:	f7ef f860 	bl	80001d4 <__adddf3>
 8011114:	4baf      	ldr	r3, [pc, #700]	; (80113d4 <atan+0x324>)
 8011116:	2200      	movs	r2, #0
 8011118:	f7ef fca2 	bl	8000a60 <__aeabi_dcmpgt>
 801111c:	2800      	cmp	r0, #0
 801111e:	d1e6      	bne.n	80110ee <atan+0x3e>
 8011120:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011124:	e02b      	b.n	801117e <atan+0xce>
 8011126:	f000 f963 	bl	80113f0 <fabs>
 801112a:	4bab      	ldr	r3, [pc, #684]	; (80113d8 <atan+0x328>)
 801112c:	429e      	cmp	r6, r3
 801112e:	ec55 4b10 	vmov	r4, r5, d0
 8011132:	f300 80bf 	bgt.w	80112b4 <atan+0x204>
 8011136:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801113a:	429e      	cmp	r6, r3
 801113c:	f300 80a0 	bgt.w	8011280 <atan+0x1d0>
 8011140:	ee10 2a10 	vmov	r2, s0
 8011144:	ee10 0a10 	vmov	r0, s0
 8011148:	462b      	mov	r3, r5
 801114a:	4629      	mov	r1, r5
 801114c:	f7ef f842 	bl	80001d4 <__adddf3>
 8011150:	4ba0      	ldr	r3, [pc, #640]	; (80113d4 <atan+0x324>)
 8011152:	2200      	movs	r2, #0
 8011154:	f7ef f83c 	bl	80001d0 <__aeabi_dsub>
 8011158:	2200      	movs	r2, #0
 801115a:	4606      	mov	r6, r0
 801115c:	460f      	mov	r7, r1
 801115e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011162:	4620      	mov	r0, r4
 8011164:	4629      	mov	r1, r5
 8011166:	f7ef f835 	bl	80001d4 <__adddf3>
 801116a:	4602      	mov	r2, r0
 801116c:	460b      	mov	r3, r1
 801116e:	4630      	mov	r0, r6
 8011170:	4639      	mov	r1, r7
 8011172:	f7ef fb0f 	bl	8000794 <__aeabi_ddiv>
 8011176:	f04f 0a00 	mov.w	sl, #0
 801117a:	4604      	mov	r4, r0
 801117c:	460d      	mov	r5, r1
 801117e:	4622      	mov	r2, r4
 8011180:	462b      	mov	r3, r5
 8011182:	4620      	mov	r0, r4
 8011184:	4629      	mov	r1, r5
 8011186:	f7ef f9db 	bl	8000540 <__aeabi_dmul>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4680      	mov	r8, r0
 8011190:	4689      	mov	r9, r1
 8011192:	f7ef f9d5 	bl	8000540 <__aeabi_dmul>
 8011196:	a374      	add	r3, pc, #464	; (adr r3, 8011368 <atan+0x2b8>)
 8011198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119c:	4606      	mov	r6, r0
 801119e:	460f      	mov	r7, r1
 80111a0:	f7ef f9ce 	bl	8000540 <__aeabi_dmul>
 80111a4:	a372      	add	r3, pc, #456	; (adr r3, 8011370 <atan+0x2c0>)
 80111a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111aa:	f7ef f813 	bl	80001d4 <__adddf3>
 80111ae:	4632      	mov	r2, r6
 80111b0:	463b      	mov	r3, r7
 80111b2:	f7ef f9c5 	bl	8000540 <__aeabi_dmul>
 80111b6:	a370      	add	r3, pc, #448	; (adr r3, 8011378 <atan+0x2c8>)
 80111b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111bc:	f7ef f80a 	bl	80001d4 <__adddf3>
 80111c0:	4632      	mov	r2, r6
 80111c2:	463b      	mov	r3, r7
 80111c4:	f7ef f9bc 	bl	8000540 <__aeabi_dmul>
 80111c8:	a36d      	add	r3, pc, #436	; (adr r3, 8011380 <atan+0x2d0>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	f7ef f801 	bl	80001d4 <__adddf3>
 80111d2:	4632      	mov	r2, r6
 80111d4:	463b      	mov	r3, r7
 80111d6:	f7ef f9b3 	bl	8000540 <__aeabi_dmul>
 80111da:	a36b      	add	r3, pc, #428	; (adr r3, 8011388 <atan+0x2d8>)
 80111dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e0:	f7ee fff8 	bl	80001d4 <__adddf3>
 80111e4:	4632      	mov	r2, r6
 80111e6:	463b      	mov	r3, r7
 80111e8:	f7ef f9aa 	bl	8000540 <__aeabi_dmul>
 80111ec:	a368      	add	r3, pc, #416	; (adr r3, 8011390 <atan+0x2e0>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ee ffef 	bl	80001d4 <__adddf3>
 80111f6:	4642      	mov	r2, r8
 80111f8:	464b      	mov	r3, r9
 80111fa:	f7ef f9a1 	bl	8000540 <__aeabi_dmul>
 80111fe:	a366      	add	r3, pc, #408	; (adr r3, 8011398 <atan+0x2e8>)
 8011200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011204:	4680      	mov	r8, r0
 8011206:	4689      	mov	r9, r1
 8011208:	4630      	mov	r0, r6
 801120a:	4639      	mov	r1, r7
 801120c:	f7ef f998 	bl	8000540 <__aeabi_dmul>
 8011210:	a363      	add	r3, pc, #396	; (adr r3, 80113a0 <atan+0x2f0>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	f7ee ffdb 	bl	80001d0 <__aeabi_dsub>
 801121a:	4632      	mov	r2, r6
 801121c:	463b      	mov	r3, r7
 801121e:	f7ef f98f 	bl	8000540 <__aeabi_dmul>
 8011222:	a361      	add	r3, pc, #388	; (adr r3, 80113a8 <atan+0x2f8>)
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	f7ee ffd2 	bl	80001d0 <__aeabi_dsub>
 801122c:	4632      	mov	r2, r6
 801122e:	463b      	mov	r3, r7
 8011230:	f7ef f986 	bl	8000540 <__aeabi_dmul>
 8011234:	a35e      	add	r3, pc, #376	; (adr r3, 80113b0 <atan+0x300>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	f7ee ffc9 	bl	80001d0 <__aeabi_dsub>
 801123e:	4632      	mov	r2, r6
 8011240:	463b      	mov	r3, r7
 8011242:	f7ef f97d 	bl	8000540 <__aeabi_dmul>
 8011246:	a35c      	add	r3, pc, #368	; (adr r3, 80113b8 <atan+0x308>)
 8011248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124c:	f7ee ffc0 	bl	80001d0 <__aeabi_dsub>
 8011250:	4632      	mov	r2, r6
 8011252:	463b      	mov	r3, r7
 8011254:	f7ef f974 	bl	8000540 <__aeabi_dmul>
 8011258:	4602      	mov	r2, r0
 801125a:	460b      	mov	r3, r1
 801125c:	4640      	mov	r0, r8
 801125e:	4649      	mov	r1, r9
 8011260:	f7ee ffb8 	bl	80001d4 <__adddf3>
 8011264:	4622      	mov	r2, r4
 8011266:	462b      	mov	r3, r5
 8011268:	f7ef f96a 	bl	8000540 <__aeabi_dmul>
 801126c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8011270:	4602      	mov	r2, r0
 8011272:	460b      	mov	r3, r1
 8011274:	d14b      	bne.n	801130e <atan+0x25e>
 8011276:	4620      	mov	r0, r4
 8011278:	4629      	mov	r1, r5
 801127a:	f7ee ffa9 	bl	80001d0 <__aeabi_dsub>
 801127e:	e72c      	b.n	80110da <atan+0x2a>
 8011280:	ee10 0a10 	vmov	r0, s0
 8011284:	4b53      	ldr	r3, [pc, #332]	; (80113d4 <atan+0x324>)
 8011286:	2200      	movs	r2, #0
 8011288:	4629      	mov	r1, r5
 801128a:	f7ee ffa1 	bl	80001d0 <__aeabi_dsub>
 801128e:	4b51      	ldr	r3, [pc, #324]	; (80113d4 <atan+0x324>)
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	2200      	movs	r2, #0
 8011296:	4620      	mov	r0, r4
 8011298:	4629      	mov	r1, r5
 801129a:	f7ee ff9b 	bl	80001d4 <__adddf3>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4630      	mov	r0, r6
 80112a4:	4639      	mov	r1, r7
 80112a6:	f7ef fa75 	bl	8000794 <__aeabi_ddiv>
 80112aa:	f04f 0a01 	mov.w	sl, #1
 80112ae:	4604      	mov	r4, r0
 80112b0:	460d      	mov	r5, r1
 80112b2:	e764      	b.n	801117e <atan+0xce>
 80112b4:	4b49      	ldr	r3, [pc, #292]	; (80113dc <atan+0x32c>)
 80112b6:	429e      	cmp	r6, r3
 80112b8:	da1d      	bge.n	80112f6 <atan+0x246>
 80112ba:	ee10 0a10 	vmov	r0, s0
 80112be:	4b48      	ldr	r3, [pc, #288]	; (80113e0 <atan+0x330>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	4629      	mov	r1, r5
 80112c4:	f7ee ff84 	bl	80001d0 <__aeabi_dsub>
 80112c8:	4b45      	ldr	r3, [pc, #276]	; (80113e0 <atan+0x330>)
 80112ca:	4606      	mov	r6, r0
 80112cc:	460f      	mov	r7, r1
 80112ce:	2200      	movs	r2, #0
 80112d0:	4620      	mov	r0, r4
 80112d2:	4629      	mov	r1, r5
 80112d4:	f7ef f934 	bl	8000540 <__aeabi_dmul>
 80112d8:	4b3e      	ldr	r3, [pc, #248]	; (80113d4 <atan+0x324>)
 80112da:	2200      	movs	r2, #0
 80112dc:	f7ee ff7a 	bl	80001d4 <__adddf3>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	4630      	mov	r0, r6
 80112e6:	4639      	mov	r1, r7
 80112e8:	f7ef fa54 	bl	8000794 <__aeabi_ddiv>
 80112ec:	f04f 0a02 	mov.w	sl, #2
 80112f0:	4604      	mov	r4, r0
 80112f2:	460d      	mov	r5, r1
 80112f4:	e743      	b.n	801117e <atan+0xce>
 80112f6:	462b      	mov	r3, r5
 80112f8:	ee10 2a10 	vmov	r2, s0
 80112fc:	4939      	ldr	r1, [pc, #228]	; (80113e4 <atan+0x334>)
 80112fe:	2000      	movs	r0, #0
 8011300:	f7ef fa48 	bl	8000794 <__aeabi_ddiv>
 8011304:	f04f 0a03 	mov.w	sl, #3
 8011308:	4604      	mov	r4, r0
 801130a:	460d      	mov	r5, r1
 801130c:	e737      	b.n	801117e <atan+0xce>
 801130e:	4b36      	ldr	r3, [pc, #216]	; (80113e8 <atan+0x338>)
 8011310:	4e36      	ldr	r6, [pc, #216]	; (80113ec <atan+0x33c>)
 8011312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011316:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801131a:	e9da 2300 	ldrd	r2, r3, [sl]
 801131e:	f7ee ff57 	bl	80001d0 <__aeabi_dsub>
 8011322:	4622      	mov	r2, r4
 8011324:	462b      	mov	r3, r5
 8011326:	f7ee ff53 	bl	80001d0 <__aeabi_dsub>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011332:	f7ee ff4d 	bl	80001d0 <__aeabi_dsub>
 8011336:	f1bb 0f00 	cmp.w	fp, #0
 801133a:	4604      	mov	r4, r0
 801133c:	460d      	mov	r5, r1
 801133e:	f6bf aed6 	bge.w	80110ee <atan+0x3e>
 8011342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011346:	461d      	mov	r5, r3
 8011348:	e6d1      	b.n	80110ee <atan+0x3e>
 801134a:	a51d      	add	r5, pc, #116	; (adr r5, 80113c0 <atan+0x310>)
 801134c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011350:	e6cd      	b.n	80110ee <atan+0x3e>
 8011352:	bf00      	nop
 8011354:	f3af 8000 	nop.w
 8011358:	54442d18 	.word	0x54442d18
 801135c:	bff921fb 	.word	0xbff921fb
 8011360:	8800759c 	.word	0x8800759c
 8011364:	7e37e43c 	.word	0x7e37e43c
 8011368:	e322da11 	.word	0xe322da11
 801136c:	3f90ad3a 	.word	0x3f90ad3a
 8011370:	24760deb 	.word	0x24760deb
 8011374:	3fa97b4b 	.word	0x3fa97b4b
 8011378:	a0d03d51 	.word	0xa0d03d51
 801137c:	3fb10d66 	.word	0x3fb10d66
 8011380:	c54c206e 	.word	0xc54c206e
 8011384:	3fb745cd 	.word	0x3fb745cd
 8011388:	920083ff 	.word	0x920083ff
 801138c:	3fc24924 	.word	0x3fc24924
 8011390:	5555550d 	.word	0x5555550d
 8011394:	3fd55555 	.word	0x3fd55555
 8011398:	2c6a6c2f 	.word	0x2c6a6c2f
 801139c:	bfa2b444 	.word	0xbfa2b444
 80113a0:	52defd9a 	.word	0x52defd9a
 80113a4:	3fadde2d 	.word	0x3fadde2d
 80113a8:	af749a6d 	.word	0xaf749a6d
 80113ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80113b0:	fe231671 	.word	0xfe231671
 80113b4:	3fbc71c6 	.word	0x3fbc71c6
 80113b8:	9998ebc4 	.word	0x9998ebc4
 80113bc:	3fc99999 	.word	0x3fc99999
 80113c0:	54442d18 	.word	0x54442d18
 80113c4:	3ff921fb 	.word	0x3ff921fb
 80113c8:	440fffff 	.word	0x440fffff
 80113cc:	7ff00000 	.word	0x7ff00000
 80113d0:	3fdbffff 	.word	0x3fdbffff
 80113d4:	3ff00000 	.word	0x3ff00000
 80113d8:	3ff2ffff 	.word	0x3ff2ffff
 80113dc:	40038000 	.word	0x40038000
 80113e0:	3ff80000 	.word	0x3ff80000
 80113e4:	bff00000 	.word	0xbff00000
 80113e8:	08011d10 	.word	0x08011d10
 80113ec:	08011cf0 	.word	0x08011cf0

080113f0 <fabs>:
 80113f0:	ec51 0b10 	vmov	r0, r1, d0
 80113f4:	ee10 2a10 	vmov	r2, s0
 80113f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113fc:	ec43 2b10 	vmov	d0, r2, r3
 8011400:	4770      	bx	lr

08011402 <atan2>:
 8011402:	f000 b835 	b.w	8011470 <__ieee754_atan2>
	...

08011408 <sqrt>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	ed2d 8b02 	vpush	{d8}
 801140e:	ec55 4b10 	vmov	r4, r5, d0
 8011412:	f000 f8f7 	bl	8011604 <__ieee754_sqrt>
 8011416:	4b15      	ldr	r3, [pc, #84]	; (801146c <sqrt+0x64>)
 8011418:	eeb0 8a40 	vmov.f32	s16, s0
 801141c:	eef0 8a60 	vmov.f32	s17, s1
 8011420:	f993 3000 	ldrsb.w	r3, [r3]
 8011424:	3301      	adds	r3, #1
 8011426:	d019      	beq.n	801145c <sqrt+0x54>
 8011428:	4622      	mov	r2, r4
 801142a:	462b      	mov	r3, r5
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef fb20 	bl	8000a74 <__aeabi_dcmpun>
 8011434:	b990      	cbnz	r0, 801145c <sqrt+0x54>
 8011436:	2200      	movs	r2, #0
 8011438:	2300      	movs	r3, #0
 801143a:	4620      	mov	r0, r4
 801143c:	4629      	mov	r1, r5
 801143e:	f7ef faf1 	bl	8000a24 <__aeabi_dcmplt>
 8011442:	b158      	cbz	r0, 801145c <sqrt+0x54>
 8011444:	f7ff fd06 	bl	8010e54 <__errno>
 8011448:	2321      	movs	r3, #33	; 0x21
 801144a:	6003      	str	r3, [r0, #0]
 801144c:	2200      	movs	r2, #0
 801144e:	2300      	movs	r3, #0
 8011450:	4610      	mov	r0, r2
 8011452:	4619      	mov	r1, r3
 8011454:	f7ef f99e 	bl	8000794 <__aeabi_ddiv>
 8011458:	ec41 0b18 	vmov	d8, r0, r1
 801145c:	eeb0 0a48 	vmov.f32	s0, s16
 8011460:	eef0 0a68 	vmov.f32	s1, s17
 8011464:	ecbd 8b02 	vpop	{d8}
 8011468:	bd38      	pop	{r3, r4, r5, pc}
 801146a:	bf00      	nop
 801146c:	20000270 	.word	0x20000270

08011470 <__ieee754_atan2>:
 8011470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011474:	ec57 6b11 	vmov	r6, r7, d1
 8011478:	4273      	negs	r3, r6
 801147a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011600 <__ieee754_atan2+0x190>
 801147e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011482:	4333      	orrs	r3, r6
 8011484:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011488:	4573      	cmp	r3, lr
 801148a:	ec51 0b10 	vmov	r0, r1, d0
 801148e:	ee11 8a10 	vmov	r8, s2
 8011492:	d80a      	bhi.n	80114aa <__ieee754_atan2+0x3a>
 8011494:	4244      	negs	r4, r0
 8011496:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801149a:	4304      	orrs	r4, r0
 801149c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80114a0:	4574      	cmp	r4, lr
 80114a2:	ee10 9a10 	vmov	r9, s0
 80114a6:	468c      	mov	ip, r1
 80114a8:	d907      	bls.n	80114ba <__ieee754_atan2+0x4a>
 80114aa:	4632      	mov	r2, r6
 80114ac:	463b      	mov	r3, r7
 80114ae:	f7ee fe91 	bl	80001d4 <__adddf3>
 80114b2:	ec41 0b10 	vmov	d0, r0, r1
 80114b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80114be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114c2:	4334      	orrs	r4, r6
 80114c4:	d103      	bne.n	80114ce <__ieee754_atan2+0x5e>
 80114c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114ca:	f7ff bdf1 	b.w	80110b0 <atan>
 80114ce:	17bc      	asrs	r4, r7, #30
 80114d0:	f004 0402 	and.w	r4, r4, #2
 80114d4:	ea53 0909 	orrs.w	r9, r3, r9
 80114d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80114dc:	d107      	bne.n	80114ee <__ieee754_atan2+0x7e>
 80114de:	2c02      	cmp	r4, #2
 80114e0:	d060      	beq.n	80115a4 <__ieee754_atan2+0x134>
 80114e2:	2c03      	cmp	r4, #3
 80114e4:	d1e5      	bne.n	80114b2 <__ieee754_atan2+0x42>
 80114e6:	a142      	add	r1, pc, #264	; (adr r1, 80115f0 <__ieee754_atan2+0x180>)
 80114e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ec:	e7e1      	b.n	80114b2 <__ieee754_atan2+0x42>
 80114ee:	ea52 0808 	orrs.w	r8, r2, r8
 80114f2:	d106      	bne.n	8011502 <__ieee754_atan2+0x92>
 80114f4:	f1bc 0f00 	cmp.w	ip, #0
 80114f8:	da5f      	bge.n	80115ba <__ieee754_atan2+0x14a>
 80114fa:	a13f      	add	r1, pc, #252	; (adr r1, 80115f8 <__ieee754_atan2+0x188>)
 80114fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011500:	e7d7      	b.n	80114b2 <__ieee754_atan2+0x42>
 8011502:	4572      	cmp	r2, lr
 8011504:	d10f      	bne.n	8011526 <__ieee754_atan2+0xb6>
 8011506:	4293      	cmp	r3, r2
 8011508:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801150c:	d107      	bne.n	801151e <__ieee754_atan2+0xae>
 801150e:	2c02      	cmp	r4, #2
 8011510:	d84c      	bhi.n	80115ac <__ieee754_atan2+0x13c>
 8011512:	4b35      	ldr	r3, [pc, #212]	; (80115e8 <__ieee754_atan2+0x178>)
 8011514:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011518:	e9d4 0100 	ldrd	r0, r1, [r4]
 801151c:	e7c9      	b.n	80114b2 <__ieee754_atan2+0x42>
 801151e:	2c02      	cmp	r4, #2
 8011520:	d848      	bhi.n	80115b4 <__ieee754_atan2+0x144>
 8011522:	4b32      	ldr	r3, [pc, #200]	; (80115ec <__ieee754_atan2+0x17c>)
 8011524:	e7f6      	b.n	8011514 <__ieee754_atan2+0xa4>
 8011526:	4573      	cmp	r3, lr
 8011528:	d0e4      	beq.n	80114f4 <__ieee754_atan2+0x84>
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011530:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011534:	da1e      	bge.n	8011574 <__ieee754_atan2+0x104>
 8011536:	2f00      	cmp	r7, #0
 8011538:	da01      	bge.n	801153e <__ieee754_atan2+0xce>
 801153a:	323c      	adds	r2, #60	; 0x3c
 801153c:	db1e      	blt.n	801157c <__ieee754_atan2+0x10c>
 801153e:	4632      	mov	r2, r6
 8011540:	463b      	mov	r3, r7
 8011542:	f7ef f927 	bl	8000794 <__aeabi_ddiv>
 8011546:	ec41 0b10 	vmov	d0, r0, r1
 801154a:	f7ff ff51 	bl	80113f0 <fabs>
 801154e:	f7ff fdaf 	bl	80110b0 <atan>
 8011552:	ec51 0b10 	vmov	r0, r1, d0
 8011556:	2c01      	cmp	r4, #1
 8011558:	d013      	beq.n	8011582 <__ieee754_atan2+0x112>
 801155a:	2c02      	cmp	r4, #2
 801155c:	d015      	beq.n	801158a <__ieee754_atan2+0x11a>
 801155e:	2c00      	cmp	r4, #0
 8011560:	d0a7      	beq.n	80114b2 <__ieee754_atan2+0x42>
 8011562:	a319      	add	r3, pc, #100	; (adr r3, 80115c8 <__ieee754_atan2+0x158>)
 8011564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011568:	f7ee fe32 	bl	80001d0 <__aeabi_dsub>
 801156c:	a318      	add	r3, pc, #96	; (adr r3, 80115d0 <__ieee754_atan2+0x160>)
 801156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011572:	e014      	b.n	801159e <__ieee754_atan2+0x12e>
 8011574:	a118      	add	r1, pc, #96	; (adr r1, 80115d8 <__ieee754_atan2+0x168>)
 8011576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801157a:	e7ec      	b.n	8011556 <__ieee754_atan2+0xe6>
 801157c:	2000      	movs	r0, #0
 801157e:	2100      	movs	r1, #0
 8011580:	e7e9      	b.n	8011556 <__ieee754_atan2+0xe6>
 8011582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011586:	4619      	mov	r1, r3
 8011588:	e793      	b.n	80114b2 <__ieee754_atan2+0x42>
 801158a:	a30f      	add	r3, pc, #60	; (adr r3, 80115c8 <__ieee754_atan2+0x158>)
 801158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011590:	f7ee fe1e 	bl	80001d0 <__aeabi_dsub>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	a10d      	add	r1, pc, #52	; (adr r1, 80115d0 <__ieee754_atan2+0x160>)
 801159a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801159e:	f7ee fe17 	bl	80001d0 <__aeabi_dsub>
 80115a2:	e786      	b.n	80114b2 <__ieee754_atan2+0x42>
 80115a4:	a10a      	add	r1, pc, #40	; (adr r1, 80115d0 <__ieee754_atan2+0x160>)
 80115a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115aa:	e782      	b.n	80114b2 <__ieee754_atan2+0x42>
 80115ac:	a10c      	add	r1, pc, #48	; (adr r1, 80115e0 <__ieee754_atan2+0x170>)
 80115ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115b2:	e77e      	b.n	80114b2 <__ieee754_atan2+0x42>
 80115b4:	2000      	movs	r0, #0
 80115b6:	2100      	movs	r1, #0
 80115b8:	e77b      	b.n	80114b2 <__ieee754_atan2+0x42>
 80115ba:	a107      	add	r1, pc, #28	; (adr r1, 80115d8 <__ieee754_atan2+0x168>)
 80115bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c0:	e777      	b.n	80114b2 <__ieee754_atan2+0x42>
 80115c2:	bf00      	nop
 80115c4:	f3af 8000 	nop.w
 80115c8:	33145c07 	.word	0x33145c07
 80115cc:	3ca1a626 	.word	0x3ca1a626
 80115d0:	54442d18 	.word	0x54442d18
 80115d4:	400921fb 	.word	0x400921fb
 80115d8:	54442d18 	.word	0x54442d18
 80115dc:	3ff921fb 	.word	0x3ff921fb
 80115e0:	54442d18 	.word	0x54442d18
 80115e4:	3fe921fb 	.word	0x3fe921fb
 80115e8:	08011d30 	.word	0x08011d30
 80115ec:	08011d48 	.word	0x08011d48
 80115f0:	54442d18 	.word	0x54442d18
 80115f4:	c00921fb 	.word	0xc00921fb
 80115f8:	54442d18 	.word	0x54442d18
 80115fc:	bff921fb 	.word	0xbff921fb
 8011600:	7ff00000 	.word	0x7ff00000

08011604 <__ieee754_sqrt>:
 8011604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011608:	ec55 4b10 	vmov	r4, r5, d0
 801160c:	4e56      	ldr	r6, [pc, #344]	; (8011768 <__ieee754_sqrt+0x164>)
 801160e:	43ae      	bics	r6, r5
 8011610:	ee10 0a10 	vmov	r0, s0
 8011614:	ee10 3a10 	vmov	r3, s0
 8011618:	4629      	mov	r1, r5
 801161a:	462a      	mov	r2, r5
 801161c:	d110      	bne.n	8011640 <__ieee754_sqrt+0x3c>
 801161e:	ee10 2a10 	vmov	r2, s0
 8011622:	462b      	mov	r3, r5
 8011624:	f7ee ff8c 	bl	8000540 <__aeabi_dmul>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4620      	mov	r0, r4
 801162e:	4629      	mov	r1, r5
 8011630:	f7ee fdd0 	bl	80001d4 <__adddf3>
 8011634:	4604      	mov	r4, r0
 8011636:	460d      	mov	r5, r1
 8011638:	ec45 4b10 	vmov	d0, r4, r5
 801163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011640:	2d00      	cmp	r5, #0
 8011642:	dc10      	bgt.n	8011666 <__ieee754_sqrt+0x62>
 8011644:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011648:	4330      	orrs	r0, r6
 801164a:	d0f5      	beq.n	8011638 <__ieee754_sqrt+0x34>
 801164c:	b15d      	cbz	r5, 8011666 <__ieee754_sqrt+0x62>
 801164e:	ee10 2a10 	vmov	r2, s0
 8011652:	462b      	mov	r3, r5
 8011654:	ee10 0a10 	vmov	r0, s0
 8011658:	f7ee fdba 	bl	80001d0 <__aeabi_dsub>
 801165c:	4602      	mov	r2, r0
 801165e:	460b      	mov	r3, r1
 8011660:	f7ef f898 	bl	8000794 <__aeabi_ddiv>
 8011664:	e7e6      	b.n	8011634 <__ieee754_sqrt+0x30>
 8011666:	1509      	asrs	r1, r1, #20
 8011668:	d076      	beq.n	8011758 <__ieee754_sqrt+0x154>
 801166a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801166e:	07ce      	lsls	r6, r1, #31
 8011670:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011674:	bf5e      	ittt	pl
 8011676:	0fda      	lsrpl	r2, r3, #31
 8011678:	005b      	lslpl	r3, r3, #1
 801167a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801167e:	0fda      	lsrs	r2, r3, #31
 8011680:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011684:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011688:	2000      	movs	r0, #0
 801168a:	106d      	asrs	r5, r5, #1
 801168c:	005b      	lsls	r3, r3, #1
 801168e:	f04f 0e16 	mov.w	lr, #22
 8011692:	4684      	mov	ip, r0
 8011694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011698:	eb0c 0401 	add.w	r4, ip, r1
 801169c:	4294      	cmp	r4, r2
 801169e:	bfde      	ittt	le
 80116a0:	1b12      	suble	r2, r2, r4
 80116a2:	eb04 0c01 	addle.w	ip, r4, r1
 80116a6:	1840      	addle	r0, r0, r1
 80116a8:	0052      	lsls	r2, r2, #1
 80116aa:	f1be 0e01 	subs.w	lr, lr, #1
 80116ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80116b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80116ba:	d1ed      	bne.n	8011698 <__ieee754_sqrt+0x94>
 80116bc:	4671      	mov	r1, lr
 80116be:	2720      	movs	r7, #32
 80116c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80116c4:	4562      	cmp	r2, ip
 80116c6:	eb04 060e 	add.w	r6, r4, lr
 80116ca:	dc02      	bgt.n	80116d2 <__ieee754_sqrt+0xce>
 80116cc:	d113      	bne.n	80116f6 <__ieee754_sqrt+0xf2>
 80116ce:	429e      	cmp	r6, r3
 80116d0:	d811      	bhi.n	80116f6 <__ieee754_sqrt+0xf2>
 80116d2:	2e00      	cmp	r6, #0
 80116d4:	eb06 0e04 	add.w	lr, r6, r4
 80116d8:	da43      	bge.n	8011762 <__ieee754_sqrt+0x15e>
 80116da:	f1be 0f00 	cmp.w	lr, #0
 80116de:	db40      	blt.n	8011762 <__ieee754_sqrt+0x15e>
 80116e0:	f10c 0801 	add.w	r8, ip, #1
 80116e4:	eba2 020c 	sub.w	r2, r2, ip
 80116e8:	429e      	cmp	r6, r3
 80116ea:	bf88      	it	hi
 80116ec:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80116f0:	1b9b      	subs	r3, r3, r6
 80116f2:	4421      	add	r1, r4
 80116f4:	46c4      	mov	ip, r8
 80116f6:	0052      	lsls	r2, r2, #1
 80116f8:	3f01      	subs	r7, #1
 80116fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80116fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011702:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011706:	d1dd      	bne.n	80116c4 <__ieee754_sqrt+0xc0>
 8011708:	4313      	orrs	r3, r2
 801170a:	d006      	beq.n	801171a <__ieee754_sqrt+0x116>
 801170c:	1c4c      	adds	r4, r1, #1
 801170e:	bf13      	iteet	ne
 8011710:	3101      	addne	r1, #1
 8011712:	3001      	addeq	r0, #1
 8011714:	4639      	moveq	r1, r7
 8011716:	f021 0101 	bicne.w	r1, r1, #1
 801171a:	1043      	asrs	r3, r0, #1
 801171c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011720:	0849      	lsrs	r1, r1, #1
 8011722:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011726:	07c2      	lsls	r2, r0, #31
 8011728:	bf48      	it	mi
 801172a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801172e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011732:	460c      	mov	r4, r1
 8011734:	463d      	mov	r5, r7
 8011736:	e77f      	b.n	8011638 <__ieee754_sqrt+0x34>
 8011738:	0ada      	lsrs	r2, r3, #11
 801173a:	3815      	subs	r0, #21
 801173c:	055b      	lsls	r3, r3, #21
 801173e:	2a00      	cmp	r2, #0
 8011740:	d0fa      	beq.n	8011738 <__ieee754_sqrt+0x134>
 8011742:	02d7      	lsls	r7, r2, #11
 8011744:	d50a      	bpl.n	801175c <__ieee754_sqrt+0x158>
 8011746:	f1c1 0420 	rsb	r4, r1, #32
 801174a:	fa23 f404 	lsr.w	r4, r3, r4
 801174e:	1e4d      	subs	r5, r1, #1
 8011750:	408b      	lsls	r3, r1
 8011752:	4322      	orrs	r2, r4
 8011754:	1b41      	subs	r1, r0, r5
 8011756:	e788      	b.n	801166a <__ieee754_sqrt+0x66>
 8011758:	4608      	mov	r0, r1
 801175a:	e7f0      	b.n	801173e <__ieee754_sqrt+0x13a>
 801175c:	0052      	lsls	r2, r2, #1
 801175e:	3101      	adds	r1, #1
 8011760:	e7ef      	b.n	8011742 <__ieee754_sqrt+0x13e>
 8011762:	46e0      	mov	r8, ip
 8011764:	e7be      	b.n	80116e4 <__ieee754_sqrt+0xe0>
 8011766:	bf00      	nop
 8011768:	7ff00000 	.word	0x7ff00000

0801176c <_init>:
 801176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176e:	bf00      	nop
 8011770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011772:	bc08      	pop	{r3}
 8011774:	469e      	mov	lr, r3
 8011776:	4770      	bx	lr

08011778 <_fini>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	bf00      	nop
 801177c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801177e:	bc08      	pop	{r3}
 8011780:	469e      	mov	lr, r3
 8011782:	4770      	bx	lr
