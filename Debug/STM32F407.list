
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed90  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f47c  0800f47c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f47c  0800f47c  0001f47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f484  0800f484  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f484  0800f484  0001f484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f488  0800f488  0001f488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  200001d8  0800f664  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800f664  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026737  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050e0  00000000  00000000  0004693f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0004ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  0004d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025db2  00000000  00000000  0004ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ade  00000000  00000000  00074b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d79d2  00000000  00000000  00099620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007460  00000000  00000000  00171048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ef00 	.word	0x0800ef00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800ef00 	.word	0x0800ef00

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e66:	f000 f853 	bl	8000f10 <read_one_digit_from_keyboard>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b23      	cmp	r3, #35	; 0x23
 8000e72:	d10a      	bne.n	8000e8a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000e74:	221e      	movs	r2, #30
 8000e76:	2100      	movs	r1, #0
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <read_digits+0xb0>)
 8000e7a:	f00d ff5d 	bl	800ed38 <memset>
		keyboard.read_digits_position = 0;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <read_digits+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <read_digits+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e8e:	d109      	bne.n	8000ea4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <read_digits+0xb0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <read_digits+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <read_digits+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d028      	beq.n	8000efc <read_digits+0xa0>
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b23      	cmp	r3, #35	; 0x23
 8000eae:	d025      	beq.n	8000efc <read_digits+0xa0>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8000eb4:	d022      	beq.n	8000efc <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <read_digits+0xb0>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <read_digits+0xb0>)
 8000ebc:	7f92      	ldrb	r2, [r2, #30]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dc11      	bgt.n	8000ee6 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <read_digits+0xb0>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4911      	ldr	r1, [pc, #68]	; (8000f0c <read_digits+0xb0>)
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <read_digits+0xb0>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <read_digits+0xb0>)
 8000ed4:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <read_digits+0xb0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <read_digits+0xb0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee4:	e00e      	b.n	8000f04 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <read_digits+0xb0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <read_digits+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <read_digits+0xb0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000efa:	e003      	b.n	8000f04 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <read_digits+0xb0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	77da      	strb	r2, [r3, #31]
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000020c 	.word	0x2000020c

08000f10 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	48cf      	ldr	r0, [pc, #828]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f22:	f004 fd05 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	48cc      	ldr	r0, [pc, #816]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f2e:	f004 fcff 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	48c9      	ldr	r0, [pc, #804]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f3a:	f004 fcf9 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	48c6      	ldr	r0, [pc, #792]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f46:	f004 fcf3 	bl	8005930 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	48c5      	ldr	r0, [pc, #788]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f50:	f004 fcd6 	bl	8005900 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d169      	bne.n	800102e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	48bf      	ldr	r0, [pc, #764]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f62:	f004 fce5 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	48bc      	ldr	r0, [pc, #752]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f6e:	f004 fcdf 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48b9      	ldr	r0, [pc, #740]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f7a:	f004 fcd9 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	48b6      	ldr	r0, [pc, #728]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f86:	f004 fcd3 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	48b5      	ldr	r0, [pc, #724]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f90:	f004 fcb6 	bl	8005900 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000f9a:	2331      	movs	r3, #49	; 0x31
 8000f9c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	48ae      	ldr	r0, [pc, #696]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f004 fcc3 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	48ab      	ldr	r0, [pc, #684]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f004 fcbd 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48aa      	ldr	r0, [pc, #680]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f004 fca0 	bl	8005900 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000fc6:	2334      	movs	r3, #52	; 0x34
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	48a3      	ldr	r0, [pc, #652]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f004 fcad 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fdc:	48a0      	ldr	r0, [pc, #640]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fde:	f004 fca7 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	489f      	ldr	r0, [pc, #636]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f004 fc8a 	bl	8005900 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000ff2:	2337      	movs	r3, #55	; 0x37
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	4898      	ldr	r0, [pc, #608]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f004 fc97 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	4895      	ldr	r0, [pc, #596]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800100a:	f004 fc91 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4894      	ldr	r0, [pc, #592]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001014:	f004 fc74 	bl	8005900 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800101e:	232a      	movs	r3, #42	; 0x2a
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800102a:	f004 fc81 	bl	8005930 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001036:	f004 fc7b 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	4887      	ldr	r0, [pc, #540]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001042:	f004 fc75 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4884      	ldr	r0, [pc, #528]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800104e:	f004 fc6f 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4881      	ldr	r0, [pc, #516]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800105a:	f004 fc69 	bl	8005930 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4880      	ldr	r0, [pc, #512]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001064:	f004 fc4c 	bl	8005900 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d169      	bne.n	8001142 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	487a      	ldr	r0, [pc, #488]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001076:	f004 fc5b 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4877      	ldr	r0, [pc, #476]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001082:	f004 fc55 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4874      	ldr	r0, [pc, #464]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800108e:	f004 fc4f 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4871      	ldr	r0, [pc, #452]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800109a:	f004 fc49 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4870      	ldr	r0, [pc, #448]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010a4:	f004 fc2c 	bl	8005900 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010ae:	2332      	movs	r3, #50	; 0x32
 80010b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4869      	ldr	r0, [pc, #420]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010ba:	f004 fc39 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	4866      	ldr	r0, [pc, #408]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010c6:	f004 fc33 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4865      	ldr	r0, [pc, #404]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f004 fc16 	bl	8005900 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80010da:	2335      	movs	r3, #53	; 0x35
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	485e      	ldr	r0, [pc, #376]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010e6:	f004 fc23 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	485b      	ldr	r0, [pc, #364]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010f2:	f004 fc1d 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	485a      	ldr	r0, [pc, #360]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f004 fc00 	bl	8005900 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001106:	2338      	movs	r3, #56	; 0x38
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	4853      	ldr	r0, [pc, #332]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001112:	f004 fc0d 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4850      	ldr	r0, [pc, #320]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800111e:	f004 fc07 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	484f      	ldr	r0, [pc, #316]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001128:	f004 fbea 	bl	8005900 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800113e:	f004 fbf7 	bl	8005930 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800114a:	f004 fbf1 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4842      	ldr	r0, [pc, #264]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001156:	f004 fbeb 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	483f      	ldr	r0, [pc, #252]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001162:	f004 fbe5 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	483c      	ldr	r0, [pc, #240]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800116e:	f004 fbdf 	bl	8005930 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	483c      	ldr	r0, [pc, #240]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001178:	f004 fbc2 	bl	8005900 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d169      	bne.n	8001256 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4835      	ldr	r0, [pc, #212]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800118a:	f004 fbd1 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4832      	ldr	r0, [pc, #200]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001196:	f004 fbcb 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011a2:	f004 fbc5 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	482c      	ldr	r0, [pc, #176]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f004 fbbf 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011b8:	f004 fba2 	bl	8005900 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011c2:	2333      	movs	r3, #51	; 0x33
 80011c4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ce:	f004 fbaf 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011da:	f004 fba9 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	4821      	ldr	r0, [pc, #132]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f004 fb8c 	bl	8005900 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80011ee:	2336      	movs	r3, #54	; 0x36
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011fa:	f004 fb99 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001206:	f004 fb93 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001210:	f004 fb76 	bl	8005900 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800121a:	2339      	movs	r3, #57	; 0x39
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001226:	f004 fb83 	bl	8005930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001232:	f004 fb7d 	bl	8005930 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 800123c:	f004 fb60 	bl	8005900 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001246:	2323      	movs	r3, #35	; 0x23
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001252:	f004 fb6d 	bl	8005930 <HAL_GPIO_WritePin>
	}
	return digit;
 8001256:	79fb      	ldrb	r3, [r7, #7]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40020400 	.word	0x40020400
 8001268:	40021000 	.word	0x40021000

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001272:	f004 f801 	bl	8005278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001276:	f000 f843 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127a:	f000 faf5 	bl	8001868 <MX_GPIO_Init>
  MX_I2S3_Init();
 800127e:	f000 f929 	bl	80014d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001282:	f000 f96b 	bl	800155c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001286:	f00d fa07 	bl	800e698 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800128a:	f000 fa2b 	bl	80016e4 <MX_TIM2_Init>
  MX_SPI2_Init();
 800128e:	f000 f99b 	bl	80015c8 <MX_SPI2_Init>
  MX_RNG_Init();
 8001292:	f000 f94f 	bl	8001534 <MX_RNG_Init>
  MX_TIM3_Init();
 8001296:	f000 fa73 	bl	8001780 <MX_TIM3_Init>
  MX_TIM1_Init();
 800129a:	f000 f9cb 	bl	8001634 <MX_TIM1_Init>
  MX_I2C3_Init();
 800129e:	f000 f8eb 	bl	8001478 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012a2:	f000 f8bb 	bl	800141c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012a6:	f000 f8ad 	bl	8001404 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012aa:	f001 fa0d 	bl	80026c8 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fbb0 	bl	8002a14 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012b4:	2003      	movs	r0, #3
 80012b6:	f001 f9a9 	bl	800260c <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f001 fbaa 	bl	8002a14 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 fa71 	bl	80037ac <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f001 fba2 	bl	8002a14 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <main+0x8c>)
 80012d2:	f009 faa7 	bl	800a824 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <main+0x8c>)
 80012da:	f009 fb13 	bl	800a904 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <main+0x90>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 80012e4:	f003 fd46 	bl	8004d74 <detect_all_sensors_and_init>
  measure_sensors();
 80012e8:	f003 fd64 	bl	8004db4 <measure_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 80012ec:	f001 fcdc 	bl	8002ca8 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012f0:	f00d f9f8 	bl	800e6e4 <MX_USB_HOST_Process>
	 menu();
 80012f4:	e7fa      	b.n	80012ec <main+0x80>
 80012f6:	bf00      	nop
 80012f8:	20000334 	.word	0x20000334
 80012fc:	2000020c 	.word	0x2000020c

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b098      	sub	sp, #96	; 0x60
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130a:	2230      	movs	r2, #48	; 0x30
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00d fd12 	bl	800ed38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <SystemClock_Config+0xfc>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <SystemClock_Config+0xfc>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <SystemClock_Config+0xfc>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <SystemClock_Config+0x100>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <SystemClock_Config+0x100>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <SystemClock_Config+0x100>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136a:	2301      	movs	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001378:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137e:	2308      	movs	r3, #8
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001382:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800138c:	2307      	movs	r3, #7
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001394:	4618      	mov	r0, r3
 8001396:	f008 f937 	bl	8009608 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013a0:	f000 fbca 	bl	8001b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2105      	movs	r1, #5
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fb98 	bl	8009af8 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ce:	f000 fbb3 	bl	8001b38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013d6:	23c0      	movs	r3, #192	; 0xc0
 80013d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fd70 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013ee:	f000 fba3 	bl	8001b38 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3760      	adds	r7, #96	; 0x60
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	201c      	movs	r0, #28
 800140e:	f004 f8a4 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001412:	201c      	movs	r0, #28
 8001414:	f004 f8bd 	bl	8005592 <HAL_NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_I2C2_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <MX_I2C2_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_I2C2_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_I2C2_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_I2C2_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_I2C2_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_I2C2_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_I2C2_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_I2C2_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_I2C2_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_I2C2_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_I2C2_Init+0x50>)
 800145a:	f006 f801 	bl	8007460 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 fb68 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002e0 	.word	0x200002e0
 8001470:	40005800 	.word	0x40005800
 8001474:	000186a0 	.word	0x000186a0

08001478 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C3_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C3_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C3_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C3_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C3_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C3_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C3_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C3_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C3_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C3_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C3_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C3_Init+0x50>)
 80014b6:	f005 ffd3 	bl	8007460 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014c0:	f000 fb3a 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000234 	.word	0x20000234
 80014cc:	40005c00 	.word	0x40005c00
 80014d0:	000186a0 	.word	0x000186a0

080014d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_I2S3_Init+0x54>)
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <MX_I2S3_Init+0x58>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2S3_Init+0x54>)
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_I2S3_Init+0x54>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_I2S3_Init+0x54>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_I2S3_Init+0x54>)
 80014f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_I2S3_Init+0x54>)
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <MX_I2S3_Init+0x5c>)
 80014fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_I2S3_Init+0x54>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_I2S3_Init+0x54>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_I2S3_Init+0x54>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_I2S3_Init+0x54>)
 8001514:	f007 fbd8 	bl	8008cc8 <HAL_I2S_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800151e:	f000 fb0b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000474 	.word	0x20000474
 800152c:	40003c00 	.word	0x40003c00
 8001530:	00017700 	.word	0x00017700

08001534 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_RNG_Init+0x20>)
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <MX_RNG_Init+0x24>)
 800153c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_RNG_Init+0x20>)
 8001540:	f008 fe02 	bl	800a148 <HAL_RNG_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800154a:	f000 faf5 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200003c4 	.word	0x200003c4
 8001558:	50060800 	.word	0x50060800

0800155c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <MX_SPI1_Init+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800156c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015a8:	220a      	movs	r2, #10
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_SPI1_Init+0x64>)
 80015ae:	f008 fe59 	bl	800a264 <HAL_SPI_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b8:	f000 fabe 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200003d4 	.word	0x200003d4
 80015c4:	40013000 	.word	0x40013000

080015c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_SPI2_Init+0x64>)
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <MX_SPI2_Init+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI2_Init+0x64>)
 80015d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI2_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_SPI2_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI2_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI2_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI2_Init+0x64>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI2_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_SPI2_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI2_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_SPI2_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI2_Init+0x64>)
 8001614:	220a      	movs	r2, #10
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_SPI2_Init+0x64>)
 800161a:	f008 fe23 	bl	800a264 <HAL_SPI_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001624:	f000 fa88 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000288 	.word	0x20000288
 8001630:	40003800 	.word	0x40003800

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00d fb78 	bl	800ed38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_TIM1_Init+0xa8>)
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <MX_TIM1_Init+0xac>)
 8001654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_TIM1_Init+0xa8>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_TIM1_Init+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_TIM1_Init+0xa8>)
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_TIM1_Init+0xa8>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM1_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_TIM1_Init+0xa8>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800167c:	2301      	movs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_TIM1_Init+0xa8>)
 80016a8:	f009 fa93 	bl	800abd2 <HAL_TIM_Encoder_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016b2:	f000 fa41 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_TIM1_Init+0xa8>)
 80016c4:	f00a f8f8 	bl	800b8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016ce:	f000 fa33 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000037c 	.word	0x2000037c
 80016e0:	40010000 	.word	0x40010000

080016e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_TIM2_Init+0x98>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_TIM2_Init+0x98>)
 800170a:	f240 3247 	movw	r2, #839	; 0x347
 800170e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM2_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_TIM2_Init+0x98>)
 8001718:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800171c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_TIM2_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_TIM2_Init+0x98>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <MX_TIM2_Init+0x98>)
 800172c:	f009 f82a 	bl	800a784 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001736:	f000 f9ff 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM2_Init+0x98>)
 8001748:	f009 fcb0 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001752:	f000 f9f1 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001756:	2310      	movs	r3, #16
 8001758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM2_Init+0x98>)
 8001764:	f00a f8a8 	bl	800b8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176e:	f000 f9e3 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000042c 	.word	0x2000042c

08001780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017b2:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <MX_TIM3_Init+0xe4>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017b8:	f640 0233 	movw	r2, #2099	; 0x833
 80017bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017da:	f008 ffd3 	bl	800a784 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017e4:	f000 f9a8 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	4619      	mov	r1, r3
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <MX_TIM3_Init+0xe0>)
 80017f6:	f009 fc59 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001800:	f000 f99a 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001804:	4816      	ldr	r0, [pc, #88]	; (8001860 <MX_TIM3_Init+0xe0>)
 8001806:	f009 f98b 	bl	800ab20 <HAL_TIM_PWM_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001810:	f000 f992 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	4619      	mov	r1, r3
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <MX_TIM3_Init+0xe0>)
 8001824:	f00a f848 	bl	800b8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800182e:	f000 f983 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001832:	2360      	movs	r3, #96	; 0x60
 8001834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM3_Init+0xe0>)
 800184a:	f009 fb71 	bl	800af30 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001854:	f000 f970 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000334 	.word	0x20000334
 8001864:	40000400 	.word	0x40000400

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	4ba6      	ldr	r3, [pc, #664]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4aa5      	ldr	r2, [pc, #660]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	4b9f      	ldr	r3, [pc, #636]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a9e      	ldr	r2, [pc, #632]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b9c      	ldr	r3, [pc, #624]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b98      	ldr	r3, [pc, #608]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a97      	ldr	r2, [pc, #604]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b95      	ldr	r3, [pc, #596]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a89      	ldr	r2, [pc, #548]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b87      	ldr	r3, [pc, #540]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a82      	ldr	r2, [pc, #520]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b80      	ldr	r3, [pc, #512]	; (8001b1c <MX_GPIO_Init+0x2b4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	217c      	movs	r1, #124	; 0x7c
 800192a:	487d      	ldr	r0, [pc, #500]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 800192c:	f004 f800 	bl	8005930 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	2101      	movs	r1, #1
 8001934:	487b      	ldr	r0, [pc, #492]	; (8001b24 <MX_GPIO_Init+0x2bc>)
 8001936:	f003 fffb 	bl	8005930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800193a:	2200      	movs	r2, #0
 800193c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001940:	4879      	ldr	r0, [pc, #484]	; (8001b28 <MX_GPIO_Init+0x2c0>)
 8001942:	f003 fff5 	bl	8005930 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800194c:	4875      	ldr	r0, [pc, #468]	; (8001b24 <MX_GPIO_Init+0x2bc>)
 800194e:	f003 ffef 	bl	8005930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001958:	4874      	ldr	r0, [pc, #464]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 800195a:	f003 ffe9 	bl	8005930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800195e:	2374      	movs	r3, #116	; 0x74
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	486a      	ldr	r0, [pc, #424]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 8001976:	f003 fe27 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800197a:	2308      	movs	r3, #8
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4863      	ldr	r0, [pc, #396]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 8001992:	f003 fe19 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	485e      	ldr	r0, [pc, #376]	; (8001b24 <MX_GPIO_Init+0x2bc>)
 80019ac:	f003 fe0c 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019b0:	f640 0341 	movw	r3, #2113	; 0x841
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4856      	ldr	r0, [pc, #344]	; (8001b24 <MX_GPIO_Init+0x2bc>)
 80019ca:	f003 fdfd 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019ce:	2308      	movs	r3, #8
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019de:	2305      	movs	r3, #5
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	484e      	ldr	r0, [pc, #312]	; (8001b24 <MX_GPIO_Init+0x2bc>)
 80019ea:	f003 fded 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x2c8>)
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	484c      	ldr	r0, [pc, #304]	; (8001b34 <MX_GPIO_Init+0x2cc>)
 8001a02:	f003 fde1 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a06:	2304      	movs	r3, #4
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4844      	ldr	r0, [pc, #272]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 8001a1a:	f003 fdd5 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a1e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	483b      	ldr	r0, [pc, #236]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 8001a34:	f003 fdc8 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a38:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4837      	ldr	r0, [pc, #220]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 8001a4e:	f003 fdbb 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a52:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a56:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <MX_GPIO_Init+0x2c0>)
 8001a6c:	f003 fdac 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a70:	2320      	movs	r3, #32
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4829      	ldr	r0, [pc, #164]	; (8001b28 <MX_GPIO_Init+0x2c0>)
 8001a84:	f003 fda0 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 8001aa0:	f003 fd92 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001aa4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 8001abe:	f003 fd83 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MX_GPIO_Init+0x2c4>)
 8001ae0:	f003 fd72 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 8001af8:	f003 fd66 	bl	80055c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_GPIO_Init+0x2c8>)
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_GPIO_Init+0x2b8>)
 8001b10:	f003 fd5a 	bl	80055c8 <HAL_GPIO_Init>

}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	10120000 	.word	0x10120000
 8001b34:	40020000 	.word	0x40020000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f003 fcde 	bl	8005544 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f003 fce4 	bl	800555a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b92:	2005      	movs	r0, #5
 8001b94:	f003 fcfd 	bl	8005592 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <HAL_I2C_MspInit+0x128>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12d      	bne.n	8001c22 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4835      	ldr	r0, [pc, #212]	; (8001cd4 <HAL_I2C_MspInit+0x130>)
 8001c00:	f003 fce2 	bl	80055c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a30      	ldr	r2, [pc, #192]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c20:	e050      	b.n	8001cc4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_I2C_MspInit+0x134>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d14b      	bne.n	8001cc4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6a:	2312      	movs	r3, #18
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c76:	2304      	movs	r3, #4
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4816      	ldr	r0, [pc, #88]	; (8001cdc <HAL_I2C_MspInit+0x138>)
 8001c82:	f003 fca1 	bl	80055c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480f      	ldr	r0, [pc, #60]	; (8001ce0 <HAL_I2C_MspInit+0x13c>)
 8001ca4:	f003 fc90 	bl	80055c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_I2C_MspInit+0x12c>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40005800 	.word	0x40005800
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40005c00 	.word	0x40005c00
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_I2S_MspInit+0xc0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d14a      	bne.n	8001d9c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_I2S_MspInit+0xc4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <HAL_I2S_MspInit+0xc8>)
 8001d76:	f003 fc27 	bl	80055c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d7a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <HAL_I2S_MspInit+0xcc>)
 8001d98:	f003 fc16 	bl	80055c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40003c00 	.word	0x40003c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020800 	.word	0x40020800

08001db4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_RNG_MspInit+0x3c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RNG_MspInit+0x40>)
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RNG_MspInit+0x40>)
 8001dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd4:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_RNG_MspInit+0x40>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	50060800 	.word	0x50060800
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_SPI_MspInit+0x124>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12c      	bne.n	8001e74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a3f      	ldr	r2, [pc, #252]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a38      	ldr	r2, [pc, #224]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e52:	23e0      	movs	r3, #224	; 0xe0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e62:	2305      	movs	r3, #5
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482d      	ldr	r0, [pc, #180]	; (8001f24 <HAL_SPI_MspInit+0x12c>)
 8001e6e:	f003 fbab 	bl	80055c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e72:	e04f      	b.n	8001f14 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_SPI_MspInit+0x130>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d14a      	bne.n	8001f14 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_SPI_MspInit+0x128>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	480f      	ldr	r0, [pc, #60]	; (8001f2c <HAL_SPI_MspInit+0x134>)
 8001eee:	f003 fb6b 	bl	80055c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ef2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f04:	2305      	movs	r3, #5
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4808      	ldr	r0, [pc, #32]	; (8001f30 <HAL_SPI_MspInit+0x138>)
 8001f10:	f003 fb5a 	bl	80055c8 <HAL_GPIO_Init>
}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40013000 	.word	0x40013000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40003800 	.word	0x40003800
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020400 	.word	0x40020400

08001f34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12c      	bne.n	8001fb0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f7c:	f043 0310 	orr.w	r3, r3, #16
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fac:	f003 fb0c 	bl	80055c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff2:	e01a      	b.n	800202a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_TIM_Base_MspInit+0x74>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d115      	bne.n	800202a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201d      	movs	r0, #29
 8002020:	f003 fa9b 	bl	800555a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002024:	201d      	movs	r0, #29
 8002026:	f003 fab4 	bl	8005592 <HAL_NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40000400 	.word	0x40000400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f003 f948 	bl	800531c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a8:	481b      	ldr	r0, [pc, #108]	; (8002118 <TIM2_IRQHandler+0x78>)
 80020aa:	f003 fc5a 	bl	8005962 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <TIM2_IRQHandler+0x7c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d111      	bne.n	80020da <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2bc8      	cmp	r3, #200	; 0xc8
 80020bc:	dc0a      	bgt.n	80020d4 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <TIM2_IRQHandler+0x84>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e002      	b.n	80020da <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <TIM2_IRQHandler+0x7c>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <TIM2_IRQHandler+0x7c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d114      	bne.n	800210c <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b63      	cmp	r3, #99	; 0x63
 80020e8:	dd0a      	ble.n	8002100 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <TIM2_IRQHandler+0x84>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <TIM2_IRQHandler+0x80>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e005      	b.n	800210c <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <TIM2_IRQHandler+0x7c>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <TIM2_IRQHandler+0x80>)
 8002108:	2264      	movs	r2, #100	; 0x64
 800210a:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <TIM2_IRQHandler+0x84>)
 800210e:	f008 fe06 	bl	800ad1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40020c00 	.word	0x40020c00
 800211c:	200001f4 	.word	0x200001f4
 8002120:	20000000 	.word	0x20000000
 8002124:	2000042c 	.word	0x2000042c

08002128 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800212c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <TIM3_IRQHandler+0x1c>)
 8002132:	f003 fc16 	bl	8005962 <HAL_GPIO_TogglePin>
  read_digits();
 8002136:	f7fe fe91 	bl	8000e5c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <TIM3_IRQHandler+0x20>)
 800213c:	f008 fdef 	bl	800ad1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020c00 	.word	0x40020c00
 8002148:	20000334 	.word	0x20000334

0800214c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <OTG_FS_IRQHandler+0x10>)
 8002152:	f003 fe8b 	bl	8005e6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000092c 	.word	0x2000092c

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f00c fd8a 	bl	800eca8 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20020000 	.word	0x20020000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	200001f8 	.word	0x200001f8
 80021c8:	20000c40 	.word	0x20000c40

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4604      	mov	r4, r0
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	80fb      	strh	r3, [r7, #6]
 8002202:	4603      	mov	r3, r0
 8002204:	80bb      	strh	r3, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]
 800220a:	4613      	mov	r3, r2
 800220c:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	f1c3 0301 	rsb	r3, r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8002228:	e061      	b.n	80022ee <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e018      	b.n	8002266 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	b298      	uxth	r0, r3
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	b29a      	uxth	r2, r3
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	883a      	ldrh	r2, [r7, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f000 fc0b 	bl	8002a60 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	b298      	uxth	r0, r3
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	b29b      	uxth	r3, r3
 8002252:	88ba      	ldrh	r2, [r7, #4]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	b29b      	uxth	r3, r3
 8002258:	883a      	ldrh	r2, [r7, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	f000 fc00 	bl	8002a60 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	3301      	adds	r3, #1
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	4413      	add	r3, r2
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	429a      	cmp	r2, r3
 8002270:	dde0      	ble.n	8002234 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	e018      	b.n	80022ae <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	b298      	uxth	r0, r3
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	b29a      	uxth	r2, r3
 8002284:	88bb      	ldrh	r3, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	883a      	ldrh	r2, [r7, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f000 fbe7 	bl	8002a60 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b298      	uxth	r0, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	b29b      	uxth	r3, r3
 800229a:	88ba      	ldrh	r2, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	b29b      	uxth	r3, r3
 80022a0:	883a      	ldrh	r2, [r7, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f000 fbdc 	bl	8002a60 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	4413      	add	r3, r2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dde0      	ble.n	800227c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	3301      	adds	r3, #1
 80022be:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	3302      	adds	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005a      	lsls	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	dd09      	ble.n	80022ee <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3b01      	subs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3302      	adds	r3, #2
 80022ec:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	da99      	bge.n	800222a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	372c      	adds	r7, #44	; 0x2c
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}

08002300 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af02      	add	r7, sp, #8
 8002306:	4604      	mov	r4, r0
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4623      	mov	r3, r4
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	4603      	mov	r3, r0
 8002314:	80bb      	strh	r3, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	4613      	mov	r3, r2
 800231c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b1f      	cmp	r3, #31
 8002326:	d902      	bls.n	800232e <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	3b20      	subs	r3, #32
 800232c:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800232e:	2300      	movs	r3, #0
 8002330:	753b      	strb	r3, [r7, #20]
 8002332:	e012      	b.n	800235a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002334:	7dfa      	ldrb	r2, [r7, #23]
 8002336:	7d38      	ldrb	r0, [r7, #20]
 8002338:	7d39      	ldrb	r1, [r7, #20]
 800233a:	4c3b      	ldr	r4, [pc, #236]	; (8002428 <ILI9341_Draw_Char+0x128>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4423      	add	r3, r4
 8002346:	4403      	add	r3, r0
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	440b      	add	r3, r1
 8002350:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002354:	7d3b      	ldrb	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	753b      	strb	r3, [r7, #20]
 800235a:	7d3b      	ldrb	r3, [r7, #20]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d9e9      	bls.n	8002334 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	b299      	uxth	r1, r3
 8002364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002366:	461a      	mov	r2, r3
 8002368:	0052      	lsls	r2, r2, #1
 800236a:	4413      	add	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	b29c      	uxth	r4, r3
 8002376:	88b8      	ldrh	r0, [r7, #4]
 8002378:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4623      	mov	r3, r4
 800237e:	f000 fc37 	bl	8002bf0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002382:	2300      	movs	r3, #0
 8002384:	757b      	strb	r3, [r7, #21]
 8002386:	e046      	b.n	8002416 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	75bb      	strb	r3, [r7, #22]
 800238c:	e03d      	b.n	800240a <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800238e:	7d7b      	ldrb	r3, [r7, #21]
 8002390:	f107 0218 	add.w	r2, r7, #24
 8002394:	4413      	add	r3, r2
 8002396:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800239a:	461a      	mov	r2, r3
 800239c:	7dbb      	ldrb	r3, [r7, #22]
 800239e:	fa42 f303 	asr.w	r3, r2, r3
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d02c      	beq.n	8002404 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80023aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10f      	bne.n	80023d0 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80023b0:	7d7b      	ldrb	r3, [r7, #21]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	b298      	uxth	r0, r3
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	7dbb      	ldrb	r3, [r7, #22]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f000 fb49 	bl	8002a60 <ILI9341_Draw_Pixel>
 80023ce:	e019      	b.n	8002404 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80023d0:	7d7b      	ldrb	r3, [r7, #21]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023d6:	fb12 f303 	smulbb	r3, r2, r3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	b298      	uxth	r0, r3
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	7dbb      	ldrb	r3, [r7, #22]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80023ec:	fb11 f303 	smulbb	r3, r1, r3
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	b299      	uxth	r1, r3
 80023f6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80023f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4623      	mov	r3, r4
 8002400:	f000 fbf6 	bl	8002bf0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002404:	7dbb      	ldrb	r3, [r7, #22]
 8002406:	3301      	adds	r3, #1
 8002408:	75bb      	strb	r3, [r7, #22]
 800240a:	7dbb      	ldrb	r3, [r7, #22]
 800240c:	2b07      	cmp	r3, #7
 800240e:	d9be      	bls.n	800238e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002410:	7d7b      	ldrb	r3, [r7, #21]
 8002412:	3301      	adds	r3, #1
 8002414:	757b      	strb	r3, [r7, #21]
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d9b5      	bls.n	8002388 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	0800f048 	.word	0x0800f048

0800242c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b087      	sub	sp, #28
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	727b      	strb	r3, [r7, #9]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8002446:	e016      	b.n	8002476 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60fa      	str	r2, [r7, #12]
 800244e:	7818      	ldrb	r0, [r3, #0]
 8002450:	88fc      	ldrh	r4, [r7, #6]
 8002452:	7a7a      	ldrb	r2, [r7, #9]
 8002454:	8979      	ldrh	r1, [r7, #10]
 8002456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	8c3b      	ldrh	r3, [r7, #32]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4623      	mov	r3, r4
 8002460:	f7ff ff4e 	bl	8002300 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002464:	8c3b      	ldrh	r3, [r7, #32]
 8002466:	461a      	mov	r2, r3
 8002468:	0052      	lsls	r2, r2, #1
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	4413      	add	r3, r2
 8002474:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e4      	bne.n	8002448 <ILI9341_Draw_Text+0x1c>
    }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800248c:	2200      	movs	r2, #0
 800248e:	2110      	movs	r1, #16
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <ILI9341_SPI_Init+0x14>)
 8002492:	f003 fa4d 	bl	8005930 <HAL_GPIO_WritePin>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80024aa:	1df9      	adds	r1, r7, #7
 80024ac:	2301      	movs	r3, #1
 80024ae:	2201      	movs	r2, #1
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <ILI9341_SPI_Send+0x20>)
 80024b2:	f007 ff60 	bl	800a376 <HAL_SPI_Transmit>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000288 	.word	0x20000288

080024c4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2110      	movs	r1, #16
 80024d2:	480a      	ldr	r0, [pc, #40]	; (80024fc <ILI9341_Write_Command+0x38>)
 80024d4:	f003 fa2c 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024d8:	2200      	movs	r2, #0
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <ILI9341_Write_Command+0x38>)
 80024de:	f003 fa27 	bl	8005930 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffdb 	bl	80024a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80024ea:	2201      	movs	r2, #1
 80024ec:	2110      	movs	r1, #16
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <ILI9341_Write_Command+0x38>)
 80024f0:	f003 fa1e 	bl	8005930 <HAL_GPIO_WritePin>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800250a:	2201      	movs	r2, #1
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	480a      	ldr	r0, [pc, #40]	; (8002538 <ILI9341_Write_Data+0x38>)
 8002510:	f003 fa0e 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2110      	movs	r1, #16
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <ILI9341_Write_Data+0x38>)
 800251a:	f003 fa09 	bl	8005930 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ffbd 	bl	80024a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	2110      	movs	r1, #16
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <ILI9341_Write_Data+0x38>)
 800252c:	f003 fa00 	bl	8005930 <HAL_GPIO_WritePin>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000

0800253c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	80fb      	strh	r3, [r7, #6]
 800254e:	4603      	mov	r3, r0
 8002550:	80bb      	strh	r3, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	807b      	strh	r3, [r7, #2]
 8002556:	4613      	mov	r3, r2
 8002558:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800255a:	202a      	movs	r0, #42	; 0x2a
 800255c:	f7ff ffb2 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b29b      	uxth	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ffc9 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffc4 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ffbd 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffb8 	bl	8002500 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002590:	202b      	movs	r0, #43	; 0x2b
 8002592:	f7ff ff97 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b29b      	uxth	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ffae 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80025a4:	88bb      	ldrh	r3, [r7, #4]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ffa9 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80025ae:	883b      	ldrh	r3, [r7, #0]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffa2 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff9d 	bl	8002500 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80025c6:	202c      	movs	r0, #44	; 0x2c
 80025c8:	f7ff ff7c 	bl	80024c4 <ILI9341_Write_Command>
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	2120      	movs	r1, #32
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <ILI9341_Reset+0x34>)
 80025de:	f003 f9a7 	bl	8005930 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025e2:	20c8      	movs	r0, #200	; 0xc8
 80025e4:	f002 feba 	bl	800535c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2110      	movs	r1, #16
 80025ec:	4806      	ldr	r0, [pc, #24]	; (8002608 <ILI9341_Reset+0x34>)
 80025ee:	f003 f99f 	bl	8005930 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025f2:	20c8      	movs	r0, #200	; 0xc8
 80025f4:	f002 feb2 	bl	800535c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80025f8:	2201      	movs	r2, #1
 80025fa:	2120      	movs	r1, #32
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <ILI9341_Reset+0x34>)
 80025fe:	f003 f997 	bl	8005930 <HAL_GPIO_WritePin>
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800261a:	2036      	movs	r0, #54	; 0x36
 800261c:	f7ff ff52 	bl	80024c4 <ILI9341_Write_Command>
HAL_Delay(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f002 fe9b 	bl	800535c <HAL_Delay>
	
switch(screen_rotation) 
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d837      	bhi.n	800269c <ILI9341_Set_Rotation+0x90>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <ILI9341_Set_Rotation+0x28>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	0800265b 	.word	0x0800265b
 800263c:	08002671 	.word	0x08002671
 8002640:	08002687 	.word	0x08002687
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002644:	2048      	movs	r0, #72	; 0x48
 8002646:	f7ff ff5b 	bl	8002500 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <ILI9341_Set_Rotation+0x9c>)
 800264c:	22f0      	movs	r2, #240	; 0xf0
 800264e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <ILI9341_Set_Rotation+0xa0>)
 8002652:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002656:	801a      	strh	r2, [r3, #0]
			break;
 8002658:	e021      	b.n	800269e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800265a:	2028      	movs	r0, #40	; 0x28
 800265c:	f7ff ff50 	bl	8002500 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <ILI9341_Set_Rotation+0x9c>)
 8002662:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002666:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <ILI9341_Set_Rotation+0xa0>)
 800266a:	22f0      	movs	r2, #240	; 0xf0
 800266c:	801a      	strh	r2, [r3, #0]
			break;
 800266e:	e016      	b.n	800269e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002670:	2088      	movs	r0, #136	; 0x88
 8002672:	f7ff ff45 	bl	8002500 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <ILI9341_Set_Rotation+0x9c>)
 8002678:	22f0      	movs	r2, #240	; 0xf0
 800267a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <ILI9341_Set_Rotation+0xa0>)
 800267e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002682:	801a      	strh	r2, [r3, #0]
			break;
 8002684:	e00b      	b.n	800269e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002686:	20e8      	movs	r0, #232	; 0xe8
 8002688:	f7ff ff3a 	bl	8002500 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <ILI9341_Set_Rotation+0x9c>)
 800268e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002692:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <ILI9341_Set_Rotation+0xa0>)
 8002696:	22f0      	movs	r2, #240	; 0xf0
 8002698:	801a      	strh	r2, [r3, #0]
			break;
 800269a:	e000      	b.n	800269e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800269c:	bf00      	nop
	}
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000000a 	.word	0x2000000a
 80026ac:	20000008 	.word	0x20000008

080026b0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2120      	movs	r1, #32
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <ILI9341_Enable+0x14>)
 80026ba:	f003 f939 	bl	8005930 <HAL_GPIO_WritePin>
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000

080026c8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80026cc:	f7ff fff0 	bl	80026b0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80026d0:	f7ff feda 	bl	8002488 <ILI9341_SPI_Init>
ILI9341_Reset();
 80026d4:	f7ff ff7e 	bl	80025d4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff fef3 	bl	80024c4 <ILI9341_Write_Command>
HAL_Delay(1000);
 80026de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e2:	f002 fe3b 	bl	800535c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80026e6:	20cb      	movs	r0, #203	; 0xcb
 80026e8:	f7ff feec 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80026ec:	2039      	movs	r0, #57	; 0x39
 80026ee:	f7ff ff07 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80026f2:	202c      	movs	r0, #44	; 0x2c
 80026f4:	f7ff ff04 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff ff01 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80026fe:	2034      	movs	r0, #52	; 0x34
 8002700:	f7ff fefe 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002704:	2002      	movs	r0, #2
 8002706:	f7ff fefb 	bl	8002500 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800270a:	20cf      	movs	r0, #207	; 0xcf
 800270c:	f7ff feda 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff fef5 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002716:	20c1      	movs	r0, #193	; 0xc1
 8002718:	f7ff fef2 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800271c:	2030      	movs	r0, #48	; 0x30
 800271e:	f7ff feef 	bl	8002500 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002722:	20e8      	movs	r0, #232	; 0xe8
 8002724:	f7ff fece 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002728:	2085      	movs	r0, #133	; 0x85
 800272a:	f7ff fee9 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff fee6 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002734:	2078      	movs	r0, #120	; 0x78
 8002736:	f7ff fee3 	bl	8002500 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800273a:	20ea      	movs	r0, #234	; 0xea
 800273c:	f7ff fec2 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff fedd 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff feda 	bl	8002500 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800274c:	20ed      	movs	r0, #237	; 0xed
 800274e:	f7ff feb9 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002752:	2064      	movs	r0, #100	; 0x64
 8002754:	f7ff fed4 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002758:	2003      	movs	r0, #3
 800275a:	f7ff fed1 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800275e:	2012      	movs	r0, #18
 8002760:	f7ff fece 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002764:	2081      	movs	r0, #129	; 0x81
 8002766:	f7ff fecb 	bl	8002500 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800276a:	20f7      	movs	r0, #247	; 0xf7
 800276c:	f7ff feaa 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002770:	2020      	movs	r0, #32
 8002772:	f7ff fec5 	bl	8002500 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002776:	20c0      	movs	r0, #192	; 0xc0
 8002778:	f7ff fea4 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800277c:	2023      	movs	r0, #35	; 0x23
 800277e:	f7ff febf 	bl	8002500 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002782:	20c1      	movs	r0, #193	; 0xc1
 8002784:	f7ff fe9e 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002788:	2010      	movs	r0, #16
 800278a:	f7ff feb9 	bl	8002500 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800278e:	20c5      	movs	r0, #197	; 0xc5
 8002790:	f7ff fe98 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002794:	203e      	movs	r0, #62	; 0x3e
 8002796:	f7ff feb3 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800279a:	2028      	movs	r0, #40	; 0x28
 800279c:	f7ff feb0 	bl	8002500 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80027a0:	20c7      	movs	r0, #199	; 0xc7
 80027a2:	f7ff fe8f 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80027a6:	2086      	movs	r0, #134	; 0x86
 80027a8:	f7ff feaa 	bl	8002500 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80027ac:	2036      	movs	r0, #54	; 0x36
 80027ae:	f7ff fe89 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80027b2:	2048      	movs	r0, #72	; 0x48
 80027b4:	f7ff fea4 	bl	8002500 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80027b8:	203a      	movs	r0, #58	; 0x3a
 80027ba:	f7ff fe83 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80027be:	2055      	movs	r0, #85	; 0x55
 80027c0:	f7ff fe9e 	bl	8002500 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80027c4:	20b1      	movs	r0, #177	; 0xb1
 80027c6:	f7ff fe7d 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff fe98 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80027d0:	2018      	movs	r0, #24
 80027d2:	f7ff fe95 	bl	8002500 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80027d6:	20b6      	movs	r0, #182	; 0xb6
 80027d8:	f7ff fe74 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80027dc:	2008      	movs	r0, #8
 80027de:	f7ff fe8f 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80027e2:	2082      	movs	r0, #130	; 0x82
 80027e4:	f7ff fe8c 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80027e8:	2027      	movs	r0, #39	; 0x27
 80027ea:	f7ff fe89 	bl	8002500 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80027ee:	20f2      	movs	r0, #242	; 0xf2
 80027f0:	f7ff fe68 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff fe83 	bl	8002500 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80027fa:	2026      	movs	r0, #38	; 0x26
 80027fc:	f7ff fe62 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002800:	2001      	movs	r0, #1
 8002802:	f7ff fe7d 	bl	8002500 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002806:	20e0      	movs	r0, #224	; 0xe0
 8002808:	f7ff fe5c 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800280c:	200f      	movs	r0, #15
 800280e:	f7ff fe77 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002812:	2031      	movs	r0, #49	; 0x31
 8002814:	f7ff fe74 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002818:	202b      	movs	r0, #43	; 0x2b
 800281a:	f7ff fe71 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800281e:	200c      	movs	r0, #12
 8002820:	f7ff fe6e 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002824:	200e      	movs	r0, #14
 8002826:	f7ff fe6b 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800282a:	2008      	movs	r0, #8
 800282c:	f7ff fe68 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002830:	204e      	movs	r0, #78	; 0x4e
 8002832:	f7ff fe65 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002836:	20f1      	movs	r0, #241	; 0xf1
 8002838:	f7ff fe62 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800283c:	2037      	movs	r0, #55	; 0x37
 800283e:	f7ff fe5f 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002842:	2007      	movs	r0, #7
 8002844:	f7ff fe5c 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002848:	2010      	movs	r0, #16
 800284a:	f7ff fe59 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800284e:	2003      	movs	r0, #3
 8002850:	f7ff fe56 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002854:	200e      	movs	r0, #14
 8002856:	f7ff fe53 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800285a:	2009      	movs	r0, #9
 800285c:	f7ff fe50 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff fe4d 	bl	8002500 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002866:	20e1      	movs	r0, #225	; 0xe1
 8002868:	f7ff fe2c 	bl	80024c4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fe47 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002872:	200e      	movs	r0, #14
 8002874:	f7ff fe44 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002878:	2014      	movs	r0, #20
 800287a:	f7ff fe41 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800287e:	2003      	movs	r0, #3
 8002880:	f7ff fe3e 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002884:	2011      	movs	r0, #17
 8002886:	f7ff fe3b 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800288a:	2007      	movs	r0, #7
 800288c:	f7ff fe38 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002890:	2031      	movs	r0, #49	; 0x31
 8002892:	f7ff fe35 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002896:	20c1      	movs	r0, #193	; 0xc1
 8002898:	f7ff fe32 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800289c:	2048      	movs	r0, #72	; 0x48
 800289e:	f7ff fe2f 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80028a2:	2008      	movs	r0, #8
 80028a4:	f7ff fe2c 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028a8:	200f      	movs	r0, #15
 80028aa:	f7ff fe29 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028ae:	200c      	movs	r0, #12
 80028b0:	f7ff fe26 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028b4:	2031      	movs	r0, #49	; 0x31
 80028b6:	f7ff fe23 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80028ba:	2036      	movs	r0, #54	; 0x36
 80028bc:	f7ff fe20 	bl	8002500 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028c0:	200f      	movs	r0, #15
 80028c2:	f7ff fe1d 	bl	8002500 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80028c6:	2011      	movs	r0, #17
 80028c8:	f7ff fdfc 	bl	80024c4 <ILI9341_Write_Command>
HAL_Delay(120);
 80028cc:	2078      	movs	r0, #120	; 0x78
 80028ce:	f002 fd45 	bl	800535c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80028d2:	2029      	movs	r0, #41	; 0x29
 80028d4:	f7ff fdf6 	bl	80024c4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80028d8:	2003      	movs	r0, #3
 80028da:	f7ff fe97 	bl	800260c <ILI9341_Set_Rotation>

HAL_Delay(10);
 80028de:	200a      	movs	r0, #10
 80028e0:	f002 fd3c 	bl	800535c <HAL_Delay>
//
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	80fb      	strh	r3, [r7, #6]
 80028f4:	466b      	mov	r3, sp
 80028f6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002904:	d202      	bcs.n	800290c <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e002      	b.n	8002912 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800290c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002912:	2201      	movs	r2, #1
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	483d      	ldr	r0, [pc, #244]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x124>)
 8002918:	f003 f80a 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	2110      	movs	r1, #16
 8002920:	483a      	ldr	r0, [pc, #232]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x124>)
 8002922:	f003 f805 	bl	8005930 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	b29b      	uxth	r3, r3
 800292c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002930:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002932:	4623      	mov	r3, r4
 8002934:	3b01      	subs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	4620      	mov	r0, r4
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800294c:	00c2      	lsls	r2, r0, #3
 800294e:	4620      	mov	r0, r4
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	00cb      	lsls	r3, r1, #3
 800295e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002962:	00c2      	lsls	r2, r0, #3
 8002964:	1de3      	adds	r3, r4, #7
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	ebad 0d03 	sub.w	sp, sp, r3
 800296e:	466b      	mov	r3, sp
 8002970:	3300      	adds	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	e00e      	b.n	8002998 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	4413      	add	r3, r2
 8002980:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002984:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	3301      	adds	r3, #1
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	b2d1      	uxtb	r1, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	3302      	adds	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
 8002998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	429a      	cmp	r2, r3
 800299e:	d3ec      	bcc.n	800297a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	fb01 f202 	mul.w	r2, r1, r2
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	e009      	b.n	80029e2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80029ce:	69b9      	ldr	r1, [r7, #24]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	230a      	movs	r3, #10
 80029d6:	480e      	ldr	r0, [pc, #56]	; (8002a10 <ILI9341_Draw_Colour_Burst+0x128>)
 80029d8:	f007 fccd 	bl	800a376 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	3301      	adds	r3, #1
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3f1      	bcc.n	80029ce <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	230a      	movs	r3, #10
 80029f2:	4807      	ldr	r0, [pc, #28]	; (8002a10 <ILI9341_Draw_Colour_Burst+0x128>)
 80029f4:	f007 fcbf 	bl	800a376 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2110      	movs	r1, #16
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x124>)
 80029fe:	f002 ff97 	bl	8005930 <HAL_GPIO_WritePin>
 8002a02:	46ad      	mov	sp, r5
}
 8002a04:	bf00      	nop
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	20000288 	.word	0x20000288

08002a14 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <ILI9341_Fill_Screen+0x44>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <ILI9341_Fill_Screen+0x48>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7ff fd85 	bl	800253c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <ILI9341_Fill_Screen+0x44>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <ILI9341_Fill_Screen+0x48>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	fb03 f302 	mul.w	r3, r3, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff4c 	bl	80028e8 <ILI9341_Draw_Colour_Burst>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000000a 	.word	0x2000000a
 8002a5c:	20000008 	.word	0x20000008

08002a60 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <ILI9341_Draw_Pixel+0x180>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	f080 80ac 	bcs.w	8002bd8 <ILI9341_Draw_Pixel+0x178>
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <ILI9341_Draw_Pixel+0x184>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	88ba      	ldrh	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f080 80a5 	bcs.w	8002bd8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	4855      	ldr	r0, [pc, #340]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002a94:	f002 ff4c 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	4852      	ldr	r0, [pc, #328]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002a9e:	f002 ff47 	bl	8005930 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002aa2:	202a      	movs	r0, #42	; 0x2a
 8002aa4:	f7ff fcfc 	bl	80024a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2140      	movs	r1, #64	; 0x40
 8002aac:	484e      	ldr	r0, [pc, #312]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002aae:	f002 ff3f 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2110      	movs	r1, #16
 8002ab6:	484c      	ldr	r0, [pc, #304]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002ab8:	f002 ff3a 	bl	8005930 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002abc:	2200      	movs	r2, #0
 8002abe:	2110      	movs	r1, #16
 8002ac0:	4849      	ldr	r0, [pc, #292]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002ac2:	f002 ff35 	bl	8005930 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	753b      	strb	r3, [r7, #20]
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	757b      	strb	r3, [r7, #21]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	121b      	asrs	r3, r3, #8
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	75bb      	strb	r3, [r7, #22]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002aea:	f107 0114 	add.w	r1, r7, #20
 8002aee:	2301      	movs	r3, #1
 8002af0:	2204      	movs	r2, #4
 8002af2:	483e      	ldr	r0, [pc, #248]	; (8002bec <ILI9341_Draw_Pixel+0x18c>)
 8002af4:	f007 fc3f 	bl	800a376 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2110      	movs	r1, #16
 8002afc:	483a      	ldr	r0, [pc, #232]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002afe:	f002 ff17 	bl	8005930 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b02:	2200      	movs	r2, #0
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	4838      	ldr	r0, [pc, #224]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b08:	f002 ff12 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	4835      	ldr	r0, [pc, #212]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b12:	f002 ff0d 	bl	8005930 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002b16:	202b      	movs	r0, #43	; 0x2b
 8002b18:	f7ff fcc2 	bl	80024a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4831      	ldr	r0, [pc, #196]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b22:	f002 ff05 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b26:	2201      	movs	r2, #1
 8002b28:	2110      	movs	r1, #16
 8002b2a:	482f      	ldr	r0, [pc, #188]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b2c:	f002 ff00 	bl	8005930 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2110      	movs	r1, #16
 8002b34:	482c      	ldr	r0, [pc, #176]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b36:	f002 fefb 	bl	8005930 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002b3a:	88bb      	ldrh	r3, [r7, #4]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	743b      	strb	r3, [r7, #16]
 8002b44:	88bb      	ldrh	r3, [r7, #4]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	747b      	strb	r3, [r7, #17]
 8002b4a:	88bb      	ldrh	r3, [r7, #4]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	121b      	asrs	r3, r3, #8
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	74bb      	strb	r3, [r7, #18]
 8002b54:	88bb      	ldrh	r3, [r7, #4]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002b5e:	f107 0110 	add.w	r1, r7, #16
 8002b62:	2301      	movs	r3, #1
 8002b64:	2204      	movs	r2, #4
 8002b66:	4821      	ldr	r0, [pc, #132]	; (8002bec <ILI9341_Draw_Pixel+0x18c>)
 8002b68:	f007 fc05 	bl	800a376 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2110      	movs	r1, #16
 8002b70:	481d      	ldr	r0, [pc, #116]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b72:	f002 fedd 	bl	8005930 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b76:	2200      	movs	r2, #0
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	481b      	ldr	r0, [pc, #108]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b7c:	f002 fed8 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b80:	2200      	movs	r2, #0
 8002b82:	2110      	movs	r1, #16
 8002b84:	4818      	ldr	r0, [pc, #96]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b86:	f002 fed3 	bl	8005930 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002b8a:	202c      	movs	r0, #44	; 0x2c
 8002b8c:	f7ff fc88 	bl	80024a0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b90:	2201      	movs	r2, #1
 8002b92:	2140      	movs	r1, #64	; 0x40
 8002b94:	4814      	ldr	r0, [pc, #80]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002b96:	f002 fecb 	bl	8005930 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	4812      	ldr	r0, [pc, #72]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002ba0:	f002 fec6 	bl	8005930 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	480f      	ldr	r0, [pc, #60]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002baa:	f002 fec1 	bl	8005930 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	733b      	strb	r3, [r7, #12]
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002bbe:	f107 010c 	add.w	r1, r7, #12
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <ILI9341_Draw_Pixel+0x18c>)
 8002bc8:	f007 fbd5 	bl	800a376 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2110      	movs	r1, #16
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <ILI9341_Draw_Pixel+0x188>)
 8002bd2:	f002 fead 	bl	8005930 <HAL_GPIO_WritePin>
 8002bd6:	e000      	b.n	8002bda <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002bd8:	bf00      	nop
	
}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000000a 	.word	0x2000000a
 8002be4:	20000008 	.word	0x20000008
 8002be8:	40021000 	.word	0x40021000
 8002bec:	20000288 	.word	0x20000288

08002bf0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	80fb      	strh	r3, [r7, #6]
 8002c02:	4603      	mov	r3, r0
 8002c04:	80bb      	strh	r3, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb0>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d23d      	bcs.n	8002c96 <ILI9341_Draw_Rectangle+0xa6>
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <ILI9341_Draw_Rectangle+0xb4>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	88ba      	ldrh	r2, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d237      	bcs.n	8002c96 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb0>)
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	b292      	uxth	r2, r2
 8002c32:	4293      	cmp	r3, r2
 8002c34:	dd05      	ble.n	8002c42 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb0>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002c42:	88ba      	ldrh	r2, [r7, #4]
 8002c44:	883b      	ldrh	r3, [r7, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <ILI9341_Draw_Rectangle+0xb4>)
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	dd05      	ble.n	8002c5e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <ILI9341_Draw_Rectangle+0xb4>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	88bb      	ldrh	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4413      	add	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29c      	uxth	r4, r3
 8002c6a:	88ba      	ldrh	r2, [r7, #4]
 8002c6c:	883b      	ldrh	r3, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	88b9      	ldrh	r1, [r7, #4]
 8002c78:	88f8      	ldrh	r0, [r7, #6]
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	f7ff fc5e 	bl	800253c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002c80:	883b      	ldrh	r3, [r7, #0]
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	8b3b      	ldrh	r3, [r7, #24]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fe2a 	bl	80028e8 <ILI9341_Draw_Colour_Burst>
 8002c94:	e000      	b.n	8002c98 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c96:	bf00      	nop
}
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000000a 	.word	0x2000000a
 8002ca4:	20000008 	.word	0x20000008

08002ca8 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002cae:	4832      	ldr	r0, [pc, #200]	; (8002d78 <menu+0xd0>)
 8002cb0:	f000 fd4a 	bl	8003748 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002cb4:	4831      	ldr	r0, [pc, #196]	; (8002d7c <menu+0xd4>)
 8002cb6:	f000 fd19 	bl	80036ec <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002cba:	f000 fc4f 	bl	800355c <getPressKey>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2bff      	cmp	r3, #255	; 0xff
 8002cc6:	d04a      	beq.n	8002d5e <menu+0xb6>
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <menu+0xd8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d043      	beq.n	8002d5e <menu+0xb6>
	   {
			flagPressed = true;
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <menu+0xd8>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d83b      	bhi.n	8002d5a <menu+0xb2>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <menu+0x40>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cfd 	.word	0x08002cfd
 8002cec:	08002d0d 	.word	0x08002d0d
 8002cf0:	08002d29 	.word	0x08002d29
 8002cf4:	08002d45 	.word	0x08002d45
 8002cf8:	08002d55 	.word	0x08002d55
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002cfc:	f000 fcea 	bl	80036d4 <Menu_GetCurrentMenu>
 8002d00:	4603      	mov	r3, r0
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fcf1 	bl	80036ec <Menu_Navigate>
					break;
 8002d0a:	e027      	b.n	8002d5c <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <menu+0xdc>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <menu+0xdc>)
 8002d16:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002d18:	f000 fcdc 	bl	80036d4 <Menu_GetCurrentMenu>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fce3 	bl	80036ec <Menu_Navigate>
					break;
 8002d26:	e019      	b.n	8002d5c <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <menu+0xdc>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <menu+0xdc>)
 8002d32:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002d34:	f000 fcce 	bl	80036d4 <Menu_GetCurrentMenu>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fcd5 	bl	80036ec <Menu_Navigate>
					break;
 8002d42:	e00b      	b.n	8002d5c <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002d44:	f000 fcc6 	bl	80036d4 <Menu_GetCurrentMenu>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fccd 	bl	80036ec <Menu_Navigate>
					break;
 8002d52:	e003      	b.n	8002d5c <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002d54:	f000 fd0c 	bl	8003770 <Menu_EnterCurrentItem>
					break;
 8002d58:	e000      	b.n	8002d5c <menu+0xb4>

			 default:
			  break;
 8002d5a:	bf00      	nop
			switch(pressed_key)
 8002d5c:	e00b      	b.n	8002d76 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002d5e:	f000 fbfd 	bl	800355c <getPressKey>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2bff      	cmp	r3, #255	; 0xff
 8002d66:	d1a8      	bne.n	8002cba <menu+0x12>
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <menu+0xd8>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0a4      	beq.n	8002cba <menu+0x12>
	   {
		   flagPressed = false;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <menu+0xd8>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
	  {
 8002d76:	e7a0      	b.n	8002cba <menu+0x12>
 8002d78:	0800368d 	.word	0x0800368d
 8002d7c:	0800f2a0 	.word	0x0800f2a0
 8002d80:	20000200 	.word	0x20000200
 8002d84:	20000148 	.word	0x20000148

08002d88 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2302      	movs	r3, #2
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d9a:	226e      	movs	r2, #110	; 0x6e
 8002d9c:	211e      	movs	r1, #30
 8002d9e:	4884      	ldr	r0, [pc, #528]	; (8002fb0 <print_all_top_menu+0x228>)
 8002da0:	f7ff fb44 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002da4:	2300      	movs	r3, #0
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2302      	movs	r3, #2
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002db0:	2282      	movs	r2, #130	; 0x82
 8002db2:	211e      	movs	r1, #30
 8002db4:	487e      	ldr	r0, [pc, #504]	; (8002fb0 <print_all_top_menu+0x228>)
 8002db6:	f7ff fb39 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc6:	2296      	movs	r2, #150	; 0x96
 8002dc8:	211e      	movs	r1, #30
 8002dca:	4879      	ldr	r0, [pc, #484]	; (8002fb0 <print_all_top_menu+0x228>)
 8002dcc:	f7ff fb2e 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ddc:	22aa      	movs	r2, #170	; 0xaa
 8002dde:	211e      	movs	r1, #30
 8002de0:	4873      	ldr	r0, [pc, #460]	; (8002fb0 <print_all_top_menu+0x228>)
 8002de2:	f7ff fb23 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002de6:	2300      	movs	r3, #0
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2302      	movs	r3, #2
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002df2:	22be      	movs	r2, #190	; 0xbe
 8002df4:	211e      	movs	r1, #30
 8002df6:	486e      	ldr	r0, [pc, #440]	; (8002fb0 <print_all_top_menu+0x228>)
 8002df8:	f7ff fb18 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2302      	movs	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e08:	22d2      	movs	r2, #210	; 0xd2
 8002e0a:	211e      	movs	r1, #30
 8002e0c:	4868      	ldr	r0, [pc, #416]	; (8002fb0 <print_all_top_menu+0x228>)
 8002e0e:	f7ff fb0d 	bl	800242c <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1e:	226e      	movs	r2, #110	; 0x6e
 8002e20:	211e      	movs	r1, #30
 8002e22:	4864      	ldr	r0, [pc, #400]	; (8002fb4 <print_all_top_menu+0x22c>)
 8002e24:	f7ff fb02 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e34:	2282      	movs	r2, #130	; 0x82
 8002e36:	211e      	movs	r1, #30
 8002e38:	485f      	ldr	r0, [pc, #380]	; (8002fb8 <print_all_top_menu+0x230>)
 8002e3a:	f7ff faf7 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2302      	movs	r3, #2
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e4a:	2296      	movs	r2, #150	; 0x96
 8002e4c:	211e      	movs	r1, #30
 8002e4e:	485b      	ldr	r0, [pc, #364]	; (8002fbc <print_all_top_menu+0x234>)
 8002e50:	f7ff faec 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e60:	22aa      	movs	r2, #170	; 0xaa
 8002e62:	211e      	movs	r1, #30
 8002e64:	4856      	ldr	r0, [pc, #344]	; (8002fc0 <print_all_top_menu+0x238>)
 8002e66:	f7ff fae1 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e76:	22be      	movs	r2, #190	; 0xbe
 8002e78:	211e      	movs	r1, #30
 8002e7a:	4852      	ldr	r0, [pc, #328]	; (8002fc4 <print_all_top_menu+0x23c>)
 8002e7c:	f7ff fad6 	bl	800242c <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002e80:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <print_all_top_menu+0x240>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <print_all_top_menu+0x240>)
 8002e8a:	2205      	movs	r2, #5
 8002e8c:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <print_all_top_menu+0x240>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d902      	bls.n	8002e9c <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <print_all_top_menu+0x240>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea8:	226e      	movs	r2, #110	; 0x6e
 8002eaa:	2105      	movs	r1, #5
 8002eac:	4847      	ldr	r0, [pc, #284]	; (8002fcc <print_all_top_menu+0x244>)
 8002eae:	f7ff fabd 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ebe:	2282      	movs	r2, #130	; 0x82
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	4842      	ldr	r0, [pc, #264]	; (8002fcc <print_all_top_menu+0x244>)
 8002ec4:	f7ff fab2 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2302      	movs	r3, #2
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed4:	2296      	movs	r2, #150	; 0x96
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	483c      	ldr	r0, [pc, #240]	; (8002fcc <print_all_top_menu+0x244>)
 8002eda:	f7ff faa7 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eea:	22aa      	movs	r2, #170	; 0xaa
 8002eec:	2105      	movs	r1, #5
 8002eee:	4837      	ldr	r0, [pc, #220]	; (8002fcc <print_all_top_menu+0x244>)
 8002ef0:	f7ff fa9c 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2302      	movs	r3, #2
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f00:	22be      	movs	r2, #190	; 0xbe
 8002f02:	2105      	movs	r1, #5
 8002f04:	4831      	ldr	r0, [pc, #196]	; (8002fcc <print_all_top_menu+0x244>)
 8002f06:	f7ff fa91 	bl	800242c <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <print_all_top_menu+0x240>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d849      	bhi.n	8002fa8 <print_all_top_menu+0x220>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <print_all_top_menu+0x194>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f31 	.word	0x08002f31
 8002f20:	08002f49 	.word	0x08002f49
 8002f24:	08002f61 	.word	0x08002f61
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f91 	.word	0x08002f91
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002f30:	2300      	movs	r3, #0
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	2302      	movs	r3, #2
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f3c:	226e      	movs	r2, #110	; 0x6e
 8002f3e:	2105      	movs	r1, #5
 8002f40:	4823      	ldr	r0, [pc, #140]	; (8002fd0 <print_all_top_menu+0x248>)
 8002f42:	f7ff fa73 	bl	800242c <ILI9341_Draw_Text>
			break;
 8002f46:	e02f      	b.n	8002fa8 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f54:	2282      	movs	r2, #130	; 0x82
 8002f56:	2105      	movs	r1, #5
 8002f58:	481d      	ldr	r0, [pc, #116]	; (8002fd0 <print_all_top_menu+0x248>)
 8002f5a:	f7ff fa67 	bl	800242c <ILI9341_Draw_Text>
			break;
 8002f5e:	e023      	b.n	8002fa8 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002f60:	2300      	movs	r3, #0
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2302      	movs	r3, #2
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f6c:	2296      	movs	r2, #150	; 0x96
 8002f6e:	2105      	movs	r1, #5
 8002f70:	4817      	ldr	r0, [pc, #92]	; (8002fd0 <print_all_top_menu+0x248>)
 8002f72:	f7ff fa5b 	bl	800242c <ILI9341_Draw_Text>
			break;
 8002f76:	e017      	b.n	8002fa8 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f84:	22aa      	movs	r2, #170	; 0xaa
 8002f86:	2105      	movs	r1, #5
 8002f88:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <print_all_top_menu+0x248>)
 8002f8a:	f7ff fa4f 	bl	800242c <ILI9341_Draw_Text>
			break;
 8002f8e:	e00b      	b.n	8002fa8 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8002f90:	2300      	movs	r3, #0
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2302      	movs	r3, #2
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f9c:	22be      	movs	r2, #190	; 0xbe
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <print_all_top_menu+0x248>)
 8002fa2:	f7ff fa43 	bl	800242c <ILI9341_Draw_Text>
			break;
 8002fa6:	bf00      	nop
	}

}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800ef18 	.word	0x0800ef18
 8002fb4:	20000010 	.word	0x20000010
 8002fb8:	2000002e 	.word	0x2000002e
 8002fbc:	2000004c 	.word	0x2000004c
 8002fc0:	2000006a 	.word	0x2000006a
 8002fc4:	20000088 	.word	0x20000088
 8002fc8:	20000148 	.word	0x20000148
 8002fcc:	0800ef3c 	.word	0x0800ef3c
 8002fd0:	0800ef40 	.word	0x0800ef40

08002fd4 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	2302      	movs	r3, #2
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fe6:	226e      	movs	r2, #110	; 0x6e
 8002fe8:	211e      	movs	r1, #30
 8002fea:	4877      	ldr	r0, [pc, #476]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 8002fec:	f7ff fa1e 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ffc:	2282      	movs	r2, #130	; 0x82
 8002ffe:	211e      	movs	r1, #30
 8003000:	4871      	ldr	r0, [pc, #452]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 8003002:	f7ff fa13 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2302      	movs	r3, #2
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003012:	2296      	movs	r2, #150	; 0x96
 8003014:	211e      	movs	r1, #30
 8003016:	486c      	ldr	r0, [pc, #432]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 8003018:	f7ff fa08 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 800301c:	2300      	movs	r3, #0
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	2302      	movs	r3, #2
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003028:	22aa      	movs	r2, #170	; 0xaa
 800302a:	211e      	movs	r1, #30
 800302c:	4866      	ldr	r0, [pc, #408]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 800302e:	f7ff f9fd 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003032:	2300      	movs	r3, #0
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2302      	movs	r3, #2
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800303e:	22be      	movs	r2, #190	; 0xbe
 8003040:	211e      	movs	r1, #30
 8003042:	4861      	ldr	r0, [pc, #388]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 8003044:	f7ff f9f2 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2302      	movs	r3, #2
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003054:	22d2      	movs	r2, #210	; 0xd2
 8003056:	211e      	movs	r1, #30
 8003058:	485b      	ldr	r0, [pc, #364]	; (80031c8 <print_all_menu_1_menus+0x1f4>)
 800305a:	f7ff f9e7 	bl	800242c <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800305e:	2300      	movs	r3, #0
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2302      	movs	r3, #2
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800306a:	226e      	movs	r2, #110	; 0x6e
 800306c:	2105      	movs	r1, #5
 800306e:	4857      	ldr	r0, [pc, #348]	; (80031cc <print_all_menu_1_menus+0x1f8>)
 8003070:	f7ff f9dc 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003074:	2300      	movs	r3, #0
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	2302      	movs	r3, #2
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003080:	2282      	movs	r2, #130	; 0x82
 8003082:	2105      	movs	r1, #5
 8003084:	4851      	ldr	r0, [pc, #324]	; (80031cc <print_all_menu_1_menus+0x1f8>)
 8003086:	f7ff f9d1 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2302      	movs	r3, #2
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003096:	2296      	movs	r2, #150	; 0x96
 8003098:	2105      	movs	r1, #5
 800309a:	484c      	ldr	r0, [pc, #304]	; (80031cc <print_all_menu_1_menus+0x1f8>)
 800309c:	f7ff f9c6 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80030a0:	2300      	movs	r3, #0
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	2302      	movs	r3, #2
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ac:	22aa      	movs	r2, #170	; 0xaa
 80030ae:	2105      	movs	r1, #5
 80030b0:	4846      	ldr	r0, [pc, #280]	; (80031cc <print_all_menu_1_menus+0x1f8>)
 80030b2:	f7ff f9bb 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80030b6:	2300      	movs	r3, #0
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2302      	movs	r3, #2
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c2:	22be      	movs	r2, #190	; 0xbe
 80030c4:	2105      	movs	r1, #5
 80030c6:	4841      	ldr	r0, [pc, #260]	; (80031cc <print_all_menu_1_menus+0x1f8>)
 80030c8:	f7ff f9b0 	bl	800242c <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80030cc:	2300      	movs	r3, #0
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	2302      	movs	r3, #2
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d8:	226e      	movs	r2, #110	; 0x6e
 80030da:	211e      	movs	r1, #30
 80030dc:	483c      	ldr	r0, [pc, #240]	; (80031d0 <print_all_menu_1_menus+0x1fc>)
 80030de:	f7ff f9a5 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80030e2:	2300      	movs	r3, #0
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2302      	movs	r3, #2
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	2282      	movs	r2, #130	; 0x82
 80030f0:	211e      	movs	r1, #30
 80030f2:	4838      	ldr	r0, [pc, #224]	; (80031d4 <print_all_menu_1_menus+0x200>)
 80030f4:	f7ff f99a 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80030f8:	2300      	movs	r3, #0
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	2302      	movs	r3, #2
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003104:	2296      	movs	r2, #150	; 0x96
 8003106:	211e      	movs	r1, #30
 8003108:	4833      	ldr	r0, [pc, #204]	; (80031d8 <print_all_menu_1_menus+0x204>)
 800310a:	f7ff f98f 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 800310e:	2300      	movs	r3, #0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2302      	movs	r3, #2
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311a:	22aa      	movs	r2, #170	; 0xaa
 800311c:	211e      	movs	r1, #30
 800311e:	482f      	ldr	r0, [pc, #188]	; (80031dc <print_all_menu_1_menus+0x208>)
 8003120:	f7ff f984 	bl	800242c <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <print_all_menu_1_menus+0x20c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <print_all_menu_1_menus+0x20c>)
 800312e:	2204      	movs	r2, #4
 8003130:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <print_all_menu_1_menus+0x20c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d902      	bls.n	8003140 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <print_all_menu_1_menus+0x20c>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <print_all_menu_1_menus+0x20c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	3b01      	subs	r3, #1
 8003146:	2b03      	cmp	r3, #3
 8003148:	d83a      	bhi.n	80031c0 <print_all_menu_1_menus+0x1ec>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <print_all_menu_1_menus+0x17c>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003161 	.word	0x08003161
 8003154:	08003179 	.word	0x08003179
 8003158:	08003191 	.word	0x08003191
 800315c:	080031a9 	.word	0x080031a9
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003160:	2300      	movs	r3, #0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2302      	movs	r3, #2
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800316c:	226e      	movs	r2, #110	; 0x6e
 800316e:	2105      	movs	r1, #5
 8003170:	481c      	ldr	r0, [pc, #112]	; (80031e4 <print_all_menu_1_menus+0x210>)
 8003172:	f7ff f95b 	bl	800242c <ILI9341_Draw_Text>
			break;
 8003176:	e023      	b.n	80031c0 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003178:	2300      	movs	r3, #0
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	2302      	movs	r3, #2
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003184:	2282      	movs	r2, #130	; 0x82
 8003186:	2105      	movs	r1, #5
 8003188:	4816      	ldr	r0, [pc, #88]	; (80031e4 <print_all_menu_1_menus+0x210>)
 800318a:	f7ff f94f 	bl	800242c <ILI9341_Draw_Text>
			break;
 800318e:	e017      	b.n	80031c0 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003190:	2300      	movs	r3, #0
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2302      	movs	r3, #2
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800319c:	2296      	movs	r2, #150	; 0x96
 800319e:	2105      	movs	r1, #5
 80031a0:	4810      	ldr	r0, [pc, #64]	; (80031e4 <print_all_menu_1_menus+0x210>)
 80031a2:	f7ff f943 	bl	800242c <ILI9341_Draw_Text>
			break;
 80031a6:	e00b      	b.n	80031c0 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80031a8:	2300      	movs	r3, #0
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2302      	movs	r3, #2
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b4:	22aa      	movs	r2, #170	; 0xaa
 80031b6:	2105      	movs	r1, #5
 80031b8:	480a      	ldr	r0, [pc, #40]	; (80031e4 <print_all_menu_1_menus+0x210>)
 80031ba:	f7ff f937 	bl	800242c <ILI9341_Draw_Text>
			break;
 80031be:	bf00      	nop
	}
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	0800ef18 	.word	0x0800ef18
 80031cc:	0800ef3c 	.word	0x0800ef3c
 80031d0:	200000a8 	.word	0x200000a8
 80031d4:	200000bc 	.word	0x200000bc
 80031d8:	200000d0 	.word	0x200000d0
 80031dc:	200000e4 	.word	0x200000e4
 80031e0:	20000148 	.word	0x20000148
 80031e4:	0800ef40 	.word	0x0800ef40

080031e8 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80031ee:	2300      	movs	r3, #0
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	2302      	movs	r3, #2
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031fa:	226e      	movs	r2, #110	; 0x6e
 80031fc:	211e      	movs	r1, #30
 80031fe:	4877      	ldr	r0, [pc, #476]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 8003200:	f7ff f914 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003204:	2300      	movs	r3, #0
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	2302      	movs	r3, #2
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003210:	2282      	movs	r2, #130	; 0x82
 8003212:	211e      	movs	r1, #30
 8003214:	4871      	ldr	r0, [pc, #452]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 8003216:	f7ff f909 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800321a:	2300      	movs	r3, #0
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2302      	movs	r3, #2
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003226:	2296      	movs	r2, #150	; 0x96
 8003228:	211e      	movs	r1, #30
 800322a:	486c      	ldr	r0, [pc, #432]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 800322c:	f7ff f8fe 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003230:	2300      	movs	r3, #0
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	2302      	movs	r3, #2
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800323c:	22aa      	movs	r2, #170	; 0xaa
 800323e:	211e      	movs	r1, #30
 8003240:	4866      	ldr	r0, [pc, #408]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 8003242:	f7ff f8f3 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003246:	2300      	movs	r3, #0
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2302      	movs	r3, #2
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003252:	22be      	movs	r2, #190	; 0xbe
 8003254:	211e      	movs	r1, #30
 8003256:	4861      	ldr	r0, [pc, #388]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 8003258:	f7ff f8e8 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	2302      	movs	r3, #2
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003268:	22d2      	movs	r2, #210	; 0xd2
 800326a:	211e      	movs	r1, #30
 800326c:	485b      	ldr	r0, [pc, #364]	; (80033dc <print_all_menu_1_1_menus+0x1f4>)
 800326e:	f7ff f8dd 	bl	800242c <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003272:	2300      	movs	r3, #0
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	2302      	movs	r3, #2
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327e:	226e      	movs	r2, #110	; 0x6e
 8003280:	2105      	movs	r1, #5
 8003282:	4857      	ldr	r0, [pc, #348]	; (80033e0 <print_all_menu_1_1_menus+0x1f8>)
 8003284:	f7ff f8d2 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003294:	2282      	movs	r2, #130	; 0x82
 8003296:	2105      	movs	r1, #5
 8003298:	4851      	ldr	r0, [pc, #324]	; (80033e0 <print_all_menu_1_1_menus+0x1f8>)
 800329a:	f7ff f8c7 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800329e:	2300      	movs	r3, #0
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2302      	movs	r3, #2
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032aa:	2296      	movs	r2, #150	; 0x96
 80032ac:	2105      	movs	r1, #5
 80032ae:	484c      	ldr	r0, [pc, #304]	; (80033e0 <print_all_menu_1_1_menus+0x1f8>)
 80032b0:	f7ff f8bc 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80032b4:	2300      	movs	r3, #0
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2302      	movs	r3, #2
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c0:	22aa      	movs	r2, #170	; 0xaa
 80032c2:	2105      	movs	r1, #5
 80032c4:	4846      	ldr	r0, [pc, #280]	; (80033e0 <print_all_menu_1_1_menus+0x1f8>)
 80032c6:	f7ff f8b1 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80032ca:	2300      	movs	r3, #0
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	2302      	movs	r3, #2
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d6:	22be      	movs	r2, #190	; 0xbe
 80032d8:	2105      	movs	r1, #5
 80032da:	4841      	ldr	r0, [pc, #260]	; (80033e0 <print_all_menu_1_1_menus+0x1f8>)
 80032dc:	f7ff f8a6 	bl	800242c <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2302      	movs	r3, #2
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ec:	226e      	movs	r2, #110	; 0x6e
 80032ee:	211e      	movs	r1, #30
 80032f0:	483c      	ldr	r0, [pc, #240]	; (80033e4 <print_all_menu_1_1_menus+0x1fc>)
 80032f2:	f7ff f89b 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80032f6:	2300      	movs	r3, #0
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003302:	2282      	movs	r2, #130	; 0x82
 8003304:	211e      	movs	r1, #30
 8003306:	4838      	ldr	r0, [pc, #224]	; (80033e8 <print_all_menu_1_1_menus+0x200>)
 8003308:	f7ff f890 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 800330c:	2300      	movs	r3, #0
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003318:	2296      	movs	r2, #150	; 0x96
 800331a:	211e      	movs	r1, #30
 800331c:	4833      	ldr	r0, [pc, #204]	; (80033ec <print_all_menu_1_1_menus+0x204>)
 800331e:	f7ff f885 	bl	800242c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8003322:	2300      	movs	r3, #0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332e:	22aa      	movs	r2, #170	; 0xaa
 8003330:	211e      	movs	r1, #30
 8003332:	482f      	ldr	r0, [pc, #188]	; (80033f0 <print_all_menu_1_1_menus+0x208>)
 8003334:	f7ff f87a 	bl	800242c <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <print_all_menu_1_1_menus+0x20c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003340:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <print_all_menu_1_1_menus+0x20c>)
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <print_all_menu_1_1_menus+0x20c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d902      	bls.n	8003354 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <print_all_menu_1_1_menus+0x20c>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <print_all_menu_1_1_menus+0x20c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	2b03      	cmp	r3, #3
 800335c:	d83a      	bhi.n	80033d4 <print_all_menu_1_1_menus+0x1ec>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <print_all_menu_1_1_menus+0x17c>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800338d 	.word	0x0800338d
 800336c:	080033a5 	.word	0x080033a5
 8003370:	080033bd 	.word	0x080033bd
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003374:	2300      	movs	r3, #0
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2302      	movs	r3, #2
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003380:	226e      	movs	r2, #110	; 0x6e
 8003382:	2105      	movs	r1, #5
 8003384:	481c      	ldr	r0, [pc, #112]	; (80033f8 <print_all_menu_1_1_menus+0x210>)
 8003386:	f7ff f851 	bl	800242c <ILI9341_Draw_Text>
			break;
 800338a:	e023      	b.n	80033d4 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800338c:	2300      	movs	r3, #0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2302      	movs	r3, #2
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003398:	2282      	movs	r2, #130	; 0x82
 800339a:	2105      	movs	r1, #5
 800339c:	4816      	ldr	r0, [pc, #88]	; (80033f8 <print_all_menu_1_1_menus+0x210>)
 800339e:	f7ff f845 	bl	800242c <ILI9341_Draw_Text>
			break;
 80033a2:	e017      	b.n	80033d4 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80033a4:	2300      	movs	r3, #0
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	2302      	movs	r3, #2
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033b0:	2296      	movs	r2, #150	; 0x96
 80033b2:	2105      	movs	r1, #5
 80033b4:	4810      	ldr	r0, [pc, #64]	; (80033f8 <print_all_menu_1_1_menus+0x210>)
 80033b6:	f7ff f839 	bl	800242c <ILI9341_Draw_Text>
			break;
 80033ba:	e00b      	b.n	80033d4 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80033bc:	2300      	movs	r3, #0
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2302      	movs	r3, #2
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c8:	22aa      	movs	r2, #170	; 0xaa
 80033ca:	2105      	movs	r1, #5
 80033cc:	480a      	ldr	r0, [pc, #40]	; (80033f8 <print_all_menu_1_1_menus+0x210>)
 80033ce:	f7ff f82d 	bl	800242c <ILI9341_Draw_Text>
			break;
 80033d2:	bf00      	nop
	}
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	0800ef18 	.word	0x0800ef18
 80033e0:	0800ef3c 	.word	0x0800ef3c
 80033e4:	200000f8 	.word	0x200000f8
 80033e8:	2000010c 	.word	0x2000010c
 80033ec:	20000120 	.word	0x20000120
 80033f0:	20000134 	.word	0x20000134
 80033f4:	20000148 	.word	0x20000148
 80033f8:	0800ef40 	.word	0x0800ef40

080033fc <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8003400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <tongle_green_led+0x14>)
 8003406:	f002 faac 	bl	8005962 <HAL_GPIO_TogglePin>
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40020c00 	.word	0x40020c00

08003414 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003418:	2201      	movs	r2, #1
 800341a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341e:	4802      	ldr	r0, [pc, #8]	; (8003428 <RED_LED_ON+0x14>)
 8003420:	f002 fa86 	bl	8005930 <HAL_GPIO_WritePin>
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40020c00 	.word	0x40020c00

0800342c <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003436:	4802      	ldr	r0, [pc, #8]	; (8003440 <RED_LED_OFF+0x14>)
 8003438:	f002 fa7a 	bl	8005930 <HAL_GPIO_WritePin>
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40020c00 	.word	0x40020c00

08003444 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 800344a:	2300      	movs	r3, #0
 800344c:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 800344e:	2300      	movs	r3, #0
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2302      	movs	r3, #2
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800345a:	223c      	movs	r2, #60	; 0x3c
 800345c:	210a      	movs	r1, #10
 800345e:	4838      	ldr	r0, [pc, #224]	; (8003540 <Level1Item3_Enter+0xfc>)
 8003460:	f7fe ffe4 	bl	800242c <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003464:	2300      	movs	r3, #0
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2302      	movs	r3, #2
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003470:	223c      	movs	r2, #60	; 0x3c
 8003472:	210a      	movs	r1, #10
 8003474:	4833      	ldr	r0, [pc, #204]	; (8003544 <Level1Item3_Enter+0x100>)
 8003476:	f7fe ffd9 	bl	800242c <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 800347a:	e049      	b.n	8003510 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 800347c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003480:	4831      	ldr	r0, [pc, #196]	; (8003548 <Level1Item3_Enter+0x104>)
 8003482:	f002 fa3d 	bl	8005900 <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d019      	beq.n	80034c4 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10b      	bne.n	80034ae <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8003496:	2300      	movs	r3, #0
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2302      	movs	r3, #2
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a2:	223c      	movs	r2, #60	; 0x3c
 80034a4:	2196      	movs	r1, #150	; 0x96
 80034a6:	4829      	ldr	r0, [pc, #164]	; (800354c <Level1Item3_Enter+0x108>)
 80034a8:	f7fe ffc0 	bl	800242c <ILI9341_Draw_Text>
 80034ac:	e00a      	b.n	80034c4 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80034ae:	2300      	movs	r3, #0
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	2302      	movs	r3, #2
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ba:	223c      	movs	r2, #60	; 0x3c
 80034bc:	2196      	movs	r1, #150	; 0x96
 80034be:	4824      	ldr	r0, [pc, #144]	; (8003550 <Level1Item3_Enter+0x10c>)
 80034c0:	f7fe ffb4 	bl	800242c <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80034c4:	f000 f84a 	bl	800355c <getPressKey>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2bff      	cmp	r3, #255	; 0xff
 80034cc:	d016      	beq.n	80034fc <Level1Item3_Enter+0xb8>
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80034da:	2301      	movs	r3, #1
 80034dc:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80034de:	f000 f83d 	bl	800355c <getPressKey>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <Level1Item3_Enter+0xaa>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d003      	beq.n	80034f4 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80034ec:	e005      	b.n	80034fa <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80034ee:	f7ff ff91 	bl	8003414 <RED_LED_ON>
	  	  		  break;
 80034f2:	e002      	b.n	80034fa <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80034f4:	f7ff ff9a 	bl	800342c <RED_LED_OFF>
	  	  		  break;
 80034f8:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80034fa:	e009      	b.n	8003510 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80034fc:	f000 f82e 	bl	800355c <getPressKey>
 8003500:	4603      	mov	r3, r0
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d104      	bne.n	8003510 <Level1Item3_Enter+0xcc>
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 800350c:	2300      	movs	r3, #0
 800350e:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8003510:	f000 f824 	bl	800355c <getPressKey>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1b0      	bne.n	800347c <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 800351a:	2300      	movs	r3, #0
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2302      	movs	r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003526:	223c      	movs	r2, #60	; 0x3c
 8003528:	210a      	movs	r1, #10
 800352a:	480a      	ldr	r0, [pc, #40]	; (8003554 <Level1Item3_Enter+0x110>)
 800352c:	f7fe ff7e 	bl	800242c <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <Level1Item3_Enter+0x114>)
 8003532:	f000 f8db 	bl	80036ec <Menu_Navigate>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	0800ef44 	.word	0x0800ef44
 8003544:	0800ef60 	.word	0x0800ef60
 8003548:	40020c00 	.word	0x40020c00
 800354c:	0800ef6c 	.word	0x0800ef6c
 8003550:	0800ef70 	.word	0x0800ef70
 8003554:	0800ef74 	.word	0x0800ef74
 8003558:	0800f2f8 	.word	0x0800f2f8

0800355c <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
	char digit = '\0';
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003566:	4a48      	ldr	r2, [pc, #288]	; (8003688 <getPressKey+0x12c>)
 8003568:	463b      	mov	r3, r7
 800356a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	1dbb      	adds	r3, r7, #6
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8003580:	f7fd fcc6 	bl	8000f10 <read_one_digit_from_keyboard>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	3b32      	subs	r3, #50	; 0x32
 800358c:	2b06      	cmp	r3, #6
 800358e:	d875      	bhi.n	800367c <getPressKey+0x120>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <getPressKey+0x3c>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035dd 	.word	0x080035dd
 800359c:	0800367d 	.word	0x0800367d
 80035a0:	080035b5 	.word	0x080035b5
 80035a4:	08003655 	.word	0x08003655
 80035a8:	0800362d 	.word	0x0800362d
 80035ac:	0800367d 	.word	0x0800367d
 80035b0:	08003605 	.word	0x08003605
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80035b4:	f107 0117 	add.w	r1, r7, #23
 80035b8:	463b      	mov	r3, r7
 80035ba:	2201      	movs	r2, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f00b fc7d 	bl	800eebc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035c2:	4638      	mov	r0, r7
 80035c4:	2300      	movs	r3, #0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	f7fe ff2a 	bl	800242c <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80035d8:	2300      	movs	r3, #0
 80035da:	e050      	b.n	800367e <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80035dc:	f107 0117 	add.w	r1, r7, #23
 80035e0:	463b      	mov	r3, r7
 80035e2:	2201      	movs	r2, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f00b fc69 	bl	800eebc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035ea:	4638      	mov	r0, r7
 80035ec:	2300      	movs	r3, #0
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	2302      	movs	r3, #2
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f8:	2200      	movs	r2, #0
 80035fa:	2100      	movs	r1, #0
 80035fc:	f7fe ff16 	bl	800242c <ILI9341_Draw_Text>
			return BUTTON_UP;
 8003600:	2301      	movs	r3, #1
 8003602:	e03c      	b.n	800367e <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003604:	f107 0117 	add.w	r1, r7, #23
 8003608:	463b      	mov	r3, r7
 800360a:	2201      	movs	r2, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f00b fc55 	bl	800eebc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003612:	4638      	mov	r0, r7
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2302      	movs	r3, #2
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003620:	2200      	movs	r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	f7fe ff02 	bl	800242c <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003628:	2302      	movs	r3, #2
 800362a:	e028      	b.n	800367e <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 800362c:	f107 0117 	add.w	r1, r7, #23
 8003630:	463b      	mov	r3, r7
 8003632:	2201      	movs	r2, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f00b fc41 	bl	800eebc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800363a:	4638      	mov	r0, r7
 800363c:	2300      	movs	r3, #0
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2302      	movs	r3, #2
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	f7fe feee 	bl	800242c <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8003650:	2303      	movs	r3, #3
 8003652:	e014      	b.n	800367e <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003654:	f107 0117 	add.w	r1, r7, #23
 8003658:	463b      	mov	r3, r7
 800365a:	2201      	movs	r2, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f00b fc2d 	bl	800eebc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003662:	4638      	mov	r0, r7
 8003664:	2300      	movs	r3, #0
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2302      	movs	r3, #2
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003670:	2200      	movs	r2, #0
 8003672:	2100      	movs	r1, #0
 8003674:	f7fe feda 	bl	800242c <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003678:	2304      	movs	r3, #4
 800367a:	e000      	b.n	800367e <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 800367c:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	0800ef90 	.word	0x0800ef90

0800368c <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
	if (Text)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d015      	beq.n	80036c6 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 800369a:	2300      	movs	r3, #0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2301      	movs	r3, #1
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a6:	2264      	movs	r2, #100	; 0x64
 80036a8:	210a      	movs	r1, #10
 80036aa:	4809      	ldr	r0, [pc, #36]	; (80036d0 <Generic_Write+0x44>)
 80036ac:	f7fe febe 	bl	800242c <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 80036b0:	2300      	movs	r3, #0
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2301      	movs	r3, #1
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036bc:	2264      	movs	r2, #100	; 0x64
 80036be:	210a      	movs	r1, #10
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe feb3 	bl	800242c <ILI9341_Draw_Text>
	}
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	0800efa4 	.word	0x0800efa4

080036d4 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <Menu_GetCurrentMenu+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	2000000c 	.word	0x2000000c

080036ec <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a11      	ldr	r2, [pc, #68]	; (800373c <Menu_Navigate+0x50>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01a      	beq.n	8003732 <Menu_Navigate+0x46>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 8003702:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <Menu_Navigate+0x54>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <Menu_Navigate+0x58>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <Menu_Navigate+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <Menu_Navigate+0x54>)
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	3218      	adds	r2, #24
 800371a:	4610      	mov	r0, r2
 800371c:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <Menu_Navigate+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4798      	blx	r3
 8003730:	e000      	b.n	8003734 <Menu_Navigate+0x48>
		return;		// Exit
 8003732:	bf00      	nop
	}
}
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0800f288 	.word	0x0800f288
 8003740:	2000000c 	.word	0x2000000c
 8003744:	200001fc 	.word	0x200001fc

08003748 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8003750:	4a05      	ldr	r2, [pc, #20]	; (8003768 <Menu_SetGenericWriteCallback+0x20>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <Menu_SetGenericWriteCallback+0x24>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ffc6 	bl	80036ec <Menu_Navigate>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200001fc 	.word	0x200001fc
 800376c:	2000000c 	.word	0x2000000c

08003770 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <Menu_EnterCurrentItem+0x34>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <Menu_EnterCurrentItem+0x38>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00d      	beq.n	800379c <Menu_EnterCurrentItem+0x2c>
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <Menu_EnterCurrentItem+0x34>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <Menu_EnterCurrentItem+0x34>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e000      	b.n	800379e <Menu_EnterCurrentItem+0x2e>
		return;
 800379c:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	0800f288 	.word	0x0800f288

080037ac <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	int i =0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80037b8:	e036      	b.n	8003828 <speed_test_LCD+0x7c>
	{
		i ++;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037d4:	4819      	ldr	r0, [pc, #100]	; (800383c <speed_test_LCD+0x90>)
 80037d6:	f006 fd30 	bl	800a23a <HAL_RNG_GetRandomNumber>
 80037da:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037e0:	4816      	ldr	r0, [pc, #88]	; (800383c <speed_test_LCD+0x90>)
 80037e2:	f006 fd2a 	bl	800a23a <HAL_RNG_GetRandomNumber>
 80037e6:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037ec:	4813      	ldr	r0, [pc, #76]	; (800383c <speed_test_LCD+0x90>)
 80037ee:	f006 fd24 	bl	800a23a <HAL_RNG_GetRandomNumber>
 80037f2:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037f8:	4810      	ldr	r0, [pc, #64]	; (800383c <speed_test_LCD+0x90>)
 80037fa:	f006 fd1e 	bl	800a23a <HAL_RNG_GetRandomNumber>
 80037fe:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 800380c:	89bb      	ldrh	r3, [r7, #12]
 800380e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003812:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003814:	897b      	ldrh	r3, [r7, #10]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	897a      	ldrh	r2, [r7, #10]
 8003820:	89b9      	ldrh	r1, [r7, #12]
 8003822:	89f8      	ldrh	r0, [r7, #14]
 8003824:	f7fe fce4 	bl	80021f0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	ddc4      	ble.n	80037ba <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200003c4 	.word	0x200003c4

08003840 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003848:	2305      	movs	r3, #5
 800384a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f001 f9ef 	bl	8004c34 <null_ptr_check>
 8003856:	4603      	mov	r3, r0
 8003858:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d133      	bne.n	80038ca <bme280_init+0x8a>
		while (try_count) {
 8003862:	e028      	b.n	80038b6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003864:	f107 010d 	add.w	r1, r7, #13
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	20d0      	movs	r0, #208	; 0xd0
 800386e:	f000 f832 	bl	80038d6 <bme280_get_regs>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d114      	bne.n	80038a8 <bme280_init+0x68>
 800387e:	7b7b      	ldrb	r3, [r7, #13]
 8003880:	2b60      	cmp	r3, #96	; 0x60
 8003882:	d111      	bne.n	80038a8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8003884:	7b7a      	ldrb	r2, [r7, #13]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f976 	bl	8003b7c <bme280_soft_reset>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d110      	bne.n	80038be <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 f83f 	bl	8004920 <get_calib_data>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80038a6:	e00a      	b.n	80038be <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2001      	movs	r0, #1
 80038ae:	4798      	blx	r3
			--try_count;
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1d3      	bne.n	8003864 <bme280_init+0x24>
 80038bc:	e000      	b.n	80038c0 <bme280_init+0x80>
				break;
 80038be:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80038c6:	23fe      	movs	r3, #254	; 0xfe
 80038c8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	4613      	mov	r3, r2
 80038e6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 f9a3 	bl	8004c34 <null_ptr_check>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80038f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d117      	bne.n	800392a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	789b      	ldrb	r3, [r3, #2]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d003      	beq.n	800390a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003908:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685c      	ldr	r4, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7858      	ldrb	r0, [r3, #1]
 8003912:	89bb      	ldrh	r3, [r7, #12]
 8003914:	7bf9      	ldrb	r1, [r7, #15]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	47a0      	blx	r4
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800391e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003926:	23fc      	movs	r3, #252	; 0xfc
 8003928:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800392a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800392e:	4618      	mov	r0, r3
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}

08003936 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b08d      	sub	sp, #52	; 0x34
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b0a      	cmp	r3, #10
 800394a:	d901      	bls.n	8003950 <bme280_set_regs+0x1a>
		len = 10;
 800394c:	230a      	movs	r3, #10
 800394e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f001 f96f 	bl	8004c34 <null_ptr_check>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800395c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d154      	bne.n	8003a0e <bme280_set_regs+0xd8>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d051      	beq.n	8003a0e <bme280_set_regs+0xd8>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d04e      	beq.n	8003a0e <bme280_set_regs+0xd8>
		if (len != 0) {
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d047      	beq.n	8003a06 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d01a      	beq.n	80039ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003984:	2300      	movs	r3, #0
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398a:	e011      	b.n	80039b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800398c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	440b      	add	r3, r1
 800399e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80039a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039aa:	3301      	adds	r3, #1
 80039ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3e8      	bcc.n	800398c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d90b      	bls.n	80039d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f107 0114 	add.w	r1, r7, #20
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 ffee 	bl	80049aa <interleave_reg_addr>
				temp_len = len * 2;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80039d6:	e001      	b.n	80039dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689c      	ldr	r4, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	7858      	ldrb	r0, [r3, #1]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039ea:	f107 0214 	add.w	r2, r7, #20
 80039ee:	47a0      	blx	r4
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80039f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80039fe:	23fc      	movs	r3, #252	; 0xfc
 8003a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a04:	e007      	b.n	8003a16 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003a06:	23fd      	movs	r3, #253	; 0xfd
 8003a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a0c:	e003      	b.n	8003a16 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003a0e:	23ff      	movs	r3, #255	; 0xff
 8003a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a14:	e000      	b.n	8003a18 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003a16:	bf00      	nop
	}


	return rslt;
 8003a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3734      	adds	r7, #52	; 0x34
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a30:	6838      	ldr	r0, [r7, #0]
 8003a32:	f001 f8ff 	bl	8004c34 <null_ptr_check>
 8003a36:	4603      	mov	r3, r0
 8003a38:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d13f      	bne.n	8003ac2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003a42:	f107 030e 	add.w	r3, r7, #14
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f874 	bl	8003b36 <bme280_get_sensor_mode>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <bme280_set_sensor_settings+0x46>
 8003a5a:	7bbb      	ldrb	r3, [r7, #14]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003a60:	6838      	ldr	r0, [r7, #0]
 8003a62:	f000 fb4e 	bl	8004102 <put_device_to_sleep>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d127      	bne.n	8003ac2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	4619      	mov	r1, r3
 8003a76:	2007      	movs	r0, #7
 8003a78:	f001 f8c0 	bl	8004bfc <are_settings_changed>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f98a 	bl	8003da6 <set_osr_settings>
 8003a92:	4603      	mov	r3, r0
 8003a94:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d111      	bne.n	8003ac2 <bme280_set_sensor_settings+0x9e>
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	2018      	movs	r0, #24
 8003aa4:	f001 f8aa 	bl	8004bfc <are_settings_changed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fa11 	bl	8003ee0 <set_filter_standby_settings>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	6039      	str	r1, [r7, #0]
 8003ad8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f001 f8aa 	bl	8004c34 <null_ptr_check>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11e      	bne.n	8003b2a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003aec:	f107 030e 	add.w	r3, r7, #14
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f81f 	bl	8003b36 <bme280_get_sensor_mode>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <bme280_set_sensor_mode+0x46>
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8003b0a:	6838      	ldr	r0, [r7, #0]
 8003b0c:	f000 faf9 	bl	8004102 <put_device_to_sleep>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fabb 	bl	800409c <write_power_mode>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f001 f877 	bl	8004c34 <null_ptr_check>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	20f4      	movs	r0, #244	; 0xf4
 8003b5a:	f7ff febc 	bl	80038d6 <bme280_get_regs>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8003b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003b84:	23e0      	movs	r3, #224	; 0xe0
 8003b86:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003b88:	23b6      	movs	r3, #182	; 0xb6
 8003b8a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 f851 	bl	8004c34 <null_ptr_check>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003b9e:	f107 010d 	add.w	r1, r7, #13
 8003ba2:	f107 000e 	add.w	r0, r7, #14
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f7ff fec4 	bl	8003936 <bme280_set_regs>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2002      	movs	r0, #2
 8003bb8:	4798      	blx	r3
	}

	return rslt;
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b08a      	sub	sp, #40	; 0x28
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 f823 	bl	8004c34 <null_ptr_check>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d124      	bne.n	8003c46 <bme280_get_sensor_data+0x80>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d021      	beq.n	8003c46 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003c02:	f107 011c 	add.w	r1, r7, #28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	20f7      	movs	r0, #247	; 0xf7
 8003c0c:	f7ff fe63 	bl	80038d6 <bme280_get_regs>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003c16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003c1e:	f107 0210 	add.w	r2, r7, #16
 8003c22:	f107 031c 	add.w	r3, r7, #28
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f815 	bl	8003c58 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3310      	adds	r3, #16
 8003c32:	f107 0110 	add.w	r1, r7, #16
 8003c36:	7bf8      	ldrb	r0, [r7, #15]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	f000 f853 	bl	8003ce4 <bme280_compensate_data>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003c44:	e002      	b.n	8003c4c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003c46:	23ff      	movs	r3, #255	; 0xff
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3302      	adds	r3, #2
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3303      	adds	r3, #3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3305      	adds	r3, #5
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3306      	adds	r3, #6
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04b      	beq.n	8003d96 <bme280_compensate_data+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d048      	beq.n	8003d96 <bme280_compensate_data+0xb2>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d045      	beq.n	8003d96 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	f000 fa2b 	bl	800419c <compensate_temperature>
 8003d46:	eeb0 7a40 	vmov.f32	s14, s0
 8003d4a:	eef0 7a60 	vmov.f32	s15, s1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	68b8      	ldr	r0, [r7, #8]
 8003d62:	f000 faed 	bl	8004340 <compensate_pressure>
 8003d66:	eeb0 7a40 	vmov.f32	s14, s0
 8003d6a:	eef0 7a60 	vmov.f32	s15, s1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	f000 fcad 	bl	80046e0 <compensate_humidity>
 8003d86:	eeb0 7a40 	vmov.f32	s14, s0
 8003d8a:	eef0 7a60 	vmov.f32	s15, s1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8003d94:	e001      	b.n	8003d9a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003d96:	23ff      	movs	r3, #255	; 0xff
 8003d98:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	68b8      	ldr	r0, [r7, #8]
 8003dc6:	f000 f815 	bl	8003df4 <set_osr_humidity_settings>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f842 	bl	8003e68 <set_osr_press_temp_settings>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003dfe:	23f2      	movs	r3, #242	; 0xf2
 8003e00:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	789b      	ldrb	r3, [r3, #2]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003e0e:	f107 010e 	add.w	r1, r7, #14
 8003e12:	f107 000c 	add.w	r0, r7, #12
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f7ff fd8c 	bl	8003936 <bme280_set_regs>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e2a:	23f4      	movs	r3, #244	; 0xf4
 8003e2c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e2e:	7b38      	ldrb	r0, [r7, #12]
 8003e30:	f107 010d 	add.w	r1, r7, #13
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f7ff fd4d 	bl	80038d6 <bme280_get_regs>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e48:	f107 010d 	add.w	r1, r7, #13
 8003e4c:	f107 000c 	add.w	r0, r7, #12
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f7ff fd6f 	bl	8003936 <bme280_set_regs>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e76:	23f4      	movs	r3, #244	; 0xf4
 8003e78:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003e7a:	7db8      	ldrb	r0, [r7, #22]
 8003e7c:	f107 0115 	add.w	r1, r7, #21
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f7ff fd27 	bl	80038d6 <bme280_get_regs>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d11f      	bne.n	8003ed4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8003e9e:	f107 0315 	add.w	r3, r7, #21
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f88e 	bl	8003fc6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003eb4:	f107 0315 	add.w	r3, r7, #21
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8a0 	bl	8004000 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ec0:	f107 0115 	add.w	r1, r7, #21
 8003ec4:	f107 0016 	add.w	r0, r7, #22
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f7ff fd33 	bl	8003936 <bme280_set_regs>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003eee:	23f5      	movs	r3, #245	; 0xf5
 8003ef0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003ef2:	7db8      	ldrb	r0, [r7, #22]
 8003ef4:	f107 0115 	add.w	r1, r7, #21
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f7ff fceb 	bl	80038d6 <bme280_get_regs>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11f      	bne.n	8003f4c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003f16:	f107 0315 	add.w	r3, r7, #21
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f81b 	bl	8003f58 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8003f2c:	f107 0315 	add.w	r3, r7, #21
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f82d 	bl	8003f92 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f38:	f107 0115 	add.w	r1, r7, #21
 8003f3c:	f107 0016 	add.w	r0, r7, #22
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f7ff fcf7 	bl	8003936 <bme280_set_regs>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f023 031c 	bic.w	r3, r3, #28
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	f003 031c 	and.w	r3, r3, #28
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	701a      	strb	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	b25a      	sxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	015b      	lsls	r3, r3, #5
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	701a      	strb	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	f023 031c 	bic.w	r3, r3, #28
 8003fda:	b25a      	sxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	f003 031c 	and.w	r3, r3, #28
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	701a      	strb	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b25b      	sxtb	r3, r3
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	b25a      	sxtb	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	785b      	ldrb	r3, [r3, #1]
 800401a:	015b      	lsls	r3, r3, #5
 800401c:	b25b      	sxtb	r3, r3
 800401e:	4313      	orrs	r3, r2
 8004020:	b25b      	sxtb	r3, r3
 8004022:	b2da      	uxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	701a      	strb	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b2da      	uxtb	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3302      	adds	r3, #2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	109b      	asrs	r3, r3, #2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	b2da      	uxtb	r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3302      	adds	r3, #2
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	b2da      	uxtb	r2, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3303      	adds	r3, #3
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	109b      	asrs	r3, r3, #2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3303      	adds	r3, #3
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	b2da      	uxtb	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	711a      	strb	r2, [r3, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80040a8:	23f4      	movs	r3, #244	; 0xf4
 80040aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80040ac:	7bb8      	ldrb	r0, [r7, #14]
 80040ae:	f107 010d 	add.w	r1, r7, #13
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f7ff fc0e 	bl	80038d6 <bme280_get_regs>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d117      	bne.n	80040f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80040c6:	7b7b      	ldrb	r3, [r7, #13]
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	b25a      	sxtb	r2, r3
 80040d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	b25b      	sxtb	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80040e2:	f107 010d 	add.w	r1, r7, #13
 80040e6:	f107 000e 	add.w	r0, r7, #14
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f7ff fc22 	bl	8003936 <bme280_set_regs>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800410a:	f107 0110 	add.w	r1, r7, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	20f2      	movs	r0, #242	; 0xf2
 8004114:	f7ff fbdf 	bl	80038d6 <bme280_get_regs>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800411c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d118      	bne.n	8004156 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004124:	f107 0208 	add.w	r2, r7, #8
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff80 	bl	8004034 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fd21 	bl	8003b7c <bme280_soft_reset>
 800413a:	4603      	mov	r3, r0
 800413c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800413e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f808 	bl	8004162 <reload_device_settings>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	201f      	movs	r0, #31
 8004172:	f7ff fe18 	bl	8003da6 <set_osr_settings>
 8004176:	4603      	mov	r3, r0
 8004178:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800417a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	201f      	movs	r0, #31
 8004188:	f7ff feaa 	bl	8003ee0 <set_filter_standby_settings>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <compensate_temperature+0x18c>)
 80041ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	4b5d      	ldr	r3, [pc, #372]	; (800432c <compensate_temperature+0x190>)
 80041b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f944 	bl	800044c <__aeabi_ui2d>
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <compensate_temperature+0x194>)
 80041ca:	f7fc fae3 	bl	8000794 <__aeabi_ddiv>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4614      	mov	r4, r2
 80041d4:	461d      	mov	r5, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc f936 	bl	800044c <__aeabi_ui2d>
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <compensate_temperature+0x198>)
 80041e6:	f7fc fad5 	bl	8000794 <__aeabi_ddiv>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fb ffed 	bl	80001d0 <__aeabi_dsub>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f931 	bl	800046c <__aeabi_i2d>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004212:	f7fc f995 	bl	8000540 <__aeabi_dmul>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc f912 	bl	800044c <__aeabi_ui2d>
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004230:	f7fc fab0 	bl	8000794 <__aeabi_ddiv>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4614      	mov	r4, r2
 800423a:	461d      	mov	r5, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f903 	bl	800044c <__aeabi_ui2d>
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <compensate_temperature+0x19c>)
 800424c:	f7fc faa2 	bl	8000794 <__aeabi_ddiv>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4620      	mov	r0, r4
 8004256:	4629      	mov	r1, r5
 8004258:	f7fb ffba 	bl	80001d0 <__aeabi_dsub>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800426c:	f7fc f968 	bl	8000540 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fc f8f4 	bl	800046c <__aeabi_i2d>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4620      	mov	r0, r4
 800428a:	4629      	mov	r1, r5
 800428c:	f7fc f958 	bl	8000540 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8004298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800429c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042a0:	f7fb ff98 	bl	80001d4 <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7fc fbe2 	bl	8000a74 <__aeabi_d2iz>
 80042b0:	4602      	mov	r2, r0
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80042b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042be:	f7fb ff89 	bl	80001d4 <__adddf3>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <compensate_temperature+0x1a0>)
 80042d0:	f7fc fa60 	bl	8000794 <__aeabi_ddiv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80042dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042e4:	f7fc fb9e 	bl	8000a24 <__aeabi_dcmplt>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80042ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80042f6:	e00c      	b.n	8004312 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80042f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004300:	f7fc fbae 	bl	8000a60 <__aeabi_dcmpgt>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <compensate_temperature+0x176>
		temperature = temperature_max;
 800430a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8004312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004316:	ec43 2b17 	vmov	d7, r2, r3
}
 800431a:	eeb0 0a47 	vmov.f32	s0, s14
 800431e:	eef0 0a67 	vmov.f32	s1, s15
 8004322:	3730      	adds	r7, #48	; 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bdb0      	pop	{r4, r5, r7, pc}
 8004328:	c0440000 	.word	0xc0440000
 800432c:	40554000 	.word	0x40554000
 8004330:	40d00000 	.word	0x40d00000
 8004334:	40900000 	.word	0x40900000
 8004338:	40c00000 	.word	0x40c00000
 800433c:	40b40000 	.word	0x40b40000

08004340 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 800434a:	a3d9      	add	r3, pc, #868	; (adr r3, 80046b0 <compensate_pressure+0x370>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8004354:	a3d8      	add	r3, pc, #864	; (adr r3, 80046b8 <compensate_pressure+0x378>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f882 	bl	800046c <__aeabi_i2d>
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004370:	f7fc fa10 	bl	8000794 <__aeabi_ddiv>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	4bc1      	ldr	r3, [pc, #772]	; (8004688 <compensate_pressure+0x348>)
 8004382:	f7fb ff25 	bl	80001d0 <__aeabi_dsub>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc f85f 	bl	800046c <__aeabi_i2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	f7fc f8c3 	bl	8000540 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	4bb1      	ldr	r3, [pc, #708]	; (800468c <compensate_pressure+0x34c>)
 80043c8:	f7fc f9e4 	bl	8000794 <__aeabi_ddiv>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f846 	bl	800046c <__aeabi_i2d>
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	f7fc f8ac 	bl	8000540 <__aeabi_dmul>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	f7fb feee 	bl	80001d4 <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004400:	f7fb fee8 	bl	80001d4 <__adddf3>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	4b9f      	ldr	r3, [pc, #636]	; (8004690 <compensate_pressure+0x350>)
 8004412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004416:	f7fc f9bd 	bl	8000794 <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4614      	mov	r4, r2
 8004420:	461d      	mov	r5, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f81f 	bl	800046c <__aeabi_i2d>
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	4b98      	ldr	r3, [pc, #608]	; (8004694 <compensate_pressure+0x354>)
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f80a 	bl	800046c <__aeabi_i2d>
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fc f870 	bl	8000540 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446c:	f7fc f868 	bl	8000540 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	4b86      	ldr	r3, [pc, #536]	; (8004698 <compensate_pressure+0x358>)
 800447e:	f7fc f989 	bl	8000794 <__aeabi_ddiv>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fb ffeb 	bl	800046c <__aeabi_i2d>
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	f7fc f851 	bl	8000540 <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044aa:	f7fb fe93 	bl	80001d4 <__adddf3>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b77      	ldr	r3, [pc, #476]	; (8004698 <compensate_pressure+0x358>)
 80044bc:	f7fc f96a 	bl	8000794 <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <compensate_pressure+0x34c>)
 80044ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044d2:	f7fc f95f 	bl	8000794 <__aeabi_ddiv>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <compensate_pressure+0x35c>)
 80044e4:	f7fb fe76 	bl	80001d4 <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	88db      	ldrh	r3, [r3, #6]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fb ffa9 	bl	800044c <__aeabi_ui2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc f81d 	bl	8000540 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800451a:	f7fc fa79 	bl	8000a10 <__aeabi_dcmpeq>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f040 80cd 	bne.w	80046c0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb ff8e 	bl	800044c <__aeabi_ui2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	4959      	ldr	r1, [pc, #356]	; (80046a0 <compensate_pressure+0x360>)
 800453a:	f7fb fe49 	bl	80001d0 <__aeabi_dsub>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <compensate_pressure+0x364>)
 800454c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004550:	f7fc f920 	bl	8000794 <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800455c:	f7fb fe38 	bl	80001d0 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	a345      	add	r3, pc, #276	; (adr r3, 8004680 <compensate_pressure+0x340>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffe7 	bl	8000540 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457e:	f7fc f909 	bl	8000794 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff6b 	bl	800046c <__aeabi_i2d>
 8004596:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800459a:	f7fb ffd1 	bl	8000540 <__aeabi_dmul>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045aa:	f7fb ffc9 	bl	8000540 <__aeabi_dmul>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <compensate_pressure+0x368>)
 80045bc:	f7fc f8ea 	bl	8000794 <__aeabi_ddiv>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff4c 	bl	800046c <__aeabi_i2d>
 80045d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045d8:	f7fb ffb2 	bl	8000540 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <compensate_pressure+0x34c>)
 80045ea:	f7fc f8d3 	bl	8000794 <__aeabi_ddiv>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 80045f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045fe:	f7fb fde9 	bl	80001d4 <__adddf3>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4614      	mov	r4, r2
 8004608:	461d      	mov	r5, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff2b 	bl	800046c <__aeabi_i2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fb fdd9 	bl	80001d4 <__adddf3>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <compensate_pressure+0x36c>)
 8004630:	f7fc f8b0 	bl	8000794 <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800463c:	f7fb fdca 	bl	80001d4 <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004650:	f7fc f9e8 	bl	8000a24 <__aeabi_dcmplt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <compensate_pressure+0x324>
			pressure = pressure_min;
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004662:	e031      	b.n	80046c8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004664:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004668:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800466c:	f7fc f9f8 	bl	8000a60 <__aeabi_dcmpgt>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800467e:	e023      	b.n	80046c8 <compensate_pressure+0x388>
 8004680:	00000000 	.word	0x00000000
 8004684:	40b86a00 	.word	0x40b86a00
 8004688:	40ef4000 	.word	0x40ef4000
 800468c:	40e00000 	.word	0x40e00000
 8004690:	40100000 	.word	0x40100000
 8004694:	40f00000 	.word	0x40f00000
 8004698:	41200000 	.word	0x41200000
 800469c:	3ff00000 	.word	0x3ff00000
 80046a0:	41300000 	.word	0x41300000
 80046a4:	40b00000 	.word	0x40b00000
 80046a8:	41e00000 	.word	0x41e00000
 80046ac:	40300000 	.word	0x40300000
 80046b0:	00000000 	.word	0x00000000
 80046b4:	40dd4c00 	.word	0x40dd4c00
 80046b8:	00000000 	.word	0x00000000
 80046bc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80046c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80046c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80046d0:	eeb0 0a47 	vmov.f32	s0, s14
 80046d4:	eef0 0a67 	vmov.f32	s1, s15
 80046d8:	3738      	adds	r7, #56	; 0x38
 80046da:	46bd      	mov	sp, r7
 80046dc:	bdb0      	pop	{r4, r5, r7, pc}
 80046de:	bf00      	nop

080046e0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b094      	sub	sp, #80	; 0x50
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <compensate_humidity+0x220>)
 80046fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb feb1 	bl	800046c <__aeabi_i2d>
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <compensate_humidity+0x224>)
 8004710:	f7fb fd5e 	bl	80001d0 <__aeabi_dsub>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fea2 	bl	800046c <__aeabi_i2d>
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b76      	ldr	r3, [pc, #472]	; (8004908 <compensate_humidity+0x228>)
 800472e:	f7fb ff07 	bl	8000540 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb fe93 	bl	800046c <__aeabi_i2d>
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	4b70      	ldr	r3, [pc, #448]	; (800490c <compensate_humidity+0x22c>)
 800474c:	f7fc f822 	bl	8000794 <__aeabi_ddiv>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800475c:	f7fb fef0 	bl	8000540 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd34 	bl	80001d4 <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fb fe67 	bl	800044c <__aeabi_ui2d>
 800477e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004782:	f7fb fd25 	bl	80001d0 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fe69 	bl	800046c <__aeabi_i2d>
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <compensate_humidity+0x230>)
 80047a0:	f7fb fff8 	bl	8000794 <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	7f1b      	ldrb	r3, [r3, #28]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fe4b 	bl	800044c <__aeabi_ui2d>
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	4b56      	ldr	r3, [pc, #344]	; (8004914 <compensate_humidity+0x234>)
 80047bc:	f7fb ffea 	bl	8000794 <__aeabi_ddiv>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047cc:	f7fb feb8 	bl	8000540 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <compensate_humidity+0x238>)
 80047de:	f7fb fcf9 	bl	80001d4 <__adddf3>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fb fe3b 	bl	800046c <__aeabi_i2d>
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <compensate_humidity+0x234>)
 80047fc:	f7fb ffca 	bl	8000794 <__aeabi_ddiv>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800480c:	f7fb fe98 	bl	8000540 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800481c:	f7fb fe90 	bl	8000540 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <compensate_humidity+0x238>)
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 800483a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004842:	f7fb fe7d 	bl	8000540 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4614      	mov	r4, r2
 800484c:	461d      	mov	r5, r3
 800484e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004856:	f7fb fe73 	bl	8000540 <__aeabi_dmul>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fb fe6d 	bl	8000540 <__aeabi_dmul>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fdea 	bl	800044c <__aeabi_ui2d>
 8004878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800487c:	f7fb fe60 	bl	8000540 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <compensate_humidity+0x23c>)
 800488e:	f7fb ff81 	bl	8000794 <__aeabi_ddiv>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	491f      	ldr	r1, [pc, #124]	; (8004918 <compensate_humidity+0x238>)
 800489c:	f7fb fc98 	bl	80001d0 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048a8:	f7fb fe4a 	bl	8000540 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048bc:	f7fc f8d0 	bl	8000a60 <__aeabi_dcmpgt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80048c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80048ce:	e00c      	b.n	80048ea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 80048d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048d8:	f7fc f8a4 	bl	8000a24 <__aeabi_dcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <compensate_humidity+0x20a>
		humidity = humidity_min;
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 80048ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80048f2:	eeb0 0a47 	vmov.f32	s0, s14
 80048f6:	eef0 0a67 	vmov.f32	s1, s15
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004900:	40590000 	.word	0x40590000
 8004904:	40f2c000 	.word	0x40f2c000
 8004908:	40500000 	.word	0x40500000
 800490c:	40d00000 	.word	0x40d00000
 8004910:	40f00000 	.word	0x40f00000
 8004914:	41900000 	.word	0x41900000
 8004918:	3ff00000 	.word	0x3ff00000
 800491c:	41200000 	.word	0x41200000

08004920 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004928:	2388      	movs	r3, #136	; 0x88
 800492a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004944:	f107 010c 	add.w	r1, r7, #12
 8004948:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	221a      	movs	r2, #26
 8004950:	f7fe ffc1 	bl	80038d6 <bme280_get_regs>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800495a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f84a 	bl	8004a02 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800496e:	23e1      	movs	r3, #225	; 0xe1
 8004970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004974:	f107 010c 	add.w	r1, r7, #12
 8004978:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2207      	movs	r2, #7
 8004980:	f7fe ffa9 	bl	80038d6 <bme280_get_regs>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800498a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8e1 	bl	8004b60 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800499e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
 80049bc:	e016      	b.n	80049ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	441a      	add	r2, r3
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	440b      	add	r3, r1
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	441a      	add	r2, r3
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4619      	mov	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	440b      	add	r3, r1
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	3301      	adds	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
 80049ec:	7dfa      	ldrb	r2, [r7, #23]
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3e4      	bcc.n	80049be <interleave_reg_addr+0x14>
	}
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3301      	adds	r3, #1
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	b21a      	sxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3303      	adds	r3, #3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b21a      	sxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3305      	adds	r3, #5
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b21b      	sxth	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b21a      	sxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3307      	adds	r3, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b21a      	sxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b21b      	sxth	r3, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3309      	adds	r3, #9
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	330b      	adds	r3, #11
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330a      	adds	r3, #10
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b21a      	sxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	330d      	adds	r3, #13
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	b21a      	sxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	330c      	adds	r3, #12
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	330f      	adds	r3, #15
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	330e      	adds	r3, #14
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3311      	adds	r3, #17
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3310      	adds	r3, #16
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3313      	adds	r3, #19
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3312      	adds	r3, #18
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3315      	adds	r3, #21
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3314      	adds	r3, #20
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3317      	adds	r3, #23
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3316      	adds	r3, #22
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7e5a      	ldrb	r2, [r3, #25]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	761a      	strb	r2, [r3, #24]

}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b21a      	sxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b21a      	sxth	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	789a      	ldrb	r2, [r3, #2]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3303      	adds	r3, #3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004bae:	8a7a      	ldrh	r2, [r7, #18]
 8004bb0:	8a3b      	ldrh	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3305      	adds	r3, #5
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004bd6:	89fa      	ldrh	r2, [r7, #14]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3306      	adds	r3, #6
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b25a      	sxtb	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	460a      	mov	r2, r1
 8004c06:	71fb      	strb	r3, [r7, #7]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004c10:	79fa      	ldrb	r2, [r7, #7]
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e001      	b.n	8004c26 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004c5a:	23ff      	movs	r3, #255	; 0xff
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e001      	b.n	8004c64 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	603a      	str	r2, [r7, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	460b      	mov	r3, r1
 8004c84:	71bb      	strb	r3, [r7, #6]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	230a      	movs	r3, #10
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4811      	ldr	r0, [pc, #68]	; (8004ce0 <user_i2c_read+0x6c>)
 8004c9c:	f002 fd24 	bl	80076e8 <HAL_I2C_Master_Transmit>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <user_i2c_read+0x38>
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004caa:	e014      	b.n	8004cd6 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	88bb      	ldrh	r3, [r7, #4]
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <user_i2c_read+0x6c>)
 8004cc4:	f002 fe0e 	bl	80078e4 <HAL_I2C_Master_Receive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <user_i2c_read+0x60>
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd2:	e000      	b.n	8004cd6 <user_i2c_read+0x62>

  return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000234 	.word	0x20000234

08004ce4 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb35 	bl	800535c <HAL_Delay>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	603a      	str	r2, [r7, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	71bb      	strb	r3, [r7, #6]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f009 fff0 	bl	800ecfc <malloc>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004d20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	88ba      	ldrh	r2, [r7, #4]
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f009 fff3 	bl	800ed1c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	88bb      	ldrh	r3, [r7, #4]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <user_i2c_write+0x74>)
 8004d4e:	f002 fccb 	bl	80076e8 <HAL_I2C_Master_Transmit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <user_i2c_write+0x62>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d5c:	e003      	b.n	8004d66 <user_i2c_write+0x6a>

  free(buf);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f009 ffd4 	bl	800ed0c <free>
  return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000234 	.word	0x20000234

08004d74 <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	detect_bme280();
 8004d78:	f000 f8b6 	bl	8004ee8 <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <detect_all_sensors_and_init+0x3c>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 8004d84:	f000 f82e 	bl	8004de4 <init_bme280>
	}

	detect_mpu6050();
 8004d88:	f000 f8e4 	bl	8004f54 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <detect_all_sensors_and_init+0x3c>)
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 8004d94:	f000 f816 	bl	8004dc4 <init_mpu6050>
	}

	detect_apds9960();
 8004d98:	f000 f9ba 	bl	8005110 <detect_apds9960>
	denect_hmc5883l();
 8004d9c:	f000 f95c 	bl	8005058 <denect_hmc5883l>
	detect_ms5611();
 8004da0:	f000 f988 	bl	80050b4 <detect_ms5611>
	detect_oled_screen();
 8004da4:	f000 f9ea 	bl	800517c <detect_oled_screen>
	detect_ds3231();
 8004da8:	f000 fa0e 	bl	80051c8 <detect_ds3231>

}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000520 	.word	0x20000520

08004db4 <measure_sensors>:
//----------------------------------------------------------------------------------------
void measure_sensors(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	bme280_measure();
 8004db8:	f000 f85e 	bl	8004e78 <bme280_measure>
	mpu6050_measure();
 8004dbc:	f000 f80a 	bl	8004dd4 <mpu6050_measure>


//	hmc5883l();
//	ms5611();
//	apds9960();
}
 8004dc0:	bf00      	nop
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0

}
 8004dc8:	bf00      	nop
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0

}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <init_bme280+0x80>)
 8004dea:	2276      	movs	r2, #118	; 0x76
 8004dec:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <init_bme280+0x80>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <init_bme280+0x80>)
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <init_bme280+0x84>)
 8004df8:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <init_bme280+0x80>)
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <init_bme280+0x88>)
 8004dfe:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8004e00:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <init_bme280+0x80>)
 8004e02:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <init_bme280+0x8c>)
 8004e04:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004e06:	4817      	ldr	r0, [pc, #92]	; (8004e64 <init_bme280+0x80>)
 8004e08:	f7fe fd1a 	bl	8003840 <bme280_init>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <init_bme280+0x90>)
 8004e12:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <init_bme280+0x80>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <init_bme280+0x80>)
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <init_bme280+0x80>)
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <init_bme280+0x80>)
 8004e2e:	2204      	movs	r2, #4
 8004e30:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004e34:	490b      	ldr	r1, [pc, #44]	; (8004e64 <init_bme280+0x80>)
 8004e36:	200f      	movs	r0, #15
 8004e38:	f7fe fdf4 	bl	8003a24 <bme280_set_sensor_settings>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <init_bme280+0x90>)
 8004e42:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004e44:	4907      	ldr	r1, [pc, #28]	; (8004e64 <init_bme280+0x80>)
 8004e46:	2003      	movs	r0, #3
 8004e48:	f7fe fe41 	bl	8003ace <bme280_set_sensor_mode>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <init_bme280+0x90>)
 8004e52:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <init_bme280+0x80>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2028      	movs	r0, #40	; 0x28
 8004e5a:	4798      	blx	r3
}
 8004e5c:	bf00      	nop
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200004c0 	.word	0x200004c0
 8004e68:	08004c75 	.word	0x08004c75
 8004e6c:	08004cfd 	.word	0x08004cfd
 8004e70:	08004ce5 	.word	0x08004ce5
 8004e74:	20000500 	.word	0x20000500

08004e78 <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <bme280_measure+0x60>)
 8004e7e:	4917      	ldr	r1, [pc, #92]	; (8004edc <bme280_measure+0x64>)
 8004e80:	2007      	movs	r0, #7
 8004e82:	f7fe fea0 	bl	8003bc6 <bme280_get_sensor_data>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <bme280_measure+0x68>)
 8004e8c:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <bme280_measure+0x68>)
 8004e90:	f993 3000 	ldrsb.w	r3, [r3]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11d      	bne.n	8004ed4 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <bme280_measure+0x64>)
 8004e9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fb fe0f 	bl	8000ac4 <__aeabi_d2f>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <bme280_measure+0x6c>)
 8004eaa:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <bme280_measure+0x64>)
 8004eae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f7fb fe05 	bl	8000ac4 <__aeabi_d2f>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <bme280_measure+0x6c>)
 8004ebe:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <bme280_measure+0x64>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fdfb 	bl	8000ac4 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4a04      	ldr	r2, [pc, #16]	; (8004ee4 <bme280_measure+0x6c>)
 8004ed2:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200004c0 	.word	0x200004c0
 8004edc:	20000508 	.word	0x20000508
 8004ee0:	20000500 	.word	0x20000500
 8004ee4:	20000520 	.word	0x20000520

08004ee8 <detect_bme280>:


// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8004ef2:	2376      	movs	r3, #118	; 0x76
 8004ef4:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8004ef6:	23d0      	movs	r3, #208	; 0xd0
 8004ef8:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8004efa:	2360      	movs	r3, #96	; 0x60
 8004efc:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004efe:	2300      	movs	r3, #0
 8004f00:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004f02:	88bb      	ldrh	r3, [r7, #4]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	b299      	uxth	r1, r3
 8004f08:	887a      	ldrh	r2, [r7, #2]
 8004f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	2301      	movs	r3, #1
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	463b      	mov	r3, r7
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	480c      	ldr	r0, [pc, #48]	; (8004f4c <detect_bme280+0x64>)
 8004f1c:	f003 f802 	bl	8007f24 <HAL_I2C_Mem_Read>
 8004f20:	4603      	mov	r3, r0
 8004f22:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8004f24:	783b      	ldrb	r3, [r7, #0]
 8004f26:	787a      	ldrb	r2, [r7, #1]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d106      	bne.n	8004f3a <detect_bme280+0x52>
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <detect_bme280+0x68>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e003      	b.n	8004f42 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <detect_bme280+0x68>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
	}
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000234 	.word	0x20000234
 8004f50:	20000520 	.word	0x20000520

08004f54 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8004f5e:	23d0      	movs	r3, #208	; 0xd0
 8004f60:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8004f62:	2375      	movs	r3, #117	; 0x75
 8004f64:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8004f66:	2368      	movs	r3, #104	; 0x68
 8004f68:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8004f6e:	897a      	ldrh	r2, [r7, #10]
 8004f70:	89b9      	ldrh	r1, [r7, #12]
 8004f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f76:	9302      	str	r3, [sp, #8]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2301      	movs	r3, #1
 8004f84:	4832      	ldr	r0, [pc, #200]	; (8005050 <detect_mpu6050+0xfc>)
 8004f86:	f002 ffcd 	bl	8007f24 <HAL_I2C_Mem_Read>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8004f8e:	7a3b      	ldrb	r3, [r7, #8]
 8004f90:	7a7a      	ldrb	r2, [r7, #9]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d106      	bne.n	8004fa4 <detect_mpu6050+0x50>
 8004f96:	89fb      	ldrh	r3, [r7, #14]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8004f9c:	4b2d      	ldr	r3, [pc, #180]	; (8005054 <detect_mpu6050+0x100>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	705a      	strb	r2, [r3, #1]
 8004fa2:	e002      	b.n	8004faa <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <detect_mpu6050+0x100>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <detect_mpu6050+0x100>)
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04a      	beq.n	8005048 <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8004fb6:	89b9      	ldrh	r1, [r7, #12]
 8004fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	1dfb      	adds	r3, r7, #7
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	226a      	movs	r2, #106	; 0x6a
 8004fca:	4821      	ldr	r0, [pc, #132]	; (8005050 <detect_mpu6050+0xfc>)
 8004fcc:	f002 feb0 	bl	8007d30 <HAL_I2C_Mem_Write>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8004fd8:	89b9      	ldrh	r1, [r7, #12]
 8004fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	2301      	movs	r3, #1
 8004fea:	2237      	movs	r2, #55	; 0x37
 8004fec:	4818      	ldr	r0, [pc, #96]	; (8005050 <detect_mpu6050+0xfc>)
 8004fee:	f002 fe9f 	bl	8007d30 <HAL_I2C_Mem_Write>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8004ffa:	89b9      	ldrh	r1, [r7, #12]
 8004ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	2301      	movs	r3, #1
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	f107 0308 	add.w	r3, r7, #8
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	226a      	movs	r2, #106	; 0x6a
 8005010:	480f      	ldr	r0, [pc, #60]	; (8005050 <detect_mpu6050+0xfc>)
 8005012:	f002 ff87 	bl	8007f24 <HAL_I2C_Mem_Read>
 8005016:	4603      	mov	r3, r0
 8005018:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 800501e:	89b9      	ldrh	r1, [r7, #12]
 8005020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005024:	9302      	str	r3, [sp, #8]
 8005026:	2301      	movs	r3, #1
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2301      	movs	r3, #1
 8005032:	2237      	movs	r2, #55	; 0x37
 8005034:	4806      	ldr	r0, [pc, #24]	; (8005050 <detect_mpu6050+0xfc>)
 8005036:	f002 ff75 	bl	8007f24 <HAL_I2C_Mem_Read>
 800503a:	4603      	mov	r3, r0
 800503c:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 800503e:	89fb      	ldrh	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8005044:	f000 f808 	bl	8005058 <denect_hmc5883l>
		}
	}
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200002e0 	.word	0x200002e0
 8005054:	20000520 	.word	0x20000520

08005058 <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8005062:	231e      	movs	r3, #30
 8005064:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 8005066:	230a      	movs	r3, #10
 8005068:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 800506e:	88bb      	ldrh	r3, [r7, #4]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	b299      	uxth	r1, r3
 8005074:	887a      	ldrh	r2, [r7, #2]
 8005076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	2301      	movs	r3, #1
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	1c7b      	adds	r3, r7, #1
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2301      	movs	r3, #1
 8005086:	4809      	ldr	r0, [pc, #36]	; (80050ac <denect_hmc5883l+0x54>)
 8005088:	f002 ff4c 	bl	8007f24 <HAL_I2C_Mem_Read>
 800508c:	4603      	mov	r3, r0
 800508e:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <denect_hmc5883l+0x58>)
 8005098:	2201      	movs	r2, #1
 800509a:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 800509c:	e002      	b.n	80050a4 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <denect_hmc5883l+0x58>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	709a      	strb	r2, [r3, #2]
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200002e0 	.word	0x200002e0
 80050b0:	20000520 	.word	0x20000520

080050b4 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 80050be:	2377      	movs	r3, #119	; 0x77
 80050c0:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 80050c2:	2300      	movs	r3, #0
 80050c4:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80050ca:	88bb      	ldrh	r3, [r7, #4]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	b299      	uxth	r1, r3
 80050d0:	887a      	ldrh	r2, [r7, #2]
 80050d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d6:	9302      	str	r3, [sp, #8]
 80050d8:	2301      	movs	r3, #1
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	1c7b      	adds	r3, r7, #1
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2301      	movs	r3, #1
 80050e2:	4809      	ldr	r0, [pc, #36]	; (8005108 <detect_ms5611+0x54>)
 80050e4:	f002 ff1e 	bl	8007f24 <HAL_I2C_Mem_Read>
 80050e8:	4603      	mov	r3, r0
 80050ea:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <detect_ms5611+0x58>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 80050f8:	e002      	b.n	8005100 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <detect_ms5611+0x58>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	70da      	strb	r2, [r3, #3]
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200002e0 	.word	0x200002e0
 800510c:	20000520 	.word	0x20000520

08005110 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800511a:	2339      	movs	r3, #57	; 0x39
 800511c:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 800511e:	2392      	movs	r3, #146	; 0x92
 8005120:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8005122:	23a8      	movs	r3, #168	; 0xa8
 8005124:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800512a:	88bb      	ldrh	r3, [r7, #4]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	b299      	uxth	r1, r3
 8005130:	887a      	ldrh	r2, [r7, #2]
 8005132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	2301      	movs	r3, #1
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	463b      	mov	r3, r7
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2301      	movs	r3, #1
 8005142:	480c      	ldr	r0, [pc, #48]	; (8005174 <detect_apds9960+0x64>)
 8005144:	f002 feee 	bl	8007f24 <HAL_I2C_Mem_Read>
 8005148:	4603      	mov	r3, r0
 800514a:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 800514c:	783b      	ldrb	r3, [r7, #0]
 800514e:	787a      	ldrb	r2, [r7, #1]
 8005150:	429a      	cmp	r2, r3
 8005152:	d106      	bne.n	8005162 <detect_apds9960+0x52>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <detect_apds9960+0x68>)
 800515c:	2201      	movs	r2, #1
 800515e:	711a      	strb	r2, [r3, #4]
 8005160:	e003      	b.n	800516a <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <detect_apds9960+0x68>)
 8005164:	2200      	movs	r2, #0
 8005166:	711a      	strb	r2, [r3, #4]
	}
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200002e0 	.word	0x200002e0
 8005178:	20000520 	.word	0x20000520

0800517c <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 8005186:	2300      	movs	r3, #0
 8005188:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 800518a:	23ae      	movs	r3, #174	; 0xae
 800518c:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2302      	movs	r3, #2
 8005198:	2178      	movs	r1, #120	; 0x78
 800519a:	4809      	ldr	r0, [pc, #36]	; (80051c0 <detect_oled_screen+0x44>)
 800519c:	f002 faa4 	bl	80076e8 <HAL_I2C_Master_Transmit>
 80051a0:	4603      	mov	r3, r0
 80051a2:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <detect_oled_screen+0x48>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 80051b0:	e002      	b.n	80051b8 <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <detect_oled_screen+0x48>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	715a      	strb	r2, [r3, #5]
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000234 	.word	0x20000234
 80051c4:	20000520 	.word	0x20000520

080051c8 <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 80051d2:	2368      	movs	r3, #104	; 0x68
 80051d4:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 80051d6:	2300      	movs	r3, #0
 80051d8:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80051de:	88bb      	ldrh	r3, [r7, #4]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	b299      	uxth	r1, r3
 80051e4:	887a      	ldrh	r2, [r7, #2]
 80051e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	2301      	movs	r3, #1
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	1c7b      	adds	r3, r7, #1
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2301      	movs	r3, #1
 80051f6:	4809      	ldr	r0, [pc, #36]	; (800521c <detect_ds3231+0x54>)
 80051f8:	f002 fe94 	bl	8007f24 <HAL_I2C_Mem_Read>
 80051fc:	4603      	mov	r3, r0
 80051fe:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <detect_ds3231+0x58>)
 8005208:	2201      	movs	r2, #1
 800520a:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 800520c:	e002      	b.n	8005214 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <detect_ds3231+0x58>)
 8005210:	2200      	movs	r2, #0
 8005212:	719a      	strb	r2, [r3, #6]
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000234 	.word	0x20000234
 8005220:	20000520 	.word	0x20000520

08005224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800525c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005228:	480d      	ldr	r0, [pc, #52]	; (8005260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800522a:	490e      	ldr	r1, [pc, #56]	; (8005264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800522c:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800522e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005230:	e002      	b.n	8005238 <LoopCopyDataInit>

08005232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005236:	3304      	adds	r3, #4

08005238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800523a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800523c:	d3f9      	bcc.n	8005232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800523e:	4a0b      	ldr	r2, [pc, #44]	; (800526c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005240:	4c0b      	ldr	r4, [pc, #44]	; (8005270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005244:	e001      	b.n	800524a <LoopFillZerobss>

08005246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005248:	3204      	adds	r2, #4

0800524a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800524a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800524c:	d3fb      	bcc.n	8005246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800524e:	f7fc ffbd 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005252:	f009 fd2f 	bl	800ecb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005256:	f7fc f809 	bl	800126c <main>
  bx  lr    
 800525a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800525c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005264:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005268:	0800f48c 	.word	0x0800f48c
  ldr r2, =_sbss
 800526c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005270:	20000c40 	.word	0x20000c40

08005274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005274:	e7fe      	b.n	8005274 <ADC_IRQHandler>
	...

08005278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_Init+0x40>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <HAL_Init+0x40>)
 8005282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_Init+0x40>)
 800528e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <HAL_Init+0x40>)
 800529a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052a0:	2003      	movs	r0, #3
 80052a2:	f000 f94f 	bl	8005544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052a6:	2000      	movs	r0, #0
 80052a8:	f000 f808 	bl	80052bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052ac:	f7fc fc4a 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023c00 	.word	0x40023c00

080052bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_InitTick+0x54>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b12      	ldr	r3, [pc, #72]	; (8005314 <HAL_InitTick+0x58>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f967 	bl	80055ae <HAL_SYSTICK_Config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00e      	b.n	8005308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d80a      	bhi.n	8005306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f0:	2200      	movs	r2, #0
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f8:	f000 f92f 	bl	800555a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052fc:	4a06      	ldr	r2, [pc, #24]	; (8005318 <HAL_InitTick+0x5c>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000004 	.word	0x20000004
 8005314:	20000150 	.word	0x20000150
 8005318:	2000014c 	.word	0x2000014c

0800531c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_IncTick+0x20>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_IncTick+0x24>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4413      	add	r3, r2
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_IncTick+0x24>)
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000150 	.word	0x20000150
 8005340:	20000550 	.word	0x20000550

08005344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return uwTick;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_GetTick+0x14>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000550 	.word	0x20000550

0800535c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005364:	f7ff ffee 	bl	8005344 <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005374:	d005      	beq.n	8005382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <HAL_Delay+0x44>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005382:	bf00      	nop
 8005384:	f7ff ffde 	bl	8005344 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	429a      	cmp	r2, r3
 8005392:	d8f7      	bhi.n	8005384 <HAL_Delay+0x28>
  {
  }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000150 	.word	0x20000150

080053a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <__NVIC_SetPriorityGrouping+0x44>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053c0:	4013      	ands	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053d6:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <__NVIC_SetPriorityGrouping+0x44>)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	60d3      	str	r3, [r2, #12]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <__NVIC_GetPriorityGrouping+0x18>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	0a1b      	lsrs	r3, r3, #8
 80053f6:	f003 0307 	and.w	r3, r3, #7
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	db0b      	blt.n	8005432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	4907      	ldr	r1, [pc, #28]	; (8005440 <__NVIC_EnableIRQ+0x38>)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2001      	movs	r0, #1
 800542a:	fa00 f202 	lsl.w	r2, r0, r2
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e100 	.word	0xe000e100

08005444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db0a      	blt.n	800546e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	490c      	ldr	r1, [pc, #48]	; (8005490 <__NVIC_SetPriority+0x4c>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	440b      	add	r3, r1
 8005468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800546c:	e00a      	b.n	8005484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <__NVIC_SetPriority+0x50>)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3b04      	subs	r3, #4
 800547c:	0112      	lsls	r2, r2, #4
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	440b      	add	r3, r1
 8005482:	761a      	strb	r2, [r3, #24]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000e100 	.word	0xe000e100
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf28      	it	cs
 80054b6:	2304      	movcs	r3, #4
 80054b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3304      	adds	r3, #4
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d902      	bls.n	80054c8 <NVIC_EncodePriority+0x30>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3b03      	subs	r3, #3
 80054c6:	e000      	b.n	80054ca <NVIC_EncodePriority+0x32>
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	401a      	ands	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43d9      	mvns	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f0:	4313      	orrs	r3, r2
         );
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3724      	adds	r7, #36	; 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005510:	d301      	bcc.n	8005516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005512:	2301      	movs	r3, #1
 8005514:	e00f      	b.n	8005536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005516:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <SysTick_Config+0x40>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800551e:	210f      	movs	r1, #15
 8005520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005524:	f7ff ff8e 	bl	8005444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <SysTick_Config+0x40>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <SysTick_Config+0x40>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010

08005544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ff29 	bl	80053a4 <__NVIC_SetPriorityGrouping>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	4603      	mov	r3, r0
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800556c:	f7ff ff3e 	bl	80053ec <__NVIC_GetPriorityGrouping>
 8005570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7ff ff8e 	bl	8005498 <NVIC_EncodePriority>
 800557c:	4602      	mov	r2, r0
 800557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ff5d 	bl	8005444 <__NVIC_SetPriority>
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	4603      	mov	r3, r0
 800559a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800559c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff31 	bl	8005408 <__NVIC_EnableIRQ>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ffa2 	bl	8005500 <SysTick_Config>
 80055bc:	4603      	mov	r3, r0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e16b      	b.n	80058bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055e4:	2201      	movs	r2, #1
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4013      	ands	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	f040 815a 	bne.w	80058b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b01      	cmp	r3, #1
 800560c:	d005      	beq.n	800561a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005616:	2b02      	cmp	r3, #2
 8005618:	d130      	bne.n	800567c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2203      	movs	r2, #3
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005650:	2201      	movs	r2, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 0201 	and.w	r2, r3, #1
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d017      	beq.n	80056b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d123      	bne.n	800570c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	220f      	movs	r2, #15
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	08da      	lsrs	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3208      	adds	r2, #8
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80b4 	beq.w	80058b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4b60      	ldr	r3, [pc, #384]	; (80058d4 <HAL_GPIO_Init+0x30c>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	4a5f      	ldr	r2, [pc, #380]	; (80058d4 <HAL_GPIO_Init+0x30c>)
 8005758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800575c:	6453      	str	r3, [r2, #68]	; 0x44
 800575e:	4b5d      	ldr	r3, [pc, #372]	; (80058d4 <HAL_GPIO_Init+0x30c>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800576a:	4a5b      	ldr	r2, [pc, #364]	; (80058d8 <HAL_GPIO_Init+0x310>)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	3302      	adds	r3, #2
 8005772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	220f      	movs	r2, #15
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a52      	ldr	r2, [pc, #328]	; (80058dc <HAL_GPIO_Init+0x314>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d02b      	beq.n	80057ee <HAL_GPIO_Init+0x226>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a51      	ldr	r2, [pc, #324]	; (80058e0 <HAL_GPIO_Init+0x318>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d025      	beq.n	80057ea <HAL_GPIO_Init+0x222>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a50      	ldr	r2, [pc, #320]	; (80058e4 <HAL_GPIO_Init+0x31c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <HAL_GPIO_Init+0x21e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a4f      	ldr	r2, [pc, #316]	; (80058e8 <HAL_GPIO_Init+0x320>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d019      	beq.n	80057e2 <HAL_GPIO_Init+0x21a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a4e      	ldr	r2, [pc, #312]	; (80058ec <HAL_GPIO_Init+0x324>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_GPIO_Init+0x216>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a4d      	ldr	r2, [pc, #308]	; (80058f0 <HAL_GPIO_Init+0x328>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00d      	beq.n	80057da <HAL_GPIO_Init+0x212>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4c      	ldr	r2, [pc, #304]	; (80058f4 <HAL_GPIO_Init+0x32c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <HAL_GPIO_Init+0x20e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4b      	ldr	r2, [pc, #300]	; (80058f8 <HAL_GPIO_Init+0x330>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_GPIO_Init+0x20a>
 80057ce:	2307      	movs	r3, #7
 80057d0:	e00e      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057d2:	2308      	movs	r3, #8
 80057d4:	e00c      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057d6:	2306      	movs	r3, #6
 80057d8:	e00a      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057da:	2305      	movs	r3, #5
 80057dc:	e008      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057de:	2304      	movs	r3, #4
 80057e0:	e006      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057e2:	2303      	movs	r3, #3
 80057e4:	e004      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e002      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_GPIO_Init+0x228>
 80057ee:	2300      	movs	r3, #0
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f002 0203 	and.w	r2, r2, #3
 80057f6:	0092      	lsls	r2, r2, #2
 80057f8:	4093      	lsls	r3, r2
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005800:	4935      	ldr	r1, [pc, #212]	; (80058d8 <HAL_GPIO_Init+0x310>)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	089b      	lsrs	r3, r3, #2
 8005806:	3302      	adds	r3, #2
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800580e:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <HAL_GPIO_Init+0x334>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005832:	4a32      	ldr	r2, [pc, #200]	; (80058fc <HAL_GPIO_Init+0x334>)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_GPIO_Init+0x334>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <HAL_GPIO_Init+0x334>)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005862:	4b26      	ldr	r3, [pc, #152]	; (80058fc <HAL_GPIO_Init+0x334>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005886:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_GPIO_Init+0x334>)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_GPIO_Init+0x334>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <HAL_GPIO_Init+0x334>)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	f67f ae90 	bls.w	80055e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3724      	adds	r7, #36	; 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40013800 	.word	0x40013800
 80058dc:	40020000 	.word	0x40020000
 80058e0:	40020400 	.word	0x40020400
 80058e4:	40020800 	.word	0x40020800
 80058e8:	40020c00 	.word	0x40020c00
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40021400 	.word	0x40021400
 80058f4:	40021800 	.word	0x40021800
 80058f8:	40021c00 	.word	0x40021c00
 80058fc:	40013c00 	.word	0x40013c00

08005900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
 800591c:	e001      	b.n	8005922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	807b      	strh	r3, [r7, #2]
 800593c:	4613      	mov	r3, r2
 800593e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005940:	787b      	ldrb	r3, [r7, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800594c:	e003      	b.n	8005956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800594e:	887b      	ldrh	r3, [r7, #2]
 8005950:	041a      	lsls	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	619a      	str	r2, [r3, #24]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005974:	887a      	ldrh	r2, [r7, #2]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4013      	ands	r3, r2
 800597a:	041a      	lsls	r2, r3, #16
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	43d9      	mvns	r1, r3
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	400b      	ands	r3, r1
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	619a      	str	r2, [r3, #24]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005998:	b08f      	sub	sp, #60	; 0x3c
 800599a:	af0a      	add	r7, sp, #40	; 0x28
 800599c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e054      	b.n	8005a52 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f008 fec6 	bl	800e754 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2203      	movs	r2, #3
 80059cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f006 f868 	bl	800babc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	687e      	ldr	r6, [r7, #4]
 80059f4:	466d      	mov	r5, sp
 80059f6:	f106 0410 	add.w	r4, r6, #16
 80059fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a0a:	1d33      	adds	r3, r6, #4
 8005a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a0e:	6838      	ldr	r0, [r7, #0]
 8005a10:	f005 ffe2 	bl	800b9d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f006 f85f 	bl	800bade <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	687e      	ldr	r6, [r7, #4]
 8005a28:	466d      	mov	r5, sp
 8005a2a:	f106 0410 	add.w	r4, r6, #16
 8005a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a3e:	1d33      	adds	r3, r6, #4
 8005a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a42:	6838      	ldr	r0, [r7, #0]
 8005a44:	f006 f972 	bl	800bd2c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a5a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a5a:	b590      	push	{r4, r7, lr}
 8005a5c:	b089      	sub	sp, #36	; 0x24
 8005a5e:	af04      	add	r7, sp, #16
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	461a      	mov	r2, r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	70fb      	strb	r3, [r7, #3]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70bb      	strb	r3, [r7, #2]
 8005a70:	4613      	mov	r3, r2
 8005a72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_HCD_HC_Init+0x28>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e076      	b.n	8005b70 <HAL_HCD_HC_Init+0x116>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	212c      	movs	r1, #44	; 0x2c
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	333d      	adds	r3, #61	; 0x3d
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	212c      	movs	r1, #44	; 0x2c
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3338      	adds	r3, #56	; 0x38
 8005aaa:	787a      	ldrb	r2, [r7, #1]
 8005aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	212c      	movs	r1, #44	; 0x2c
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	4413      	add	r3, r2
 8005aba:	3340      	adds	r3, #64	; 0x40
 8005abc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005abe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	212c      	movs	r1, #44	; 0x2c
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	4413      	add	r3, r2
 8005acc:	3339      	adds	r3, #57	; 0x39
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	212c      	movs	r1, #44	; 0x2c
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	333f      	adds	r3, #63	; 0x3f
 8005ae0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	78ba      	ldrb	r2, [r7, #2]
 8005aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aee:	b2d0      	uxtb	r0, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	333a      	adds	r3, #58	; 0x3a
 8005afc:	4602      	mov	r2, r0
 8005afe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005b00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da09      	bge.n	8005b1c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	212c      	movs	r1, #44	; 0x2c
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	333b      	adds	r3, #59	; 0x3b
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e008      	b.n	8005b2e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	212c      	movs	r1, #44	; 0x2c
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	333b      	adds	r3, #59	; 0x3b
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	333c      	adds	r3, #60	; 0x3c
 8005b3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b40:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	787c      	ldrb	r4, [r7, #1]
 8005b48:	78ba      	ldrb	r2, [r7, #2]
 8005b4a:	78f9      	ldrb	r1, [r7, #3]
 8005b4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b4e:	9302      	str	r3, [sp, #8]
 8005b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	f006 fa67 	bl	800c030 <USB_HC_Init>
 8005b62:	4603      	mov	r3, r0
 8005b64:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd90      	pop	{r4, r7, pc}

08005b78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_HCD_HC_Halt+0x1e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e00f      	b.n	8005bb6 <HAL_HCD_HC_Halt+0x3e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f006 fca3 	bl	800c4f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	70fb      	strb	r3, [r7, #3]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70bb      	strb	r3, [r7, #2]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	212c      	movs	r1, #44	; 0x2c
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	333b      	adds	r3, #59	; 0x3b
 8005be8:	78ba      	ldrb	r2, [r7, #2]
 8005bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	333f      	adds	r3, #63	; 0x3f
 8005bfa:	787a      	ldrb	r2, [r7, #1]
 8005bfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005bfe:	7c3b      	ldrb	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d112      	bne.n	8005c2a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	212c      	movs	r1, #44	; 0x2c
 8005c0a:	fb01 f303 	mul.w	r3, r1, r3
 8005c0e:	4413      	add	r3, r2
 8005c10:	3342      	adds	r3, #66	; 0x42
 8005c12:	2203      	movs	r2, #3
 8005c14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	212c      	movs	r1, #44	; 0x2c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	333d      	adds	r3, #61	; 0x3d
 8005c24:	7f3a      	ldrb	r2, [r7, #28]
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e008      	b.n	8005c3c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	4413      	add	r3, r2
 8005c36:	3342      	adds	r3, #66	; 0x42
 8005c38:	2202      	movs	r2, #2
 8005c3a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005c3c:	787b      	ldrb	r3, [r7, #1]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	f200 80c6 	bhi.w	8005dd0 <HAL_HCD_HC_SubmitRequest+0x210>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005dbd 	.word	0x08005dbd
 8005c54:	08005cc1 	.word	0x08005cc1
 8005c58:	08005d3f 	.word	0x08005d3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c5c:	7c3b      	ldrb	r3, [r7, #16]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 80b8 	bne.w	8005dd4 <HAL_HCD_HC_SubmitRequest+0x214>
 8005c64:	78bb      	ldrb	r3, [r7, #2]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 80b4 	bne.w	8005dd4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005c6c:	8b3b      	ldrh	r3, [r7, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	212c      	movs	r1, #44	; 0x2c
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3355      	adds	r3, #85	; 0x55
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3355      	adds	r3, #85	; 0x55
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3342      	adds	r3, #66	; 0x42
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005caa:	e093      	b.n	8005dd4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3342      	adds	r3, #66	; 0x42
 8005cba:	2202      	movs	r2, #2
 8005cbc:	701a      	strb	r2, [r3, #0]
      break;
 8005cbe:	e089      	b.n	8005dd4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005cc0:	78bb      	ldrb	r3, [r7, #2]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11d      	bne.n	8005d02 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	212c      	movs	r1, #44	; 0x2c
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3355      	adds	r3, #85	; 0x55
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	212c      	movs	r1, #44	; 0x2c
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3342      	adds	r3, #66	; 0x42
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005cec:	e073      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	212c      	movs	r1, #44	; 0x2c
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3342      	adds	r3, #66	; 0x42
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	701a      	strb	r2, [r3, #0]
      break;
 8005d00:	e069      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	212c      	movs	r1, #44	; 0x2c
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3354      	adds	r3, #84	; 0x54
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	212c      	movs	r1, #44	; 0x2c
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	3342      	adds	r3, #66	; 0x42
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
      break;
 8005d28:	e055      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	3342      	adds	r3, #66	; 0x42
 8005d38:	2202      	movs	r2, #2
 8005d3a:	701a      	strb	r2, [r3, #0]
      break;
 8005d3c:	e04b      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005d3e:	78bb      	ldrb	r3, [r7, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11d      	bne.n	8005d80 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	212c      	movs	r1, #44	; 0x2c
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	4413      	add	r3, r2
 8005d50:	3355      	adds	r3, #85	; 0x55
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	3342      	adds	r3, #66	; 0x42
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d6a:	e034      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	3342      	adds	r3, #66	; 0x42
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	701a      	strb	r2, [r3, #0]
      break;
 8005d7e:	e02a      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	212c      	movs	r1, #44	; 0x2c
 8005d86:	fb01 f303 	mul.w	r3, r1, r3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3354      	adds	r3, #84	; 0x54
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	212c      	movs	r1, #44	; 0x2c
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	3342      	adds	r3, #66	; 0x42
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
      break;
 8005da6:	e016      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	212c      	movs	r1, #44	; 0x2c
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	3342      	adds	r3, #66	; 0x42
 8005db6:	2202      	movs	r2, #2
 8005db8:	701a      	strb	r2, [r3, #0]
      break;
 8005dba:	e00c      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	212c      	movs	r1, #44	; 0x2c
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3342      	adds	r3, #66	; 0x42
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
      break;
 8005dce:	e002      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005dd4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	212c      	movs	r1, #44	; 0x2c
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	3344      	adds	r3, #68	; 0x44
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	8b3a      	ldrh	r2, [r7, #24]
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	202c      	movs	r0, #44	; 0x2c
 8005df0:	fb00 f303 	mul.w	r3, r0, r3
 8005df4:	440b      	add	r3, r1
 8005df6:	334c      	adds	r3, #76	; 0x4c
 8005df8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	212c      	movs	r1, #44	; 0x2c
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	4413      	add	r3, r2
 8005e06:	3360      	adds	r3, #96	; 0x60
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	212c      	movs	r1, #44	; 0x2c
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	3350      	adds	r3, #80	; 0x50
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	212c      	movs	r1, #44	; 0x2c
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	3339      	adds	r3, #57	; 0x39
 8005e2c:	78fa      	ldrb	r2, [r7, #3]
 8005e2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3361      	adds	r3, #97	; 0x61
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	222c      	movs	r2, #44	; 0x2c
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	3338      	adds	r3, #56	; 0x38
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	18d1      	adds	r1, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f006 f9f6 	bl	800c24c <USB_HC_StartXfer>
 8005e60:	4603      	mov	r3, r0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f005 ff0f 	bl	800bca6 <USB_GetMode>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f040 80ef 	bne.w	800606e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f005 fef3 	bl	800bc80 <USB_ReadInterrupts>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80e5 	beq.w	800606c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f005 feea 	bl	800bc80 <USB_ReadInterrupts>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb6:	d104      	bne.n	8005ec2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f005 feda 	bl	800bc80 <USB_ReadInterrupts>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed6:	d104      	bne.n	8005ee2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f005 feca 	bl	800bc80 <USB_ReadInterrupts>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ef6:	d104      	bne.n	8005f02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f005 feba 	bl	800bc80 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f005 feac 	bl	800bc80 <USB_ReadInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f32:	d115      	bne.n	8005f60 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f008 fc7e 	bl	800e850 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f005 ffa2 	bl	800bea4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 fe8b 	bl	800bc80 <USB_ReadInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f74:	d102      	bne.n	8005f7c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 f9ff 	bl	800737a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f005 fe7d 	bl	800bc80 <USB_ReadInterrupts>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d106      	bne.n	8005f9e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f008 fc41 	bl	800e818 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f005 fe6c 	bl	800bc80 <USB_ReadInterrupts>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d101      	bne.n	8005fb6 <HAL_HCD_IRQHandler+0x14a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_HCD_IRQHandler+0x14c>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d012      	beq.n	8005fe2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0210 	bic.w	r2, r2, #16
 8005fca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f902 	bl	80071d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0210 	orr.w	r2, r2, #16
 8005fe0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f005 fe4a 	bl	800bc80 <USB_ReadInterrupts>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ff6:	d13a      	bne.n	800606e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f006 fa67 	bl	800c4d0 <USB_HC_ReadInterrupt>
 8006002:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e025      	b.n	8006056 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006034:	d106      	bne.n	8006044 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f8ab 	bl	8006198 <HCD_HC_IN_IRQHandler>
 8006042:	e005      	b.n	8006050 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fcc6 	bl	80069dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	429a      	cmp	r2, r3
 800605e:	d3d4      	bcc.n	800600a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006068:	615a      	str	r2, [r3, #20]
 800606a:	e000      	b.n	800606e <HAL_HCD_IRQHandler+0x202>
      return;
 800606c:	bf00      	nop
    }
  }
}
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_HCD_Start+0x16>
 8006086:	2302      	movs	r3, #2
 8006088:	e013      	b.n	80060b2 <HAL_HCD_Start+0x3e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f005 fcff 	bl	800ba9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f005 ff62 	bl	800bf6c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_HCD_Stop+0x16>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e00d      	b.n	80060ec <HAL_HCD_Stop+0x32>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f006 fb61 	bl	800c7a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f005 ff09 	bl	800bf18 <USB_ResetPort>
 8006106:	4603      	mov	r3, r0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	212c      	movs	r1, #44	; 0x2c
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	4413      	add	r3, r2
 8006128:	3360      	adds	r3, #96	; 0x60
 800612a:	781b      	ldrb	r3, [r3, #0]
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	212c      	movs	r1, #44	; 0x2c
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3350      	adds	r3, #80	; 0x50
 8006152:	681b      	ldr	r3, [r3, #0]
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f005 ff4d 	bl	800c00c <USB_GetCurrentFrame>
 8006172:	4603      	mov	r3, r0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f005 ff28 	bl	800bfde <USB_GetHostSpeed>
 800618e:	4603      	mov	r3, r0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d119      	bne.n	80061fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d4:	461a      	mov	r2, r3
 80061d6:	2304      	movs	r3, #4
 80061d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	60d3      	str	r3, [r2, #12]
 80061fa:	e101      	b.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	d12b      	bne.n	800626c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	461a      	mov	r2, r3
 8006222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	212c      	movs	r1, #44	; 0x2c
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	3361      	adds	r3, #97	; 0x61
 8006236:	2207      	movs	r2, #7
 8006238:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	440a      	add	r2, r1
 8006250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f006 f944 	bl	800c4f2 <USB_HC_Halt>
 800626a:	e0c9      	b.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b20      	cmp	r3, #32
 8006280:	d109      	bne.n	8006296 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	2320      	movs	r3, #32
 8006292:	6093      	str	r3, [r2, #8]
 8006294:	e0b4      	b.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d133      	bne.n	8006314 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c6:	f043 0302 	orr.w	r3, r3, #2
 80062ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	212c      	movs	r1, #44	; 0x2c
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	3361      	adds	r3, #97	; 0x61
 80062da:	2205      	movs	r2, #5
 80062dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	461a      	mov	r2, r3
 80062ec:	2310      	movs	r3, #16
 80062ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	461a      	mov	r2, r3
 80062fe:	2308      	movs	r3, #8
 8006300:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f006 f8f0 	bl	800c4f2 <USB_HC_Halt>
 8006312:	e075      	b.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632a:	d134      	bne.n	8006396 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	440a      	add	r2, r1
 8006342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006346:	f043 0302 	orr.w	r3, r3, #2
 800634a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	212c      	movs	r1, #44	; 0x2c
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	4413      	add	r3, r2
 8006358:	3361      	adds	r3, #97	; 0x61
 800635a:	2208      	movs	r2, #8
 800635c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	2310      	movs	r3, #16
 800636e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	461a      	mov	r2, r3
 800637e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006382:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f006 f8af 	bl	800c4f2 <USB_HC_Halt>
 8006394:	e034      	b.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d129      	bne.n	8006400 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	212c      	movs	r1, #44	; 0x2c
 80063d2:	fb01 f303 	mul.w	r3, r1, r3
 80063d6:	4413      	add	r3, r2
 80063d8:	3361      	adds	r3, #97	; 0x61
 80063da:	2206      	movs	r2, #6
 80063dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f006 f882 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	461a      	mov	r2, r3
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006416:	d122      	bne.n	800645e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f006 f855 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	461a      	mov	r2, r3
 8006456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800645a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800645c:	e2ba      	b.n	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 811b 	bne.w	80066ac <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d019      	beq.n	80064b2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	212c      	movs	r1, #44	; 0x2c
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3348      	adds	r3, #72	; 0x48
 800648c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	0159      	lsls	r1, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	440b      	add	r3, r1
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	202c      	movs	r0, #44	; 0x2c
 80064a8:	fb00 f303 	mul.w	r3, r0, r3
 80064ac:	440b      	add	r3, r1
 80064ae:	3350      	adds	r3, #80	; 0x50
 80064b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	212c      	movs	r1, #44	; 0x2c
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	3361      	adds	r3, #97	; 0x61
 80064c0:	2201      	movs	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	212c      	movs	r1, #44	; 0x2c
 80064ca:	fb01 f303 	mul.w	r3, r1, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	335c      	adds	r3, #92	; 0x5c
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	461a      	mov	r2, r3
 80064e4:	2301      	movs	r3, #1
 80064e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	212c      	movs	r1, #44	; 0x2c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	333f      	adds	r3, #63	; 0x3f
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	212c      	movs	r1, #44	; 0x2c
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	4413      	add	r3, r2
 8006508:	333f      	adds	r3, #63	; 0x3f
 800650a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800650c:	2b02      	cmp	r3, #2
 800650e:	d121      	bne.n	8006554 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f005 ffd9 	bl	800c4f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	461a      	mov	r2, r3
 800654e:	2310      	movs	r3, #16
 8006550:	6093      	str	r3, [r2, #8]
 8006552:	e066      	b.n	8006622 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	212c      	movs	r1, #44	; 0x2c
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	4413      	add	r3, r2
 8006560:	333f      	adds	r3, #63	; 0x3f
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d127      	bne.n	80065b8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	440a      	add	r2, r1
 800657e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006586:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	212c      	movs	r1, #44	; 0x2c
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	3360      	adds	r3, #96	; 0x60
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	b2d9      	uxtb	r1, r3
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	202c      	movs	r0, #44	; 0x2c
 80065a4:	fb00 f303 	mul.w	r3, r0, r3
 80065a8:	4413      	add	r3, r2
 80065aa:	3360      	adds	r3, #96	; 0x60
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f008 f95b 	bl	800e86c <HAL_HCD_HC_NotifyURBChange_Callback>
 80065b6:	e034      	b.n	8006622 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	212c      	movs	r1, #44	; 0x2c
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	333f      	adds	r3, #63	; 0x3f
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d12a      	bne.n	8006622 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	212c      	movs	r1, #44	; 0x2c
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	3360      	adds	r3, #96	; 0x60
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	212c      	movs	r1, #44	; 0x2c
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3354      	adds	r3, #84	; 0x54
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f083 0301 	eor.w	r3, r3, #1
 80065f2:	b2d8      	uxtb	r0, r3
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	212c      	movs	r1, #44	; 0x2c
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	3354      	adds	r3, #84	; 0x54
 8006602:	4602      	mov	r2, r0
 8006604:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	202c      	movs	r0, #44	; 0x2c
 8006610:	fb00 f303 	mul.w	r3, r0, r3
 8006614:	4413      	add	r3, r2
 8006616:	3360      	adds	r3, #96	; 0x60
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f008 f925 	bl	800e86c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d12b      	bne.n	8006682 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	212c      	movs	r1, #44	; 0x2c
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	3348      	adds	r3, #72	; 0x48
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	202c      	movs	r0, #44	; 0x2c
 8006640:	fb00 f202 	mul.w	r2, r0, r2
 8006644:	440a      	add	r2, r1
 8006646:	3240      	adds	r2, #64	; 0x40
 8006648:	8812      	ldrh	r2, [r2, #0]
 800664a:	fbb3 f3f2 	udiv	r3, r3, r2
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 81be 	beq.w	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	212c      	movs	r1, #44	; 0x2c
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	3354      	adds	r3, #84	; 0x54
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f083 0301 	eor.w	r3, r3, #1
 800666c:	b2d8      	uxtb	r0, r3
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	212c      	movs	r1, #44	; 0x2c
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	4413      	add	r3, r2
 800667a:	3354      	adds	r3, #84	; 0x54
 800667c:	4602      	mov	r2, r0
 800667e:	701a      	strb	r2, [r3, #0]
}
 8006680:	e1a8      	b.n	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	212c      	movs	r1, #44	; 0x2c
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	4413      	add	r3, r2
 800668e:	3354      	adds	r3, #84	; 0x54
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f083 0301 	eor.w	r3, r3, #1
 8006696:	b2d8      	uxtb	r0, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	212c      	movs	r1, #44	; 0x2c
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	3354      	adds	r3, #84	; 0x54
 80066a6:	4602      	mov	r2, r0
 80066a8:	701a      	strb	r2, [r3, #0]
}
 80066aa:	e193      	b.n	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	f040 8106 	bne.w	80068d0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066de:	f023 0302 	bic.w	r3, r3, #2
 80066e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	212c      	movs	r1, #44	; 0x2c
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	3361      	adds	r3, #97	; 0x61
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d109      	bne.n	800670c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	212c      	movs	r1, #44	; 0x2c
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	4413      	add	r3, r2
 8006704:	3360      	adds	r3, #96	; 0x60
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e0c9      	b.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	212c      	movs	r1, #44	; 0x2c
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	4413      	add	r3, r2
 8006718:	3361      	adds	r3, #97	; 0x61
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b05      	cmp	r3, #5
 800671e:	d109      	bne.n	8006734 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	212c      	movs	r1, #44	; 0x2c
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	4413      	add	r3, r2
 800672c:	3360      	adds	r3, #96	; 0x60
 800672e:	2205      	movs	r2, #5
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	e0b5      	b.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	212c      	movs	r1, #44	; 0x2c
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	3361      	adds	r3, #97	; 0x61
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d009      	beq.n	800675c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	212c      	movs	r1, #44	; 0x2c
 800674e:	fb01 f303 	mul.w	r3, r1, r3
 8006752:	4413      	add	r3, r2
 8006754:	3361      	adds	r3, #97	; 0x61
 8006756:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006758:	2b08      	cmp	r3, #8
 800675a:	d150      	bne.n	80067fe <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	212c      	movs	r1, #44	; 0x2c
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	335c      	adds	r3, #92	; 0x5c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	202c      	movs	r0, #44	; 0x2c
 8006774:	fb00 f303 	mul.w	r3, r0, r3
 8006778:	440b      	add	r3, r1
 800677a:	335c      	adds	r3, #92	; 0x5c
 800677c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	212c      	movs	r1, #44	; 0x2c
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	335c      	adds	r3, #92	; 0x5c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d912      	bls.n	80067b8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	212c      	movs	r1, #44	; 0x2c
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	335c      	adds	r3, #92	; 0x5c
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	212c      	movs	r1, #44	; 0x2c
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	3360      	adds	r3, #96	; 0x60
 80067b2:	2204      	movs	r2, #4
 80067b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067b6:	e073      	b.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	212c      	movs	r1, #44	; 0x2c
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	3360      	adds	r3, #96	; 0x60
 80067c6:	2202      	movs	r2, #2
 80067c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067e0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	461a      	mov	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067fc:	e050      	b.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	212c      	movs	r1, #44	; 0x2c
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	3361      	adds	r3, #97	; 0x61
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b03      	cmp	r3, #3
 8006810:	d122      	bne.n	8006858 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	212c      	movs	r1, #44	; 0x2c
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	3360      	adds	r3, #96	; 0x60
 8006820:	2202      	movs	r2, #2
 8006822:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800683a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006842:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006850:	461a      	mov	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e023      	b.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	212c      	movs	r1, #44	; 0x2c
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	4413      	add	r3, r2
 8006864:	3361      	adds	r3, #97	; 0x61
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b07      	cmp	r3, #7
 800686a:	d119      	bne.n	80068a0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	212c      	movs	r1, #44	; 0x2c
 8006872:	fb01 f303 	mul.w	r3, r1, r3
 8006876:	4413      	add	r3, r2
 8006878:	335c      	adds	r3, #92	; 0x5c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	202c      	movs	r0, #44	; 0x2c
 8006884:	fb00 f303 	mul.w	r3, r0, r3
 8006888:	440b      	add	r3, r1
 800688a:	335c      	adds	r3, #92	; 0x5c
 800688c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	212c      	movs	r1, #44	; 0x2c
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	3360      	adds	r3, #96	; 0x60
 800689c:	2204      	movs	r2, #4
 800689e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	461a      	mov	r2, r3
 80068ae:	2302      	movs	r3, #2
 80068b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	202c      	movs	r0, #44	; 0x2c
 80068bc:	fb00 f303 	mul.w	r3, r0, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	3360      	adds	r3, #96	; 0x60
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f007 ffcf 	bl	800e86c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80068ce:	e081      	b.n	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d176      	bne.n	80069d4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	212c      	movs	r1, #44	; 0x2c
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	333f      	adds	r3, #63	; 0x3f
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d121      	bne.n	800693e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	212c      	movs	r1, #44	; 0x2c
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	335c      	adds	r3, #92	; 0x5c
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f043 0302 	orr.w	r3, r3, #2
 800692a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f005 fddb 	bl	800c4f2 <USB_HC_Halt>
 800693c:	e041      	b.n	80069c2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	212c      	movs	r1, #44	; 0x2c
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	333f      	adds	r3, #63	; 0x3f
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	212c      	movs	r1, #44	; 0x2c
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	333f      	adds	r3, #63	; 0x3f
 8006960:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006962:	2b02      	cmp	r3, #2
 8006964:	d12d      	bne.n	80069c2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	212c      	movs	r1, #44	; 0x2c
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	4413      	add	r3, r2
 8006972:	335c      	adds	r3, #92	; 0x5c
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d120      	bne.n	80069c2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	212c      	movs	r1, #44	; 0x2c
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	3361      	adds	r3, #97	; 0x61
 800698e:	2203      	movs	r2, #3
 8006990:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ac:	f043 0302 	orr.w	r3, r3, #2
 80069b0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f005 fd98 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	461a      	mov	r2, r3
 80069d0:	2310      	movs	r3, #16
 80069d2:	6093      	str	r3, [r2, #8]
}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d119      	bne.n	8006a40 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a38:	f043 0302 	orr.w	r3, r3, #2
 8006a3c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006a3e:	e3c6      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d13e      	bne.n	8006ad4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a62:	461a      	mov	r2, r3
 8006a64:	2320      	movs	r3, #32
 8006a66:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	212c      	movs	r1, #44	; 0x2c
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	333d      	adds	r3, #61	; 0x3d
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 83a8 	bne.w	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	212c      	movs	r1, #44	; 0x2c
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	333d      	adds	r3, #61	; 0x3d
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	212c      	movs	r1, #44	; 0x2c
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3360      	adds	r3, #96	; 0x60
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006abc:	f043 0302 	orr.w	r3, r3, #2
 8006ac0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f005 fd10 	bl	800c4f2 <USB_HC_Halt>
}
 8006ad2:	e37c      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aea:	d122      	bne.n	8006b32 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f005 fceb 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2e:	6093      	str	r3, [r2, #8]
}
 8006b30:	e34d      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d150      	bne.n	8006bea <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	212c      	movs	r1, #44	; 0x2c
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	335c      	adds	r3, #92	; 0x5c
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d111      	bne.n	8006b94 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	212c      	movs	r1, #44	; 0x2c
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	333d      	adds	r3, #61	; 0x3d
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bae:	f043 0302 	orr.w	r3, r3, #2
 8006bb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f005 fc97 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	212c      	movs	r1, #44	; 0x2c
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	3361      	adds	r3, #97	; 0x61
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
}
 8006be8:	e2f1      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d13c      	bne.n	8006c7a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3361      	adds	r3, #97	; 0x61
 8006c0e:	2204      	movs	r2, #4
 8006c10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	212c      	movs	r1, #44	; 0x2c
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	333d      	adds	r3, #61	; 0x3d
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	212c      	movs	r1, #44	; 0x2c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	335c      	adds	r3, #92	; 0x5c
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c50:	f043 0302 	orr.w	r3, r3, #2
 8006c54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f005 fc46 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c72:	461a      	mov	r2, r3
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	6093      	str	r3, [r2, #8]
}
 8006c78:	e2a9      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d12a      	bne.n	8006ce6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f005 fc10 	bl	800c4f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	212c      	movs	r1, #44	; 0x2c
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	4413      	add	r3, r2
 8006cde:	3361      	adds	r3, #97	; 0x61
 8006ce0:	2205      	movs	r2, #5
 8006ce2:	701a      	strb	r2, [r3, #0]
}
 8006ce4:	e273      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d150      	bne.n	8006d9e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	335c      	adds	r3, #92	; 0x5c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	212c      	movs	r1, #44	; 0x2c
 8006d14:	fb01 f303 	mul.w	r3, r1, r3
 8006d18:	4413      	add	r3, r2
 8006d1a:	3361      	adds	r3, #97	; 0x61
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	212c      	movs	r1, #44	; 0x2c
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	333d      	adds	r3, #61	; 0x3d
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d112      	bne.n	8006d5a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	212c      	movs	r1, #44	; 0x2c
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	333c      	adds	r3, #60	; 0x3c
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d108      	bne.n	8006d5a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	212c      	movs	r1, #44	; 0x2c
 8006d4e:	fb01 f303 	mul.w	r3, r1, r3
 8006d52:	4413      	add	r3, r2
 8006d54:	333d      	adds	r3, #61	; 0x3d
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d74:	f043 0302 	orr.w	r3, r3, #2
 8006d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f005 fbb4 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d96:	461a      	mov	r2, r3
 8006d98:	2310      	movs	r3, #16
 8006d9a:	6093      	str	r3, [r2, #8]
}
 8006d9c:	e217      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d174      	bne.n	8006e9e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d121      	bne.n	8006e00 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	212c      	movs	r1, #44	; 0x2c
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3361      	adds	r3, #97	; 0x61
 8006dca:	2206      	movs	r2, #6
 8006dcc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	4611      	mov	r1, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f005 fb7a 	bl	800c4f2 <USB_HC_Halt>
 8006dfe:	e044      	b.n	8006e8a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	212c      	movs	r1, #44	; 0x2c
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	335c      	adds	r3, #92	; 0x5c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	202c      	movs	r0, #44	; 0x2c
 8006e18:	fb00 f303 	mul.w	r3, r0, r3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	335c      	adds	r3, #92	; 0x5c
 8006e20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	212c      	movs	r1, #44	; 0x2c
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	335c      	adds	r3, #92	; 0x5c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d920      	bls.n	8006e78 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	212c      	movs	r1, #44	; 0x2c
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	335c      	adds	r3, #92	; 0x5c
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	212c      	movs	r1, #44	; 0x2c
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	4413      	add	r3, r2
 8006e54:	3360      	adds	r3, #96	; 0x60
 8006e56:	2204      	movs	r2, #4
 8006e58:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	202c      	movs	r0, #44	; 0x2c
 8006e64:	fb00 f303 	mul.w	r3, r0, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	3360      	adds	r3, #96	; 0x60
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f007 fcfb 	bl	800e86c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e76:	e008      	b.n	8006e8a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	212c      	movs	r1, #44	; 0x2c
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	3360      	adds	r3, #96	; 0x60
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	461a      	mov	r2, r3
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	6093      	str	r3, [r2, #8]
}
 8006e9c:	e197      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb4:	d134      	bne.n	8006f20 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f005 fb06 	bl	800c4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	461a      	mov	r2, r3
 8006f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	212c      	movs	r1, #44	; 0x2c
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3361      	adds	r3, #97	; 0x61
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	701a      	strb	r2, [r3, #0]
}
 8006f1e:	e156      	b.n	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	f040 814b 	bne.w	80071ce <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f52:	f023 0302 	bic.w	r3, r3, #2
 8006f56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	212c      	movs	r1, #44	; 0x2c
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	3361      	adds	r3, #97	; 0x61
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d179      	bne.n	8007060 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	212c      	movs	r1, #44	; 0x2c
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	3360      	adds	r3, #96	; 0x60
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	212c      	movs	r1, #44	; 0x2c
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	4413      	add	r3, r2
 8006f8a:	333f      	adds	r3, #63	; 0x3f
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d00a      	beq.n	8006fa8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	212c      	movs	r1, #44	; 0x2c
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	333f      	adds	r3, #63	; 0x3f
 8006fa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	f040 80fc 	bne.w	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d142      	bne.n	8007036 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	212c      	movs	r1, #44	; 0x2c
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	334c      	adds	r3, #76	; 0x4c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80ed 	beq.w	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	212c      	movs	r1, #44	; 0x2c
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	334c      	adds	r3, #76	; 0x4c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	202c      	movs	r0, #44	; 0x2c
 8006fdc:	fb00 f202 	mul.w	r2, r0, r2
 8006fe0:	440a      	add	r2, r1
 8006fe2:	3240      	adds	r2, #64	; 0x40
 8006fe4:	8812      	ldrh	r2, [r2, #0]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	202c      	movs	r0, #44	; 0x2c
 8006ff0:	fb00 f202 	mul.w	r2, r0, r2
 8006ff4:	440a      	add	r2, r1
 8006ff6:	3240      	adds	r2, #64	; 0x40
 8006ff8:	8812      	ldrh	r2, [r2, #0]
 8006ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80ca 	beq.w	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	212c      	movs	r1, #44	; 0x2c
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	4413      	add	r3, r2
 8007018:	3355      	adds	r3, #85	; 0x55
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f083 0301 	eor.w	r3, r3, #1
 8007020:	b2d8      	uxtb	r0, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	212c      	movs	r1, #44	; 0x2c
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	3355      	adds	r3, #85	; 0x55
 8007030:	4602      	mov	r2, r0
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e0b4      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	212c      	movs	r1, #44	; 0x2c
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	3355      	adds	r3, #85	; 0x55
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f083 0301 	eor.w	r3, r3, #1
 800704a:	b2d8      	uxtb	r0, r3
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	212c      	movs	r1, #44	; 0x2c
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	3355      	adds	r3, #85	; 0x55
 800705a:	4602      	mov	r2, r0
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e09f      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	212c      	movs	r1, #44	; 0x2c
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	3361      	adds	r3, #97	; 0x61
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b03      	cmp	r3, #3
 8007072:	d109      	bne.n	8007088 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	212c      	movs	r1, #44	; 0x2c
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	3360      	adds	r3, #96	; 0x60
 8007082:	2202      	movs	r2, #2
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	e08b      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	212c      	movs	r1, #44	; 0x2c
 800708e:	fb01 f303 	mul.w	r3, r1, r3
 8007092:	4413      	add	r3, r2
 8007094:	3361      	adds	r3, #97	; 0x61
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b04      	cmp	r3, #4
 800709a:	d109      	bne.n	80070b0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	212c      	movs	r1, #44	; 0x2c
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	4413      	add	r3, r2
 80070a8:	3360      	adds	r3, #96	; 0x60
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e077      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	212c      	movs	r1, #44	; 0x2c
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	3361      	adds	r3, #97	; 0x61
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d109      	bne.n	80070d8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	212c      	movs	r1, #44	; 0x2c
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3360      	adds	r3, #96	; 0x60
 80070d2:	2205      	movs	r2, #5
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e063      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	212c      	movs	r1, #44	; 0x2c
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	4413      	add	r3, r2
 80070e4:	3361      	adds	r3, #97	; 0x61
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b06      	cmp	r3, #6
 80070ea:	d009      	beq.n	8007100 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	212c      	movs	r1, #44	; 0x2c
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	4413      	add	r3, r2
 80070f8:	3361      	adds	r3, #97	; 0x61
 80070fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d14f      	bne.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	212c      	movs	r1, #44	; 0x2c
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	4413      	add	r3, r2
 800710c:	335c      	adds	r3, #92	; 0x5c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	202c      	movs	r0, #44	; 0x2c
 8007118:	fb00 f303 	mul.w	r3, r0, r3
 800711c:	440b      	add	r3, r1
 800711e:	335c      	adds	r3, #92	; 0x5c
 8007120:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	212c      	movs	r1, #44	; 0x2c
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	335c      	adds	r3, #92	; 0x5c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d912      	bls.n	800715c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	212c      	movs	r1, #44	; 0x2c
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	4413      	add	r3, r2
 8007142:	335c      	adds	r3, #92	; 0x5c
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	212c      	movs	r1, #44	; 0x2c
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	3360      	adds	r3, #96	; 0x60
 8007156:	2204      	movs	r2, #4
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e021      	b.n	80071a0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	212c      	movs	r1, #44	; 0x2c
 8007162:	fb01 f303 	mul.w	r3, r1, r3
 8007166:	4413      	add	r3, r2
 8007168:	3360      	adds	r3, #96	; 0x60
 800716a:	2202      	movs	r2, #2
 800716c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007184:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800718c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719a:	461a      	mov	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	461a      	mov	r2, r3
 80071ae:	2302      	movs	r3, #2
 80071b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	202c      	movs	r0, #44	; 0x2c
 80071bc:	fb00 f303 	mul.w	r3, r0, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	3360      	adds	r3, #96	; 0x60
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f007 fb4f 	bl	800e86c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80071ce:	bf00      	nop
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b08a      	sub	sp, #40	; 0x28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	0c5b      	lsrs	r3, r3, #17
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800720a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d004      	beq.n	800721c <HCD_RXQLVL_IRQHandler+0x46>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b05      	cmp	r3, #5
 8007216:	f000 80a9 	beq.w	800736c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800721a:	e0aa      	b.n	8007372 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80a6 	beq.w	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	212c      	movs	r1, #44	; 0x2c
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	4413      	add	r3, r2
 8007230:	3344      	adds	r3, #68	; 0x44
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 809b 	beq.w	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	212c      	movs	r1, #44	; 0x2c
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	3350      	adds	r3, #80	; 0x50
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	441a      	add	r2, r3
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	202c      	movs	r0, #44	; 0x2c
 8007254:	fb00 f303 	mul.w	r3, r0, r3
 8007258:	440b      	add	r3, r1
 800725a:	334c      	adds	r3, #76	; 0x4c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d87a      	bhi.n	8007358 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	212c      	movs	r1, #44	; 0x2c
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	3344      	adds	r3, #68	; 0x44
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	b292      	uxth	r2, r2
 800727a:	4619      	mov	r1, r3
 800727c:	f004 fcd7 	bl	800bc2e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	212c      	movs	r1, #44	; 0x2c
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	3344      	adds	r3, #68	; 0x44
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	441a      	add	r2, r3
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	202c      	movs	r0, #44	; 0x2c
 800729a:	fb00 f303 	mul.w	r3, r0, r3
 800729e:	440b      	add	r3, r1
 80072a0:	3344      	adds	r3, #68	; 0x44
 80072a2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	212c      	movs	r1, #44	; 0x2c
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	3350      	adds	r3, #80	; 0x50
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	441a      	add	r2, r3
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	202c      	movs	r0, #44	; 0x2c
 80072be:	fb00 f303 	mul.w	r3, r0, r3
 80072c2:	440b      	add	r3, r1
 80072c4:	3350      	adds	r3, #80	; 0x50
 80072c6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	0cdb      	lsrs	r3, r3, #19
 80072d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072dc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	212c      	movs	r1, #44	; 0x2c
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	3340      	adds	r3, #64	; 0x40
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d13c      	bne.n	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d039      	beq.n	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007312:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800731a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	212c      	movs	r1, #44	; 0x2c
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	4413      	add	r3, r2
 800733a:	3354      	adds	r3, #84	; 0x54
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	f083 0301 	eor.w	r3, r3, #1
 8007342:	b2d8      	uxtb	r0, r3
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	212c      	movs	r1, #44	; 0x2c
 800734a:	fb01 f303 	mul.w	r3, r1, r3
 800734e:	4413      	add	r3, r2
 8007350:	3354      	adds	r3, #84	; 0x54
 8007352:	4602      	mov	r2, r0
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e00b      	b.n	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	212c      	movs	r1, #44	; 0x2c
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	3360      	adds	r3, #96	; 0x60
 8007366:	2204      	movs	r2, #4
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e001      	b.n	8007370 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007370:	bf00      	nop
  }
}
 8007372:	bf00      	nop
 8007374:	3728      	adds	r7, #40	; 0x28
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d10b      	bne.n	80073ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d102      	bne.n	80073c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f007 fa39 	bl	800e834 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d132      	bne.n	800743a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f043 0308 	orr.w	r3, r3, #8
 80073da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d126      	bne.n	8007434 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d113      	bne.n	8007416 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80073f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073f8:	d106      	bne.n	8007408 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2102      	movs	r1, #2
 8007400:	4618      	mov	r0, r3
 8007402:	f004 fd4f 	bl	800bea4 <USB_InitFSLSPClkSel>
 8007406:	e011      	b.n	800742c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f004 fd48 	bl	800bea4 <USB_InitFSLSPClkSel>
 8007414:	e00a      	b.n	800742c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d106      	bne.n	800742c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007424:	461a      	mov	r2, r3
 8007426:	f64e 2360 	movw	r3, #60000	; 0xea60
 800742a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f007 fa2b 	bl	800e888 <HAL_HCD_PortEnabled_Callback>
 8007432:	e002      	b.n	800743a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f007 fa35 	bl	800e8a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b20      	cmp	r3, #32
 8007442:	d103      	bne.n	800744c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f043 0320 	orr.w	r3, r3, #32
 800744a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007452:	461a      	mov	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6013      	str	r3, [r2, #0]
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e12b      	b.n	80076ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa fb8c 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0201 	bic.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074c4:	f002 fcec 	bl	8009ea0 <HAL_RCC_GetPCLK1Freq>
 80074c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4a81      	ldr	r2, [pc, #516]	; (80076d4 <HAL_I2C_Init+0x274>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d807      	bhi.n	80074e4 <HAL_I2C_Init+0x84>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a80      	ldr	r2, [pc, #512]	; (80076d8 <HAL_I2C_Init+0x278>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	bf94      	ite	ls
 80074dc:	2301      	movls	r3, #1
 80074de:	2300      	movhi	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	e006      	b.n	80074f2 <HAL_I2C_Init+0x92>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4a7d      	ldr	r2, [pc, #500]	; (80076dc <HAL_I2C_Init+0x27c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	bf94      	ite	ls
 80074ec:	2301      	movls	r3, #1
 80074ee:	2300      	movhi	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0e7      	b.n	80076ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a78      	ldr	r2, [pc, #480]	; (80076e0 <HAL_I2C_Init+0x280>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	0c9b      	lsrs	r3, r3, #18
 8007504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a6a      	ldr	r2, [pc, #424]	; (80076d4 <HAL_I2C_Init+0x274>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d802      	bhi.n	8007534 <HAL_I2C_Init+0xd4>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3301      	adds	r3, #1
 8007532:	e009      	b.n	8007548 <HAL_I2C_Init+0xe8>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	4a69      	ldr	r2, [pc, #420]	; (80076e4 <HAL_I2C_Init+0x284>)
 8007540:	fba2 2303 	umull	r2, r3, r2, r3
 8007544:	099b      	lsrs	r3, r3, #6
 8007546:	3301      	adds	r3, #1
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	430b      	orrs	r3, r1
 800754e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800755a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	495c      	ldr	r1, [pc, #368]	; (80076d4 <HAL_I2C_Init+0x274>)
 8007564:	428b      	cmp	r3, r1
 8007566:	d819      	bhi.n	800759c <HAL_I2C_Init+0x13c>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1e59      	subs	r1, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	fbb1 f3f3 	udiv	r3, r1, r3
 8007576:	1c59      	adds	r1, r3, #1
 8007578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800757c:	400b      	ands	r3, r1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_I2C_Init+0x138>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1e59      	subs	r1, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007590:	3301      	adds	r3, #1
 8007592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007596:	e051      	b.n	800763c <HAL_I2C_Init+0x1dc>
 8007598:	2304      	movs	r3, #4
 800759a:	e04f      	b.n	800763c <HAL_I2C_Init+0x1dc>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d111      	bne.n	80075c8 <HAL_I2C_Init+0x168>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	1e58      	subs	r0, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6859      	ldr	r1, [r3, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	440b      	add	r3, r1
 80075b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b6:	3301      	adds	r3, #1
 80075b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e012      	b.n	80075ee <HAL_I2C_Init+0x18e>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	1e58      	subs	r0, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6859      	ldr	r1, [r3, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	0099      	lsls	r1, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	fbb0 f3f3 	udiv	r3, r0, r3
 80075de:	3301      	adds	r3, #1
 80075e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_I2C_Init+0x196>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e022      	b.n	800763c <HAL_I2C_Init+0x1dc>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10e      	bne.n	800761c <HAL_I2C_Init+0x1bc>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1e58      	subs	r0, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	440b      	add	r3, r1
 800760c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007610:	3301      	adds	r3, #1
 8007612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	e00f      	b.n	800763c <HAL_I2C_Init+0x1dc>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	1e58      	subs	r0, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	0099      	lsls	r1, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007632:	3301      	adds	r3, #1
 8007634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	6809      	ldr	r1, [r1, #0]
 8007640:	4313      	orrs	r3, r2
 8007642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69da      	ldr	r2, [r3, #28]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800766a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6911      	ldr	r1, [r2, #16]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68d2      	ldr	r2, [r2, #12]
 8007676:	4311      	orrs	r1, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	430b      	orrs	r3, r1
 800767e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	000186a0 	.word	0x000186a0
 80076d8:	001e847f 	.word	0x001e847f
 80076dc:	003d08ff 	.word	0x003d08ff
 80076e0:	431bde83 	.word	0x431bde83
 80076e4:	10624dd3 	.word	0x10624dd3

080076e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	461a      	mov	r2, r3
 80076f4:	460b      	mov	r3, r1
 80076f6:	817b      	strh	r3, [r7, #10]
 80076f8:	4613      	mov	r3, r2
 80076fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076fc:	f7fd fe22 	bl	8005344 <HAL_GetTick>
 8007700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b20      	cmp	r3, #32
 800770c:	f040 80e0 	bne.w	80078d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	2319      	movs	r3, #25
 8007716:	2201      	movs	r2, #1
 8007718:	4970      	ldr	r1, [pc, #448]	; (80078dc <HAL_I2C_Master_Transmit+0x1f4>)
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 f8f6 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
 8007728:	e0d3      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_I2C_Master_Transmit+0x50>
 8007734:	2302      	movs	r3, #2
 8007736:	e0cc      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d007      	beq.n	800775e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800776c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2221      	movs	r2, #33	; 0x21
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2210      	movs	r2, #16
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	893a      	ldrh	r2, [r7, #8]
 800778e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a50      	ldr	r2, [pc, #320]	; (80078e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800779e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077a0:	8979      	ldrh	r1, [r7, #10]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fde2 	bl	8008370 <I2C_MasterRequestWrite>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e08d      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077cc:	e066      	b.n	800789c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	6a39      	ldr	r1, [r7, #32]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 f970 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d107      	bne.n	80077f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e06b      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d11b      	bne.n	8007870 <HAL_I2C_Master_Transmit+0x188>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	6a39      	ldr	r1, [r7, #32]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 f960 	bl	8008b3a <I2C_WaitOnBTFFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	2b04      	cmp	r3, #4
 8007886:	d107      	bne.n	8007898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e01a      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d194      	bne.n	80077ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	00100002 	.word	0x00100002
 80078e0:	ffff0000 	.word	0xffff0000

080078e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	; 0x30
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	461a      	mov	r2, r3
 80078f0:	460b      	mov	r3, r1
 80078f2:	817b      	strh	r3, [r7, #10]
 80078f4:	4613      	mov	r3, r2
 80078f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078f8:	f7fd fd24 	bl	8005344 <HAL_GetTick>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b20      	cmp	r3, #32
 8007908:	f040 820b 	bne.w	8007d22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2319      	movs	r3, #25
 8007912:	2201      	movs	r2, #1
 8007914:	497c      	ldr	r1, [pc, #496]	; (8007b08 <HAL_I2C_Master_Receive+0x224>)
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fff8 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
 8007924:	e1fe      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_I2C_Master_Receive+0x50>
 8007930:	2302      	movs	r3, #2
 8007932:	e1f7      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b01      	cmp	r3, #1
 8007948:	d007      	beq.n	800795a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2222      	movs	r2, #34	; 0x22
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2210      	movs	r2, #16
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	893a      	ldrh	r2, [r7, #8]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_I2C_Master_Receive+0x228>)
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800799c:	8979      	ldrh	r1, [r7, #10]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fd66 	bl	8008474 <I2C_MasterRequestRead>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e1b8      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d113      	bne.n	80079e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ba:	2300      	movs	r3, #0
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	623b      	str	r3, [r7, #32]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	e18c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d11b      	bne.n	8007a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e16c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d11b      	bne.n	8007a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	e14c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a88:	e138      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f200 80f1 	bhi.w	8007c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d123      	bne.n	8007ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f001 f88b 	bl	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e139      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ae2:	e10b      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d14e      	bne.n	8007b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2200      	movs	r2, #0
 8007af4:	4906      	ldr	r1, [pc, #24]	; (8007b10 <HAL_I2C_Master_Receive+0x22c>)
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 ff08 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e10e      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
 8007b06:	bf00      	nop
 8007b08:	00100002 	.word	0x00100002
 8007b0c:	ffff0000 	.word	0xffff0000
 8007b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b88:	e0b8      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	4966      	ldr	r1, [pc, #408]	; (8007d2c <HAL_I2C_Master_Receive+0x448>)
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 feb9 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0bf      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2200      	movs	r2, #0
 8007bee:	494f      	ldr	r1, [pc, #316]	; (8007d2c <HAL_I2C_Master_Receive+0x448>)
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fe8b 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e091      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c74:	e042      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 ff9e 	bl	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e04c      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d118      	bne.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f47f aec2 	bne.w	8007a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e000      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007d22:	2302      	movs	r3, #2
  }
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	00010004 	.word	0x00010004

08007d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	817b      	strh	r3, [r7, #10]
 8007d42:	460b      	mov	r3, r1
 8007d44:	813b      	strh	r3, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d4a:	f7fd fafb 	bl	8005344 <HAL_GetTick>
 8007d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	f040 80d9 	bne.w	8007f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2319      	movs	r3, #25
 8007d64:	2201      	movs	r2, #1
 8007d66:	496d      	ldr	r1, [pc, #436]	; (8007f1c <HAL_I2C_Mem_Write+0x1ec>)
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fdcf 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
 8007d76:	e0cc      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_I2C_Mem_Write+0x56>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0c5      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d007      	beq.n	8007dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2221      	movs	r2, #33	; 0x21
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2240      	movs	r2, #64	; 0x40
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a3a      	ldr	r2, [r7, #32]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a4d      	ldr	r2, [pc, #308]	; (8007f20 <HAL_I2C_Mem_Write+0x1f0>)
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dee:	88f8      	ldrh	r0, [r7, #6]
 8007df0:	893a      	ldrh	r2, [r7, #8]
 8007df2:	8979      	ldrh	r1, [r7, #10]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fc06 	bl	8008610 <I2C_RequestMemoryWrite>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d052      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e081      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fe50 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00d      	beq.n	8007e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d107      	bne.n	8007e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e06b      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d11b      	bne.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d017      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1aa      	bne.n	8007e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fe3c 	bl	8008b3a <I2C_WaitOnBTFFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00d      	beq.n	8007ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d107      	bne.n	8007ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e016      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e000      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f10:	2302      	movs	r3, #2
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	00100002 	.word	0x00100002
 8007f20:	ffff0000 	.word	0xffff0000

08007f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08c      	sub	sp, #48	; 0x30
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	4611      	mov	r1, r2
 8007f30:	461a      	mov	r2, r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	817b      	strh	r3, [r7, #10]
 8007f36:	460b      	mov	r3, r1
 8007f38:	813b      	strh	r3, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f3e:	f7fd fa01 	bl	8005344 <HAL_GetTick>
 8007f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	f040 8208 	bne.w	8008362 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	2319      	movs	r3, #25
 8007f58:	2201      	movs	r2, #1
 8007f5a:	497b      	ldr	r1, [pc, #492]	; (8008148 <HAL_I2C_Mem_Read+0x224>)
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fcd5 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e1fb      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_I2C_Mem_Read+0x56>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e1f4      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d007      	beq.n	8007fa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2222      	movs	r2, #34	; 0x22
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a5b      	ldr	r2, [pc, #364]	; (800814c <HAL_I2C_Mem_Read+0x228>)
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fe2:	88f8      	ldrh	r0, [r7, #6]
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	8979      	ldrh	r1, [r7, #10]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fba2 	bl	800873c <I2C_RequestMemoryRead>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e1b0      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d113      	bne.n	8008032 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800800a:	2300      	movs	r3, #0
 800800c:	623b      	str	r3, [r7, #32]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e184      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008036:	2b01      	cmp	r3, #1
 8008038:	d11b      	bne.n	8008072 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e164      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008076:	2b02      	cmp	r3, #2
 8008078:	d11b      	bne.n	80080b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	e144      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b2:	2300      	movs	r3, #0
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80080c8:	e138      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	f200 80f1 	bhi.w	80082b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d123      	bne.n	8008124 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fd6b 	bl	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e139      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008122:	e10b      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	2b02      	cmp	r3, #2
 800812a:	d14e      	bne.n	80081ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	2200      	movs	r2, #0
 8008134:	4906      	ldr	r1, [pc, #24]	; (8008150 <HAL_I2C_Mem_Read+0x22c>)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fbe8 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e10e      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
 8008146:	bf00      	nop
 8008148:	00100002 	.word	0x00100002
 800814c:	ffff0000 	.word	0xffff0000
 8008150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081c8:	e0b8      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2200      	movs	r2, #0
 80081d2:	4966      	ldr	r1, [pc, #408]	; (800836c <HAL_I2C_Mem_Read+0x448>)
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fb99 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0bf      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	2200      	movs	r2, #0
 800822e:	494f      	ldr	r1, [pc, #316]	; (800836c <HAL_I2C_Mem_Read+0x448>)
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fb6b 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e091      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082b4:	e042      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fc7e 	bl	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e04c      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b04      	cmp	r3, #4
 8008308:	d118      	bne.n	800833c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f aec2 	bne.w	80080ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	e000      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008362:	2302      	movs	r3, #2
  }
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	00010004 	.word	0x00010004

08008370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	460b      	mov	r3, r1
 800837e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d006      	beq.n	800839a <I2C_MasterRequestWrite+0x2a>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d003      	beq.n	800839a <I2C_MasterRequestWrite+0x2a>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008398:	d108      	bne.n	80083ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e00b      	b.n	80083c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	2b12      	cmp	r3, #18
 80083b2:	d107      	bne.n	80083c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fa9b 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00d      	beq.n	80083f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	d103      	bne.n	80083f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e035      	b.n	8008464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008400:	d108      	bne.n	8008414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008402:	897b      	ldrh	r3, [r7, #10]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008410:	611a      	str	r2, [r3, #16]
 8008412:	e01b      	b.n	800844c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008414:	897b      	ldrh	r3, [r7, #10]
 8008416:	11db      	asrs	r3, r3, #7
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0306 	and.w	r3, r3, #6
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f063 030f 	orn	r3, r3, #15
 8008424:	b2da      	uxtb	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	490e      	ldr	r1, [pc, #56]	; (800846c <I2C_MasterRequestWrite+0xfc>)
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fac1 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e010      	b.n	8008464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008442:	897b      	ldrh	r3, [r7, #10]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	4907      	ldr	r1, [pc, #28]	; (8008470 <I2C_MasterRequestWrite+0x100>)
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fab1 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	00010008 	.word	0x00010008
 8008470:	00010002 	.word	0x00010002

08008474 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	460b      	mov	r3, r1
 8008482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008498:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d006      	beq.n	80084ae <I2C_MasterRequestRead+0x3a>
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d003      	beq.n	80084ae <I2C_MasterRequestRead+0x3a>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084ac:	d108      	bne.n	80084c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e00b      	b.n	80084d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	2b11      	cmp	r3, #17
 80084c6:	d107      	bne.n	80084d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fa11 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fe:	d103      	bne.n	8008508 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e079      	b.n	8008600 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	d108      	bne.n	8008528 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008516:	897b      	ldrh	r3, [r7, #10]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f043 0301 	orr.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	611a      	str	r2, [r3, #16]
 8008526:	e05f      	b.n	80085e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008528:	897b      	ldrh	r3, [r7, #10]
 800852a:	11db      	asrs	r3, r3, #7
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0306 	and.w	r3, r3, #6
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f063 030f 	orn	r3, r3, #15
 8008538:	b2da      	uxtb	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4930      	ldr	r1, [pc, #192]	; (8008608 <I2C_MasterRequestRead+0x194>)
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fa37 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e054      	b.n	8008600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008556:	897b      	ldrh	r3, [r7, #10]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4929      	ldr	r1, [pc, #164]	; (800860c <I2C_MasterRequestRead+0x198>)
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fa27 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e044      	b.n	8008600 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008576:	2300      	movs	r3, #0
 8008578:	613b      	str	r3, [r7, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800859a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f9af 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00d      	beq.n	80085d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c2:	d103      	bne.n	80085cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e017      	b.n	8008600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80085d0:	897b      	ldrh	r3, [r7, #10]
 80085d2:	11db      	asrs	r3, r3, #7
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0306 	and.w	r3, r3, #6
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f063 030e 	orn	r3, r3, #14
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4907      	ldr	r1, [pc, #28]	; (800860c <I2C_MasterRequestRead+0x198>)
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f9e3 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	00010008 	.word	0x00010008
 800860c:	00010002 	.word	0x00010002

08008610 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	2200      	movs	r2, #0
 8008642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f960 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008660:	d103      	bne.n	800866a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e05f      	b.n	800872e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800866e:	897b      	ldrh	r3, [r7, #10]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	461a      	mov	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800867c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	6a3a      	ldr	r2, [r7, #32]
 8008682:	492d      	ldr	r1, [pc, #180]	; (8008738 <I2C_RequestMemoryWrite+0x128>)
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f998 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e04c      	b.n	800872e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	6a39      	ldr	r1, [r7, #32]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fa02 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d107      	bne.n	80086d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e02b      	b.n	800872e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d105      	bne.n	80086e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086dc:	893b      	ldrh	r3, [r7, #8]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	611a      	str	r2, [r3, #16]
 80086e6:	e021      	b.n	800872c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086e8:	893b      	ldrh	r3, [r7, #8]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f8:	6a39      	ldr	r1, [r7, #32]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 f9dc 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00d      	beq.n	8008722 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	2b04      	cmp	r3, #4
 800870c:	d107      	bne.n	800871e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800871c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e005      	b.n	800872e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	00010002 	.word	0x00010002

0800873c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	817b      	strh	r3, [r7, #10]
 800874e:	460b      	mov	r3, r1
 8008750:	813b      	strh	r3, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008764:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	2200      	movs	r2, #0
 800877e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 f8c2 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879c:	d103      	bne.n	80087a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e0aa      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087aa:	897b      	ldrh	r3, [r7, #10]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	4952      	ldr	r1, [pc, #328]	; (8008908 <I2C_RequestMemoryRead+0x1cc>)
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f8fa 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e097      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f964 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d107      	bne.n	800880e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800880c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e076      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d105      	bne.n	8008824 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008818:	893b      	ldrh	r3, [r7, #8]
 800881a:	b2da      	uxtb	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	611a      	str	r2, [r3, #16]
 8008822:	e021      	b.n	8008868 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008824:	893b      	ldrh	r3, [r7, #8]
 8008826:	0a1b      	lsrs	r3, r3, #8
 8008828:	b29b      	uxth	r3, r3
 800882a:	b2da      	uxtb	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	6a39      	ldr	r1, [r7, #32]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f93e 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00d      	beq.n	800885e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b04      	cmp	r3, #4
 8008848:	d107      	bne.n	800885a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e050      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800885e:	893b      	ldrh	r3, [r7, #8]
 8008860:	b2da      	uxtb	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	6a39      	ldr	r1, [r7, #32]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f923 	bl	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00d      	beq.n	8008894 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	2b04      	cmp	r3, #4
 800887e:	d107      	bne.n	8008890 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e035      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f82b 	bl	800890c <I2C_WaitOnFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00d      	beq.n	80088d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ca:	d103      	bne.n	80088d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e013      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088d8:	897b      	ldrh	r3, [r7, #10]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	4906      	ldr	r1, [pc, #24]	; (8008908 <I2C_RequestMemoryRead+0x1cc>)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f863 	bl	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	00010002 	.word	0x00010002

0800890c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800891c:	e025      	b.n	800896a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008924:	d021      	beq.n	800896a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008926:	f7fc fd0d 	bl	8005344 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d302      	bcc.n	800893c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d116      	bne.n	800896a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e023      	b.n	80089b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	0c1b      	lsrs	r3, r3, #16
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d10d      	bne.n	8008990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	43da      	mvns	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4013      	ands	r3, r2
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	bf0c      	ite	eq
 8008986:	2301      	moveq	r3, #1
 8008988:	2300      	movne	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	461a      	mov	r2, r3
 800898e:	e00c      	b.n	80089aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	43da      	mvns	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4013      	ands	r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d0b6      	beq.n	800891e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089c8:	e051      	b.n	8008a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d8:	d123      	bne.n	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f043 0204 	orr.w	r2, r3, #4
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e046      	b.n	8008ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a28:	d021      	beq.n	8008a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2a:	f7fc fc8b 	bl	8005344 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d116      	bne.n	8008a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f043 0220 	orr.w	r2, r3, #32
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e020      	b.n	8008ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	0c1b      	lsrs	r3, r3, #16
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d10c      	bne.n	8008a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	43da      	mvns	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bf14      	ite	ne
 8008a8a:	2301      	movne	r3, #1
 8008a8c:	2300      	moveq	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	e00b      	b.n	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	43da      	mvns	r2, r3
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bf14      	ite	ne
 8008aa4:	2301      	movne	r3, #1
 8008aa6:	2300      	moveq	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d18d      	bne.n	80089ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ac4:	e02d      	b.n	8008b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 f8ce 	bl	8008c68 <I2C_IsAcknowledgeFailed>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e02d      	b.n	8008b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008adc:	d021      	beq.n	8008b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fc fc31 	bl	8005344 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d116      	bne.n	8008b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2220      	movs	r2, #32
 8008afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f043 0220 	orr.w	r2, r3, #32
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e007      	b.n	8008b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2c:	2b80      	cmp	r3, #128	; 0x80
 8008b2e:	d1ca      	bne.n	8008ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b46:	e02d      	b.n	8008ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f88d 	bl	8008c68 <I2C_IsAcknowledgeFailed>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e02d      	b.n	8008bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5e:	d021      	beq.n	8008ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b60:	f7fc fbf0 	bl	8005344 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d302      	bcc.n	8008b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d116      	bne.n	8008ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	f043 0220 	orr.w	r2, r3, #32
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e007      	b.n	8008bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d1ca      	bne.n	8008b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bc8:	e042      	b.n	8008c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	f003 0310 	and.w	r3, r3, #16
 8008bd4:	2b10      	cmp	r3, #16
 8008bd6:	d119      	bne.n	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0210 	mvn.w	r2, #16
 8008be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e029      	b.n	8008c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c0c:	f7fc fb9a 	bl	8005344 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d116      	bne.n	8008c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	f043 0220 	orr.w	r2, r3, #32
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e007      	b.n	8008c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b40      	cmp	r3, #64	; 0x40
 8008c5c:	d1b5      	bne.n	8008bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7e:	d11b      	bne.n	8008cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	f043 0204 	orr.w	r2, r3, #4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e128      	b.n	8008f2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a90      	ldr	r2, [pc, #576]	; (8008f34 <HAL_I2S_Init+0x26c>)
 8008cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7f8 fff5 	bl	8001ce4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008d10:	f023 030f 	bic.w	r3, r3, #15
 8008d14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d060      	beq.n	8008de8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d102      	bne.n	8008d34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008d2e:	2310      	movs	r3, #16
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e001      	b.n	8008d38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008d34:	2320      	movs	r3, #32
 8008d36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d802      	bhi.n	8008d46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008d46:	2001      	movs	r0, #1
 8008d48:	f001 f9a0 	bl	800a08c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d4c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d56:	d125      	bne.n	8008da4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	461a      	mov	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7c:	3305      	adds	r3, #5
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	e01f      	b.n	8008dc2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	461a      	mov	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9e:	3305      	adds	r3, #5
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	e00e      	b.n	8008dc2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	461a      	mov	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	3305      	adds	r3, #5
 8008dc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4a5c      	ldr	r2, [pc, #368]	; (8008f38 <HAL_I2S_Init+0x270>)
 8008dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	e003      	b.n	8008df0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008de8:	2302      	movs	r3, #2
 8008dea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d902      	bls.n	8008dfc <HAL_I2S_Init+0x134>
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	2bff      	cmp	r3, #255	; 0xff
 8008dfa:	d907      	bls.n	8008e0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e00:	f043 0210 	orr.w	r2, r3, #16
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e08f      	b.n	8008f2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691a      	ldr	r2, [r3, #16]
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	ea42 0103 	orr.w	r1, r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e2a:	f023 030f 	bic.w	r3, r3, #15
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6851      	ldr	r1, [r2, #4]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6892      	ldr	r2, [r2, #8]
 8008e36:	4311      	orrs	r1, r2
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68d2      	ldr	r2, [r2, #12]
 8008e3c:	4311      	orrs	r1, r2
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6992      	ldr	r2, [r2, #24]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d161      	bne.n	8008f1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a38      	ldr	r2, [pc, #224]	; (8008f3c <HAL_I2S_Init+0x274>)
 8008e5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a37      	ldr	r2, [pc, #220]	; (8008f40 <HAL_I2S_Init+0x278>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d101      	bne.n	8008e6c <HAL_I2S_Init+0x1a4>
 8008e68:	4b36      	ldr	r3, [pc, #216]	; (8008f44 <HAL_I2S_Init+0x27c>)
 8008e6a:	e001      	b.n	8008e70 <HAL_I2S_Init+0x1a8>
 8008e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	4932      	ldr	r1, [pc, #200]	; (8008f40 <HAL_I2S_Init+0x278>)
 8008e78:	428a      	cmp	r2, r1
 8008e7a:	d101      	bne.n	8008e80 <HAL_I2S_Init+0x1b8>
 8008e7c:	4a31      	ldr	r2, [pc, #196]	; (8008f44 <HAL_I2S_Init+0x27c>)
 8008e7e:	e001      	b.n	8008e84 <HAL_I2S_Init+0x1bc>
 8008e80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008e84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e88:	f023 030f 	bic.w	r3, r3, #15
 8008e8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a2b      	ldr	r2, [pc, #172]	; (8008f40 <HAL_I2S_Init+0x278>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d101      	bne.n	8008e9c <HAL_I2S_Init+0x1d4>
 8008e98:	4b2a      	ldr	r3, [pc, #168]	; (8008f44 <HAL_I2S_Init+0x27c>)
 8008e9a:	e001      	b.n	8008ea0 <HAL_I2S_Init+0x1d8>
 8008e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a25      	ldr	r2, [pc, #148]	; (8008f40 <HAL_I2S_Init+0x278>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d101      	bne.n	8008eb2 <HAL_I2S_Init+0x1ea>
 8008eae:	4b25      	ldr	r3, [pc, #148]	; (8008f44 <HAL_I2S_Init+0x27c>)
 8008eb0:	e001      	b.n	8008eb6 <HAL_I2S_Init+0x1ee>
 8008eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec2:	d003      	beq.n	8008ecc <HAL_I2S_Init+0x204>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	e001      	b.n	8008ed8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008eec:	4313      	orrs	r3, r2
 8008eee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	897b      	ldrh	r3, [r7, #10]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <HAL_I2S_Init+0x278>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d101      	bne.n	8008f14 <HAL_I2S_Init+0x24c>
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <HAL_I2S_Init+0x27c>)
 8008f12:	e001      	b.n	8008f18 <HAL_I2S_Init+0x250>
 8008f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f18:	897a      	ldrh	r2, [r7, #10]
 8008f1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	0800903f 	.word	0x0800903f
 8008f38:	cccccccd 	.word	0xcccccccd
 8008f3c:	08009155 	.word	0x08009155
 8008f40:	40003800 	.word	0x40003800
 8008f44:	40003400 	.word	0x40003400

08008f48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	1c9a      	adds	r2, r3, #2
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10e      	bne.n	8008fd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff ffb8 	bl	8008f48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10e      	bne.n	8009036 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009026:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff ff93 	bl	8008f5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b04      	cmp	r3, #4
 8009058:	d13a      	bne.n	80090d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b01      	cmp	r3, #1
 8009062:	d109      	bne.n	8009078 <I2S_IRQHandler+0x3a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d102      	bne.n	8009078 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff ffb4 	bl	8008fe0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907e:	2b40      	cmp	r3, #64	; 0x40
 8009080:	d126      	bne.n	80090d0 <I2S_IRQHandler+0x92>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b20      	cmp	r3, #32
 800908e:	d11f      	bne.n	80090d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800909e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80090a0:	2300      	movs	r3, #0
 80090a2:	613b      	str	r3, [r7, #16]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c2:	f043 0202 	orr.w	r2, r3, #2
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff ff50 	bl	8008f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d136      	bne.n	800914a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d109      	bne.n	80090fa <I2S_IRQHandler+0xbc>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f0:	2b80      	cmp	r3, #128	; 0x80
 80090f2:	d102      	bne.n	80090fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff45 	bl	8008f84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b08      	cmp	r3, #8
 8009102:	d122      	bne.n	800914a <I2S_IRQHandler+0x10c>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b20      	cmp	r3, #32
 8009110:	d11b      	bne.n	800914a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009120:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913c:	f043 0204 	orr.w	r2, r3, #4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff13 	bl	8008f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4aa2      	ldr	r2, [pc, #648]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d101      	bne.n	8009172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800916e:	4ba2      	ldr	r3, [pc, #648]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009170:	e001      	b.n	8009176 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a9b      	ldr	r2, [pc, #620]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d101      	bne.n	8009190 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800918c:	4b9a      	ldr	r3, [pc, #616]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800918e:	e001      	b.n	8009194 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091a0:	d004      	beq.n	80091ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f040 8099 	bne.w	80092de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d107      	bne.n	80091c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f925 	bl	8009410 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d107      	bne.n	80091e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f9c8 	bl	8009570 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d13a      	bne.n	8009260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d035      	beq.n	8009260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a7e      	ldr	r2, [pc, #504]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d101      	bne.n	8009202 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80091fe:	4b7e      	ldr	r3, [pc, #504]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009200:	e001      	b.n	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8009202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4979      	ldr	r1, [pc, #484]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800920e:	428b      	cmp	r3, r1
 8009210:	d101      	bne.n	8009216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8009212:	4b79      	ldr	r3, [pc, #484]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009214:	e001      	b.n	800921a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8009216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800921a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800921e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800922e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	f043 0202 	orr.w	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe88 	bl	8008f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b08      	cmp	r3, #8
 8009268:	f040 80be 	bne.w	80093e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80b8 	beq.w	80093e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009286:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a59      	ldr	r2, [pc, #356]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d101      	bne.n	8009296 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009292:	4b59      	ldr	r3, [pc, #356]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009294:	e001      	b.n	800929a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8009296:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4954      	ldr	r1, [pc, #336]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092a2:	428b      	cmp	r3, r1
 80092a4:	d101      	bne.n	80092aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80092a6:	4b54      	ldr	r3, [pc, #336]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092a8:	e001      	b.n	80092ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80092aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80092b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80092b4:	2300      	movs	r3, #0
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	60bb      	str	r3, [r7, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	f043 0204 	orr.w	r2, r3, #4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff fe4a 	bl	8008f70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80092dc:	e084      	b.n	80093e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d107      	bne.n	80092f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8be 	bl	8009474 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d107      	bne.n	8009312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f8fd 	bl	800950c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	d12f      	bne.n	800937c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d02a      	beq.n	800937c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009334:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a2e      	ldr	r2, [pc, #184]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d101      	bne.n	8009344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009340:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009342:	e001      	b.n	8009348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4929      	ldr	r1, [pc, #164]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009350:	428b      	cmp	r3, r1
 8009352:	d101      	bne.n	8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009354:	4b28      	ldr	r3, [pc, #160]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009356:	e001      	b.n	800935c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800935c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009360:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	f043 0202 	orr.w	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fdfa 	bl	8008f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b08      	cmp	r3, #8
 8009384:	d131      	bne.n	80093ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	d02c      	beq.n	80093ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a17      	ldr	r2, [pc, #92]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d101      	bne.n	800939e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800939c:	e001      	b.n	80093a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800939e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4912      	ldr	r1, [pc, #72]	; (80093f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093aa:	428b      	cmp	r3, r1
 80093ac:	d101      	bne.n	80093b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80093ae:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093b0:	e001      	b.n	80093b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80093b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80093ca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d8:	f043 0204 	orr.w	r2, r3, #4
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fdc5 	bl	8008f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80093e6:	e000      	b.n	80093ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093e8:	bf00      	nop
}
 80093ea:	bf00      	nop
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40003800 	.word	0x40003800
 80093f8:	40003400 	.word	0x40003400

080093fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	1c99      	adds	r1, r3, #2
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	6251      	str	r1, [r2, #36]	; 0x24
 8009422:	881a      	ldrh	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942e:	b29b      	uxth	r3, r3
 8009430:	3b01      	subs	r3, #1
 8009432:	b29a      	uxth	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943c:	b29b      	uxth	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d113      	bne.n	800946a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff ffc9 	bl	80093fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	1c99      	adds	r1, r3, #2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6251      	str	r1, [r2, #36]	; 0x24
 8009486:	8819      	ldrh	r1, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <I2SEx_TxISR_I2SExt+0x90>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d101      	bne.n	8009496 <I2SEx_TxISR_I2SExt+0x22>
 8009492:	4b1d      	ldr	r3, [pc, #116]	; (8009508 <I2SEx_TxISR_I2SExt+0x94>)
 8009494:	e001      	b.n	800949a <I2SEx_TxISR_I2SExt+0x26>
 8009496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800949a:	460a      	mov	r2, r1
 800949c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	3b01      	subs	r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d121      	bne.n	80094fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a12      	ldr	r2, [pc, #72]	; (8009504 <I2SEx_TxISR_I2SExt+0x90>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d101      	bne.n	80094c4 <I2SEx_TxISR_I2SExt+0x50>
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <I2SEx_TxISR_I2SExt+0x94>)
 80094c2:	e001      	b.n	80094c8 <I2SEx_TxISR_I2SExt+0x54>
 80094c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	490d      	ldr	r1, [pc, #52]	; (8009504 <I2SEx_TxISR_I2SExt+0x90>)
 80094d0:	428b      	cmp	r3, r1
 80094d2:	d101      	bne.n	80094d8 <I2SEx_TxISR_I2SExt+0x64>
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <I2SEx_TxISR_I2SExt+0x94>)
 80094d6:	e001      	b.n	80094dc <I2SEx_TxISR_I2SExt+0x68>
 80094d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d106      	bne.n	80094fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ff81 	bl	80093fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40003800 	.word	0x40003800
 8009508:	40003400 	.word	0x40003400

0800950c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68d8      	ldr	r0, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	1c99      	adds	r1, r3, #2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009524:	b282      	uxth	r2, r0
 8009526:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800952c:	b29b      	uxth	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800953a:	b29b      	uxth	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d113      	bne.n	8009568 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800954e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d106      	bne.n	8009568 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff ff4a 	bl	80093fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a20      	ldr	r2, [pc, #128]	; (8009600 <I2SEx_RxISR_I2SExt+0x90>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d101      	bne.n	8009586 <I2SEx_RxISR_I2SExt+0x16>
 8009582:	4b20      	ldr	r3, [pc, #128]	; (8009604 <I2SEx_RxISR_I2SExt+0x94>)
 8009584:	e001      	b.n	800958a <I2SEx_RxISR_I2SExt+0x1a>
 8009586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800958a:	68d8      	ldr	r0, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	1c99      	adds	r1, r3, #2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009596:	b282      	uxth	r2, r0
 8009598:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800959e:	b29b      	uxth	r3, r3
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d121      	bne.n	80095f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a12      	ldr	r2, [pc, #72]	; (8009600 <I2SEx_RxISR_I2SExt+0x90>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d101      	bne.n	80095c0 <I2SEx_RxISR_I2SExt+0x50>
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <I2SEx_RxISR_I2SExt+0x94>)
 80095be:	e001      	b.n	80095c4 <I2SEx_RxISR_I2SExt+0x54>
 80095c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	490d      	ldr	r1, [pc, #52]	; (8009600 <I2SEx_RxISR_I2SExt+0x90>)
 80095cc:	428b      	cmp	r3, r1
 80095ce:	d101      	bne.n	80095d4 <I2SEx_RxISR_I2SExt+0x64>
 80095d0:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <I2SEx_RxISR_I2SExt+0x94>)
 80095d2:	e001      	b.n	80095d8 <I2SEx_RxISR_I2SExt+0x68>
 80095d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80095dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ff03 	bl	80093fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	40003800 	.word	0x40003800
 8009604:	40003400 	.word	0x40003400

08009608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e264      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d075      	beq.n	8009712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009626:	4ba3      	ldr	r3, [pc, #652]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 030c 	and.w	r3, r3, #12
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00c      	beq.n	800964c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009632:	4ba0      	ldr	r3, [pc, #640]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800963a:	2b08      	cmp	r3, #8
 800963c:	d112      	bne.n	8009664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800963e:	4b9d      	ldr	r3, [pc, #628]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800964a:	d10b      	bne.n	8009664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800964c:	4b99      	ldr	r3, [pc, #612]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d05b      	beq.n	8009710 <HAL_RCC_OscConfig+0x108>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d157      	bne.n	8009710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e23f      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966c:	d106      	bne.n	800967c <HAL_RCC_OscConfig+0x74>
 800966e:	4b91      	ldr	r3, [pc, #580]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a90      	ldr	r2, [pc, #576]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009678:	6013      	str	r3, [r2, #0]
 800967a:	e01d      	b.n	80096b8 <HAL_RCC_OscConfig+0xb0>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009684:	d10c      	bne.n	80096a0 <HAL_RCC_OscConfig+0x98>
 8009686:	4b8b      	ldr	r3, [pc, #556]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a8a      	ldr	r2, [pc, #552]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800968c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	4b88      	ldr	r3, [pc, #544]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a87      	ldr	r2, [pc, #540]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	e00b      	b.n	80096b8 <HAL_RCC_OscConfig+0xb0>
 80096a0:	4b84      	ldr	r3, [pc, #528]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a83      	ldr	r2, [pc, #524]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80096a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	4b81      	ldr	r3, [pc, #516]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a80      	ldr	r2, [pc, #512]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80096b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d013      	beq.n	80096e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c0:	f7fb fe40 	bl	8005344 <HAL_GetTick>
 80096c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096c6:	e008      	b.n	80096da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096c8:	f7fb fe3c 	bl	8005344 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	2b64      	cmp	r3, #100	; 0x64
 80096d4:	d901      	bls.n	80096da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e204      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096da:	4b76      	ldr	r3, [pc, #472]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f0      	beq.n	80096c8 <HAL_RCC_OscConfig+0xc0>
 80096e6:	e014      	b.n	8009712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e8:	f7fb fe2c 	bl	8005344 <HAL_GetTick>
 80096ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ee:	e008      	b.n	8009702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096f0:	f7fb fe28 	bl	8005344 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b64      	cmp	r3, #100	; 0x64
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e1f0      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009702:	4b6c      	ldr	r3, [pc, #432]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1f0      	bne.n	80096f0 <HAL_RCC_OscConfig+0xe8>
 800970e:	e000      	b.n	8009712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d063      	beq.n	80097e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800971e:	4b65      	ldr	r3, [pc, #404]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 030c 	and.w	r3, r3, #12
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00b      	beq.n	8009742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800972a:	4b62      	ldr	r3, [pc, #392]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009732:	2b08      	cmp	r3, #8
 8009734:	d11c      	bne.n	8009770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009736:	4b5f      	ldr	r3, [pc, #380]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d116      	bne.n	8009770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009742:	4b5c      	ldr	r3, [pc, #368]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <HAL_RCC_OscConfig+0x152>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d001      	beq.n	800975a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e1c4      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800975a:	4b56      	ldr	r3, [pc, #344]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4952      	ldr	r1, [pc, #328]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800976a:	4313      	orrs	r3, r2
 800976c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800976e:	e03a      	b.n	80097e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d020      	beq.n	80097ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <HAL_RCC_OscConfig+0x2b0>)
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977e:	f7fb fde1 	bl	8005344 <HAL_GetTick>
 8009782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009784:	e008      	b.n	8009798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009786:	f7fb fddd 	bl	8005344 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e1a5      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009798:	4b46      	ldr	r3, [pc, #280]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0f0      	beq.n	8009786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097a4:	4b43      	ldr	r3, [pc, #268]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4940      	ldr	r1, [pc, #256]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	600b      	str	r3, [r1, #0]
 80097b8:	e015      	b.n	80097e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097ba:	4b3f      	ldr	r3, [pc, #252]	; (80098b8 <HAL_RCC_OscConfig+0x2b0>)
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c0:	f7fb fdc0 	bl	8005344 <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c8:	f7fb fdbc 	bl	8005344 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e184      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097da:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1f0      	bne.n	80097c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d030      	beq.n	8009854 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d016      	beq.n	8009828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097fa:	4b30      	ldr	r3, [pc, #192]	; (80098bc <HAL_RCC_OscConfig+0x2b4>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009800:	f7fb fda0 	bl	8005344 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009808:	f7fb fd9c 	bl	8005344 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e164      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800981a:	4b26      	ldr	r3, [pc, #152]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800981c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0f0      	beq.n	8009808 <HAL_RCC_OscConfig+0x200>
 8009826:	e015      	b.n	8009854 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009828:	4b24      	ldr	r3, [pc, #144]	; (80098bc <HAL_RCC_OscConfig+0x2b4>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800982e:	f7fb fd89 	bl	8005344 <HAL_GetTick>
 8009832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009834:	e008      	b.n	8009848 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009836:	f7fb fd85 	bl	8005344 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d901      	bls.n	8009848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e14d      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009848:	4b1a      	ldr	r3, [pc, #104]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800984a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f0      	bne.n	8009836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80a0 	beq.w	80099a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009866:	4b13      	ldr	r3, [pc, #76]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10f      	bne.n	8009892 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009872:	2300      	movs	r3, #0
 8009874:	60bb      	str	r3, [r7, #8]
 8009876:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	4a0e      	ldr	r2, [pc, #56]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 800987c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009880:	6413      	str	r3, [r2, #64]	; 0x40
 8009882:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <HAL_RCC_OscConfig+0x2ac>)
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800988a:	60bb      	str	r3, [r7, #8]
 800988c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800988e:	2301      	movs	r3, #1
 8009890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009892:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <HAL_RCC_OscConfig+0x2b8>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d121      	bne.n	80098e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <HAL_RCC_OscConfig+0x2b8>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a07      	ldr	r2, [pc, #28]	; (80098c0 <HAL_RCC_OscConfig+0x2b8>)
 80098a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098aa:	f7fb fd4b 	bl	8005344 <HAL_GetTick>
 80098ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b0:	e011      	b.n	80098d6 <HAL_RCC_OscConfig+0x2ce>
 80098b2:	bf00      	nop
 80098b4:	40023800 	.word	0x40023800
 80098b8:	42470000 	.word	0x42470000
 80098bc:	42470e80 	.word	0x42470e80
 80098c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098c4:	f7fb fd3e 	bl	8005344 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e106      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d6:	4b85      	ldr	r3, [pc, #532]	; (8009aec <HAL_RCC_OscConfig+0x4e4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0f0      	beq.n	80098c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d106      	bne.n	80098f8 <HAL_RCC_OscConfig+0x2f0>
 80098ea:	4b81      	ldr	r3, [pc, #516]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	4a80      	ldr	r2, [pc, #512]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	6713      	str	r3, [r2, #112]	; 0x70
 80098f6:	e01c      	b.n	8009932 <HAL_RCC_OscConfig+0x32a>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b05      	cmp	r3, #5
 80098fe:	d10c      	bne.n	800991a <HAL_RCC_OscConfig+0x312>
 8009900:	4b7b      	ldr	r3, [pc, #492]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009904:	4a7a      	ldr	r2, [pc, #488]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009906:	f043 0304 	orr.w	r3, r3, #4
 800990a:	6713      	str	r3, [r2, #112]	; 0x70
 800990c:	4b78      	ldr	r3, [pc, #480]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 800990e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009910:	4a77      	ldr	r2, [pc, #476]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	6713      	str	r3, [r2, #112]	; 0x70
 8009918:	e00b      	b.n	8009932 <HAL_RCC_OscConfig+0x32a>
 800991a:	4b75      	ldr	r3, [pc, #468]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	4a74      	ldr	r2, [pc, #464]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	6713      	str	r3, [r2, #112]	; 0x70
 8009926:	4b72      	ldr	r3, [pc, #456]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992a:	4a71      	ldr	r2, [pc, #452]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 800992c:	f023 0304 	bic.w	r3, r3, #4
 8009930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d015      	beq.n	8009966 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800993a:	f7fb fd03 	bl	8005344 <HAL_GetTick>
 800993e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009940:	e00a      	b.n	8009958 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009942:	f7fb fcff 	bl	8005344 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009950:	4293      	cmp	r3, r2
 8009952:	d901      	bls.n	8009958 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e0c5      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009958:	4b65      	ldr	r3, [pc, #404]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 800995a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0ee      	beq.n	8009942 <HAL_RCC_OscConfig+0x33a>
 8009964:	e014      	b.n	8009990 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009966:	f7fb fced 	bl	8005344 <HAL_GetTick>
 800996a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800996c:	e00a      	b.n	8009984 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800996e:	f7fb fce9 	bl	8005344 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	f241 3288 	movw	r2, #5000	; 0x1388
 800997c:	4293      	cmp	r3, r2
 800997e:	d901      	bls.n	8009984 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e0af      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009984:	4b5a      	ldr	r3, [pc, #360]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1ee      	bne.n	800996e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d105      	bne.n	80099a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009996:	4b56      	ldr	r3, [pc, #344]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	4a55      	ldr	r2, [pc, #340]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 800999c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 809b 	beq.w	8009ae2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099ac:	4b50      	ldr	r3, [pc, #320]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f003 030c 	and.w	r3, r3, #12
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d05c      	beq.n	8009a72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d141      	bne.n	8009a44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099c0:	4b4c      	ldr	r3, [pc, #304]	; (8009af4 <HAL_RCC_OscConfig+0x4ec>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c6:	f7fb fcbd 	bl	8005344 <HAL_GetTick>
 80099ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099cc:	e008      	b.n	80099e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ce:	f7fb fcb9 	bl	8005344 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e081      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099e0:	4b43      	ldr	r3, [pc, #268]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f0      	bne.n	80099ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69da      	ldr	r2, [r3, #28]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	431a      	orrs	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	019b      	lsls	r3, r3, #6
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	3b01      	subs	r3, #1
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	061b      	lsls	r3, r3, #24
 8009a10:	4937      	ldr	r1, [pc, #220]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <HAL_RCC_OscConfig+0x4ec>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a1c:	f7fb fc92 	bl	8005344 <HAL_GetTick>
 8009a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a22:	e008      	b.n	8009a36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a24:	f7fb fc8e 	bl	8005344 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e056      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a36:	4b2e      	ldr	r3, [pc, #184]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0f0      	beq.n	8009a24 <HAL_RCC_OscConfig+0x41c>
 8009a42:	e04e      	b.n	8009ae2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a44:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <HAL_RCC_OscConfig+0x4ec>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a4a:	f7fb fc7b 	bl	8005344 <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a52:	f7fb fc77 	bl	8005344 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e03f      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a64:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1f0      	bne.n	8009a52 <HAL_RCC_OscConfig+0x44a>
 8009a70:	e037      	b.n	8009ae2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e032      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a7e:	4b1c      	ldr	r3, [pc, #112]	; (8009af0 <HAL_RCC_OscConfig+0x4e8>)
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d028      	beq.n	8009ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d121      	bne.n	8009ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d11a      	bne.n	8009ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009aae:	4013      	ands	r3, r2
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ab4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d111      	bne.n	8009ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d107      	bne.n	8009ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d001      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	40007000 	.word	0x40007000
 8009af0:	40023800 	.word	0x40023800
 8009af4:	42470060 	.word	0x42470060

08009af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e0cc      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b0c:	4b68      	ldr	r3, [pc, #416]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d90c      	bls.n	8009b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b1a:	4b65      	ldr	r3, [pc, #404]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b22:	4b63      	ldr	r3, [pc, #396]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d001      	beq.n	8009b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e0b8      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d020      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b4c:	4b59      	ldr	r3, [pc, #356]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4a58      	ldr	r2, [pc, #352]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b64:	4b53      	ldr	r3, [pc, #332]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	4a52      	ldr	r2, [pc, #328]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b70:	4b50      	ldr	r3, [pc, #320]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	494d      	ldr	r1, [pc, #308]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d044      	beq.n	8009c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d107      	bne.n	8009ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b96:	4b47      	ldr	r3, [pc, #284]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d119      	bne.n	8009bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e07f      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d003      	beq.n	8009bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d107      	bne.n	8009bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bb6:	4b3f      	ldr	r3, [pc, #252]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e06f      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bc6:	4b3b      	ldr	r3, [pc, #236]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e067      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bd6:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f023 0203 	bic.w	r2, r3, #3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	4934      	ldr	r1, [pc, #208]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009be8:	f7fb fbac 	bl	8005344 <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bee:	e00a      	b.n	8009c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bf0:	f7fb fba8 	bl	8005344 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e04f      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c06:	4b2b      	ldr	r3, [pc, #172]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 020c 	and.w	r2, r3, #12
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d1eb      	bne.n	8009bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c18:	4b25      	ldr	r3, [pc, #148]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d20c      	bcs.n	8009c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c26:	4b22      	ldr	r3, [pc, #136]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e032      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0304 	and.w	r3, r3, #4
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c4c:	4b19      	ldr	r3, [pc, #100]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	4916      	ldr	r1, [pc, #88]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d009      	beq.n	8009c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c6a:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	490e      	ldr	r1, [pc, #56]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c7e:	f000 f821 	bl	8009cc4 <HAL_RCC_GetSysClockFreq>
 8009c82:	4602      	mov	r2, r0
 8009c84:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	490a      	ldr	r1, [pc, #40]	; (8009cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8009c90:	5ccb      	ldrb	r3, [r1, r3]
 8009c92:	fa22 f303 	lsr.w	r3, r2, r3
 8009c96:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <HAL_RCC_ClockConfig+0x1c4>)
 8009c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fb fb0c 	bl	80052bc <HAL_InitTick>

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40023c00 	.word	0x40023c00
 8009cb4:	40023800 	.word	0x40023800
 8009cb8:	0800f030 	.word	0x0800f030
 8009cbc:	20000004 	.word	0x20000004
 8009cc0:	2000014c 	.word	0x2000014c

08009cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cdc:	4b67      	ldr	r3, [pc, #412]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 030c 	and.w	r3, r3, #12
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d00d      	beq.n	8009d04 <HAL_RCC_GetSysClockFreq+0x40>
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	f200 80bd 	bhi.w	8009e68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d003      	beq.n	8009cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8009cf6:	e0b7      	b.n	8009e68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cf8:	4b61      	ldr	r3, [pc, #388]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009cfa:	60bb      	str	r3, [r7, #8]
       break;
 8009cfc:	e0b7      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cfe:	4b61      	ldr	r3, [pc, #388]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009d00:	60bb      	str	r3, [r7, #8]
      break;
 8009d02:	e0b4      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d04:	4b5d      	ldr	r3, [pc, #372]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d0e:	4b5b      	ldr	r3, [pc, #364]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d04d      	beq.n	8009db6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d1a:	4b58      	ldr	r3, [pc, #352]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	099b      	lsrs	r3, r3, #6
 8009d20:	461a      	mov	r2, r3
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d2a:	f04f 0100 	mov.w	r1, #0
 8009d2e:	ea02 0800 	and.w	r8, r2, r0
 8009d32:	ea03 0901 	and.w	r9, r3, r1
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	014b      	lsls	r3, r1, #5
 8009d44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009d48:	0142      	lsls	r2, r0, #5
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	ebb0 0008 	subs.w	r0, r0, r8
 8009d52:	eb61 0109 	sbc.w	r1, r1, r9
 8009d56:	f04f 0200 	mov.w	r2, #0
 8009d5a:	f04f 0300 	mov.w	r3, #0
 8009d5e:	018b      	lsls	r3, r1, #6
 8009d60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009d64:	0182      	lsls	r2, r0, #6
 8009d66:	1a12      	subs	r2, r2, r0
 8009d68:	eb63 0301 	sbc.w	r3, r3, r1
 8009d6c:	f04f 0000 	mov.w	r0, #0
 8009d70:	f04f 0100 	mov.w	r1, #0
 8009d74:	00d9      	lsls	r1, r3, #3
 8009d76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d7a:	00d0      	lsls	r0, r2, #3
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	eb12 0208 	adds.w	r2, r2, r8
 8009d84:	eb43 0309 	adc.w	r3, r3, r9
 8009d88:	f04f 0000 	mov.w	r0, #0
 8009d8c:	f04f 0100 	mov.w	r1, #0
 8009d90:	0259      	lsls	r1, r3, #9
 8009d92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009d96:	0250      	lsls	r0, r2, #9
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	f7f6 fedc 	bl	8000b64 <__aeabi_uldivmod>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4613      	mov	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e04a      	b.n	8009e4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009db6:	4b31      	ldr	r3, [pc, #196]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	099b      	lsrs	r3, r3, #6
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009dc6:	f04f 0100 	mov.w	r1, #0
 8009dca:	ea02 0400 	and.w	r4, r2, r0
 8009dce:	ea03 0501 	and.w	r5, r3, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	014b      	lsls	r3, r1, #5
 8009de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009de4:	0142      	lsls	r2, r0, #5
 8009de6:	4610      	mov	r0, r2
 8009de8:	4619      	mov	r1, r3
 8009dea:	1b00      	subs	r0, r0, r4
 8009dec:	eb61 0105 	sbc.w	r1, r1, r5
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	018b      	lsls	r3, r1, #6
 8009dfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009dfe:	0182      	lsls	r2, r0, #6
 8009e00:	1a12      	subs	r2, r2, r0
 8009e02:	eb63 0301 	sbc.w	r3, r3, r1
 8009e06:	f04f 0000 	mov.w	r0, #0
 8009e0a:	f04f 0100 	mov.w	r1, #0
 8009e0e:	00d9      	lsls	r1, r3, #3
 8009e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e14:	00d0      	lsls	r0, r2, #3
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	1912      	adds	r2, r2, r4
 8009e1c:	eb45 0303 	adc.w	r3, r5, r3
 8009e20:	f04f 0000 	mov.w	r0, #0
 8009e24:	f04f 0100 	mov.w	r1, #0
 8009e28:	0299      	lsls	r1, r3, #10
 8009e2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009e2e:	0290      	lsls	r0, r2, #10
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	f7f6 fe90 	bl	8000b64 <__aeabi_uldivmod>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4613      	mov	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	3301      	adds	r3, #1
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e64:	60bb      	str	r3, [r7, #8]
      break;
 8009e66:	e002      	b.n	8009e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009e6a:	60bb      	str	r3, [r7, #8]
      break;
 8009e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40023800 	.word	0x40023800
 8009e80:	00f42400 	.word	0x00f42400
 8009e84:	007a1200 	.word	0x007a1200

08009e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e8c:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	20000004 	.word	0x20000004

08009ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ea4:	f7ff fff0 	bl	8009e88 <HAL_RCC_GetHCLKFreq>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	0a9b      	lsrs	r3, r3, #10
 8009eb0:	f003 0307 	and.w	r3, r3, #7
 8009eb4:	4903      	ldr	r1, [pc, #12]	; (8009ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eb6:	5ccb      	ldrb	r3, [r1, r3]
 8009eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	40023800 	.word	0x40023800
 8009ec4:	0800f040 	.word	0x0800f040

08009ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d035      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ef0:	4b62      	ldr	r3, [pc, #392]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ef6:	f7fb fa25 	bl	8005344 <HAL_GetTick>
 8009efa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009efc:	e008      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009efe:	f7fb fa21 	bl	8005344 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d901      	bls.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e0b0      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f10:	4b5b      	ldr	r3, [pc, #364]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1f0      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	019a      	lsls	r2, r3, #6
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	071b      	lsls	r3, r3, #28
 8009f28:	4955      	ldr	r1, [pc, #340]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f30:	4b52      	ldr	r3, [pc, #328]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f36:	f7fb fa05 	bl	8005344 <HAL_GetTick>
 8009f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f3c:	e008      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f3e:	f7fb fa01 	bl	8005344 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e090      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f50:	4b4b      	ldr	r3, [pc, #300]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0f0      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8083 	beq.w	800a070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	4b44      	ldr	r3, [pc, #272]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	4a43      	ldr	r2, [pc, #268]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f78:	6413      	str	r3, [r2, #64]	; 0x40
 8009f7a:	4b41      	ldr	r3, [pc, #260]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f86:	4b3f      	ldr	r3, [pc, #252]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a3e      	ldr	r2, [pc, #248]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f92:	f7fb f9d7 	bl	8005344 <HAL_GetTick>
 8009f96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f98:	e008      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f9a:	f7fb f9d3 	bl	8005344 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e062      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fac:	4b35      	ldr	r3, [pc, #212]	; (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f0      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fb8:	4b31      	ldr	r3, [pc, #196]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02f      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d028      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fd6:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fe0:	4b29      	ldr	r3, [pc, #164]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fe6:	4b28      	ldr	r3, [pc, #160]	; (800a088 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fec:	4a24      	ldr	r2, [pc, #144]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ff2:	4b23      	ldr	r3, [pc, #140]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d114      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ffe:	f7fb f9a1 	bl	8005344 <HAL_GetTick>
 800a002:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a004:	e00a      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a006:	f7fb f99d 	bl	8005344 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	f241 3288 	movw	r2, #5000	; 0x1388
 800a014:	4293      	cmp	r3, r2
 800a016:	d901      	bls.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e02a      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a01c:	4b18      	ldr	r3, [pc, #96]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0ee      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a034:	d10d      	bne.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a04a:	490d      	ldr	r1, [pc, #52]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	608b      	str	r3, [r1, #8]
 800a050:	e005      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a052:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	4a0a      	ldr	r2, [pc, #40]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a058:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a05c:	6093      	str	r3, [r2, #8]
 800a05e:	4b08      	ldr	r3, [pc, #32]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a06a:	4905      	ldr	r1, [pc, #20]	; (800a080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	42470068 	.word	0x42470068
 800a080:	40023800 	.word	0x40023800
 800a084:	40007000 	.word	0x40007000
 800a088:	42470e40 	.word	0x42470e40

0800a08c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d13e      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a0aa:	4b23      	ldr	r3, [pc, #140]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d12f      	bne.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a0c0:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a0c2:	617b      	str	r3, [r7, #20]
          break;
 800a0c4:	e02f      	b.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a0c6:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0d2:	d108      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0d4:	4b18      	ldr	r3, [pc, #96]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0dc:	4a18      	ldr	r2, [pc, #96]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e2:	613b      	str	r3, [r7, #16]
 800a0e4:	e007      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a0f6:	4b10      	ldr	r3, [pc, #64]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0fc:	099b      	lsrs	r3, r3, #6
 800a0fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	fb02 f303 	mul.w	r3, r2, r3
 800a108:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a110:	0f1b      	lsrs	r3, r3, #28
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11c:	617b      	str	r3, [r7, #20]
          break;
 800a11e:	e002      	b.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
          break;
 800a124:	bf00      	nop
        }
      }
      break;
 800a126:	bf00      	nop
    }
  }
  return frequency;
 800a128:	697b      	ldr	r3, [r7, #20]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	40023800 	.word	0x40023800
 800a13c:	00bb8000 	.word	0x00bb8000
 800a140:	007a1200 	.word	0x007a1200
 800a144:	00f42400 	.word	0x00f42400

0800a148 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e01c      	b.n	800a194 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	795b      	ldrb	r3, [r3, #5]
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d105      	bne.n	800a170 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7f7 fe22 	bl	8001db4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f042 0204 	orr.w	r2, r2, #4
 800a184:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	791b      	ldrb	r3, [r3, #4]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e03d      	b.n	800a232 <HAL_RNG_GenerateRandomNumber+0x96>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	795b      	ldrb	r3, [r3, #5]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d12c      	bne.n	800a220 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1cc:	f7fb f8ba 	bl	8005344 <HAL_GetTick>
 800a1d0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1d2:	e011      	b.n	800a1f8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a1d4:	f7fb f8b6 	bl	8005344 <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d90a      	bls.n	800a1f8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e01c      	b.n	800a232 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b01      	cmp	r3, #1
 800a204:	d1e6      	bne.n	800a1d4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	715a      	strb	r2, [r3, #5]
 800a21e:	e004      	b.n	800a22a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2204      	movs	r2, #4
 800a224:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	711a      	strb	r2, [r3, #4]

  return status;
 800a230:	7bfb      	ldrb	r3, [r7, #15]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b082      	sub	sp, #8
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	330c      	adds	r3, #12
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff ffa7 	bl	800a19c <HAL_RNG_GenerateRandomNumber>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	e000      	b.n	800a25c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800a25a:	2300      	movs	r3, #0
  }
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e07b      	b.n	800a36e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d108      	bne.n	800a290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a286:	d009      	beq.n	800a29c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	61da      	str	r2, [r3, #28]
 800a28e:	e005      	b.n	800a29c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7f7 fd9e 	bl	8001df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a320:	ea42 0103 	orr.w	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a328:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	f003 0104 	and.w	r1, r3, #4
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	f003 0210 	and.w	r2, r3, #16
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69da      	ldr	r2, [r3, #28]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a35c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b088      	sub	sp, #32
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_SPI_Transmit+0x22>
 800a394:	2302      	movs	r3, #2
 800a396:	e126      	b.n	800a5e6 <HAL_SPI_Transmit+0x270>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3a0:	f7fa ffd0 	bl	8005344 <HAL_GetTick>
 800a3a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d002      	beq.n	800a3bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3ba:	e10b      	b.n	800a5d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_SPI_Transmit+0x52>
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3cc:	e102      	b.n	800a5d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	88fa      	ldrh	r2, [r7, #6]
 800a3e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	88fa      	ldrh	r2, [r7, #6]
 800a3ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a414:	d10f      	bne.n	800a436 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d007      	beq.n	800a454 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a45c:	d14b      	bne.n	800a4f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <HAL_SPI_Transmit+0xf6>
 800a466:	8afb      	ldrh	r3, [r7, #22]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d13e      	bne.n	800a4ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a470:	881a      	ldrh	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	1c9a      	adds	r2, r3, #2
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a490:	e02b      	b.n	800a4ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d112      	bne.n	800a4c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a4:	881a      	ldrh	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	1c9a      	adds	r2, r3, #2
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4c4:	e011      	b.n	800a4ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c6:	f7fa ff3d 	bl	8005344 <HAL_GetTick>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d803      	bhi.n	800a4de <HAL_SPI_Transmit+0x168>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4dc:	d102      	bne.n	800a4e4 <HAL_SPI_Transmit+0x16e>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4e8:	e074      	b.n	800a5d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1ce      	bne.n	800a492 <HAL_SPI_Transmit+0x11c>
 800a4f4:	e04c      	b.n	800a590 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <HAL_SPI_Transmit+0x18e>
 800a4fe:	8afb      	ldrh	r3, [r7, #22]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d140      	bne.n	800a586 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	330c      	adds	r3, #12
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a520:	b29b      	uxth	r3, r3
 800a522:	3b01      	subs	r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a52a:	e02c      	b.n	800a586 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b02      	cmp	r3, #2
 800a538:	d113      	bne.n	800a562 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a556:	b29b      	uxth	r3, r3
 800a558:	3b01      	subs	r3, #1
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a560:	e011      	b.n	800a586 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a562:	f7fa feef 	bl	8005344 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d803      	bhi.n	800a57a <HAL_SPI_Transmit+0x204>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a578:	d102      	bne.n	800a580 <HAL_SPI_Transmit+0x20a>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a584:	e026      	b.n	800a5d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1cd      	bne.n	800a52c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f8b3 	bl	800a700 <SPI_EndRxTxTransaction>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e000      	b.n	800a5d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a5d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3720      	adds	r7, #32
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a600:	f7fa fea0 	bl	8005344 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a610:	f7fa fe98 	bl	8005344 <HAL_GetTick>
 800a614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a616:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	015b      	lsls	r3, r3, #5
 800a61c:	0d1b      	lsrs	r3, r3, #20
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a626:	e054      	b.n	800a6d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a62e:	d050      	beq.n	800a6d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a630:	f7fa fe88 	bl	8005344 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d902      	bls.n	800a646 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d13d      	bne.n	800a6c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a65e:	d111      	bne.n	800a684 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a668:	d004      	beq.n	800a674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a672:	d107      	bne.n	800a684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a68c:	d10f      	bne.n	800a6ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e017      	b.n	800a6f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	bf0c      	ite	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	2300      	movne	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d19b      	bne.n	800a628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000004 	.word	0x20000004

0800a700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a70c:	4b1b      	ldr	r3, [pc, #108]	; (800a77c <SPI_EndRxTxTransaction+0x7c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <SPI_EndRxTxTransaction+0x80>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	0d5b      	lsrs	r3, r3, #21
 800a718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a72a:	d112      	bne.n	800a752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	2180      	movs	r1, #128	; 0x80
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff ff5a 	bl	800a5f0 <SPI_WaitFlagStateUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a746:	f043 0220 	orr.w	r2, r3, #32
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e00f      	b.n	800a772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a768:	2b80      	cmp	r3, #128	; 0x80
 800a76a:	d0f2      	beq.n	800a752 <SPI_EndRxTxTransaction+0x52>
 800a76c:	e000      	b.n	800a770 <SPI_EndRxTxTransaction+0x70>
        break;
 800a76e:	bf00      	nop
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000004 	.word	0x20000004
 800a780:	165e9f81 	.word	0x165e9f81

0800a784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e041      	b.n	800a81a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f7 fc0a 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 fd68 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b01      	cmp	r3, #1
 800a836:	d001      	beq.n	800a83c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e04e      	b.n	800a8da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68da      	ldr	r2, [r3, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0201 	orr.w	r2, r2, #1
 800a852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a23      	ldr	r2, [pc, #140]	; (800a8e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d022      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a866:	d01d      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ec <HAL_TIM_Base_Start_IT+0xc8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d018      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a1e      	ldr	r2, [pc, #120]	; (800a8f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d013      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a1c      	ldr	r2, [pc, #112]	; (800a8f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00e      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a19      	ldr	r2, [pc, #100]	; (800a8fc <HAL_TIM_Base_Start_IT+0xd8>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x80>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a18      	ldr	r2, [pc, #96]	; (800a900 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d111      	bne.n	800a8c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b06      	cmp	r3, #6
 800a8b4:	d010      	beq.n	800a8d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f042 0201 	orr.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c6:	e007      	b.n	800a8d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0201 	orr.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	40000400 	.word	0x40000400
 800a8f0:	40000800 	.word	0x40000800
 800a8f4:	40000c00 	.word	0x40000c00
 800a8f8:	40010400 	.word	0x40010400
 800a8fc:	40014000 	.word	0x40014000
 800a900:	40001800 	.word	0x40001800

0800a904 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <HAL_TIM_OC_Start_IT+0x24>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	bf14      	ite	ne
 800a920:	2301      	movne	r3, #1
 800a922:	2300      	moveq	r3, #0
 800a924:	b2db      	uxtb	r3, r3
 800a926:	e022      	b.n	800a96e <HAL_TIM_OC_Start_IT+0x6a>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d109      	bne.n	800a942 <HAL_TIM_OC_Start_IT+0x3e>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b01      	cmp	r3, #1
 800a938:	bf14      	ite	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	2300      	moveq	r3, #0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	e015      	b.n	800a96e <HAL_TIM_OC_Start_IT+0x6a>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b08      	cmp	r3, #8
 800a946:	d109      	bne.n	800a95c <HAL_TIM_OC_Start_IT+0x58>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b01      	cmp	r3, #1
 800a952:	bf14      	ite	ne
 800a954:	2301      	movne	r3, #1
 800a956:	2300      	moveq	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	e008      	b.n	800a96e <HAL_TIM_OC_Start_IT+0x6a>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	bf14      	ite	ne
 800a968:	2301      	movne	r3, #1
 800a96a:	2300      	moveq	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e0c2      	b.n	800aafc <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d104      	bne.n	800a986 <HAL_TIM_OC_Start_IT+0x82>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2202      	movs	r2, #2
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a984:	e013      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0xaa>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d104      	bne.n	800a996 <HAL_TIM_OC_Start_IT+0x92>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a994:	e00b      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0xaa>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d104      	bne.n	800a9a6 <HAL_TIM_OC_Start_IT+0xa2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9a4:	e003      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0xaa>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b0c      	cmp	r3, #12
 800a9b2:	d841      	bhi.n	800aa38 <HAL_TIM_OC_Start_IT+0x134>
 800a9b4:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <HAL_TIM_OC_Start_IT+0xb8>)
 800a9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ba:	bf00      	nop
 800a9bc:	0800a9f1 	.word	0x0800a9f1
 800a9c0:	0800aa39 	.word	0x0800aa39
 800a9c4:	0800aa39 	.word	0x0800aa39
 800a9c8:	0800aa39 	.word	0x0800aa39
 800a9cc:	0800aa03 	.word	0x0800aa03
 800a9d0:	0800aa39 	.word	0x0800aa39
 800a9d4:	0800aa39 	.word	0x0800aa39
 800a9d8:	0800aa39 	.word	0x0800aa39
 800a9dc:	0800aa15 	.word	0x0800aa15
 800a9e0:	0800aa39 	.word	0x0800aa39
 800a9e4:	0800aa39 	.word	0x0800aa39
 800a9e8:	0800aa39 	.word	0x0800aa39
 800a9ec:	0800aa27 	.word	0x0800aa27
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0202 	orr.w	r2, r2, #2
 800a9fe:	60da      	str	r2, [r3, #12]
      break;
 800aa00:	e01b      	b.n	800aa3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f042 0204 	orr.w	r2, r2, #4
 800aa10:	60da      	str	r2, [r3, #12]
      break;
 800aa12:	e012      	b.n	800aa3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0208 	orr.w	r2, r2, #8
 800aa22:	60da      	str	r2, [r3, #12]
      break;
 800aa24:	e009      	b.n	800aa3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f042 0210 	orr.w	r2, r2, #16
 800aa34:	60da      	str	r2, [r3, #12]
      break;
 800aa36:	e000      	b.n	800aa3a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800aa38:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 ff12 	bl	800b86c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a2d      	ldr	r2, [pc, #180]	; (800ab04 <HAL_TIM_OC_Start_IT+0x200>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d004      	beq.n	800aa5c <HAL_TIM_OC_Start_IT+0x158>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a2c      	ldr	r2, [pc, #176]	; (800ab08 <HAL_TIM_OC_Start_IT+0x204>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d101      	bne.n	800aa60 <HAL_TIM_OC_Start_IT+0x15c>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <HAL_TIM_OC_Start_IT+0x15e>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a22      	ldr	r2, [pc, #136]	; (800ab04 <HAL_TIM_OC_Start_IT+0x200>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d022      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa88:	d01d      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a1f      	ldr	r2, [pc, #124]	; (800ab0c <HAL_TIM_OC_Start_IT+0x208>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d018      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <HAL_TIM_OC_Start_IT+0x20c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d013      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a1c      	ldr	r2, [pc, #112]	; (800ab14 <HAL_TIM_OC_Start_IT+0x210>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00e      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a16      	ldr	r2, [pc, #88]	; (800ab08 <HAL_TIM_OC_Start_IT+0x204>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d009      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a18      	ldr	r2, [pc, #96]	; (800ab18 <HAL_TIM_OC_Start_IT+0x214>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d004      	beq.n	800aac6 <HAL_TIM_OC_Start_IT+0x1c2>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <HAL_TIM_OC_Start_IT+0x218>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d111      	bne.n	800aaea <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b06      	cmp	r3, #6
 800aad6:	d010      	beq.n	800aafa <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae8:	e007      	b.n	800aafa <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	40010000 	.word	0x40010000
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40014000 	.word	0x40014000
 800ab1c:	40001800 	.word	0x40001800

0800ab20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e041      	b.n	800abb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f839 	bl	800abbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	f000 fb9a 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b083      	sub	sp, #12
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abc6:	bf00      	nop
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e097      	b.n	800ad16 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7f7 f99a 	bl	8001f34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6812      	ldr	r2, [r2, #0]
 800ac12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f000 fb36 	bl	800b298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac54:	f023 0303 	bic.w	r3, r3, #3
 800ac58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	4313      	orrs	r3, r2
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ac72:	f023 030c 	bic.w	r3, r3, #12
 800ac76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	011a      	lsls	r2, r3, #4
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	031b      	lsls	r3, r3, #12
 800aca2:	4313      	orrs	r3, r2
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800acb0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800acb8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	4313      	orrs	r3, r2
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f003 0302 	and.w	r3, r3, #2
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d122      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d11b      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f06f 0202 	mvn.w	r2, #2
 800ad4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fa7b 	bl	800b25c <HAL_TIM_IC_CaptureCallback>
 800ad66:	e005      	b.n	800ad74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa6d 	bl	800b248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa7e 	bl	800b270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d122      	bne.n	800adce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f003 0304 	and.w	r3, r3, #4
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d11b      	bne.n	800adce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f06f 0204 	mvn.w	r2, #4
 800ad9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa51 	bl	800b25c <HAL_TIM_IC_CaptureCallback>
 800adba:	e005      	b.n	800adc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa43 	bl	800b248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa54 	bl	800b270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f003 0308 	and.w	r3, r3, #8
 800add8:	2b08      	cmp	r3, #8
 800adda:	d122      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d11b      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f06f 0208 	mvn.w	r2, #8
 800adf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2204      	movs	r2, #4
 800adf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	f003 0303 	and.w	r3, r3, #3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fa27 	bl	800b25c <HAL_TIM_IC_CaptureCallback>
 800ae0e:	e005      	b.n	800ae1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa19 	bl	800b248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa2a 	bl	800b270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f003 0310 	and.w	r3, r3, #16
 800ae2c:	2b10      	cmp	r3, #16
 800ae2e:	d122      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b10      	cmp	r3, #16
 800ae3c:	d11b      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f06f 0210 	mvn.w	r2, #16
 800ae46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	69db      	ldr	r3, [r3, #28]
 800ae54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f9fd 	bl	800b25c <HAL_TIM_IC_CaptureCallback>
 800ae62:	e005      	b.n	800ae70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f9ef 	bl	800b248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa00 	bl	800b270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10e      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d107      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f06f 0201 	mvn.w	r2, #1
 800ae9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f9c9 	bl	800b234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeac:	2b80      	cmp	r3, #128	; 0x80
 800aeae:	d10e      	bne.n	800aece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeba:	2b80      	cmp	r3, #128	; 0x80
 800aebc:	d107      	bne.n	800aece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fd7b 	bl	800b9c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed8:	2b40      	cmp	r3, #64	; 0x40
 800aeda:	d10e      	bne.n	800aefa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d107      	bne.n	800aefa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f9c5 	bl	800b284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b20      	cmp	r3, #32
 800af06:	d10e      	bne.n	800af26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b20      	cmp	r3, #32
 800af14:	d107      	bne.n	800af26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f06f 0220 	mvn.w	r2, #32
 800af1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fd45 	bl	800b9b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af46:	2302      	movs	r3, #2
 800af48:	e0ac      	b.n	800b0a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b0c      	cmp	r3, #12
 800af56:	f200 809f 	bhi.w	800b098 <HAL_TIM_PWM_ConfigChannel+0x168>
 800af5a:	a201      	add	r2, pc, #4	; (adr r2, 800af60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af95 	.word	0x0800af95
 800af64:	0800b099 	.word	0x0800b099
 800af68:	0800b099 	.word	0x0800b099
 800af6c:	0800b099 	.word	0x0800b099
 800af70:	0800afd5 	.word	0x0800afd5
 800af74:	0800b099 	.word	0x0800b099
 800af78:	0800b099 	.word	0x0800b099
 800af7c:	0800b099 	.word	0x0800b099
 800af80:	0800b017 	.word	0x0800b017
 800af84:	0800b099 	.word	0x0800b099
 800af88:	0800b099 	.word	0x0800b099
 800af8c:	0800b099 	.word	0x0800b099
 800af90:	0800b057 	.word	0x0800b057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 fa1c 	bl	800b3d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f042 0208 	orr.w	r2, r2, #8
 800afae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0204 	bic.w	r2, r2, #4
 800afbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6999      	ldr	r1, [r3, #24]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691a      	ldr	r2, [r3, #16]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	619a      	str	r2, [r3, #24]
      break;
 800afd2:	e062      	b.n	800b09a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68b9      	ldr	r1, [r7, #8]
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 fa6c 	bl	800b4b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699a      	ldr	r2, [r3, #24]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699a      	ldr	r2, [r3, #24]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800affe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6999      	ldr	r1, [r3, #24]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	021a      	lsls	r2, r3, #8
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	619a      	str	r2, [r3, #24]
      break;
 800b014:	e041      	b.n	800b09a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fac1 	bl	800b5a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69da      	ldr	r2, [r3, #28]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f042 0208 	orr.w	r2, r2, #8
 800b030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	69da      	ldr	r2, [r3, #28]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f022 0204 	bic.w	r2, r2, #4
 800b040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69d9      	ldr	r1, [r3, #28]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	691a      	ldr	r2, [r3, #16]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	61da      	str	r2, [r3, #28]
      break;
 800b054:	e021      	b.n	800b09a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fb15 	bl	800b68c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69da      	ldr	r2, [r3, #28]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69d9      	ldr	r1, [r3, #28]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	021a      	lsls	r2, r3, #8
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	61da      	str	r2, [r3, #28]
      break;
 800b096:	e000      	b.n	800b09a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b098:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIM_ConfigClockSource+0x18>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e0b3      	b.n	800b22c <HAL_TIM_ConfigClockSource+0x180>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0fc:	d03e      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0xd0>
 800b0fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b102:	f200 8087 	bhi.w	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10a:	f000 8085 	beq.w	800b218 <HAL_TIM_ConfigClockSource+0x16c>
 800b10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b112:	d87f      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b114:	2b70      	cmp	r3, #112	; 0x70
 800b116:	d01a      	beq.n	800b14e <HAL_TIM_ConfigClockSource+0xa2>
 800b118:	2b70      	cmp	r3, #112	; 0x70
 800b11a:	d87b      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b11c:	2b60      	cmp	r3, #96	; 0x60
 800b11e:	d050      	beq.n	800b1c2 <HAL_TIM_ConfigClockSource+0x116>
 800b120:	2b60      	cmp	r3, #96	; 0x60
 800b122:	d877      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b124:	2b50      	cmp	r3, #80	; 0x50
 800b126:	d03c      	beq.n	800b1a2 <HAL_TIM_ConfigClockSource+0xf6>
 800b128:	2b50      	cmp	r3, #80	; 0x50
 800b12a:	d873      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d058      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x136>
 800b130:	2b40      	cmp	r3, #64	; 0x40
 800b132:	d86f      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b134:	2b30      	cmp	r3, #48	; 0x30
 800b136:	d064      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x156>
 800b138:	2b30      	cmp	r3, #48	; 0x30
 800b13a:	d86b      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	d060      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x156>
 800b140:	2b20      	cmp	r3, #32
 800b142:	d867      	bhi.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
 800b144:	2b00      	cmp	r3, #0
 800b146:	d05c      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x156>
 800b148:	2b10      	cmp	r3, #16
 800b14a:	d05a      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b14c:	e062      	b.n	800b214 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	6899      	ldr	r1, [r3, #8]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	f000 fb65 	bl	800b82c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b170:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	609a      	str	r2, [r3, #8]
      break;
 800b17a:	e04e      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	6899      	ldr	r1, [r3, #8]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f000 fb4e 	bl	800b82c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b19e:	609a      	str	r2, [r3, #8]
      break;
 800b1a0:	e03b      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	6859      	ldr	r1, [r3, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f000 fac2 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2150      	movs	r1, #80	; 0x50
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fb1b 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b1c0:	e02b      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	6859      	ldr	r1, [r3, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f000 fae1 	bl	800b796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2160      	movs	r1, #96	; 0x60
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fb0b 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b1e0:	e01b      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6859      	ldr	r1, [r3, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f000 faa2 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2140      	movs	r1, #64	; 0x40
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fafb 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b200:	e00b      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4619      	mov	r1, r3
 800b20c:	4610      	mov	r0, r2
 800b20e:	f000 faf2 	bl	800b7f6 <TIM_ITRx_SetConfig>
        break;
 800b212:	e002      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b218:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a40      	ldr	r2, [pc, #256]	; (800b3ac <TIM_Base_SetConfig+0x114>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d013      	beq.n	800b2d8 <TIM_Base_SetConfig+0x40>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b6:	d00f      	beq.n	800b2d8 <TIM_Base_SetConfig+0x40>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a3d      	ldr	r2, [pc, #244]	; (800b3b0 <TIM_Base_SetConfig+0x118>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d00b      	beq.n	800b2d8 <TIM_Base_SetConfig+0x40>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a3c      	ldr	r2, [pc, #240]	; (800b3b4 <TIM_Base_SetConfig+0x11c>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d007      	beq.n	800b2d8 <TIM_Base_SetConfig+0x40>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a3b      	ldr	r2, [pc, #236]	; (800b3b8 <TIM_Base_SetConfig+0x120>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d003      	beq.n	800b2d8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a3a      	ldr	r2, [pc, #232]	; (800b3bc <TIM_Base_SetConfig+0x124>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d108      	bne.n	800b2ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a2f      	ldr	r2, [pc, #188]	; (800b3ac <TIM_Base_SetConfig+0x114>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d02b      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f8:	d027      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a2c      	ldr	r2, [pc, #176]	; (800b3b0 <TIM_Base_SetConfig+0x118>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d023      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a2b      	ldr	r2, [pc, #172]	; (800b3b4 <TIM_Base_SetConfig+0x11c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d01f      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a2a      	ldr	r2, [pc, #168]	; (800b3b8 <TIM_Base_SetConfig+0x120>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d01b      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a29      	ldr	r2, [pc, #164]	; (800b3bc <TIM_Base_SetConfig+0x124>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d017      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a28      	ldr	r2, [pc, #160]	; (800b3c0 <TIM_Base_SetConfig+0x128>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d013      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a27      	ldr	r2, [pc, #156]	; (800b3c4 <TIM_Base_SetConfig+0x12c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d00f      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a26      	ldr	r2, [pc, #152]	; (800b3c8 <TIM_Base_SetConfig+0x130>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00b      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a25      	ldr	r2, [pc, #148]	; (800b3cc <TIM_Base_SetConfig+0x134>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d007      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a24      	ldr	r2, [pc, #144]	; (800b3d0 <TIM_Base_SetConfig+0x138>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d003      	beq.n	800b34a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a23      	ldr	r2, [pc, #140]	; (800b3d4 <TIM_Base_SetConfig+0x13c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d108      	bne.n	800b35c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <TIM_Base_SetConfig+0x114>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d003      	beq.n	800b390 <TIM_Base_SetConfig+0xf8>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a0c      	ldr	r2, [pc, #48]	; (800b3bc <TIM_Base_SetConfig+0x124>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d103      	bne.n	800b398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	691a      	ldr	r2, [r3, #16]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	615a      	str	r2, [r3, #20]
}
 800b39e:	bf00      	nop
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40000400 	.word	0x40000400
 800b3b4:	40000800 	.word	0x40000800
 800b3b8:	40000c00 	.word	0x40000c00
 800b3bc:	40010400 	.word	0x40010400
 800b3c0:	40014000 	.word	0x40014000
 800b3c4:	40014400 	.word	0x40014400
 800b3c8:	40014800 	.word	0x40014800
 800b3cc:	40001800 	.word	0x40001800
 800b3d0:	40001c00 	.word	0x40001c00
 800b3d4:	40002000 	.word	0x40002000

0800b3d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	f023 0201 	bic.w	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f023 0302 	bic.w	r3, r3, #2
 800b420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a20      	ldr	r2, [pc, #128]	; (800b4b0 <TIM_OC1_SetConfig+0xd8>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d003      	beq.n	800b43c <TIM_OC1_SetConfig+0x64>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1f      	ldr	r2, [pc, #124]	; (800b4b4 <TIM_OC1_SetConfig+0xdc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d10c      	bne.n	800b456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0308 	bic.w	r3, r3, #8
 800b442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f023 0304 	bic.w	r3, r3, #4
 800b454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a15      	ldr	r2, [pc, #84]	; (800b4b0 <TIM_OC1_SetConfig+0xd8>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d003      	beq.n	800b466 <TIM_OC1_SetConfig+0x8e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a14      	ldr	r2, [pc, #80]	; (800b4b4 <TIM_OC1_SetConfig+0xdc>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d111      	bne.n	800b48a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	621a      	str	r2, [r3, #32]
}
 800b4a4:	bf00      	nop
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400

0800b4b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	f023 0210 	bic.w	r2, r3, #16
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f023 0320 	bic.w	r3, r3, #32
 800b502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a22      	ldr	r2, [pc, #136]	; (800b59c <TIM_OC2_SetConfig+0xe4>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d003      	beq.n	800b520 <TIM_OC2_SetConfig+0x68>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a21      	ldr	r2, [pc, #132]	; (800b5a0 <TIM_OC2_SetConfig+0xe8>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10d      	bne.n	800b53c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b53a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a17      	ldr	r2, [pc, #92]	; (800b59c <TIM_OC2_SetConfig+0xe4>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d003      	beq.n	800b54c <TIM_OC2_SetConfig+0x94>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <TIM_OC2_SetConfig+0xe8>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d113      	bne.n	800b574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b55a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	4313      	orrs	r3, r2
 800b566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	40010000 	.word	0x40010000
 800b5a0:	40010400 	.word	0x40010400

0800b5a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a21      	ldr	r2, [pc, #132]	; (800b684 <TIM_OC3_SetConfig+0xe0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d003      	beq.n	800b60a <TIM_OC3_SetConfig+0x66>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a20      	ldr	r2, [pc, #128]	; (800b688 <TIM_OC3_SetConfig+0xe4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d10d      	bne.n	800b626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	021b      	lsls	r3, r3, #8
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a16      	ldr	r2, [pc, #88]	; (800b684 <TIM_OC3_SetConfig+0xe0>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d003      	beq.n	800b636 <TIM_OC3_SetConfig+0x92>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a15      	ldr	r2, [pc, #84]	; (800b688 <TIM_OC3_SetConfig+0xe4>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d113      	bne.n	800b65e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b63c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	4313      	orrs	r3, r2
 800b650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	621a      	str	r2, [r3, #32]
}
 800b678:	bf00      	nop
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	40010000 	.word	0x40010000
 800b688:	40010400 	.word	0x40010400

0800b68c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	021b      	lsls	r3, r3, #8
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	031b      	lsls	r3, r3, #12
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a12      	ldr	r2, [pc, #72]	; (800b730 <TIM_OC4_SetConfig+0xa4>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d003      	beq.n	800b6f4 <TIM_OC4_SetConfig+0x68>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a11      	ldr	r2, [pc, #68]	; (800b734 <TIM_OC4_SetConfig+0xa8>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d109      	bne.n	800b708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	019b      	lsls	r3, r3, #6
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	621a      	str	r2, [r3, #32]
}
 800b722:	bf00      	nop
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	40010000 	.word	0x40010000
 800b734:	40010400 	.word	0x40010400

0800b738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f023 0201 	bic.w	r2, r3, #1
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f023 030a 	bic.w	r3, r3, #10
 800b774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b796:	b480      	push	{r7}
 800b798:	b087      	sub	sp, #28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	f023 0210 	bic.w	r2, r3, #16
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	031b      	lsls	r3, r3, #12
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	693a      	ldr	r2, [r7, #16]
 800b7e8:	621a      	str	r2, [r3, #32]
}
 800b7ea:	bf00      	nop
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	f043 0307 	orr.w	r3, r3, #7
 800b818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	609a      	str	r2, [r3, #8]
}
 800b820:	bf00      	nop
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	021a      	lsls	r2, r3, #8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	431a      	orrs	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	4313      	orrs	r3, r2
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	4313      	orrs	r3, r2
 800b858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	609a      	str	r2, [r3, #8]
}
 800b860:	bf00      	nop
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 031f 	and.w	r3, r3, #31
 800b87e:	2201      	movs	r2, #1
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a1a      	ldr	r2, [r3, #32]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	43db      	mvns	r3, r3
 800b88e:	401a      	ands	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1a      	ldr	r2, [r3, #32]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f003 031f 	and.w	r3, r3, #31
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	621a      	str	r2, [r3, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d101      	bne.n	800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e05a      	b.n	800b986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a21      	ldr	r2, [pc, #132]	; (800b994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d022      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91c:	d01d      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a1d      	ldr	r2, [pc, #116]	; (800b998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d018      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1b      	ldr	r2, [pc, #108]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d013      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1a      	ldr	r2, [pc, #104]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d00e      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a18      	ldr	r2, [pc, #96]	; (800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d009      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a17      	ldr	r2, [pc, #92]	; (800b9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d004      	beq.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a15      	ldr	r2, [pc, #84]	; (800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d10c      	bne.n	800b974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	4313      	orrs	r3, r2
 800b96a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	40010000 	.word	0x40010000
 800b998:	40000400 	.word	0x40000400
 800b99c:	40000800 	.word	0x40000800
 800b9a0:	40000c00 	.word	0x40000c00
 800b9a4:	40010400 	.word	0x40010400
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	40001800 	.word	0x40001800

0800b9b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9d8:	b084      	sub	sp, #16
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	f107 001c 	add.w	r0, r7, #28
 800b9e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d122      	bne.n	800ba36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ba04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d105      	bne.n	800ba2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f94a 	bl	800bcc4 <USB_CoreReset>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
 800ba34:	e01a      	b.n	800ba6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f93e 	bl	800bcc4 <USB_CoreReset>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38
 800ba5e:	e005      	b.n	800ba6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d10b      	bne.n	800ba8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	f043 0206 	orr.w	r2, r3, #6
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f043 0220 	orr.w	r2, r3, #32
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba96:	b004      	add	sp, #16
 800ba98:	4770      	bx	lr

0800ba9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f043 0201 	orr.w	r2, r3, #1
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f023 0201 	bic.w	r2, r3, #1
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d106      	bne.n	800bb0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	60da      	str	r2, [r3, #12]
 800bb08:	e00b      	b.n	800bb22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	60da      	str	r2, [r3, #12]
 800bb1c:	e001      	b.n	800bb22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e003      	b.n	800bb2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bb22:	2032      	movs	r0, #50	; 0x32
 800bb24:	f7f9 fc1a 	bl	800535c <HAL_Delay>

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	019b      	lsls	r3, r3, #6
 800bb46:	f043 0220 	orr.w	r2, r3, #32
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <USB_FlushTxFifo+0x48>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d901      	bls.n	800bb60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e006      	b.n	800bb6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0320 	and.w	r3, r3, #32
 800bb68:	2b20      	cmp	r3, #32
 800bb6a:	d0f0      	beq.n	800bb4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	00030d40 	.word	0x00030d40

0800bb80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2210      	movs	r2, #16
 800bb90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3301      	adds	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <USB_FlushRxFifo+0x40>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d901      	bls.n	800bba4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e006      	b.n	800bbb2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	f003 0310 	and.w	r3, r3, #16
 800bbac:	2b10      	cmp	r3, #16
 800bbae:	d0f0      	beq.n	800bb92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	00030d40 	.word	0x00030d40

0800bbc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b089      	sub	sp, #36	; 0x24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	71fb      	strb	r3, [r7, #7]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bbe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d11a      	bne.n	800bc20 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbea:	88bb      	ldrh	r3, [r7, #4]
 800bbec:	3303      	adds	r3, #3
 800bbee:	089b      	lsrs	r3, r3, #2
 800bbf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61bb      	str	r3, [r7, #24]
 800bbf6:	e00f      	b.n	800bc18 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	031a      	lsls	r2, r3, #12
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc04:	461a      	mov	r2, r3
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	3301      	adds	r3, #1
 800bc16:	61bb      	str	r3, [r7, #24]
 800bc18:	69ba      	ldr	r2, [r7, #24]
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d3eb      	bcc.n	800bbf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3724      	adds	r7, #36	; 0x24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b089      	sub	sp, #36	; 0x24
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	60f8      	str	r0, [r7, #12]
 800bc36:	60b9      	str	r1, [r7, #8]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bc44:	88fb      	ldrh	r3, [r7, #6]
 800bc46:	3303      	adds	r3, #3
 800bc48:	089b      	lsrs	r3, r3, #2
 800bc4a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	e00b      	b.n	800bc6a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	3304      	adds	r3, #4
 800bc62:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	3301      	adds	r3, #1
 800bc68:	61bb      	str	r3, [r7, #24]
 800bc6a:	69ba      	ldr	r2, [r7, #24]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3ef      	bcc.n	800bc52 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bc72:	69fb      	ldr	r3, [r7, #28]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3724      	adds	r7, #36	; 0x24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4013      	ands	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc98:	68fb      	ldr	r3, [r7, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
	...

0800bcc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <USB_CoreReset+0x64>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d901      	bls.n	800bce2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e01b      	b.n	800bd1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	daf2      	bge.n	800bcd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f043 0201 	orr.w	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4a09      	ldr	r2, [pc, #36]	; (800bd28 <USB_CoreReset+0x64>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d901      	bls.n	800bd0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e006      	b.n	800bd1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d0f0      	beq.n	800bcfa <USB_CoreReset+0x36>

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	00030d40 	.word	0x00030d40

0800bd2c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	f107 001c 	add.w	r0, r7, #28
 800bd3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd48:	461a      	mov	r2, r3
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d018      	beq.n	800bdb0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d10a      	bne.n	800bd9a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd92:	f043 0304 	orr.w	r3, r3, #4
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e014      	b.n	800bdc4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bda8:	f023 0304 	bic.w	r3, r3, #4
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	e009      	b.n	800bdc4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdbe:	f023 0304 	bic.w	r3, r3, #4
 800bdc2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bdc4:	2110      	movs	r1, #16
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff feb4 	bl	800bb34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fed7 	bl	800bb80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	e015      	b.n	800be04 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bde4:	461a      	mov	r2, r3
 800bde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3301      	adds	r3, #1
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d3e5      	bcc.n	800bdd8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800be0c:	2101      	movs	r1, #1
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f8ac 	bl	800bf6c <USB_DriveVbus>

  HAL_Delay(200U);
 800be14:	20c8      	movs	r0, #200	; 0xc8
 800be16:	f7f9 faa1 	bl	800535c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be26:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be3a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a14      	ldr	r2, [pc, #80]	; (800be90 <USB_HostInit+0x164>)
 800be40:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <USB_HostInit+0x168>)
 800be46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be4a:	e009      	b.n	800be60 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2280      	movs	r2, #128	; 0x80
 800be50:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a10      	ldr	r2, [pc, #64]	; (800be98 <USB_HostInit+0x16c>)
 800be56:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a10      	ldr	r2, [pc, #64]	; (800be9c <USB_HostInit+0x170>)
 800be5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f043 0210 	orr.w	r2, r3, #16
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699a      	ldr	r2, [r3, #24]
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <USB_HostInit+0x174>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be8a:	b004      	add	sp, #16
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	01000200 	.word	0x01000200
 800be94:	00e00300 	.word	0x00e00300
 800be98:	00600080 	.word	0x00600080
 800be9c:	004000e0 	.word	0x004000e0
 800bea0:	a3200008 	.word	0xa3200008

0800bea4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bec2:	f023 0303 	bic.w	r3, r3, #3
 800bec6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	f003 0303 	and.w	r3, r3, #3
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bedc:	4313      	orrs	r3, r2
 800bede:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d107      	bne.n	800bef6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beec:	461a      	mov	r2, r3
 800beee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bef2:	6053      	str	r3, [r2, #4]
 800bef4:	e009      	b.n	800bf0a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d106      	bne.n	800bf0a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf02:	461a      	mov	r2, r3
 800bf04:	f241 7370 	movw	r3, #6000	; 0x1770
 800bf08:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf46:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf48:	2064      	movs	r0, #100	; 0x64
 800bf4a:	f7f9 fa07 	bl	800535c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bf5c:	200a      	movs	r0, #10
 800bf5e:	f7f9 f9fd 	bl	800535c <HAL_Delay>

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d109      	bne.n	800bfb0 <USB_DriveVbus+0x44>
 800bf9c:	78fb      	ldrb	r3, [r7, #3]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d106      	bne.n	800bfb0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bfae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfba:	d109      	bne.n	800bfd0 <USB_DriveVbus+0x64>
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	0c5b      	lsrs	r3, r3, #17
 800bffc:	f003 0303 	and.w	r3, r3, #3
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	b29b      	uxth	r3, r3
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	4608      	mov	r0, r1
 800c03a:	4611      	mov	r1, r2
 800c03c:	461a      	mov	r2, r3
 800c03e:	4603      	mov	r3, r0
 800c040:	70fb      	strb	r3, [r7, #3]
 800c042:	460b      	mov	r3, r1
 800c044:	70bb      	strb	r3, [r7, #2]
 800c046:	4613      	mov	r3, r2
 800c048:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	015a      	lsls	r2, r3, #5
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c05e:	461a      	mov	r2, r3
 800c060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c064:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c066:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d87e      	bhi.n	800c16c <USB_HC_Init+0x13c>
 800c06e:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <USB_HC_Init+0x44>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c085 	.word	0x0800c085
 800c078:	0800c12f 	.word	0x0800c12f
 800c07c:	0800c085 	.word	0x0800c085
 800c080:	0800c0f1 	.word	0x0800c0f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c090:	461a      	mov	r2, r3
 800c092:	f240 439d 	movw	r3, #1181	; 0x49d
 800c096:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c098:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	da10      	bge.n	800c0c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	0151      	lsls	r1, r2, #5
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	440a      	add	r2, r1
 800c0b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c0c0:	e057      	b.n	800c172 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d051      	beq.n	800c172 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	015a      	lsls	r2, r3, #5
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	78fa      	ldrb	r2, [r7, #3]
 800c0de:	0151      	lsls	r1, r2, #5
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	440a      	add	r2, r1
 800c0e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c0ec:	60d3      	str	r3, [r2, #12]
      break;
 800c0ee:	e040      	b.n	800c172 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f240 639d 	movw	r3, #1693	; 0x69d
 800c102:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	da34      	bge.n	800c176 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	4413      	add	r3, r2
 800c114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	78fa      	ldrb	r2, [r7, #3]
 800c11c:	0151      	lsls	r1, r2, #5
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	440a      	add	r2, r1
 800c122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c12a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c12c:	e023      	b.n	800c176 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	4413      	add	r3, r2
 800c136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13a:	461a      	mov	r2, r3
 800c13c:	f240 2325 	movw	r3, #549	; 0x225
 800c140:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c142:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c146:	2b00      	cmp	r3, #0
 800c148:	da17      	bge.n	800c17a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	4413      	add	r3, r2
 800c152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	78fa      	ldrb	r2, [r7, #3]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c164:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c168:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c16a:	e006      	b.n	800c17a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	77fb      	strb	r3, [r7, #31]
      break;
 800c170:	e004      	b.n	800c17c <USB_HC_Init+0x14c>
      break;
 800c172:	bf00      	nop
 800c174:	e002      	b.n	800c17c <USB_HC_Init+0x14c>
      break;
 800c176:	bf00      	nop
 800c178:	e000      	b.n	800c17c <USB_HC_Init+0x14c>
      break;
 800c17a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c182:	699a      	ldr	r2, [r3, #24]
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	2101      	movs	r1, #1
 800c18c:	fa01 f303 	lsl.w	r3, r1, r3
 800c190:	6939      	ldr	r1, [r7, #16]
 800c192:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c196:	4313      	orrs	r3, r2
 800c198:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c1a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	da03      	bge.n	800c1b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1b2:	61bb      	str	r3, [r7, #24]
 800c1b4:	e001      	b.n	800c1ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff ff0f 	bl	800bfde <USB_GetHostSpeed>
 800c1c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c1c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d106      	bne.n	800c1d8 <USB_HC_Init+0x1a8>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d003      	beq.n	800c1d8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c1d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	e001      	b.n	800c1dc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1dc:	787b      	ldrb	r3, [r7, #1]
 800c1de:	059b      	lsls	r3, r3, #22
 800c1e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1e4:	78bb      	ldrb	r3, [r7, #2]
 800c1e6:	02db      	lsls	r3, r3, #11
 800c1e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c1ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1f2:	049b      	lsls	r3, r3, #18
 800c1f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c1fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c200:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c206:	78fb      	ldrb	r3, [r7, #3]
 800c208:	0159      	lsls	r1, r3, #5
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	440b      	add	r3, r1
 800c20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c212:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c218:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c21a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d10f      	bne.n	800c242 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	78fa      	ldrb	r2, [r7, #3]
 800c232:	0151      	lsls	r1, r2, #5
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	440a      	add	r2, r1
 800c238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c23c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c240:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c242:	7ffb      	ldrb	r3, [r7, #31]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08c      	sub	sp, #48	; 0x30
 800c250:	af02      	add	r7, sp, #8
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	785b      	ldrb	r3, [r3, #1]
 800c262:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c268:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c272:	2b00      	cmp	r3, #0
 800c274:	d02d      	beq.n	800c2d2 <USB_HC_StartXfer+0x86>
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	791b      	ldrb	r3, [r3, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d129      	bne.n	800c2d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d117      	bne.n	800c2b4 <USB_HC_StartXfer+0x68>
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	79db      	ldrb	r3, [r3, #7]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <USB_HC_StartXfer+0x48>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	79db      	ldrb	r3, [r3, #7]
 800c290:	2b02      	cmp	r3, #2
 800c292:	d10f      	bne.n	800c2b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	0151      	lsls	r1, r2, #5
 800c2a6:	6a3a      	ldr	r2, [r7, #32]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <USB_HC_StartXfer+0x86>
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	795b      	ldrb	r3, [r3, #5]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d107      	bne.n	800c2d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 fa2f 	bl	800c72c <USB_DoPing>
      return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e0f8      	b.n	800c4c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d018      	beq.n	800c30c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	8912      	ldrh	r2, [r2, #8]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	8912      	ldrh	r2, [r2, #8]
 800c2ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c2f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2f2:	8b7b      	ldrh	r3, [r7, #26]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d90b      	bls.n	800c310 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c2f8:	8b7b      	ldrh	r3, [r7, #26]
 800c2fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c2fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	8912      	ldrh	r2, [r2, #8]
 800c302:	fb02 f203 	mul.w	r2, r2, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	611a      	str	r2, [r3, #16]
 800c30a:	e001      	b.n	800c310 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c30c:	2301      	movs	r3, #1
 800c30e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	78db      	ldrb	r3, [r3, #3]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d007      	beq.n	800c328 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	8912      	ldrh	r2, [r2, #8]
 800c31e:	fb02 f203 	mul.w	r2, r2, r3
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	611a      	str	r2, [r3, #16]
 800c326:	e003      	b.n	800c330 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	695a      	ldr	r2, [r3, #20]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c33a:	04d9      	lsls	r1, r3, #19
 800c33c:	4b63      	ldr	r3, [pc, #396]	; (800c4cc <USB_HC_StartXfer+0x280>)
 800c33e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c340:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	7a9b      	ldrb	r3, [r3, #10]
 800c346:	075b      	lsls	r3, r3, #29
 800c348:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c34c:	69f9      	ldr	r1, [r7, #28]
 800c34e:	0148      	lsls	r0, r1, #5
 800c350:	6a39      	ldr	r1, [r7, #32]
 800c352:	4401      	add	r1, r0
 800c354:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c358:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c35a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d009      	beq.n	800c376 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	68d9      	ldr	r1, [r3, #12]
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c372:	460a      	mov	r2, r1
 800c374:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	bf0c      	ite	eq
 800c386:	2301      	moveq	r3, #1
 800c388:	2300      	movne	r3, #0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	4413      	add	r3, r2
 800c396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	6a3a      	ldr	r2, [r7, #32]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	7e7b      	ldrb	r3, [r7, #25]
 800c3be:	075b      	lsls	r3, r3, #29
 800c3c0:	69f9      	ldr	r1, [r7, #28]
 800c3c2:	0148      	lsls	r0, r1, #5
 800c3c4:	6a39      	ldr	r1, [r7, #32]
 800c3c6:	4401      	add	r1, r0
 800c3c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	78db      	ldrb	r3, [r3, #3]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3f6:	613b      	str	r3, [r7, #16]
 800c3f8:	e003      	b.n	800c402 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c400:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c408:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	015a      	lsls	r2, r3, #5
 800c40e:	6a3b      	ldr	r3, [r7, #32]
 800c410:	4413      	add	r3, r2
 800c412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c416:	461a      	mov	r2, r3
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	e04e      	b.n	800c4c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	78db      	ldrb	r3, [r3, #3]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d149      	bne.n	800c4c2 <USB_HC_StartXfer+0x276>
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d045      	beq.n	800c4c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	79db      	ldrb	r3, [r3, #7]
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d830      	bhi.n	800c4a0 <USB_HC_StartXfer+0x254>
 800c43e:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <USB_HC_StartXfer+0x1f8>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c455 	.word	0x0800c455
 800c448:	0800c479 	.word	0x0800c479
 800c44c:	0800c455 	.word	0x0800c455
 800c450:	0800c479 	.word	0x0800c479
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	3303      	adds	r3, #3
 800c45a:	089b      	lsrs	r3, r3, #2
 800c45c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c45e:	8afa      	ldrh	r2, [r7, #22]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	b29b      	uxth	r3, r3
 800c466:	429a      	cmp	r2, r3
 800c468:	d91c      	bls.n	800c4a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	f043 0220 	orr.w	r2, r3, #32
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	619a      	str	r2, [r3, #24]
        }
        break;
 800c476:	e015      	b.n	800c4a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	3303      	adds	r3, #3
 800c47e:	089b      	lsrs	r3, r3, #2
 800c480:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c482:	8afa      	ldrh	r2, [r7, #22]
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	429a      	cmp	r2, r3
 800c490:	d90a      	bls.n	800c4a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c49e:	e003      	b.n	800c4a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c4a0:	bf00      	nop
 800c4a2:	e002      	b.n	800c4aa <USB_HC_StartXfer+0x25e>
        break;
 800c4a4:	bf00      	nop
 800c4a6:	e000      	b.n	800c4aa <USB_HC_StartXfer+0x25e>
        break;
 800c4a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	68d9      	ldr	r1, [r3, #12]
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	785a      	ldrb	r2, [r3, #1]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	9000      	str	r0, [sp, #0]
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f7ff fb81 	bl	800bbc4 <USB_WritePacket>
  }

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3728      	adds	r7, #40	; 0x28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	1ff80000 	.word	0x1ff80000

0800c4d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	b29b      	uxth	r3, r3
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b089      	sub	sp, #36	; 0x24
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	4413      	add	r3, r2
 800c512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	0c9b      	lsrs	r3, r3, #18
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	4413      	add	r3, r2
 800c528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	0fdb      	lsrs	r3, r3, #31
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f003 0320 	and.w	r3, r3, #32
 800c53e:	2b20      	cmp	r3, #32
 800c540:	d104      	bne.n	800c54c <USB_HC_Halt+0x5a>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	e0e8      	b.n	800c71e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <USB_HC_Halt+0x66>
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2b02      	cmp	r3, #2
 800c556:	d173      	bne.n	800c640 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	0151      	lsls	r1, r2, #5
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	440a      	add	r2, r1
 800c56e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c576:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f003 0320 	and.w	r3, r3, #32
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 80cb 	bne.w	800c71c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d143      	bne.n	800c61a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	0151      	lsls	r1, r2, #5
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	440a      	add	r2, r1
 800c5a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	0151      	lsls	r1, r2, #5
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	440a      	add	r2, r1
 800c5c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5f0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	61fb      	str	r3, [r7, #28]
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5fe:	d81d      	bhi.n	800c63c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	4413      	add	r3, r2
 800c608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c616:	d0ec      	beq.n	800c5f2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c618:	e080      	b.n	800c71c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	015a      	lsls	r2, r3, #5
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	4413      	add	r3, r2
 800c622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	0151      	lsls	r1, r2, #5
 800c62c:	69ba      	ldr	r2, [r7, #24]
 800c62e:	440a      	add	r2, r1
 800c630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c638:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c63a:	e06f      	b.n	800c71c <USB_HC_Halt+0x22a>
            break;
 800c63c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c63e:	e06d      	b.n	800c71c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	4413      	add	r3, r2
 800c648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	0151      	lsls	r1, r2, #5
 800c652:	69ba      	ldr	r2, [r7, #24]
 800c654:	440a      	add	r2, r1
 800c656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c65a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c65e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d143      	bne.n	800c6f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	4413      	add	r3, r2
 800c678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	697a      	ldr	r2, [r7, #20]
 800c680:	0151      	lsls	r1, r2, #5
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	440a      	add	r2, r1
 800c686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c68a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c68e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	4413      	add	r3, r2
 800c698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	69ba      	ldr	r2, [r7, #24]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6dc:	d81d      	bhi.n	800c71a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6f4:	d0ec      	beq.n	800c6d0 <USB_HC_Halt+0x1de>
 800c6f6:	e011      	b.n	800c71c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	0151      	lsls	r1, r2, #5
 800c70a:	69ba      	ldr	r2, [r7, #24]
 800c70c:	440a      	add	r2, r1
 800c70e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	e000      	b.n	800c71c <USB_HC_Halt+0x22a>
          break;
 800c71a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3724      	adds	r7, #36	; 0x24
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
	...

0800c72c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c740:	2301      	movs	r3, #1
 800c742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	04da      	lsls	r2, r3, #19
 800c748:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <USB_DoPing+0x74>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	0151      	lsls	r1, r2, #5
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	440a      	add	r2, r1
 800c754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c75c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	015a      	lsls	r2, r3, #5
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	4413      	add	r3, r2
 800c766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c774:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c77c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	015a      	lsls	r2, r3, #5
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	4413      	add	r3, r2
 800c786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78a:	461a      	mov	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	371c      	adds	r7, #28
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	1ff80000 	.word	0x1ff80000

0800c7a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff f981 	bl	800babc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c7ba:	2110      	movs	r1, #16
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff f9b9 	bl	800bb34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff f9dc 	bl	800bb80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
 800c7cc:	e01f      	b.n	800c80e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	015a      	lsls	r2, r3, #5
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c802:	461a      	mov	r2, r3
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	3301      	adds	r3, #1
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b0f      	cmp	r3, #15
 800c812:	d9dc      	bls.n	800c7ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]
 800c818:	e034      	b.n	800c884 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	015a      	lsls	r2, r3, #5
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4413      	add	r3, r2
 800c822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c830:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c838:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c840:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	015a      	lsls	r2, r3, #5
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	4413      	add	r3, r2
 800c84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c84e:	461a      	mov	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	3301      	adds	r3, #1
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c860:	d80c      	bhi.n	800c87c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c878:	d0ec      	beq.n	800c854 <USB_StopHost+0xb0>
 800c87a:	e000      	b.n	800c87e <USB_StopHost+0xda>
        break;
 800c87c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3301      	adds	r3, #1
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d9c7      	bls.n	800c81a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c890:	461a      	mov	r2, r3
 800c892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c896:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c89e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff f8fa 	bl	800ba9a <USB_EnableGlobalInt>

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b089      	sub	sp, #36	; 0x24
 800c8b4:	af04      	add	r7, sp, #16
 800c8b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	2102      	movs	r1, #2
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fc66 	bl	800d190 <USBH_FindInterface>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	2bff      	cmp	r3, #255	; 0xff
 800c8cc:	d002      	beq.n	800c8d4 <USBH_CDC_InterfaceInit+0x24>
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d901      	bls.n	800c8d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e13d      	b.n	800cb54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fc3b 	bl	800d158 <USBH_SelectInterface>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c8e6:	7bbb      	ldrb	r3, [r7, #14]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	e131      	b.n	800cb54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c8f6:	2050      	movs	r0, #80	; 0x50
 800c8f8:	f002 fa00 	bl	800ecfc <malloc>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c910:	2302      	movs	r3, #2
 800c912:	e11f      	b.n	800cb54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c914:	2250      	movs	r2, #80	; 0x50
 800c916:	2100      	movs	r1, #0
 800c918:	68b8      	ldr	r0, [r7, #8]
 800c91a:	f002 fa0d 	bl	800ed38 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	211a      	movs	r1, #26
 800c924:	fb01 f303 	mul.w	r3, r1, r3
 800c928:	4413      	add	r3, r2
 800c92a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	b25b      	sxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	da15      	bge.n	800c962 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	211a      	movs	r1, #26
 800c93c:	fb01 f303 	mul.w	r3, r1, r3
 800c940:	4413      	add	r3, r2
 800c942:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	211a      	movs	r1, #26
 800c952:	fb01 f303 	mul.w	r3, r1, r3
 800c956:	4413      	add	r3, r2
 800c958:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c95c:	881a      	ldrh	r2, [r3, #0]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	785b      	ldrb	r3, [r3, #1]
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 fe32 	bl	800e5d2 <USBH_AllocPipe>
 800c96e:	4603      	mov	r3, r0
 800c970:	461a      	mov	r2, r3
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	7819      	ldrb	r1, [r3, #0]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	7858      	ldrb	r0, [r3, #1]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	8952      	ldrh	r2, [r2, #10]
 800c98e:	9202      	str	r2, [sp, #8]
 800c990:	2203      	movs	r2, #3
 800c992:	9201      	str	r2, [sp, #4]
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4623      	mov	r3, r4
 800c998:	4602      	mov	r2, r0
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 fdea 	bl	800e574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 f8f9 	bl	800eba0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	210a      	movs	r1, #10
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fbeb 	bl	800d190 <USBH_FindInterface>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	2bff      	cmp	r3, #255	; 0xff
 800c9c2:	d002      	beq.n	800c9ca <USBH_CDC_InterfaceInit+0x11a>
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d901      	bls.n	800c9ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e0c2      	b.n	800cb54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	211a      	movs	r1, #26
 800c9d4:	fb01 f303 	mul.w	r3, r1, r3
 800c9d8:	4413      	add	r3, r2
 800c9da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	b25b      	sxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	da16      	bge.n	800ca14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	211a      	movs	r1, #26
 800c9ec:	fb01 f303 	mul.w	r3, r1, r3
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9f6:	781a      	ldrb	r2, [r3, #0]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	211a      	movs	r1, #26
 800ca02:	fb01 f303 	mul.w	r3, r1, r3
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca0c:	881a      	ldrh	r2, [r3, #0]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	835a      	strh	r2, [r3, #26]
 800ca12:	e015      	b.n	800ca40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	211a      	movs	r1, #26
 800ca1a:	fb01 f303 	mul.w	r3, r1, r3
 800ca1e:	4413      	add	r3, r2
 800ca20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	211a      	movs	r1, #26
 800ca30:	fb01 f303 	mul.w	r3, r1, r3
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca3a:	881a      	ldrh	r2, [r3, #0]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	211a      	movs	r1, #26
 800ca46:	fb01 f303 	mul.w	r3, r1, r3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	b25b      	sxtb	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da16      	bge.n	800ca86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	211a      	movs	r1, #26
 800ca5e:	fb01 f303 	mul.w	r3, r1, r3
 800ca62:	4413      	add	r3, r2
 800ca64:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	211a      	movs	r1, #26
 800ca74:	fb01 f303 	mul.w	r3, r1, r3
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca7e:	881a      	ldrh	r2, [r3, #0]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	835a      	strh	r2, [r3, #26]
 800ca84:	e015      	b.n	800cab2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	211a      	movs	r1, #26
 800ca8c:	fb01 f303 	mul.w	r3, r1, r3
 800ca90:	4413      	add	r3, r2
 800ca92:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca96:	781a      	ldrb	r2, [r3, #0]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	211a      	movs	r1, #26
 800caa2:	fb01 f303 	mul.w	r3, r1, r3
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800caac:	881a      	ldrh	r2, [r3, #0]
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	7b9b      	ldrb	r3, [r3, #14]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 fd8a 	bl	800e5d2 <USBH_AllocPipe>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	7bdb      	ldrb	r3, [r3, #15]
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f001 fd80 	bl	800e5d2 <USBH_AllocPipe>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	7b59      	ldrb	r1, [r3, #13]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	7b98      	ldrb	r0, [r3, #14]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	8b12      	ldrh	r2, [r2, #24]
 800caf2:	9202      	str	r2, [sp, #8]
 800caf4:	2202      	movs	r2, #2
 800caf6:	9201      	str	r2, [sp, #4]
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	4623      	mov	r3, r4
 800cafc:	4602      	mov	r2, r0
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f001 fd38 	bl	800e574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	7b19      	ldrb	r1, [r3, #12]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	7bd8      	ldrb	r0, [r3, #15]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	8b52      	ldrh	r2, [r2, #26]
 800cb1c:	9202      	str	r2, [sp, #8]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	9201      	str	r2, [sp, #4]
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	4623      	mov	r3, r4
 800cb26:	4602      	mov	r2, r0
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f001 fd23 	bl	800e574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	7b5b      	ldrb	r3, [r3, #13]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f002 f82e 	bl	800eba0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	7b1b      	ldrb	r3, [r3, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f002 f827 	bl	800eba0 <USBH_LL_SetToggle>

  return USBH_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd90      	pop	{r4, r7, pc}

0800cb5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb6a:	69db      	ldr	r3, [r3, #28]
 800cb6c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00e      	beq.n	800cb94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 fd18 	bl	800e5b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f001 fd43 	bl	800e614 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	7b1b      	ldrb	r3, [r3, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00e      	beq.n	800cbba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	7b1b      	ldrb	r3, [r3, #12]
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 fd05 	bl	800e5b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	7b1b      	ldrb	r3, [r3, #12]
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fd30 	bl	800e614 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	7b5b      	ldrb	r3, [r3, #13]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00e      	beq.n	800cbe0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	7b5b      	ldrb	r3, [r3, #13]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 fcf2 	bl	800e5b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	7b5b      	ldrb	r3, [r3, #13]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 fd1d 	bl	800e614 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbe6:	69db      	ldr	r3, [r3, #28]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f002 f889 	bl	800ed0c <free>
    phost->pActiveClass->pData = 0U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc00:	2200      	movs	r2, #0
 800cc02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3340      	adds	r3, #64	; 0x40
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f8b1 	bl	800cd8e <GetLineCoding>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cc30:	7afb      	ldrb	r3, [r7, #11]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d105      	bne.n	800cc42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc3c:	2102      	movs	r1, #2
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cc42:	7afb      	ldrb	r3, [r7, #11]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc54:	2301      	movs	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc62:	69db      	ldr	r3, [r3, #28]
 800cc64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d877      	bhi.n	800cd60 <USBH_CDC_Process+0x114>
 800cc70:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <USBH_CDC_Process+0x2c>)
 800cc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc76:	bf00      	nop
 800cc78:	0800cc8d 	.word	0x0800cc8d
 800cc7c:	0800cc93 	.word	0x0800cc93
 800cc80:	0800ccc3 	.word	0x0800ccc3
 800cc84:	0800cd37 	.word	0x0800cd37
 800cc88:	0800cd45 	.word	0x0800cd45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc90:	e06d      	b.n	800cd6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f897 	bl	800cdcc <SetLineCoding>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d104      	bne.n	800ccb2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2202      	movs	r2, #2
 800ccac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ccb0:	e058      	b.n	800cd64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d055      	beq.n	800cd64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2204      	movs	r2, #4
 800ccbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ccc0:	e050      	b.n	800cd64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	3340      	adds	r3, #64	; 0x40
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f860 	bl	800cd8e <GetLineCoding>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d126      	bne.n	800cd26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccea:	791b      	ldrb	r3, [r3, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d13b      	bne.n	800cd68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccfa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d133      	bne.n	800cd68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d12b      	bne.n	800cd68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d124      	bne.n	800cd68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f958 	bl	800cfd4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cd24:	e020      	b.n	800cd68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d01d      	beq.n	800cd68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2204      	movs	r2, #4
 800cd30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cd34:	e018      	b.n	800cd68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 f867 	bl	800ce0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f8da 	bl	800cef6 <CDC_ProcessReception>
      break;
 800cd42:	e014      	b.n	800cd6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cd44:	2100      	movs	r1, #0
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 ffe3 	bl	800dd12 <USBH_ClrFeature>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cd5e:	e005      	b.n	800cd6c <USBH_CDC_Process+0x120>

    default:
      break;
 800cd60:	bf00      	nop
 800cd62:	e004      	b.n	800cd6e <USBH_CDC_Process+0x122>
      break;
 800cd64:	bf00      	nop
 800cd66:	e002      	b.n	800cd6e <USBH_CDC_Process+0x122>
      break;
 800cd68:	bf00      	nop
 800cd6a:	e000      	b.n	800cd6e <USBH_CDC_Process+0x122>
      break;
 800cd6c:	bf00      	nop

  }

  return status;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	22a1      	movs	r2, #161	; 0xa1
 800cd9c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2221      	movs	r2, #33	; 0x21
 800cda2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2207      	movs	r2, #7
 800cdb4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	2207      	movs	r2, #7
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f001 f988 	bl	800e0d2 <USBH_CtlReq>
 800cdc2:	4603      	mov	r3, r0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2221      	movs	r2, #33	; 0x21
 800cdda:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2207      	movs	r2, #7
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f001 f969 	bl	800e0d2 <USBH_CtlReq>
 800ce00:	4603      	mov	r3, r0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b086      	sub	sp, #24
 800ce0e:	af02      	add	r7, sp, #8
 800ce10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d002      	beq.n	800ce30 <CDC_ProcessTransmission+0x26>
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d023      	beq.n	800ce76 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ce2e:	e05e      	b.n	800ceee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	8b12      	ldrh	r2, [r2, #24]
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d90b      	bls.n	800ce54 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	69d9      	ldr	r1, [r3, #28]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	8b1a      	ldrh	r2, [r3, #24]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	7b5b      	ldrb	r3, [r3, #13]
 800ce48:	2001      	movs	r0, #1
 800ce4a:	9000      	str	r0, [sp, #0]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 fb4e 	bl	800e4ee <USBH_BulkSendData>
 800ce52:	e00b      	b.n	800ce6c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	7b5b      	ldrb	r3, [r3, #13]
 800ce62:	2001      	movs	r0, #1
 800ce64:	9000      	str	r0, [sp, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f001 fb41 	bl	800e4ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ce74:	e03b      	b.n	800ceee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	7b5b      	ldrb	r3, [r3, #13]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f001 fe65 	bl	800eb4c <USBH_LL_GetURBState>
 800ce82:	4603      	mov	r3, r0
 800ce84:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ce86:	7afb      	ldrb	r3, [r7, #11]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d128      	bne.n	800cede <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	8b12      	ldrh	r2, [r2, #24]
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d90e      	bls.n	800ceb6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	8b12      	ldrh	r2, [r2, #24]
 800cea0:	1a9a      	subs	r2, r3, r2
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	8b12      	ldrh	r2, [r2, #24]
 800ceae:	441a      	add	r2, r3
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	61da      	str	r2, [r3, #28]
 800ceb4:	e002      	b.n	800cebc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cecc:	e00e      	b.n	800ceec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f868 	bl	800cfac <USBH_CDC_TransmitCallback>
      break;
 800cedc:	e006      	b.n	800ceec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800cede:	7afb      	ldrb	r3, [r7, #11]
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d103      	bne.n	800ceec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ceec:	bf00      	nop
  }
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf04:	69db      	ldr	r3, [r3, #28]
 800cf06:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d002      	beq.n	800cf1c <CDC_ProcessReception+0x26>
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	d00e      	beq.n	800cf38 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cf1a:	e043      	b.n	800cfa4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	6a19      	ldr	r1, [r3, #32]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	8b5a      	ldrh	r2, [r3, #26]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	7b1b      	ldrb	r3, [r3, #12]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f001 fb05 	bl	800e538 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	2204      	movs	r2, #4
 800cf32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf36:	e035      	b.n	800cfa4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	7b1b      	ldrb	r3, [r3, #12]
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f001 fe04 	bl	800eb4c <USBH_LL_GetURBState>
 800cf44:	4603      	mov	r3, r0
 800cf46:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cf48:	7cfb      	ldrb	r3, [r7, #19]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d129      	bne.n	800cfa2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	7b1b      	ldrb	r3, [r3, #12]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f001 fd67 	bl	800ea28 <USBH_LL_GetLastXferSize>
 800cf5a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d016      	beq.n	800cf94 <CDC_ProcessReception+0x9e>
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	8b5b      	ldrh	r3, [r3, #26]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d910      	bls.n	800cf94 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	1ad2      	subs	r2, r2, r3
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	6a1a      	ldr	r2, [r3, #32]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	441a      	add	r2, r3
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf92:	e006      	b.n	800cfa2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f80f 	bl	800cfc0 <USBH_CDC_ReceiveCallback>
      break;
 800cfa2:	bf00      	nop
  }
}
 800cfa4:	bf00      	nop
 800cfa6:	3718      	adds	r7, #24
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	4613      	mov	r3, r2
 800cff4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cffc:	2302      	movs	r3, #2
 800cffe:	e029      	b.n	800d054 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	79fa      	ldrb	r2, [r7, #7]
 800d004:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f000 f81f 	bl	800d05c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f001 fc37 	bl	800e8c0 <USBH_LL_Init>

  return USBH_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d064:	2300      	movs	r3, #0
 800d066:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e009      	b.n	800d082 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	33e0      	adds	r3, #224	; 0xe0
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	2200      	movs	r2, #0
 800d07a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3301      	adds	r3, #1
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b0e      	cmp	r3, #14
 800d086:	d9f2      	bls.n	800d06e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	e009      	b.n	800d0a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	4413      	add	r3, r2
 800d094:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d098:	2200      	movs	r2, #0
 800d09a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0a8:	d3f1      	bcc.n	800d08e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2240      	movs	r2, #64	; 0x40
 800d0ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d016      	beq.n	800d146 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10e      	bne.n	800d140 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d128:	1c59      	adds	r1, r3, #1
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	33de      	adds	r3, #222	; 0xde
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]
 800d13e:	e004      	b.n	800d14a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d140:	2302      	movs	r3, #2
 800d142:	73fb      	strb	r3, [r7, #15]
 800d144:	e001      	b.n	800d14a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d146:	2302      	movs	r3, #2
 800d148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d164:	2300      	movs	r3, #0
 800d166:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d16e:	78fa      	ldrb	r2, [r7, #3]
 800d170:	429a      	cmp	r2, r3
 800d172:	d204      	bcs.n	800d17e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	78fa      	ldrb	r2, [r7, #3]
 800d178:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d17c:	e001      	b.n	800d182 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d17e:	2302      	movs	r3, #2
 800d180:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d182:	7bfb      	ldrb	r3, [r7, #15]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	4603      	mov	r3, r0
 800d1a0:	70fb      	strb	r3, [r7, #3]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70bb      	strb	r3, [r7, #2]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d1b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1ba:	e025      	b.n	800d208 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
 800d1be:	221a      	movs	r2, #26
 800d1c0:	fb02 f303 	mul.w	r3, r2, r3
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	795b      	ldrb	r3, [r3, #5]
 800d1d2:	78fa      	ldrb	r2, [r7, #3]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d002      	beq.n	800d1de <USBH_FindInterface+0x4e>
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	2bff      	cmp	r3, #255	; 0xff
 800d1dc:	d111      	bne.n	800d202 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1e2:	78ba      	ldrb	r2, [r7, #2]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d002      	beq.n	800d1ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1e8:	78bb      	ldrb	r3, [r7, #2]
 800d1ea:	2bff      	cmp	r3, #255	; 0xff
 800d1ec:	d109      	bne.n	800d202 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1f2:	787a      	ldrb	r2, [r7, #1]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d002      	beq.n	800d1fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1f8:	787b      	ldrb	r3, [r7, #1]
 800d1fa:	2bff      	cmp	r3, #255	; 0xff
 800d1fc:	d101      	bne.n	800d202 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	e006      	b.n	800d210 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	3301      	adds	r3, #1
 800d206:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d9d6      	bls.n	800d1bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d20e:	23ff      	movs	r3, #255	; 0xff
}
 800d210:	4618      	mov	r0, r3
 800d212:	371c      	adds	r7, #28
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f001 fb87 	bl	800e938 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d22a:	2101      	movs	r1, #1
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f001 fca0 	bl	800eb72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af04      	add	r7, sp, #16
 800d242:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d244:	2302      	movs	r3, #2
 800d246:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d248:	2300      	movs	r3, #0
 800d24a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b01      	cmp	r3, #1
 800d256:	d102      	bne.n	800d25e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2203      	movs	r2, #3
 800d25c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b0b      	cmp	r3, #11
 800d266:	f200 81b3 	bhi.w	800d5d0 <USBH_Process+0x394>
 800d26a:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <USBH_Process+0x34>)
 800d26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d270:	0800d2a1 	.word	0x0800d2a1
 800d274:	0800d2d3 	.word	0x0800d2d3
 800d278:	0800d33b 	.word	0x0800d33b
 800d27c:	0800d56b 	.word	0x0800d56b
 800d280:	0800d5d1 	.word	0x0800d5d1
 800d284:	0800d3df 	.word	0x0800d3df
 800d288:	0800d511 	.word	0x0800d511
 800d28c:	0800d415 	.word	0x0800d415
 800d290:	0800d435 	.word	0x0800d435
 800d294:	0800d455 	.word	0x0800d455
 800d298:	0800d483 	.word	0x0800d483
 800d29c:	0800d553 	.word	0x0800d553
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8193 	beq.w	800d5d4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d2b4:	20c8      	movs	r0, #200	; 0xc8
 800d2b6:	f001 fca3 	bl	800ec00 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f001 fb99 	bl	800e9f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d2d0:	e180      	b.n	800d5d4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d107      	bne.n	800d2ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d2ea:	e182      	b.n	800d5f2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2f6:	d914      	bls.n	800d322 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2fe:	3301      	adds	r3, #1
 800d300:	b2da      	uxtb	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d903      	bls.n	800d31a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	220d      	movs	r2, #13
 800d316:	701a      	strb	r2, [r3, #0]
      break;
 800d318:	e16b      	b.n	800d5f2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]
      break;
 800d320:	e167      	b.n	800d5f2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d328:	f103 020a 	add.w	r2, r3, #10
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d332:	200a      	movs	r0, #10
 800d334:	f001 fc64 	bl	800ec00 <USBH_Delay>
      break;
 800d338:	e15b      	b.n	800d5f2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d34a:	2104      	movs	r1, #4
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d350:	2064      	movs	r0, #100	; 0x64
 800d352:	f001 fc55 	bl	800ec00 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f001 fb24 	bl	800e9a4 <USBH_LL_GetSpeed>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2205      	movs	r2, #5
 800d36a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d36c:	2100      	movs	r1, #0
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 f92f 	bl	800e5d2 <USBH_AllocPipe>
 800d374:	4603      	mov	r3, r0
 800d376:	461a      	mov	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d37c:	2180      	movs	r1, #128	; 0x80
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 f927 	bl	800e5d2 <USBH_AllocPipe>
 800d384:	4603      	mov	r3, r0
 800d386:	461a      	mov	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7919      	ldrb	r1, [r3, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3a0:	b292      	uxth	r2, r2
 800d3a2:	9202      	str	r2, [sp, #8]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2280      	movs	r2, #128	; 0x80
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f001 f8e0 	bl	800e574 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	7959      	ldrb	r1, [r3, #5]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3c8:	b292      	uxth	r2, r2
 800d3ca:	9202      	str	r2, [sp, #8]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	9201      	str	r2, [sp, #4]
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f001 f8cc 	bl	800e574 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d3dc:	e109      	b.n	800d5f2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f90c 	bl	800d5fc <USBH_HandleEnum>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 80f3 	bne.w	800d5d8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d400:	2b01      	cmp	r3, #1
 800d402:	d103      	bne.n	800d40c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2208      	movs	r2, #8
 800d408:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d40a:	e0e5      	b.n	800d5d8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2207      	movs	r2, #7
 800d410:	701a      	strb	r2, [r3, #0]
      break;
 800d412:	e0e1      	b.n	800d5d8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80de 	beq.w	800d5dc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d426:	2101      	movs	r1, #1
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2208      	movs	r2, #8
 800d430:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d432:	e0d3      	b.n	800d5dc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fc20 	bl	800dc84 <USBH_SetCfg>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	f040 80ca 	bne.w	800d5e0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2209      	movs	r2, #9
 800d450:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d452:	e0c5      	b.n	800d5e0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d45a:	f003 0320 	and.w	r3, r3, #32
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d462:	2101      	movs	r1, #1
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fc30 	bl	800dcca <USBH_SetFeature>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f040 80b9 	bne.w	800d5e4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	220a      	movs	r2, #10
 800d476:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d478:	e0b4      	b.n	800d5e4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	220a      	movs	r2, #10
 800d47e:	701a      	strb	r2, [r3, #0]
      break;
 800d480:	e0b0      	b.n	800d5e4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 80ad 	beq.w	800d5e8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d496:	2300      	movs	r3, #0
 800d498:	73fb      	strb	r3, [r7, #15]
 800d49a:	e016      	b.n	800d4ca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d49c:	7bfa      	ldrb	r2, [r7, #15]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	32de      	adds	r2, #222	; 0xde
 800d4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a6:	791a      	ldrb	r2, [r3, #4]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d108      	bne.n	800d4c4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d4b2:	7bfa      	ldrb	r2, [r7, #15]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	32de      	adds	r2, #222	; 0xde
 800d4b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d4c2:	e005      	b.n	800d4d0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	73fb      	strb	r3, [r7, #15]
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0e5      	beq.n	800d49c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d016      	beq.n	800d508 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	4798      	blx	r3
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2206      	movs	r2, #6
 800d4f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4f8:	2103      	movs	r1, #3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d4fe:	e073      	b.n	800d5e8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	220d      	movs	r2, #13
 800d504:	701a      	strb	r2, [r3, #0]
      break;
 800d506:	e06f      	b.n	800d5e8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	220d      	movs	r2, #13
 800d50c:	701a      	strb	r2, [r3, #0]
      break;
 800d50e:	e06b      	b.n	800d5e8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d516:	2b00      	cmp	r3, #0
 800d518:	d017      	beq.n	800d54a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	4798      	blx	r3
 800d526:	4603      	mov	r3, r0
 800d528:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d52a:	7bbb      	ldrb	r3, [r7, #14]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d103      	bne.n	800d53a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	220b      	movs	r2, #11
 800d536:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d538:	e058      	b.n	800d5ec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d154      	bne.n	800d5ec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	220d      	movs	r2, #13
 800d546:	701a      	strb	r2, [r3, #0]
      break;
 800d548:	e050      	b.n	800d5ec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	220d      	movs	r2, #13
 800d54e:	701a      	strb	r2, [r3, #0]
      break;
 800d550:	e04c      	b.n	800d5ec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d049      	beq.n	800d5f0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	4798      	blx	r3
      }
      break;
 800d568:	e042      	b.n	800d5f0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fd72 	bl	800d05c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d009      	beq.n	800d596 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5a6:	2105      	movs	r1, #5
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d107      	bne.n	800d5c8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff fe2b 	bl	800d21c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d5c6:	e014      	b.n	800d5f2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f001 f9b5 	bl	800e938 <USBH_LL_Start>
      break;
 800d5ce:	e010      	b.n	800d5f2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5d0:	bf00      	nop
 800d5d2:	e00e      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5d4:	bf00      	nop
 800d5d6:	e00c      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5d8:	bf00      	nop
 800d5da:	e00a      	b.n	800d5f2 <USBH_Process+0x3b6>
    break;
 800d5dc:	bf00      	nop
 800d5de:	e008      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5e0:	bf00      	nop
 800d5e2:	e006      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5e4:	bf00      	nop
 800d5e6:	e004      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5e8:	bf00      	nop
 800d5ea:	e002      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5ec:	bf00      	nop
 800d5ee:	e000      	b.n	800d5f2 <USBH_Process+0x3b6>
      break;
 800d5f0:	bf00      	nop
  }
  return USBH_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af04      	add	r7, sp, #16
 800d602:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d604:	2301      	movs	r3, #1
 800d606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d608:	2301      	movs	r3, #1
 800d60a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	785b      	ldrb	r3, [r3, #1]
 800d610:	2b07      	cmp	r3, #7
 800d612:	f200 81c1 	bhi.w	800d998 <USBH_HandleEnum+0x39c>
 800d616:	a201      	add	r2, pc, #4	; (adr r2, 800d61c <USBH_HandleEnum+0x20>)
 800d618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61c:	0800d63d 	.word	0x0800d63d
 800d620:	0800d6fb 	.word	0x0800d6fb
 800d624:	0800d765 	.word	0x0800d765
 800d628:	0800d7f3 	.word	0x0800d7f3
 800d62c:	0800d85d 	.word	0x0800d85d
 800d630:	0800d8cd 	.word	0x0800d8cd
 800d634:	0800d913 	.word	0x0800d913
 800d638:	0800d959 	.word	0x0800d959
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d63c:	2108      	movs	r1, #8
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fa50 	bl	800dae4 <USBH_Get_DevDesc>
 800d644:	4603      	mov	r3, r0
 800d646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d130      	bne.n	800d6b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7919      	ldrb	r1, [r3, #4]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d672:	b292      	uxth	r2, r2
 800d674:	9202      	str	r2, [sp, #8]
 800d676:	2200      	movs	r2, #0
 800d678:	9201      	str	r2, [sp, #4]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	4603      	mov	r3, r0
 800d67e:	2280      	movs	r2, #128	; 0x80
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 ff77 	bl	800e574 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7959      	ldrb	r1, [r3, #5]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d69a:	b292      	uxth	r2, r2
 800d69c:	9202      	str	r2, [sp, #8]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	9201      	str	r2, [sp, #4]
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 ff63 	bl	800e574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6ae:	e175      	b.n	800d99c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	f040 8172 	bne.w	800d99c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6be:	3301      	adds	r3, #1
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d903      	bls.n	800d6da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	220d      	movs	r2, #13
 800d6d6:	701a      	strb	r2, [r3, #0]
      break;
 800d6d8:	e160      	b.n	800d99c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	795b      	ldrb	r3, [r3, #5]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 ff97 	bl	800e614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	791b      	ldrb	r3, [r3, #4]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 ff91 	bl	800e614 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	701a      	strb	r2, [r3, #0]
      break;
 800d6f8:	e150      	b.n	800d99c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d6fa:	2112      	movs	r1, #18
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f9f1 	bl	800dae4 <USBH_Get_DevDesc>
 800d702:	4603      	mov	r3, r0
 800d704:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d706:	7bbb      	ldrb	r3, [r7, #14]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d103      	bne.n	800d714 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2202      	movs	r2, #2
 800d710:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d712:	e145      	b.n	800d9a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	2b03      	cmp	r3, #3
 800d718:	f040 8142 	bne.w	800d9a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d722:	3301      	adds	r3, #1
 800d724:	b2da      	uxtb	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d732:	2b03      	cmp	r3, #3
 800d734:	d903      	bls.n	800d73e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	220d      	movs	r2, #13
 800d73a:	701a      	strb	r2, [r3, #0]
      break;
 800d73c:	e130      	b.n	800d9a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	795b      	ldrb	r3, [r3, #5]
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 ff65 	bl	800e614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	791b      	ldrb	r3, [r3, #4]
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 ff5f 	bl	800e614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
      break;
 800d762:	e11d      	b.n	800d9a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d764:	2101      	movs	r1, #1
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fa68 	bl	800dc3c <USBH_SetAddress>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d132      	bne.n	800d7dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d776:	2002      	movs	r0, #2
 800d778:	f001 fa42 	bl	800ec00 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2203      	movs	r2, #3
 800d788:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	7919      	ldrb	r1, [r3, #4]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d79e:	b292      	uxth	r2, r2
 800d7a0:	9202      	str	r2, [sp, #8]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	9201      	str	r2, [sp, #4]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2280      	movs	r2, #128	; 0x80
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fee1 	bl	800e574 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	7959      	ldrb	r1, [r3, #5]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7c6:	b292      	uxth	r2, r2
 800d7c8:	9202      	str	r2, [sp, #8]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	9201      	str	r2, [sp, #4]
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fecd 	bl	800e574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d7da:	e0e3      	b.n	800d9a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	f040 80e0 	bne.w	800d9a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	220d      	movs	r2, #13
 800d7e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	705a      	strb	r2, [r3, #1]
      break;
 800d7f0:	e0d8      	b.n	800d9a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d7f2:	2109      	movs	r1, #9
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f99d 	bl	800db34 <USBH_Get_CfgDesc>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7fe:	7bbb      	ldrb	r3, [r7, #14]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2204      	movs	r2, #4
 800d808:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d80a:	e0cd      	b.n	800d9a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
 800d80e:	2b03      	cmp	r3, #3
 800d810:	f040 80ca 	bne.w	800d9a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d81a:	3301      	adds	r3, #1
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	d903      	bls.n	800d836 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	220d      	movs	r2, #13
 800d832:	701a      	strb	r2, [r3, #0]
      break;
 800d834:	e0b8      	b.n	800d9a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	795b      	ldrb	r3, [r3, #5]
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fee9 	bl	800e614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	791b      	ldrb	r3, [r3, #4]
 800d846:	4619      	mov	r1, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fee3 	bl	800e614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	701a      	strb	r2, [r3, #0]
      break;
 800d85a:	e0a5      	b.n	800d9a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f965 	bl	800db34 <USBH_Get_CfgDesc>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d103      	bne.n	800d87c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2205      	movs	r2, #5
 800d878:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d87a:	e097      	b.n	800d9ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d87c:	7bbb      	ldrb	r3, [r7, #14]
 800d87e:	2b03      	cmp	r3, #3
 800d880:	f040 8094 	bne.w	800d9ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d88a:	3301      	adds	r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d903      	bls.n	800d8a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	220d      	movs	r2, #13
 800d8a2:	701a      	strb	r2, [r3, #0]
      break;
 800d8a4:	e082      	b.n	800d9ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	795b      	ldrb	r3, [r3, #5]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 feb1 	bl	800e614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	791b      	ldrb	r3, [r3, #4]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 feab 	bl	800e614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]
      break;
 800d8ca:	e06f      	b.n	800d9ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d019      	beq.n	800d90a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8e2:	23ff      	movs	r3, #255	; 0xff
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f949 	bl	800db7c <USBH_Get_StringDesc>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d103      	bne.n	800d8fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d8fa:	e059      	b.n	800d9b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b03      	cmp	r3, #3
 800d900:	d156      	bne.n	800d9b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2206      	movs	r2, #6
 800d906:	705a      	strb	r2, [r3, #1]
      break;
 800d908:	e052      	b.n	800d9b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2206      	movs	r2, #6
 800d90e:	705a      	strb	r2, [r3, #1]
      break;
 800d910:	e04e      	b.n	800d9b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d019      	beq.n	800d950 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d928:	23ff      	movs	r3, #255	; 0xff
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f926 	bl	800db7c <USBH_Get_StringDesc>
 800d930:	4603      	mov	r3, r0
 800d932:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d934:	7bbb      	ldrb	r3, [r7, #14]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2207      	movs	r2, #7
 800d93e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d940:	e038      	b.n	800d9b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d942:	7bbb      	ldrb	r3, [r7, #14]
 800d944:	2b03      	cmp	r3, #3
 800d946:	d135      	bne.n	800d9b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2207      	movs	r2, #7
 800d94c:	705a      	strb	r2, [r3, #1]
      break;
 800d94e:	e031      	b.n	800d9b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2207      	movs	r2, #7
 800d954:	705a      	strb	r2, [r3, #1]
      break;
 800d956:	e02d      	b.n	800d9b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d017      	beq.n	800d992 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d96e:	23ff      	movs	r3, #255	; 0xff
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f903 	bl	800db7c <USBH_Get_StringDesc>
 800d976:	4603      	mov	r3, r0
 800d978:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d97a:	7bbb      	ldrb	r3, [r7, #14]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d984:	e018      	b.n	800d9b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d986:	7bbb      	ldrb	r3, [r7, #14]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d115      	bne.n	800d9b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
      break;
 800d990:	e012      	b.n	800d9b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]
      break;
 800d996:	e00f      	b.n	800d9b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d998:	bf00      	nop
 800d99a:	e00e      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d99c:	bf00      	nop
 800d99e:	e00c      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9a0:	bf00      	nop
 800d9a2:	e00a      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9a4:	bf00      	nop
 800d9a6:	e008      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9a8:	bf00      	nop
 800d9aa:	e006      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9ac:	bf00      	nop
 800d9ae:	e004      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9b0:	bf00      	nop
 800d9b2:	e002      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9b4:	bf00      	nop
 800d9b6:	e000      	b.n	800d9ba <USBH_HandleEnum+0x3be>
      break;
 800d9b8:	bf00      	nop
  }
  return Status;
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d9d6:	bf00      	nop
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f804 	bl	800da06 <USBH_HandleSof>
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b0b      	cmp	r3, #11
 800da16:	d10a      	bne.n	800da2e <USBH_HandleSof+0x28>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d005      	beq.n	800da2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	4798      	blx	r3
  }
}
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800da46:	bf00      	nop
}
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800da62:	bf00      	nop
}
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 ff56 	bl	800e96e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	791b      	ldrb	r3, [r3, #4]
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fda3 	bl	800e614 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	795b      	ldrb	r3, [r3, #5]
 800dad2:	4619      	mov	r1, r3
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 fd9d 	bl	800e614 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af02      	add	r7, sp, #8
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800daf6:	78fb      	ldrb	r3, [r7, #3]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	4613      	mov	r3, r2
 800dafe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db02:	2100      	movs	r1, #0
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f864 	bl	800dbd2 <USBH_GetDescriptor>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10a      	bne.n	800db2a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db20:	78fa      	ldrb	r2, [r7, #3]
 800db22:	b292      	uxth	r2, r2
 800db24:	4619      	mov	r1, r3
 800db26:	f000 f918 	bl	800dd5a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af02      	add	r7, sp, #8
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	331c      	adds	r3, #28
 800db44:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db46:	887b      	ldrh	r3, [r7, #2]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db50:	2100      	movs	r1, #0
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f83d 	bl	800dbd2 <USBH_GetDescriptor>
 800db58:	4603      	mov	r3, r0
 800db5a:	72fb      	strb	r3, [r7, #11]
 800db5c:	7afb      	ldrb	r3, [r7, #11]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d107      	bne.n	800db72 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800db68:	887a      	ldrh	r2, [r7, #2]
 800db6a:	68f9      	ldr	r1, [r7, #12]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 f964 	bl	800de3a <USBH_ParseCfgDesc>
  }

  return status;
 800db72:	7afb      	ldrb	r3, [r7, #11]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af02      	add	r7, sp, #8
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	607a      	str	r2, [r7, #4]
 800db86:	461a      	mov	r2, r3
 800db88:	460b      	mov	r3, r1
 800db8a:	72fb      	strb	r3, [r7, #11]
 800db8c:	4613      	mov	r3, r2
 800db8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800db90:	7afb      	ldrb	r3, [r7, #11]
 800db92:	b29b      	uxth	r3, r3
 800db94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800db98:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dba0:	893b      	ldrh	r3, [r7, #8]
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	460b      	mov	r3, r1
 800dba6:	2100      	movs	r1, #0
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 f812 	bl	800dbd2 <USBH_GetDescriptor>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d107      	bne.n	800dbc8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbbe:	893a      	ldrh	r2, [r7, #8]
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 fa37 	bl	800e036 <USBH_ParseStringDesc>
  }

  return status;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3718      	adds	r7, #24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	607b      	str	r3, [r7, #4]
 800dbdc:	460b      	mov	r3, r1
 800dbde:	72fb      	strb	r3, [r7, #11]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	789b      	ldrb	r3, [r3, #2]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d11c      	bne.n	800dc26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dbec:	7afb      	ldrb	r3, [r7, #11]
 800dbee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2206      	movs	r2, #6
 800dbfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	893a      	ldrh	r2, [r7, #8]
 800dc02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dc04:	893b      	ldrh	r3, [r7, #8]
 800dc06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc0e:	d104      	bne.n	800dc1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f240 4209 	movw	r2, #1033	; 0x409
 800dc16:	829a      	strh	r2, [r3, #20]
 800dc18:	e002      	b.n	800dc20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	8b3a      	ldrh	r2, [r7, #24]
 800dc24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc26:	8b3b      	ldrh	r3, [r7, #24]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	6879      	ldr	r1, [r7, #4]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 fa50 	bl	800e0d2 <USBH_CtlReq>
 800dc32:	4603      	mov	r3, r0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	789b      	ldrb	r3, [r3, #2]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d10f      	bne.n	800dc70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2205      	movs	r2, #5
 800dc5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc5c:	78fb      	ldrb	r3, [r7, #3]
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc70:	2200      	movs	r2, #0
 800dc72:	2100      	movs	r1, #0
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fa2c 	bl	800e0d2 <USBH_CtlReq>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	789b      	ldrb	r3, [r3, #2]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d10e      	bne.n	800dcb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2209      	movs	r2, #9
 800dca2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	887a      	ldrh	r2, [r7, #2]
 800dca8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	2100      	movs	r1, #0
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fa09 	bl	800e0d2 <USBH_CtlReq>
 800dcc0:	4603      	mov	r3, r0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b082      	sub	sp, #8
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	789b      	ldrb	r3, [r3, #2]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d10f      	bne.n	800dcfe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2203      	movs	r2, #3
 800dce8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dcea:	78fb      	ldrb	r3, [r7, #3]
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcfe:	2200      	movs	r2, #0
 800dd00:	2100      	movs	r1, #0
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 f9e5 	bl	800e0d2 <USBH_CtlReq>
 800dd08:	4603      	mov	r3, r0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	789b      	ldrb	r3, [r3, #2]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d10f      	bne.n	800dd46 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2202      	movs	r2, #2
 800dd2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dd46:	2200      	movs	r2, #0
 800dd48:	2100      	movs	r1, #0
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f9c1 	bl	800e0d2 <USBH_CtlReq>
 800dd50:	4603      	mov	r3, r0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	4613      	mov	r3, r2
 800dd66:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	781a      	ldrb	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	785a      	ldrb	r2, [r3, #1]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	3302      	adds	r3, #2
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	3303      	adds	r3, #3
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	021b      	lsls	r3, r3, #8
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	791a      	ldrb	r2, [r3, #4]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	795a      	ldrb	r2, [r3, #5]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	799a      	ldrb	r2, [r3, #6]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	79da      	ldrb	r2, [r3, #7]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ddb4:	88fb      	ldrh	r3, [r7, #6]
 800ddb6:	2b08      	cmp	r3, #8
 800ddb8:	d939      	bls.n	800de2e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	3309      	adds	r3, #9
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	021b      	lsls	r3, r3, #8
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	330a      	adds	r3, #10
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	330b      	adds	r3, #11
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	4313      	orrs	r3, r2
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	330c      	adds	r3, #12
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	330d      	adds	r3, #13
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	b29b      	uxth	r3, r3
 800de02:	021b      	lsls	r3, r3, #8
 800de04:	b29b      	uxth	r3, r3
 800de06:	4313      	orrs	r3, r2
 800de08:	b29a      	uxth	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	7b9a      	ldrb	r2, [r3, #14]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	7bda      	ldrb	r2, [r3, #15]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	7c1a      	ldrb	r2, [r3, #16]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	7c5a      	ldrb	r2, [r3, #17]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	745a      	strb	r2, [r3, #17]
  }
}
 800de2e:	bf00      	nop
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b08a      	sub	sp, #40	; 0x28
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	4613      	mov	r3, r2
 800de46:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	781a      	ldrb	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	785a      	ldrb	r2, [r3, #1]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	3302      	adds	r3, #2
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	b29a      	uxth	r2, r3
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	3303      	adds	r3, #3
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	021b      	lsls	r3, r3, #8
 800de7e:	b29b      	uxth	r3, r3
 800de80:	4313      	orrs	r3, r2
 800de82:	b29a      	uxth	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	791a      	ldrb	r2, [r3, #4]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	795a      	ldrb	r2, [r3, #5]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	799a      	ldrb	r2, [r3, #6]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	79da      	ldrb	r2, [r3, #7]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	7a1a      	ldrb	r2, [r3, #8]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800deb0:	88fb      	ldrh	r3, [r7, #6]
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	d95f      	bls.n	800df76 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800deb6:	2309      	movs	r3, #9
 800deb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800deba:	2300      	movs	r3, #0
 800debc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800debe:	e051      	b.n	800df64 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dec0:	f107 0316 	add.w	r3, r7, #22
 800dec4:	4619      	mov	r1, r3
 800dec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dec8:	f000 f8e8 	bl	800e09c <USBH_GetNextDesc>
 800decc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded0:	785b      	ldrb	r3, [r3, #1]
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d146      	bne.n	800df64 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ded6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800deda:	221a      	movs	r2, #26
 800dedc:	fb02 f303 	mul.w	r3, r2, r3
 800dee0:	3308      	adds	r3, #8
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	4413      	add	r3, r2
 800dee6:	3302      	adds	r3, #2
 800dee8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800deea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800deec:	69f8      	ldr	r0, [r7, #28]
 800deee:	f000 f846 	bl	800df7e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800def8:	2300      	movs	r3, #0
 800defa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800defc:	e022      	b.n	800df44 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800defe:	f107 0316 	add.w	r3, r7, #22
 800df02:	4619      	mov	r1, r3
 800df04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df06:	f000 f8c9 	bl	800e09c <USBH_GetNextDesc>
 800df0a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b05      	cmp	r3, #5
 800df12:	d117      	bne.n	800df44 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800df14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df1c:	3201      	adds	r2, #1
 800df1e:	00d2      	lsls	r2, r2, #3
 800df20:	211a      	movs	r1, #26
 800df22:	fb01 f303 	mul.w	r3, r1, r3
 800df26:	4413      	add	r3, r2
 800df28:	3308      	adds	r3, #8
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	4413      	add	r3, r2
 800df2e:	3304      	adds	r3, #4
 800df30:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800df32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f000 f851 	bl	800dfdc <USBH_ParseEPDesc>
            ep_ix++;
 800df3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df3e:	3301      	adds	r3, #1
 800df40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	791b      	ldrb	r3, [r3, #4]
 800df48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d204      	bcs.n	800df5a <USBH_ParseCfgDesc+0x120>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	885a      	ldrh	r2, [r3, #2]
 800df54:	8afb      	ldrh	r3, [r7, #22]
 800df56:	429a      	cmp	r2, r3
 800df58:	d8d1      	bhi.n	800defe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800df5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df5e:	3301      	adds	r3, #1
 800df60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d804      	bhi.n	800df76 <USBH_ParseCfgDesc+0x13c>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	885a      	ldrh	r2, [r3, #2]
 800df70:	8afb      	ldrh	r3, [r7, #22]
 800df72:	429a      	cmp	r2, r3
 800df74:	d8a4      	bhi.n	800dec0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800df76:	bf00      	nop
 800df78:	3728      	adds	r7, #40	; 0x28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	781a      	ldrb	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	785a      	ldrb	r2, [r3, #1]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	789a      	ldrb	r2, [r3, #2]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	78da      	ldrb	r2, [r3, #3]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	791a      	ldrb	r2, [r3, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	795a      	ldrb	r2, [r3, #5]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	799a      	ldrb	r2, [r3, #6]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	79da      	ldrb	r2, [r3, #7]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	7a1a      	ldrb	r2, [r3, #8]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	721a      	strb	r2, [r3, #8]
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	781a      	ldrb	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	785a      	ldrb	r2, [r3, #1]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	789a      	ldrb	r2, [r3, #2]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	78da      	ldrb	r2, [r3, #3]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	3304      	adds	r3, #4
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	3305      	adds	r3, #5
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	b29b      	uxth	r3, r3
 800e016:	021b      	lsls	r3, r3, #8
 800e018:	b29b      	uxth	r3, r3
 800e01a:	4313      	orrs	r3, r2
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	799a      	ldrb	r2, [r3, #6]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	719a      	strb	r2, [r3, #6]
}
 800e02a:	bf00      	nop
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e036:	b480      	push	{r7}
 800e038:	b087      	sub	sp, #28
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	4613      	mov	r3, r2
 800e042:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3301      	adds	r3, #1
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d120      	bne.n	800e090 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	1e9a      	subs	r2, r3, #2
 800e054:	88fb      	ldrh	r3, [r7, #6]
 800e056:	4293      	cmp	r3, r2
 800e058:	bf28      	it	cs
 800e05a:	4613      	movcs	r3, r2
 800e05c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3302      	adds	r3, #2
 800e062:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e064:	2300      	movs	r3, #0
 800e066:	82fb      	strh	r3, [r7, #22]
 800e068:	e00b      	b.n	800e082 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e06a:	8afb      	ldrh	r3, [r7, #22]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4413      	add	r3, r2
 800e070:	781a      	ldrb	r2, [r3, #0]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	3301      	adds	r3, #1
 800e07a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e07c:	8afb      	ldrh	r3, [r7, #22]
 800e07e:	3302      	adds	r3, #2
 800e080:	82fb      	strh	r3, [r7, #22]
 800e082:	8afa      	ldrh	r2, [r7, #22]
 800e084:	8abb      	ldrh	r3, [r7, #20]
 800e086:	429a      	cmp	r2, r3
 800e088:	d3ef      	bcc.n	800e06a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
  }
}
 800e090:	bf00      	nop
 800e092:	371c      	adds	r7, #28
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	881a      	ldrh	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	4413      	add	r3, r2
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b086      	sub	sp, #24
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	60b9      	str	r1, [r7, #8]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	789b      	ldrb	r3, [r3, #2]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d002      	beq.n	800e0f2 <USBH_CtlReq+0x20>
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d00f      	beq.n	800e110 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e0f0:	e027      	b.n	800e142 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	68ba      	ldr	r2, [r7, #8]
 800e0f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	88fa      	ldrh	r2, [r7, #6]
 800e0fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2202      	movs	r2, #2
 800e108:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e10a:	2301      	movs	r3, #1
 800e10c:	75fb      	strb	r3, [r7, #23]
      break;
 800e10e:	e018      	b.n	800e142 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 f81b 	bl	800e14c <USBH_HandleControl>
 800e116:	4603      	mov	r3, r0
 800e118:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <USBH_CtlReq+0x54>
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	2b03      	cmp	r3, #3
 800e124:	d106      	bne.n	800e134 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	761a      	strb	r2, [r3, #24]
      break;
 800e132:	e005      	b.n	800e140 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e134:	7dfb      	ldrb	r3, [r7, #23]
 800e136:	2b02      	cmp	r3, #2
 800e138:	d102      	bne.n	800e140 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2201      	movs	r2, #1
 800e13e:	709a      	strb	r2, [r3, #2]
      break;
 800e140:	bf00      	nop
  }
  return status;
 800e142:	7dfb      	ldrb	r3, [r7, #23]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af02      	add	r7, sp, #8
 800e152:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e154:	2301      	movs	r3, #1
 800e156:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e158:	2300      	movs	r3, #0
 800e15a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	7e1b      	ldrb	r3, [r3, #24]
 800e160:	3b01      	subs	r3, #1
 800e162:	2b0a      	cmp	r3, #10
 800e164:	f200 8156 	bhi.w	800e414 <USBH_HandleControl+0x2c8>
 800e168:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <USBH_HandleControl+0x24>)
 800e16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16e:	bf00      	nop
 800e170:	0800e19d 	.word	0x0800e19d
 800e174:	0800e1b7 	.word	0x0800e1b7
 800e178:	0800e221 	.word	0x0800e221
 800e17c:	0800e247 	.word	0x0800e247
 800e180:	0800e27f 	.word	0x0800e27f
 800e184:	0800e2a9 	.word	0x0800e2a9
 800e188:	0800e2fb 	.word	0x0800e2fb
 800e18c:	0800e31d 	.word	0x0800e31d
 800e190:	0800e359 	.word	0x0800e359
 800e194:	0800e37f 	.word	0x0800e37f
 800e198:	0800e3bd 	.word	0x0800e3bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f103 0110 	add.w	r1, r3, #16
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	795b      	ldrb	r3, [r3, #5]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f943 	bl	800e434 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	761a      	strb	r2, [r3, #24]
      break;
 800e1b4:	e139      	b.n	800e42a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	795b      	ldrb	r3, [r3, #5]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fcc5 	bl	800eb4c <USBH_LL_GetURBState>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d11e      	bne.n	800e20a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	7c1b      	ldrb	r3, [r3, #16]
 800e1d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	8adb      	ldrh	r3, [r3, #22]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e1de:	7b7b      	ldrb	r3, [r7, #13]
 800e1e0:	2b80      	cmp	r3, #128	; 0x80
 800e1e2:	d103      	bne.n	800e1ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2203      	movs	r2, #3
 800e1e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1ea:	e115      	b.n	800e418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2205      	movs	r2, #5
 800e1f0:	761a      	strb	r2, [r3, #24]
      break;
 800e1f2:	e111      	b.n	800e418 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e1f4:	7b7b      	ldrb	r3, [r7, #13]
 800e1f6:	2b80      	cmp	r3, #128	; 0x80
 800e1f8:	d103      	bne.n	800e202 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2209      	movs	r2, #9
 800e1fe:	761a      	strb	r2, [r3, #24]
      break;
 800e200:	e10a      	b.n	800e418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2207      	movs	r2, #7
 800e206:	761a      	strb	r2, [r3, #24]
      break;
 800e208:	e106      	b.n	800e418 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d003      	beq.n	800e218 <USBH_HandleControl+0xcc>
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	2b02      	cmp	r3, #2
 800e214:	f040 8100 	bne.w	800e418 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	220b      	movs	r2, #11
 800e21c:	761a      	strb	r2, [r3, #24]
      break;
 800e21e:	e0fb      	b.n	800e418 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6899      	ldr	r1, [r3, #8]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	899a      	ldrh	r2, [r3, #12]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	791b      	ldrb	r3, [r3, #4]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f93a 	bl	800e4b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2204      	movs	r2, #4
 800e242:	761a      	strb	r2, [r3, #24]
      break;
 800e244:	e0f1      	b.n	800e42a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	791b      	ldrb	r3, [r3, #4]
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fc7d 	bl	800eb4c <USBH_LL_GetURBState>
 800e252:	4603      	mov	r3, r0
 800e254:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d102      	bne.n	800e262 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2209      	movs	r2, #9
 800e260:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	2b05      	cmp	r3, #5
 800e266:	d102      	bne.n	800e26e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e268:	2303      	movs	r3, #3
 800e26a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e26c:	e0d6      	b.n	800e41c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e26e:	7bbb      	ldrb	r3, [r7, #14]
 800e270:	2b04      	cmp	r3, #4
 800e272:	f040 80d3 	bne.w	800e41c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	220b      	movs	r2, #11
 800e27a:	761a      	strb	r2, [r3, #24]
      break;
 800e27c:	e0ce      	b.n	800e41c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6899      	ldr	r1, [r3, #8]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	899a      	ldrh	r2, [r3, #12]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	795b      	ldrb	r3, [r3, #5]
 800e28a:	2001      	movs	r0, #1
 800e28c:	9000      	str	r0, [sp, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f8ea 	bl	800e468 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2206      	movs	r2, #6
 800e2a4:	761a      	strb	r2, [r3, #24]
      break;
 800e2a6:	e0c0      	b.n	800e42a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	795b      	ldrb	r3, [r3, #5]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fc4c 	bl	800eb4c <USBH_LL_GetURBState>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d103      	bne.n	800e2c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2207      	movs	r2, #7
 800e2c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e2c4:	e0ac      	b.n	800e420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b05      	cmp	r3, #5
 800e2ca:	d105      	bne.n	800e2d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	220c      	movs	r2, #12
 800e2d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	73fb      	strb	r3, [r7, #15]
      break;
 800e2d6:	e0a3      	b.n	800e420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d103      	bne.n	800e2e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2205      	movs	r2, #5
 800e2e2:	761a      	strb	r2, [r3, #24]
      break;
 800e2e4:	e09c      	b.n	800e420 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	f040 8099 	bne.w	800e420 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	220b      	movs	r2, #11
 800e2f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e2f8:	e092      	b.n	800e420 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	791b      	ldrb	r3, [r3, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	2100      	movs	r1, #0
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f8d5 	bl	800e4b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2208      	movs	r2, #8
 800e318:	761a      	strb	r2, [r3, #24]

      break;
 800e31a:	e086      	b.n	800e42a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	791b      	ldrb	r3, [r3, #4]
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fc12 	bl	800eb4c <USBH_LL_GetURBState>
 800e328:	4603      	mov	r3, r0
 800e32a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d105      	bne.n	800e33e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	220d      	movs	r2, #13
 800e336:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e33c:	e072      	b.n	800e424 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	2b04      	cmp	r3, #4
 800e342:	d103      	bne.n	800e34c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	220b      	movs	r2, #11
 800e348:	761a      	strb	r2, [r3, #24]
      break;
 800e34a:	e06b      	b.n	800e424 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
 800e34e:	2b05      	cmp	r3, #5
 800e350:	d168      	bne.n	800e424 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e352:	2303      	movs	r3, #3
 800e354:	73fb      	strb	r3, [r7, #15]
      break;
 800e356:	e065      	b.n	800e424 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	795b      	ldrb	r3, [r3, #5]
 800e35c:	2201      	movs	r2, #1
 800e35e:	9200      	str	r2, [sp, #0]
 800e360:	2200      	movs	r2, #0
 800e362:	2100      	movs	r1, #0
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 f87f 	bl	800e468 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e370:	b29a      	uxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	220a      	movs	r2, #10
 800e37a:	761a      	strb	r2, [r3, #24]
      break;
 800e37c:	e055      	b.n	800e42a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	795b      	ldrb	r3, [r3, #5]
 800e382:	4619      	mov	r1, r3
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fbe1 	bl	800eb4c <USBH_LL_GetURBState>
 800e38a:	4603      	mov	r3, r0
 800e38c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d105      	bne.n	800e3a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	220d      	movs	r2, #13
 800e39c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e39e:	e043      	b.n	800e428 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3a0:	7bbb      	ldrb	r3, [r7, #14]
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d103      	bne.n	800e3ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2209      	movs	r2, #9
 800e3aa:	761a      	strb	r2, [r3, #24]
      break;
 800e3ac:	e03c      	b.n	800e428 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d139      	bne.n	800e428 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	220b      	movs	r2, #11
 800e3b8:	761a      	strb	r2, [r3, #24]
      break;
 800e3ba:	e035      	b.n	800e428 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7e5b      	ldrb	r3, [r3, #25]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	765a      	strb	r2, [r3, #25]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7e5b      	ldrb	r3, [r3, #25]
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d806      	bhi.n	800e3de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e3dc:	e025      	b.n	800e42a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3e4:	2106      	movs	r1, #6
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	795b      	ldrb	r3, [r3, #5]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f90c 	bl	800e614 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	791b      	ldrb	r3, [r3, #4]
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f906 	bl	800e614 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e40e:	2302      	movs	r3, #2
 800e410:	73fb      	strb	r3, [r7, #15]
      break;
 800e412:	e00a      	b.n	800e42a <USBH_HandleControl+0x2de>

    default:
      break;
 800e414:	bf00      	nop
 800e416:	e008      	b.n	800e42a <USBH_HandleControl+0x2de>
      break;
 800e418:	bf00      	nop
 800e41a:	e006      	b.n	800e42a <USBH_HandleControl+0x2de>
      break;
 800e41c:	bf00      	nop
 800e41e:	e004      	b.n	800e42a <USBH_HandleControl+0x2de>
      break;
 800e420:	bf00      	nop
 800e422:	e002      	b.n	800e42a <USBH_HandleControl+0x2de>
      break;
 800e424:	bf00      	nop
 800e426:	e000      	b.n	800e42a <USBH_HandleControl+0x2de>
      break;
 800e428:	bf00      	nop
  }

  return status;
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af04      	add	r7, sp, #16
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	4613      	mov	r3, r2
 800e440:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e442:	79f9      	ldrb	r1, [r7, #7]
 800e444:	2300      	movs	r3, #0
 800e446:	9303      	str	r3, [sp, #12]
 800e448:	2308      	movs	r3, #8
 800e44a:	9302      	str	r3, [sp, #8]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	2300      	movs	r3, #0
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	2200      	movs	r2, #0
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f000 fb46 	bl	800eaea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af04      	add	r7, sp, #16
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	4611      	mov	r1, r2
 800e474:	461a      	mov	r2, r3
 800e476:	460b      	mov	r3, r1
 800e478:	80fb      	strh	r3, [r7, #6]
 800e47a:	4613      	mov	r3, r2
 800e47c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e488:	2300      	movs	r3, #0
 800e48a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e48c:	7979      	ldrb	r1, [r7, #5]
 800e48e:	7e3b      	ldrb	r3, [r7, #24]
 800e490:	9303      	str	r3, [sp, #12]
 800e492:	88fb      	ldrh	r3, [r7, #6]
 800e494:	9302      	str	r3, [sp, #8]
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	2301      	movs	r3, #1
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 fb21 	bl	800eaea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b088      	sub	sp, #32
 800e4b6:	af04      	add	r7, sp, #16
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	4611      	mov	r1, r2
 800e4be:	461a      	mov	r2, r3
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	80fb      	strh	r3, [r7, #6]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e4c8:	7979      	ldrb	r1, [r7, #5]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	88fb      	ldrh	r3, [r7, #6]
 800e4d0:	9302      	str	r3, [sp, #8]
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	9301      	str	r3, [sp, #4]
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	2201      	movs	r2, #1
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f000 fb03 	bl	800eaea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e4e4:	2300      	movs	r3, #0

}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b088      	sub	sp, #32
 800e4f2:	af04      	add	r7, sp, #16
 800e4f4:	60f8      	str	r0, [r7, #12]
 800e4f6:	60b9      	str	r1, [r7, #8]
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	80fb      	strh	r3, [r7, #6]
 800e500:	4613      	mov	r3, r2
 800e502:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e50e:	2300      	movs	r3, #0
 800e510:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e512:	7979      	ldrb	r1, [r7, #5]
 800e514:	7e3b      	ldrb	r3, [r7, #24]
 800e516:	9303      	str	r3, [sp, #12]
 800e518:	88fb      	ldrh	r3, [r7, #6]
 800e51a:	9302      	str	r3, [sp, #8]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	2301      	movs	r3, #1
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	2302      	movs	r3, #2
 800e526:	2200      	movs	r2, #0
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 fade 	bl	800eaea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b088      	sub	sp, #32
 800e53c:	af04      	add	r7, sp, #16
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	4611      	mov	r1, r2
 800e544:	461a      	mov	r2, r3
 800e546:	460b      	mov	r3, r1
 800e548:	80fb      	strh	r3, [r7, #6]
 800e54a:	4613      	mov	r3, r2
 800e54c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e54e:	7979      	ldrb	r1, [r7, #5]
 800e550:	2300      	movs	r3, #0
 800e552:	9303      	str	r3, [sp, #12]
 800e554:	88fb      	ldrh	r3, [r7, #6]
 800e556:	9302      	str	r3, [sp, #8]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	2301      	movs	r3, #1
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	2302      	movs	r3, #2
 800e562:	2201      	movs	r2, #1
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 fac0 	bl	800eaea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af04      	add	r7, sp, #16
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	4608      	mov	r0, r1
 800e57e:	4611      	mov	r1, r2
 800e580:	461a      	mov	r2, r3
 800e582:	4603      	mov	r3, r0
 800e584:	70fb      	strb	r3, [r7, #3]
 800e586:	460b      	mov	r3, r1
 800e588:	70bb      	strb	r3, [r7, #2]
 800e58a:	4613      	mov	r3, r2
 800e58c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e58e:	7878      	ldrb	r0, [r7, #1]
 800e590:	78ba      	ldrb	r2, [r7, #2]
 800e592:	78f9      	ldrb	r1, [r7, #3]
 800e594:	8b3b      	ldrh	r3, [r7, #24]
 800e596:	9302      	str	r3, [sp, #8]
 800e598:	7d3b      	ldrb	r3, [r7, #20]
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	7c3b      	ldrb	r3, [r7, #16]
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa53 	bl	800ea4e <USBH_LL_OpenPipe>

  return USBH_OK;
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b082      	sub	sp, #8
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e5be:	78fb      	ldrb	r3, [r7, #3]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fa72 	bl	800eaac <USBH_LL_ClosePipe>

  return USBH_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	460b      	mov	r3, r1
 800e5dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f836 	bl	800e650 <USBH_GetFreePipe>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e5e8:	89fb      	ldrh	r3, [r7, #14]
 800e5ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d00a      	beq.n	800e608 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e5f2:	78fa      	ldrb	r2, [r7, #3]
 800e5f4:	89fb      	ldrh	r3, [r7, #14]
 800e5f6:	f003 030f 	and.w	r3, r3, #15
 800e5fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5fe:	6879      	ldr	r1, [r7, #4]
 800e600:	33e0      	adds	r3, #224	; 0xe0
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	440b      	add	r3, r1
 800e606:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e608:	89fb      	ldrh	r3, [r7, #14]
 800e60a:	b2db      	uxtb	r3, r3
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	2b0a      	cmp	r3, #10
 800e624:	d80d      	bhi.n	800e642 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e626:	78fb      	ldrb	r3, [r7, #3]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	33e0      	adds	r3, #224	; 0xe0
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4413      	add	r3, r2
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	78fb      	ldrb	r3, [r7, #3]
 800e634:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	33e0      	adds	r3, #224	; 0xe0
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	440b      	add	r3, r1
 800e640:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
 800e660:	e00f      	b.n	800e682 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e662:	7bfb      	ldrb	r3, [r7, #15]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	33e0      	adds	r3, #224	; 0xe0
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	e007      	b.n	800e68c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
 800e67e:	3301      	adds	r3, #1
 800e680:	73fb      	strb	r3, [r7, #15]
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	2b0a      	cmp	r3, #10
 800e686:	d9ec      	bls.n	800e662 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e688:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e69c:	2201      	movs	r2, #1
 800e69e:	490e      	ldr	r1, [pc, #56]	; (800e6d8 <MX_USB_HOST_Init+0x40>)
 800e6a0:	480e      	ldr	r0, [pc, #56]	; (800e6dc <MX_USB_HOST_Init+0x44>)
 800e6a2:	f7fe fca1 	bl	800cfe8 <USBH_Init>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e6ac:	f7f3 fa44 	bl	8001b38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e6b0:	490b      	ldr	r1, [pc, #44]	; (800e6e0 <MX_USB_HOST_Init+0x48>)
 800e6b2:	480a      	ldr	r0, [pc, #40]	; (800e6dc <MX_USB_HOST_Init+0x44>)
 800e6b4:	f7fe fd26 	bl	800d104 <USBH_RegisterClass>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e6be:	f7f3 fa3b 	bl	8001b38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e6c2:	4806      	ldr	r0, [pc, #24]	; (800e6dc <MX_USB_HOST_Init+0x44>)
 800e6c4:	f7fe fdaa 	bl	800d21c <USBH_Start>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e6ce:	f7f3 fa33 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e6d2:	bf00      	nop
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	0800e6f9 	.word	0x0800e6f9
 800e6dc:	20000554 	.word	0x20000554
 800e6e0:	20000154 	.word	0x20000154

0800e6e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e6e8:	4802      	ldr	r0, [pc, #8]	; (800e6f4 <MX_USB_HOST_Process+0x10>)
 800e6ea:	f7fe fda7 	bl	800d23c <USBH_Process>
}
 800e6ee:	bf00      	nop
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20000554 	.word	0x20000554

0800e6f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	3b01      	subs	r3, #1
 800e708:	2b04      	cmp	r3, #4
 800e70a:	d819      	bhi.n	800e740 <USBH_UserProcess+0x48>
 800e70c:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <USBH_UserProcess+0x1c>)
 800e70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e712:	bf00      	nop
 800e714:	0800e741 	.word	0x0800e741
 800e718:	0800e731 	.word	0x0800e731
 800e71c:	0800e741 	.word	0x0800e741
 800e720:	0800e739 	.word	0x0800e739
 800e724:	0800e729 	.word	0x0800e729
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e728:	4b09      	ldr	r3, [pc, #36]	; (800e750 <USBH_UserProcess+0x58>)
 800e72a:	2203      	movs	r2, #3
 800e72c:	701a      	strb	r2, [r3, #0]
  break;
 800e72e:	e008      	b.n	800e742 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <USBH_UserProcess+0x58>)
 800e732:	2202      	movs	r2, #2
 800e734:	701a      	strb	r2, [r3, #0]
  break;
 800e736:	e004      	b.n	800e742 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e738:	4b05      	ldr	r3, [pc, #20]	; (800e750 <USBH_UserProcess+0x58>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	701a      	strb	r2, [r3, #0]
  break;
 800e73e:	e000      	b.n	800e742 <USBH_UserProcess+0x4a>

  default:
  break;
 800e740:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e742:	bf00      	nop
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	20000201 	.word	0x20000201

0800e754 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08a      	sub	sp, #40	; 0x28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e75c:	f107 0314 	add.w	r3, r7, #20
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	605a      	str	r2, [r3, #4]
 800e766:	609a      	str	r2, [r3, #8]
 800e768:	60da      	str	r2, [r3, #12]
 800e76a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e774:	d147      	bne.n	800e806 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e776:	2300      	movs	r3, #0
 800e778:	613b      	str	r3, [r7, #16]
 800e77a:	4b25      	ldr	r3, [pc, #148]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77e:	4a24      	ldr	r2, [pc, #144]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e780:	f043 0301 	orr.w	r3, r3, #1
 800e784:	6313      	str	r3, [r2, #48]	; 0x30
 800e786:	4b22      	ldr	r3, [pc, #136]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	613b      	str	r3, [r7, #16]
 800e790:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e798:	2300      	movs	r3, #0
 800e79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e79c:	2300      	movs	r3, #0
 800e79e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e7a0:	f107 0314 	add.w	r3, r7, #20
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	481b      	ldr	r0, [pc, #108]	; (800e814 <HAL_HCD_MspInit+0xc0>)
 800e7a8:	f7f6 ff0e 	bl	80055c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e7ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e7b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e7be:	230a      	movs	r3, #10
 800e7c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7c2:	f107 0314 	add.w	r3, r7, #20
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4812      	ldr	r0, [pc, #72]	; (800e814 <HAL_HCD_MspInit+0xc0>)
 800e7ca:	f7f6 fefd 	bl	80055c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7ce:	4b10      	ldr	r3, [pc, #64]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d2:	4a0f      	ldr	r2, [pc, #60]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d8:	6353      	str	r3, [r2, #52]	; 0x34
 800e7da:	2300      	movs	r3, #0
 800e7dc:	60fb      	str	r3, [r7, #12]
 800e7de:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e2:	4a0b      	ldr	r2, [pc, #44]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e7e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7e8:	6453      	str	r3, [r2, #68]	; 0x44
 800e7ea:	4b09      	ldr	r3, [pc, #36]	; (800e810 <HAL_HCD_MspInit+0xbc>)
 800e7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7f2:	60fb      	str	r3, [r7, #12]
 800e7f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	2043      	movs	r0, #67	; 0x43
 800e7fc:	f7f6 fead 	bl	800555a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e800:	2043      	movs	r0, #67	; 0x43
 800e802:	f7f6 fec6 	bl	8005592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e806:	bf00      	nop
 800e808:	3728      	adds	r7, #40	; 0x28
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	40023800 	.word	0x40023800
 800e814:	40020000 	.word	0x40020000

0800e818 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e826:	4618      	mov	r0, r3
 800e828:	f7ff f8db 	bl	800d9e2 <USBH_LL_IncTimer>
}
 800e82c:	bf00      	nop
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e842:	4618      	mov	r0, r3
 800e844:	f7ff f913 	bl	800da6e <USBH_LL_Connect>
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff f91c 	bl	800da9c <USBH_LL_Disconnect>
}
 800e864:	bf00      	nop
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	460b      	mov	r3, r1
 800e876:	70fb      	strb	r3, [r7, #3]
 800e878:	4613      	mov	r3, r2
 800e87a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff f8cd 	bl	800da36 <USBH_LL_PortEnabled>
}
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7ff f8cd 	bl	800da52 <USBH_LL_PortDisabled>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d12a      	bne.n	800e928 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e8d2:	4a18      	ldr	r2, [pc, #96]	; (800e934 <USBH_LL_Init+0x74>)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a15      	ldr	r2, [pc, #84]	; (800e934 <USBH_LL_Init+0x74>)
 800e8de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e8e2:	4b14      	ldr	r3, [pc, #80]	; (800e934 <USBH_LL_Init+0x74>)
 800e8e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e8e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e8ea:	4b12      	ldr	r3, [pc, #72]	; (800e934 <USBH_LL_Init+0x74>)
 800e8ec:	2208      	movs	r2, #8
 800e8ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e8f0:	4b10      	ldr	r3, [pc, #64]	; (800e934 <USBH_LL_Init+0x74>)
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	; (800e934 <USBH_LL_Init+0x74>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e8fc:	4b0d      	ldr	r3, [pc, #52]	; (800e934 <USBH_LL_Init+0x74>)
 800e8fe:	2202      	movs	r2, #2
 800e900:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e902:	4b0c      	ldr	r3, [pc, #48]	; (800e934 <USBH_LL_Init+0x74>)
 800e904:	2200      	movs	r2, #0
 800e906:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e908:	480a      	ldr	r0, [pc, #40]	; (800e934 <USBH_LL_Init+0x74>)
 800e90a:	f7f7 f844 	bl	8005996 <HAL_HCD_Init>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e914:	f7f3 f910 	bl	8001b38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e918:	4806      	ldr	r0, [pc, #24]	; (800e934 <USBH_LL_Init+0x74>)
 800e91a:	f7f7 fc21 	bl	8006160 <HAL_HCD_GetCurrentFrame>
 800e91e:	4603      	mov	r3, r0
 800e920:	4619      	mov	r1, r3
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff f84e 	bl	800d9c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2000092c 	.word	0x2000092c

0800e938 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e94e:	4618      	mov	r0, r3
 800e950:	f7f7 fb90 	bl	8006074 <HAL_HCD_Start>
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 f95c 	bl	800ec18 <USBH_Get_USB_Status>
 800e960:	4603      	mov	r3, r0
 800e962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e964:	7bbb      	ldrb	r3, [r7, #14]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e976:	2300      	movs	r3, #0
 800e978:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e97a:	2300      	movs	r3, #0
 800e97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e984:	4618      	mov	r0, r3
 800e986:	f7f7 fb98 	bl	80060ba <HAL_HCD_Stop>
 800e98a:	4603      	mov	r3, r0
 800e98c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	4618      	mov	r0, r3
 800e992:	f000 f941 	bl	800ec18 <USBH_Get_USB_Status>
 800e996:	4603      	mov	r3, r0
 800e998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f7 fbe0 	bl	800617c <HAL_HCD_GetCurrentSpeed>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d00c      	beq.n	800e9dc <USBH_LL_GetSpeed+0x38>
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d80d      	bhi.n	800e9e2 <USBH_LL_GetSpeed+0x3e>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <USBH_LL_GetSpeed+0x2c>
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d003      	beq.n	800e9d6 <USBH_LL_GetSpeed+0x32>
 800e9ce:	e008      	b.n	800e9e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d4:	e008      	b.n	800e9e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9da:	e005      	b.n	800e9e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e9dc:	2302      	movs	r3, #2
 800e9de:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e0:	e002      	b.n	800e9e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e6:	bf00      	nop
  }
  return  speed;
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f7 fb73 	bl	80060f4 <HAL_HCD_ResetPort>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f000 f8ff 	bl	800ec18 <USBH_Get_USB_Status>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea3a:	78fa      	ldrb	r2, [r7, #3]
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f7 fb7a 	bl	8006138 <HAL_HCD_HC_GetXferCount>
 800ea44:	4603      	mov	r3, r0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ea4e:	b590      	push	{r4, r7, lr}
 800ea50:	b089      	sub	sp, #36	; 0x24
 800ea52:	af04      	add	r7, sp, #16
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	4608      	mov	r0, r1
 800ea58:	4611      	mov	r1, r2
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	70fb      	strb	r3, [r7, #3]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70bb      	strb	r3, [r7, #2]
 800ea64:	4613      	mov	r3, r2
 800ea66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ea76:	787c      	ldrb	r4, [r7, #1]
 800ea78:	78ba      	ldrb	r2, [r7, #2]
 800ea7a:	78f9      	ldrb	r1, [r7, #3]
 800ea7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea7e:	9302      	str	r3, [sp, #8]
 800ea80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea84:	9301      	str	r3, [sp, #4]
 800ea86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	4623      	mov	r3, r4
 800ea8e:	f7f6 ffe4 	bl	8005a5a <HAL_HCD_HC_Init>
 800ea92:	4603      	mov	r3, r0
 800ea94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 f8bd 	bl	800ec18 <USBH_Get_USB_Status>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd90      	pop	{r4, r7, pc}

0800eaac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eac6:	78fa      	ldrb	r2, [r7, #3]
 800eac8:	4611      	mov	r1, r2
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f7 f854 	bl	8005b78 <HAL_HCD_HC_Halt>
 800ead0:	4603      	mov	r3, r0
 800ead2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 f89e 	bl	800ec18 <USBH_Get_USB_Status>
 800eadc:	4603      	mov	r3, r0
 800eade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eaea:	b590      	push	{r4, r7, lr}
 800eaec:	b089      	sub	sp, #36	; 0x24
 800eaee:	af04      	add	r7, sp, #16
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	4603      	mov	r3, r0
 800eafa:	70fb      	strb	r3, [r7, #3]
 800eafc:	460b      	mov	r3, r1
 800eafe:	70bb      	strb	r3, [r7, #2]
 800eb00:	4613      	mov	r3, r2
 800eb02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb12:	787c      	ldrb	r4, [r7, #1]
 800eb14:	78ba      	ldrb	r2, [r7, #2]
 800eb16:	78f9      	ldrb	r1, [r7, #3]
 800eb18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb1c:	9303      	str	r3, [sp, #12]
 800eb1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb20:	9302      	str	r3, [sp, #8]
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	9301      	str	r3, [sp, #4]
 800eb26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	4623      	mov	r3, r4
 800eb2e:	f7f7 f847 	bl	8005bc0 <HAL_HCD_HC_SubmitRequest>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 f86d 	bl	800ec18 <USBH_Get_USB_Status>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb42:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3714      	adds	r7, #20
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd90      	pop	{r4, r7, pc}

0800eb4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb5e:	78fa      	ldrb	r2, [r7, #3]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f7 fad4 	bl	8006110 <HAL_HCD_HC_GetURBState>
 800eb68:	4603      	mov	r3, r0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d103      	bne.n	800eb90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800eb88:	78fb      	ldrb	r3, [r7, #3]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 f870 	bl	800ec70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800eb90:	20c8      	movs	r0, #200	; 0xc8
 800eb92:	f7f6 fbe3 	bl	800535c <HAL_Delay>
  return USBH_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70fb      	strb	r3, [r7, #3]
 800ebac:	4613      	mov	r3, r2
 800ebae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebb6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ebb8:	78fb      	ldrb	r3, [r7, #3]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	212c      	movs	r1, #44	; 0x2c
 800ebbe:	fb01 f303 	mul.w	r3, r1, r3
 800ebc2:	4413      	add	r3, r2
 800ebc4:	333b      	adds	r3, #59	; 0x3b
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d009      	beq.n	800ebe0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	212c      	movs	r1, #44	; 0x2c
 800ebd2:	fb01 f303 	mul.w	r3, r1, r3
 800ebd6:	4413      	add	r3, r2
 800ebd8:	3354      	adds	r3, #84	; 0x54
 800ebda:	78ba      	ldrb	r2, [r7, #2]
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	e008      	b.n	800ebf2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ebe0:	78fb      	ldrb	r3, [r7, #3]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	212c      	movs	r1, #44	; 0x2c
 800ebe6:	fb01 f303 	mul.w	r3, r1, r3
 800ebea:	4413      	add	r3, r2
 800ebec:	3355      	adds	r3, #85	; 0x55
 800ebee:	78ba      	ldrb	r2, [r7, #2]
 800ebf0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7f6 fba7 	bl	800535c <HAL_Delay>
}
 800ec0e:	bf00      	nop
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
	...

0800ec18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	4603      	mov	r3, r0
 800ec20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	2b03      	cmp	r3, #3
 800ec2a:	d817      	bhi.n	800ec5c <USBH_Get_USB_Status+0x44>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <USBH_Get_USB_Status+0x1c>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ec45 	.word	0x0800ec45
 800ec38:	0800ec4b 	.word	0x0800ec4b
 800ec3c:	0800ec51 	.word	0x0800ec51
 800ec40:	0800ec57 	.word	0x0800ec57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	73fb      	strb	r3, [r7, #15]
    break;
 800ec48:	e00b      	b.n	800ec62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec4e:	e008      	b.n	800ec62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ec50:	2301      	movs	r3, #1
 800ec52:	73fb      	strb	r3, [r7, #15]
    break;
 800ec54:	e005      	b.n	800ec62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ec56:	2302      	movs	r3, #2
 800ec58:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5a:	e002      	b.n	800ec62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec60:	bf00      	nop
  }
  return usb_status;
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4603      	mov	r3, r0
 800ec78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d102      	bne.n	800ec8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ec84:	2301      	movs	r3, #1
 800ec86:	73fb      	strb	r3, [r7, #15]
 800ec88:	e001      	b.n	800ec8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	461a      	mov	r2, r3
 800ec92:	2101      	movs	r1, #1
 800ec94:	4803      	ldr	r0, [pc, #12]	; (800eca4 <MX_DriverVbusFS+0x34>)
 800ec96:	f7f6 fe4b 	bl	8005930 <HAL_GPIO_WritePin>
}
 800ec9a:	bf00      	nop
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	40020800 	.word	0x40020800

0800eca8 <__errno>:
 800eca8:	4b01      	ldr	r3, [pc, #4]	; (800ecb0 <__errno+0x8>)
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	20000174 	.word	0x20000174

0800ecb4 <__libc_init_array>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	4d0d      	ldr	r5, [pc, #52]	; (800ecec <__libc_init_array+0x38>)
 800ecb8:	4c0d      	ldr	r4, [pc, #52]	; (800ecf0 <__libc_init_array+0x3c>)
 800ecba:	1b64      	subs	r4, r4, r5
 800ecbc:	10a4      	asrs	r4, r4, #2
 800ecbe:	2600      	movs	r6, #0
 800ecc0:	42a6      	cmp	r6, r4
 800ecc2:	d109      	bne.n	800ecd8 <__libc_init_array+0x24>
 800ecc4:	4d0b      	ldr	r5, [pc, #44]	; (800ecf4 <__libc_init_array+0x40>)
 800ecc6:	4c0c      	ldr	r4, [pc, #48]	; (800ecf8 <__libc_init_array+0x44>)
 800ecc8:	f000 f91a 	bl	800ef00 <_init>
 800eccc:	1b64      	subs	r4, r4, r5
 800ecce:	10a4      	asrs	r4, r4, #2
 800ecd0:	2600      	movs	r6, #0
 800ecd2:	42a6      	cmp	r6, r4
 800ecd4:	d105      	bne.n	800ece2 <__libc_init_array+0x2e>
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecdc:	4798      	blx	r3
 800ecde:	3601      	adds	r6, #1
 800ece0:	e7ee      	b.n	800ecc0 <__libc_init_array+0xc>
 800ece2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ece6:	4798      	blx	r3
 800ece8:	3601      	adds	r6, #1
 800ecea:	e7f2      	b.n	800ecd2 <__libc_init_array+0x1e>
 800ecec:	0800f484 	.word	0x0800f484
 800ecf0:	0800f484 	.word	0x0800f484
 800ecf4:	0800f484 	.word	0x0800f484
 800ecf8:	0800f488 	.word	0x0800f488

0800ecfc <malloc>:
 800ecfc:	4b02      	ldr	r3, [pc, #8]	; (800ed08 <malloc+0xc>)
 800ecfe:	4601      	mov	r1, r0
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	f000 b871 	b.w	800ede8 <_malloc_r>
 800ed06:	bf00      	nop
 800ed08:	20000174 	.word	0x20000174

0800ed0c <free>:
 800ed0c:	4b02      	ldr	r3, [pc, #8]	; (800ed18 <free+0xc>)
 800ed0e:	4601      	mov	r1, r0
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	f000 b819 	b.w	800ed48 <_free_r>
 800ed16:	bf00      	nop
 800ed18:	20000174 	.word	0x20000174

0800ed1c <memcpy>:
 800ed1c:	440a      	add	r2, r1
 800ed1e:	4291      	cmp	r1, r2
 800ed20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ed24:	d100      	bne.n	800ed28 <memcpy+0xc>
 800ed26:	4770      	bx	lr
 800ed28:	b510      	push	{r4, lr}
 800ed2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed32:	4291      	cmp	r1, r2
 800ed34:	d1f9      	bne.n	800ed2a <memcpy+0xe>
 800ed36:	bd10      	pop	{r4, pc}

0800ed38 <memset>:
 800ed38:	4402      	add	r2, r0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d100      	bne.n	800ed42 <memset+0xa>
 800ed40:	4770      	bx	lr
 800ed42:	f803 1b01 	strb.w	r1, [r3], #1
 800ed46:	e7f9      	b.n	800ed3c <memset+0x4>

0800ed48 <_free_r>:
 800ed48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed4a:	2900      	cmp	r1, #0
 800ed4c:	d048      	beq.n	800ede0 <_free_r+0x98>
 800ed4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed52:	9001      	str	r0, [sp, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f1a1 0404 	sub.w	r4, r1, #4
 800ed5a:	bfb8      	it	lt
 800ed5c:	18e4      	addlt	r4, r4, r3
 800ed5e:	f000 f8c1 	bl	800eee4 <__malloc_lock>
 800ed62:	4a20      	ldr	r2, [pc, #128]	; (800ede4 <_free_r+0x9c>)
 800ed64:	9801      	ldr	r0, [sp, #4]
 800ed66:	6813      	ldr	r3, [r2, #0]
 800ed68:	4615      	mov	r5, r2
 800ed6a:	b933      	cbnz	r3, 800ed7a <_free_r+0x32>
 800ed6c:	6063      	str	r3, [r4, #4]
 800ed6e:	6014      	str	r4, [r2, #0]
 800ed70:	b003      	add	sp, #12
 800ed72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed76:	f000 b8bb 	b.w	800eef0 <__malloc_unlock>
 800ed7a:	42a3      	cmp	r3, r4
 800ed7c:	d90b      	bls.n	800ed96 <_free_r+0x4e>
 800ed7e:	6821      	ldr	r1, [r4, #0]
 800ed80:	1862      	adds	r2, r4, r1
 800ed82:	4293      	cmp	r3, r2
 800ed84:	bf04      	itt	eq
 800ed86:	681a      	ldreq	r2, [r3, #0]
 800ed88:	685b      	ldreq	r3, [r3, #4]
 800ed8a:	6063      	str	r3, [r4, #4]
 800ed8c:	bf04      	itt	eq
 800ed8e:	1852      	addeq	r2, r2, r1
 800ed90:	6022      	streq	r2, [r4, #0]
 800ed92:	602c      	str	r4, [r5, #0]
 800ed94:	e7ec      	b.n	800ed70 <_free_r+0x28>
 800ed96:	461a      	mov	r2, r3
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	b10b      	cbz	r3, 800eda0 <_free_r+0x58>
 800ed9c:	42a3      	cmp	r3, r4
 800ed9e:	d9fa      	bls.n	800ed96 <_free_r+0x4e>
 800eda0:	6811      	ldr	r1, [r2, #0]
 800eda2:	1855      	adds	r5, r2, r1
 800eda4:	42a5      	cmp	r5, r4
 800eda6:	d10b      	bne.n	800edc0 <_free_r+0x78>
 800eda8:	6824      	ldr	r4, [r4, #0]
 800edaa:	4421      	add	r1, r4
 800edac:	1854      	adds	r4, r2, r1
 800edae:	42a3      	cmp	r3, r4
 800edb0:	6011      	str	r1, [r2, #0]
 800edb2:	d1dd      	bne.n	800ed70 <_free_r+0x28>
 800edb4:	681c      	ldr	r4, [r3, #0]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	6053      	str	r3, [r2, #4]
 800edba:	4421      	add	r1, r4
 800edbc:	6011      	str	r1, [r2, #0]
 800edbe:	e7d7      	b.n	800ed70 <_free_r+0x28>
 800edc0:	d902      	bls.n	800edc8 <_free_r+0x80>
 800edc2:	230c      	movs	r3, #12
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	e7d3      	b.n	800ed70 <_free_r+0x28>
 800edc8:	6825      	ldr	r5, [r4, #0]
 800edca:	1961      	adds	r1, r4, r5
 800edcc:	428b      	cmp	r3, r1
 800edce:	bf04      	itt	eq
 800edd0:	6819      	ldreq	r1, [r3, #0]
 800edd2:	685b      	ldreq	r3, [r3, #4]
 800edd4:	6063      	str	r3, [r4, #4]
 800edd6:	bf04      	itt	eq
 800edd8:	1949      	addeq	r1, r1, r5
 800edda:	6021      	streq	r1, [r4, #0]
 800eddc:	6054      	str	r4, [r2, #4]
 800edde:	e7c7      	b.n	800ed70 <_free_r+0x28>
 800ede0:	b003      	add	sp, #12
 800ede2:	bd30      	pop	{r4, r5, pc}
 800ede4:	20000204 	.word	0x20000204

0800ede8 <_malloc_r>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	1ccd      	adds	r5, r1, #3
 800edec:	f025 0503 	bic.w	r5, r5, #3
 800edf0:	3508      	adds	r5, #8
 800edf2:	2d0c      	cmp	r5, #12
 800edf4:	bf38      	it	cc
 800edf6:	250c      	movcc	r5, #12
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	4606      	mov	r6, r0
 800edfc:	db01      	blt.n	800ee02 <_malloc_r+0x1a>
 800edfe:	42a9      	cmp	r1, r5
 800ee00:	d903      	bls.n	800ee0a <_malloc_r+0x22>
 800ee02:	230c      	movs	r3, #12
 800ee04:	6033      	str	r3, [r6, #0]
 800ee06:	2000      	movs	r0, #0
 800ee08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee0a:	f000 f86b 	bl	800eee4 <__malloc_lock>
 800ee0e:	4921      	ldr	r1, [pc, #132]	; (800ee94 <_malloc_r+0xac>)
 800ee10:	680a      	ldr	r2, [r1, #0]
 800ee12:	4614      	mov	r4, r2
 800ee14:	b99c      	cbnz	r4, 800ee3e <_malloc_r+0x56>
 800ee16:	4f20      	ldr	r7, [pc, #128]	; (800ee98 <_malloc_r+0xb0>)
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	b923      	cbnz	r3, 800ee26 <_malloc_r+0x3e>
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f000 f83c 	bl	800ee9c <_sbrk_r>
 800ee24:	6038      	str	r0, [r7, #0]
 800ee26:	4629      	mov	r1, r5
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f000 f837 	bl	800ee9c <_sbrk_r>
 800ee2e:	1c43      	adds	r3, r0, #1
 800ee30:	d123      	bne.n	800ee7a <_malloc_r+0x92>
 800ee32:	230c      	movs	r3, #12
 800ee34:	6033      	str	r3, [r6, #0]
 800ee36:	4630      	mov	r0, r6
 800ee38:	f000 f85a 	bl	800eef0 <__malloc_unlock>
 800ee3c:	e7e3      	b.n	800ee06 <_malloc_r+0x1e>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	1b5b      	subs	r3, r3, r5
 800ee42:	d417      	bmi.n	800ee74 <_malloc_r+0x8c>
 800ee44:	2b0b      	cmp	r3, #11
 800ee46:	d903      	bls.n	800ee50 <_malloc_r+0x68>
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	441c      	add	r4, r3
 800ee4c:	6025      	str	r5, [r4, #0]
 800ee4e:	e004      	b.n	800ee5a <_malloc_r+0x72>
 800ee50:	6863      	ldr	r3, [r4, #4]
 800ee52:	42a2      	cmp	r2, r4
 800ee54:	bf0c      	ite	eq
 800ee56:	600b      	streq	r3, [r1, #0]
 800ee58:	6053      	strne	r3, [r2, #4]
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f000 f848 	bl	800eef0 <__malloc_unlock>
 800ee60:	f104 000b 	add.w	r0, r4, #11
 800ee64:	1d23      	adds	r3, r4, #4
 800ee66:	f020 0007 	bic.w	r0, r0, #7
 800ee6a:	1ac2      	subs	r2, r0, r3
 800ee6c:	d0cc      	beq.n	800ee08 <_malloc_r+0x20>
 800ee6e:	1a1b      	subs	r3, r3, r0
 800ee70:	50a3      	str	r3, [r4, r2]
 800ee72:	e7c9      	b.n	800ee08 <_malloc_r+0x20>
 800ee74:	4622      	mov	r2, r4
 800ee76:	6864      	ldr	r4, [r4, #4]
 800ee78:	e7cc      	b.n	800ee14 <_malloc_r+0x2c>
 800ee7a:	1cc4      	adds	r4, r0, #3
 800ee7c:	f024 0403 	bic.w	r4, r4, #3
 800ee80:	42a0      	cmp	r0, r4
 800ee82:	d0e3      	beq.n	800ee4c <_malloc_r+0x64>
 800ee84:	1a21      	subs	r1, r4, r0
 800ee86:	4630      	mov	r0, r6
 800ee88:	f000 f808 	bl	800ee9c <_sbrk_r>
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	d1dd      	bne.n	800ee4c <_malloc_r+0x64>
 800ee90:	e7cf      	b.n	800ee32 <_malloc_r+0x4a>
 800ee92:	bf00      	nop
 800ee94:	20000204 	.word	0x20000204
 800ee98:	20000208 	.word	0x20000208

0800ee9c <_sbrk_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d06      	ldr	r5, [pc, #24]	; (800eeb8 <_sbrk_r+0x1c>)
 800eea0:	2300      	movs	r3, #0
 800eea2:	4604      	mov	r4, r0
 800eea4:	4608      	mov	r0, r1
 800eea6:	602b      	str	r3, [r5, #0]
 800eea8:	f7f3 f95a 	bl	8002160 <_sbrk>
 800eeac:	1c43      	adds	r3, r0, #1
 800eeae:	d102      	bne.n	800eeb6 <_sbrk_r+0x1a>
 800eeb0:	682b      	ldr	r3, [r5, #0]
 800eeb2:	b103      	cbz	r3, 800eeb6 <_sbrk_r+0x1a>
 800eeb4:	6023      	str	r3, [r4, #0]
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	20000c30 	.word	0x20000c30

0800eebc <strncat>:
 800eebc:	b530      	push	{r4, r5, lr}
 800eebe:	4604      	mov	r4, r0
 800eec0:	7825      	ldrb	r5, [r4, #0]
 800eec2:	4623      	mov	r3, r4
 800eec4:	3401      	adds	r4, #1
 800eec6:	2d00      	cmp	r5, #0
 800eec8:	d1fa      	bne.n	800eec0 <strncat+0x4>
 800eeca:	3a01      	subs	r2, #1
 800eecc:	d304      	bcc.n	800eed8 <strncat+0x1c>
 800eece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eed2:	f803 4b01 	strb.w	r4, [r3], #1
 800eed6:	b904      	cbnz	r4, 800eeda <strncat+0x1e>
 800eed8:	bd30      	pop	{r4, r5, pc}
 800eeda:	2a00      	cmp	r2, #0
 800eedc:	d1f5      	bne.n	800eeca <strncat+0xe>
 800eede:	701a      	strb	r2, [r3, #0]
 800eee0:	e7f3      	b.n	800eeca <strncat+0xe>
	...

0800eee4 <__malloc_lock>:
 800eee4:	4801      	ldr	r0, [pc, #4]	; (800eeec <__malloc_lock+0x8>)
 800eee6:	f000 b809 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800eeea:	bf00      	nop
 800eeec:	20000c38 	.word	0x20000c38

0800eef0 <__malloc_unlock>:
 800eef0:	4801      	ldr	r0, [pc, #4]	; (800eef8 <__malloc_unlock+0x8>)
 800eef2:	f000 b804 	b.w	800eefe <__retarget_lock_release_recursive>
 800eef6:	bf00      	nop
 800eef8:	20000c38 	.word	0x20000c38

0800eefc <__retarget_lock_acquire_recursive>:
 800eefc:	4770      	bx	lr

0800eefe <__retarget_lock_release_recursive>:
 800eefe:	4770      	bx	lr

0800ef00 <_init>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	bf00      	nop
 800ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef06:	bc08      	pop	{r3}
 800ef08:	469e      	mov	lr, r3
 800ef0a:	4770      	bx	lr

0800ef0c <_fini>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	bf00      	nop
 800ef10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef12:	bc08      	pop	{r3}
 800ef14:	469e      	mov	lr, r3
 800ef16:	4770      	bx	lr
