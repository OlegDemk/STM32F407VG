
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008448  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ec  080085ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f4  080085f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080085fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  0800868c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800868c  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f14c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f91  00000000  00000000  0003f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  000431a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248fd  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e975  00000000  00000000  0006a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3601  00000000  00000000  00088f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c573  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006134  00000000  00000000  0015c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085b8 	.word	0x080085b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080085b8 	.word	0x080085b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc95 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f819 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f987 	bl	80007e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8a3 	bl	800061c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8cf 	bl	8000678 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8fd 	bl	80006d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 fc59 	bl	8007d94 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e2:	f000 f92f 	bl	8000744 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e6:	f000 f88d 	bl	8000604 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim2);				// Generate interrupt handler
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x3c>)
 80004ec:	f004 f9ba 	bl	8004864 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int delay = 10;
 80004f0:	230a      	movs	r3, #10
 80004f2:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f007 fc74 	bl	8007de0 <MX_USB_HOST_Process>
 80004f8:	e7fc      	b.n	80004f4 <main+0x34>
 80004fa:	bf00      	nop
 80004fc:	20000168 	.word	0x20000168

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b098      	sub	sp, #96	; 0x60
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 ff82 	bl	8008418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <SystemClock_Config+0xfc>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a30      	ldr	r2, [pc, #192]	; (80005fc <SystemClock_Config+0xfc>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <SystemClock_Config+0xfc>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0x100>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SystemClock_Config+0x100>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0x100>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000582:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	4618      	mov	r0, r3
 8000596:	f003 faed 	bl	8003b74 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005a0:	f000 fa1c 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fd4e 	bl	8004064 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ce:	f000 fa05 	bl	80009dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005d6:	23c0      	movs	r3, #192	; 0xc0
 80005d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ff26 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005ee:	f000 f9f5 	bl	80009dc <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3760      	adds	r7, #96	; 0x60
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	201c      	movs	r0, #28
 800060e:	f000 fd62 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000612:	201c      	movs	r0, #28
 8000614:	f000 fd7b 	bl	800110e <HAL_NVIC_EnableIRQ>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f002 fca7 	bl	8002fac <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f9ba 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000bc 	.word	0x200000bc
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f002 fdbc 	bl	8003234 <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f98b 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001b0 	.word	0x200001b0
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f003 ffc3 	bl	80046b4 <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f952 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000110 	.word	0x20000110
 8000740:	40013000 	.word	0x40013000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_TIM2_Init+0x98>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_TIM2_Init+0x98>)
 800076a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800076e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM2_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_TIM2_Init+0x98>)
 8000778:	f242 7210 	movw	r2, #10000	; 0x2710
 800077c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_TIM2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM2_Init+0x98>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_TIM2_Init+0x98>)
 800078c:	f004 f81b 	bl	80047c6 <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000796:	f000 f921 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM2_Init+0x98>)
 80007a8:	f004 f9d4 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007b2:	f000 f913 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007b6:	2310      	movs	r3, #16
 80007b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_TIM2_Init+0x98>)
 80007c4:	f004 fbf6 	bl	8004fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 f905 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000168 	.word	0x20000168

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a70      	ldr	r2, [pc, #448]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	4b6a      	ldr	r3, [pc, #424]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a69      	ldr	r2, [pc, #420]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b63      	ldr	r3, [pc, #396]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a62      	ldr	r2, [pc, #392]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b60      	ldr	r3, [pc, #384]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a5b      	ldr	r2, [pc, #364]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b59      	ldr	r3, [pc, #356]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a54      	ldr	r2, [pc, #336]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b52      	ldr	r3, [pc, #328]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a4d      	ldr	r2, [pc, #308]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4848      	ldr	r0, [pc, #288]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 80008a4:	f000 fdea 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4846      	ldr	r0, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 80008ae:	f000 fde5 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b8:	4844      	ldr	r0, [pc, #272]	; (80009cc <MX_GPIO_Init+0x1ec>)
 80008ba:	f000 fddf 	bl	800147c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483b      	ldr	r0, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 80008d6:	f000 fc35 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4835      	ldr	r0, [pc, #212]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 80008f2:	f000 fc27 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482d      	ldr	r0, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 8000912:	f000 fc17 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_GPIO_Init+0x1f0>)
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	482a      	ldr	r0, [pc, #168]	; (80009d4 <MX_GPIO_Init+0x1f4>)
 800092a:	f000 fc0b 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092e:	2304      	movs	r3, #4
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x1f8>)
 8000942:	f000 fbff 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000958:	2305      	movs	r3, #5
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <MX_GPIO_Init+0x1f8>)
 8000964:	f000 fbee 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000968:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0x1ec>)
 8000982:	f000 fbdf 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_GPIO_Init+0x1ec>)
 800099a:	f000 fbd3 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x1f0>)
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 80009b2:	f000 fbc7 	bl	8001144 <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	10120000 	.word	0x10120000
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 fb4a 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2005      	movs	r0, #5
 8000a32:	f000 fb50 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a36:	2005      	movs	r0, #5
 8000a38:	f000 fb69 	bl	800110e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa4:	f000 fb4e 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <HAL_I2S_MspInit+0xc0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d14a      	bne.n	8000b90 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_I2S_MspInit+0xc4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <HAL_I2S_MspInit+0xc8>)
 8000b6a:	f000 faeb 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b80:	2306      	movs	r3, #6
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <HAL_I2S_MspInit+0xcc>)
 8000b8c:	f000 fada 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40003c00 	.word	0x40003c00
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_SPI_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c02:	23e0      	movs	r3, #224	; 0xe0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000c1e:	f000 fa91 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f8e8 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <TIM2_IRQHandler+0x18>)
 8000ce6:	f000 fbe2 	bl	80014ae <HAL_GPIO_TogglePin>
 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <TIM2_IRQHandler+0x1c>)
 8000cec:	f003 fe2a 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	20000168 	.word	0x20000168

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f000 fe59 	bl	80019b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200005d4 	.word	0x200005d4

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f007 fb30 	bl	80083a4 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	200008e8 	.word	0x200008e8

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f007 faef 	bl	80083b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fb75 	bl	80004c0 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000de4:	080085fc 	.word	0x080085fc
  ldr r2, =_sbss
 8000de8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dec:	200008e8 	.word	0x200008e8

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fdde 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001f8 	.word	0x200001f8

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001f8 	.word	0x200001f8

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e16b      	b.n	8001438 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 815a 	bne.w	8001432 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80b4 	beq.w	8001432 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <HAL_GPIO_Init+0x310>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x314>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x318>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x31c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x320>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x21a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x324>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x216>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_GPIO_Init+0x328>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x212>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x20a>
 800134a:	2307      	movs	r3, #7
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x228>
 800134e:	2308      	movs	r3, #8
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x228>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x310>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_GPIO_Init+0x334>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x334>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_GPIO_Init+0x334>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae90 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c0:	887a      	ldrh	r2, [r7, #2]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	400b      	ands	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e4:	b08f      	sub	sp, #60	; 0x3c
 80014e6:	af0a      	add	r7, sp, #40	; 0x28
 80014e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e054      	b.n	800159e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f006 fc9e 	bl	8007e50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fe40 	bl	80051b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	687e      	ldr	r6, [r7, #4]
 8001540:	466d      	mov	r5, sp
 8001542:	f106 0410 	add.w	r4, r6, #16
 8001546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001552:	e885 0003 	stmia.w	r5, {r0, r1}
 8001556:	1d33      	adds	r3, r6, #4
 8001558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f003 fdba 	bl	80050d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fe37 	bl	80051da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	687e      	ldr	r6, [r7, #4]
 8001574:	466d      	mov	r5, sp
 8001576:	f106 0410 	add.w	r4, r6, #16
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001586:	e885 0003 	stmia.w	r5, {r0, r1}
 800158a:	1d33      	adds	r3, r6, #4
 800158c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f003 ff4a 	bl	8005428 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015a6:	b590      	push	{r4, r7, lr}
 80015a8:	b089      	sub	sp, #36	; 0x24
 80015aa:	af04      	add	r7, sp, #16
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	4608      	mov	r0, r1
 80015b0:	4611      	mov	r1, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70bb      	strb	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_HCD_HC_Init+0x28>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e076      	b.n	80016bc <HAL_HCD_HC_Init+0x116>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	333d      	adds	r3, #61	; 0x3d
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	212c      	movs	r1, #44	; 0x2c
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	3338      	adds	r3, #56	; 0x38
 80015f6:	787a      	ldrb	r2, [r7, #1]
 80015f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	212c      	movs	r1, #44	; 0x2c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	3340      	adds	r3, #64	; 0x40
 8001608:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	212c      	movs	r1, #44	; 0x2c
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	3339      	adds	r3, #57	; 0x39
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333f      	adds	r3, #63	; 0x3f
 800162c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001630:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	78ba      	ldrb	r2, [r7, #2]
 8001636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800163a:	b2d0      	uxtb	r0, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	212c      	movs	r1, #44	; 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	333a      	adds	r3, #58	; 0x3a
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800164c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da09      	bge.n	8001668 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	333b      	adds	r3, #59	; 0x3b
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e008      	b.n	800167a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	333b      	adds	r3, #59	; 0x3b
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	212c      	movs	r1, #44	; 0x2c
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	333c      	adds	r3, #60	; 0x3c
 8001688:	f897 2020 	ldrb.w	r2, [r7, #32]
 800168c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	787c      	ldrb	r4, [r7, #1]
 8001694:	78ba      	ldrb	r2, [r7, #2]
 8001696:	78f9      	ldrb	r1, [r7, #3]
 8001698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4623      	mov	r3, r4
 80016aa:	f004 f83f 	bl	800572c <USB_HC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_HCD_HC_Halt+0x1e>
 80016de:	2302      	movs	r3, #2
 80016e0:	e00f      	b.n	8001702 <HAL_HCD_HC_Halt+0x3e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 fa7b 	bl	8005bee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	460b      	mov	r3, r1
 8001720:	70bb      	strb	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	333b      	adds	r3, #59	; 0x3b
 8001734:	78ba      	ldrb	r2, [r7, #2]
 8001736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	333f      	adds	r3, #63	; 0x3f
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800174a:	7c3b      	ldrb	r3, [r7, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d112      	bne.n	8001776 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3342      	adds	r3, #66	; 0x42
 800175e:	2203      	movs	r2, #3
 8001760:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	333d      	adds	r3, #61	; 0x3d
 8001770:	7f3a      	ldrb	r2, [r7, #28]
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e008      	b.n	8001788 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3342      	adds	r3, #66	; 0x42
 8001784:	2202      	movs	r2, #2
 8001786:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b03      	cmp	r3, #3
 800178c:	f200 80c6 	bhi.w	800191c <HAL_HCD_HC_SubmitRequest+0x210>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017a9 	.word	0x080017a9
 800179c:	08001909 	.word	0x08001909
 80017a0:	0800180d 	.word	0x0800180d
 80017a4:	0800188b 	.word	0x0800188b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017a8:	7c3b      	ldrb	r3, [r7, #16]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	f040 80b8 	bne.w	8001920 <HAL_HCD_HC_SubmitRequest+0x214>
 80017b0:	78bb      	ldrb	r3, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80b4 	bne.w	8001920 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017b8:	8b3b      	ldrh	r3, [r7, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d108      	bne.n	80017d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3355      	adds	r3, #85	; 0x55
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3355      	adds	r3, #85	; 0x55
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017f6:	e093      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	3342      	adds	r3, #66	; 0x42
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
      break;
 800180a:	e089      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11d      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3355      	adds	r3, #85	; 0x55
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	212c      	movs	r1, #44	; 0x2c
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	3342      	adds	r3, #66	; 0x42
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001838:	e073      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3342      	adds	r3, #66	; 0x42
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
      break;
 800184c:	e069      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	3354      	adds	r3, #84	; 0x54
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e055      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3342      	adds	r3, #66	; 0x42
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e04b      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11d      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3355      	adds	r3, #85	; 0x55
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3342      	adds	r3, #66	; 0x42
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018b6:	e034      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3342      	adds	r3, #66	; 0x42
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
      break;
 80018ca:	e02a      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3354      	adds	r3, #84	; 0x54
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e016      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
      break;
 8001906:	e00c      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3342      	adds	r3, #66	; 0x42
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
      break;
 800191a:	e002      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001920:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3344      	adds	r3, #68	; 0x44
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	8b3a      	ldrh	r2, [r7, #24]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	202c      	movs	r0, #44	; 0x2c
 800193c:	fb00 f303 	mul.w	r3, r0, r3
 8001940:	440b      	add	r3, r1
 8001942:	334c      	adds	r3, #76	; 0x4c
 8001944:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3360      	adds	r3, #96	; 0x60
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3350      	adds	r3, #80	; 0x50
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3339      	adds	r3, #57	; 0x39
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3361      	adds	r3, #97	; 0x61
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	222c      	movs	r2, #44	; 0x2c
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	3338      	adds	r3, #56	; 0x38
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	18d1      	adds	r1, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	f003 ffce 	bl	8005948 <USB_HC_StartXfer>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop

080019b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fce7 	bl	80053a2 <USB_GetMode>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f040 80ef 	bne.w	8001bba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fccb 	bl	800537c <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80e5 	beq.w	8001bb8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fcc2 	bl	800537c <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a02:	d104      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fcb2 	bl	800537c <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a22:	d104      	bne.n	8001a2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fca2 	bl	800537c <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a42:	d104      	bne.n	8001a4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fc92 	bl	800537c <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d103      	bne.n	8001a6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fc84 	bl	800537c <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a7e:	d115      	bne.n	8001aac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d108      	bne.n	8001aac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f006 fa56 	bl	8007f4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fd7a 	bl	80055a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fc63 	bl	800537c <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d102      	bne.n	8001ac8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 f9ff 	bl	8002ec6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fc55 	bl	800537c <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d106      	bne.n	8001aea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f006 fa19 	bl	8007f14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fc44 	bl	800537c <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d101      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x14a>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_HCD_IRQHandler+0x14c>
 8001b02:	2300      	movs	r3, #0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d012      	beq.n	8001b2e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0210 	bic.w	r2, r2, #16
 8001b16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f001 f902 	bl	8002d22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0210 	orr.w	r2, r2, #16
 8001b2c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fc22 	bl	800537c <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b42:	d13a      	bne.n	8001bba <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 f83f 	bl	8005bcc <USB_HC_ReadInterrupt>
 8001b4e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e025      	b.n	8001ba2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d018      	beq.n	8001b9c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b80:	d106      	bne.n	8001b90 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8ab 	bl	8001ce4 <HCD_HC_IN_IRQHandler>
 8001b8e:	e005      	b.n	8001b9c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fcc6 	bl	8002528 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3d4      	bcc.n	8001b56 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	e000      	b.n	8001bba <HAL_HCD_IRQHandler+0x202>
      return;
 8001bb8:	bf00      	nop
    }
  }
}
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_HCD_Start+0x16>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e013      	b.n	8001bfe <HAL_HCD_Start+0x3e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fad7 	bl	8005196 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fd3a 	bl	8005668 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_HCD_Stop+0x16>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e00d      	b.n	8001c38 <HAL_HCD_Stop+0x32>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 f939 	bl	8005ea0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fce1 	bl	8005614 <USB_ResetPort>
 8001c52:	4603      	mov	r3, r0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3360      	adds	r3, #96	; 0x60
 8001c76:	781b      	ldrb	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3350      	adds	r3, #80	; 0x50
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fd25 	bl	8005708 <USB_GetCurrentFrame>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fd00 	bl	80056da <USB_GetHostSpeed>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d119      	bne.n	8001d48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d20:	461a      	mov	r2, r3
 8001d22:	2304      	movs	r3, #4
 8001d24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	0151      	lsls	r1, r2, #5
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	440a      	add	r2, r1
 8001d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	60d3      	str	r3, [r2, #12]
 8001d46:	e101      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5e:	d12b      	bne.n	8001db8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3361      	adds	r3, #97	; 0x61
 8001d82:	2207      	movs	r2, #7
 8001d84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 ff1c 	bl	8005bee <USB_HC_Halt>
 8001db6:	e0c9      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d109      	bne.n	8001de2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2320      	movs	r3, #32
 8001dde:	6093      	str	r3, [r2, #8]
 8001de0:	e0b4      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d133      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	0151      	lsls	r1, r2, #5
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	440a      	add	r2, r1
 8001e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3361      	adds	r3, #97	; 0x61
 8001e26:	2205      	movs	r2, #5
 8001e28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	461a      	mov	r2, r3
 8001e38:	2310      	movs	r3, #16
 8001e3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fec8 	bl	8005bee <USB_HC_Halt>
 8001e5e:	e075      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e76:	d134      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	0151      	lsls	r1, r2, #5
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3361      	adds	r3, #97	; 0x61
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2310      	movs	r3, #16
 8001eba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fe87 	bl	8005bee <USB_HC_Halt>
 8001ee0:	e034      	b.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d129      	bne.n	8001f4c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	0151      	lsls	r1, r2, #5
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3361      	adds	r3, #97	; 0x61
 8001f26:	2206      	movs	r2, #6
 8001f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fe5a 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	461a      	mov	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f62:	d122      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	0151      	lsls	r1, r2, #5
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	440a      	add	r2, r1
 8001f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fe2d 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fa8:	e2ba      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 811b 	bne.w	80021f8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0159      	lsls	r1, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fec:	1ad2      	subs	r2, r2, r3
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	202c      	movs	r0, #44	; 0x2c
 8001ff4:	fb00 f303 	mul.w	r3, r0, r3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3350      	adds	r3, #80	; 0x50
 8001ffc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	335c      	adds	r3, #92	; 0x5c
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	461a      	mov	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	333f      	adds	r3, #63	; 0x3f
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	333f      	adds	r3, #63	; 0x3f
 8002056:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002058:	2b02      	cmp	r3, #2
 800205a:	d121      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	0151      	lsls	r1, r2, #5
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	440a      	add	r2, r1
 8002072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fdb1 	bl	8005bee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	461a      	mov	r2, r3
 800209a:	2310      	movs	r3, #16
 800209c:	6093      	str	r3, [r2, #8]
 800209e:	e066      	b.n	800216e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d127      	bne.n	8002104 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	0151      	lsls	r1, r2, #5
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	440a      	add	r2, r1
 80020ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3360      	adds	r3, #96	; 0x60
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	b2d9      	uxtb	r1, r3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	202c      	movs	r0, #44	; 0x2c
 80020f0:	fb00 f303 	mul.w	r3, r0, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3360      	adds	r3, #96	; 0x60
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f005 ff33 	bl	8007f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002102:	e034      	b.n	800216e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	333f      	adds	r3, #63	; 0x3f
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d12a      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3360      	adds	r3, #96	; 0x60
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3354      	adds	r3, #84	; 0x54
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2d8      	uxtb	r0, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3354      	adds	r3, #84	; 0x54
 800214e:	4602      	mov	r2, r0
 8002150:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	202c      	movs	r0, #44	; 0x2c
 800215c:	fb00 f303 	mul.w	r3, r0, r3
 8002160:	4413      	add	r3, r2
 8002162:	3360      	adds	r3, #96	; 0x60
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f005 fefd 	bl	8007f68 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d12b      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3348      	adds	r3, #72	; 0x48
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	202c      	movs	r0, #44	; 0x2c
 800218c:	fb00 f202 	mul.w	r2, r0, r2
 8002190:	440a      	add	r2, r1
 8002192:	3240      	adds	r2, #64	; 0x40
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	fbb3 f3f2 	udiv	r3, r3, r2
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 81be 	beq.w	8002520 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3354      	adds	r3, #84	; 0x54
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2d8      	uxtb	r0, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3354      	adds	r3, #84	; 0x54
 80021c8:	4602      	mov	r2, r0
 80021ca:	701a      	strb	r2, [r3, #0]
}
 80021cc:	e1a8      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3354      	adds	r3, #84	; 0x54
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2d8      	uxtb	r0, r3
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3354      	adds	r3, #84	; 0x54
 80021f2:	4602      	mov	r2, r0
 80021f4:	701a      	strb	r2, [r3, #0]
}
 80021f6:	e193      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	f040 8106 	bne.w	800241c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	0151      	lsls	r1, r2, #5
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	440a      	add	r2, r1
 8002226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222a:	f023 0302 	bic.w	r3, r3, #2
 800222e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d109      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3360      	adds	r3, #96	; 0x60
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e0c9      	b.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3361      	adds	r3, #97	; 0x61
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d109      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	2205      	movs	r2, #5
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e0b5      	b.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3361      	adds	r3, #97	; 0x61
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d009      	beq.n	80022a8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d150      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	335c      	adds	r3, #92	; 0x5c
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	202c      	movs	r0, #44	; 0x2c
 80022c0:	fb00 f303 	mul.w	r3, r0, r3
 80022c4:	440b      	add	r3, r1
 80022c6:	335c      	adds	r3, #92	; 0x5c
 80022c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	335c      	adds	r3, #92	; 0x5c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d912      	bls.n	8002304 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3360      	adds	r3, #96	; 0x60
 80022fe:	2204      	movs	r2, #4
 8002300:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002302:	e073      	b.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800232c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002334:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002348:	e050      	b.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3361      	adds	r3, #97	; 0x61
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d122      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3360      	adds	r3, #96	; 0x60
 800236c:	2202      	movs	r2, #2
 800236e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002386:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e023      	b.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3361      	adds	r3, #97	; 0x61
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	d119      	bne.n	80023ec <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	335c      	adds	r3, #92	; 0x5c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	202c      	movs	r0, #44	; 0x2c
 80023d0:	fb00 f303 	mul.w	r3, r0, r3
 80023d4:	440b      	add	r3, r1
 80023d6:	335c      	adds	r3, #92	; 0x5c
 80023d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3360      	adds	r3, #96	; 0x60
 80023e8:	2204      	movs	r2, #4
 80023ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2302      	movs	r3, #2
 80023fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	4413      	add	r3, r2
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f005 fda7 	bl	8007f68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800241a:	e081      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b10      	cmp	r3, #16
 8002430:	d176      	bne.n	8002520 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333f      	adds	r3, #63	; 0x3f
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d121      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	0151      	lsls	r1, r2, #5
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	440a      	add	r2, r1
 800246e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fbb3 	bl	8005bee <USB_HC_Halt>
 8002488:	e041      	b.n	800250e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	333f      	adds	r3, #63	; 0x3f
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	333f      	adds	r3, #63	; 0x3f
 80024ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d12d      	bne.n	800250e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	335c      	adds	r3, #92	; 0x5c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d120      	bne.n	800250e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3361      	adds	r3, #97	; 0x61
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fb70 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2310      	movs	r3, #16
 800251e:	6093      	str	r3, [r2, #8]
}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d119      	bne.n	800258c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2304      	movs	r3, #4
 8002568:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800258a:	e3c6      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d13e      	bne.n	8002620 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2320      	movs	r3, #32
 80025b2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	333d      	adds	r3, #61	; 0x3d
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 83a8 	bne.w	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	333d      	adds	r3, #61	; 0x3d
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3360      	adds	r3, #96	; 0x60
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	0151      	lsls	r1, r2, #5
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	440a      	add	r2, r1
 8002604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fae8 	bl	8005bee <USB_HC_Halt>
}
 800261e:	e37c      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002636:	d122      	bne.n	800267e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	0151      	lsls	r1, r2, #5
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	440a      	add	r2, r1
 800264e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fac3 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267a:	6093      	str	r3, [r2, #8]
}
 800267c:	e34d      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d150      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	335c      	adds	r3, #92	; 0x5c
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d111      	bne.n	80026e0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	2340      	movs	r3, #64	; 0x40
 80026de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	0151      	lsls	r1, r2, #5
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	440a      	add	r2, r1
 80026f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fa6f 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2301      	movs	r3, #1
 8002720:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
}
 8002734:	e2f1      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d13c      	bne.n	80027c6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	2204      	movs	r2, #4
 800275c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	333d      	adds	r3, #61	; 0x3d
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	0151      	lsls	r1, r2, #5
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	440a      	add	r2, r1
 8002798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fa1e 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	461a      	mov	r2, r3
 80027c0:	2340      	movs	r3, #64	; 0x40
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	e2a9      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d12a      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2308      	movs	r3, #8
 80027ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	440a      	add	r2, r1
 8002804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f003 f9e8 	bl	8005bee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3361      	adds	r3, #97	; 0x61
 800282c:	2205      	movs	r2, #5
 800282e:	701a      	strb	r2, [r3, #0]
}
 8002830:	e273      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	d150      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	335c      	adds	r3, #92	; 0x5c
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3361      	adds	r3, #97	; 0x61
 8002868:	2203      	movs	r2, #3
 800286a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	333d      	adds	r3, #61	; 0x3d
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d112      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	333c      	adds	r3, #60	; 0x3c
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d108      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	333d      	adds	r3, #61	; 0x3d
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	0151      	lsls	r1, r2, #5
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	440a      	add	r2, r1
 80028bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 f98c 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	2310      	movs	r3, #16
 80028e6:	6093      	str	r3, [r2, #8]
}
 80028e8:	e217      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d174      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d121      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	2206      	movs	r2, #6
 8002918:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	0151      	lsls	r1, r2, #5
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	440a      	add	r2, r1
 8002930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f003 f952 	bl	8005bee <USB_HC_Halt>
 800294a:	e044      	b.n	80029d6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	335c      	adds	r3, #92	; 0x5c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	202c      	movs	r0, #44	; 0x2c
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	440b      	add	r3, r1
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d920      	bls.n	80029c4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3360      	adds	r3, #96	; 0x60
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	b2d9      	uxtb	r1, r3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	202c      	movs	r0, #44	; 0x2c
 80029b0:	fb00 f303 	mul.w	r3, r0, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3360      	adds	r3, #96	; 0x60
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f005 fad3 	bl	8007f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029c2:	e008      	b.n	80029d6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	2202      	movs	r2, #2
 80029d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	461a      	mov	r2, r3
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	6093      	str	r3, [r2, #8]
}
 80029e8:	e197      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d134      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	0151      	lsls	r1, r2, #5
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	440a      	add	r2, r1
 8002a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 f8de 	bl	8005bee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2310      	movs	r3, #16
 8002a42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	2208      	movs	r2, #8
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	e156      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	f040 814b 	bne.w	8002d1a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d179      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333f      	adds	r3, #63	; 0x3f
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d00a      	beq.n	8002af4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333f      	adds	r3, #63	; 0x3f
 8002aec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	f040 80fc 	bne.w	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d142      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	334c      	adds	r3, #76	; 0x4c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80ed 	beq.w	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	202c      	movs	r0, #44	; 0x2c
 8002b28:	fb00 f202 	mul.w	r2, r0, r2
 8002b2c:	440a      	add	r2, r1
 8002b2e:	3240      	adds	r2, #64	; 0x40
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	3b01      	subs	r3, #1
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	202c      	movs	r0, #44	; 0x2c
 8002b3c:	fb00 f202 	mul.w	r2, r0, r2
 8002b40:	440a      	add	r2, r1
 8002b42:	3240      	adds	r2, #64	; 0x40
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80ca 	beq.w	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3355      	adds	r3, #85	; 0x55
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	f083 0301 	eor.w	r3, r3, #1
 8002b6c:	b2d8      	uxtb	r0, r3
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3355      	adds	r3, #85	; 0x55
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e0b4      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3355      	adds	r3, #85	; 0x55
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3355      	adds	r3, #85	; 0x55
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e09f      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d109      	bne.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3360      	adds	r3, #96	; 0x60
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e08b      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d109      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e077      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3361      	adds	r3, #97	; 0x61
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d109      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3360      	adds	r3, #96	; 0x60
 8002c1e:	2205      	movs	r2, #5
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e063      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3361      	adds	r3, #97	; 0x61
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d009      	beq.n	8002c4c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3361      	adds	r3, #97	; 0x61
 8002c46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d14f      	bne.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	335c      	adds	r3, #92	; 0x5c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d912      	bls.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	335c      	adds	r3, #92	; 0x5c
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e021      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3360      	adds	r3, #96	; 0x60
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cd8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	b2d9      	uxtb	r1, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	202c      	movs	r0, #44	; 0x2c
 8002d08:	fb00 f303 	mul.w	r3, r0, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3360      	adds	r3, #96	; 0x60
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f005 f927 	bl	8007f68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d1a:	bf00      	nop
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b08a      	sub	sp, #40	; 0x28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	0c5b      	lsrs	r3, r3, #17
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d004      	beq.n	8002d68 <HCD_RXQLVL_IRQHandler+0x46>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	f000 80a9 	beq.w	8002eb8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d66:	e0aa      	b.n	8002ebe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80a6 	beq.w	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3344      	adds	r3, #68	; 0x44
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 809b 	beq.w	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3350      	adds	r3, #80	; 0x50
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	441a      	add	r2, r3
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	440b      	add	r3, r1
 8002da6:	334c      	adds	r3, #76	; 0x4c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d87a      	bhi.n	8002ea4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3344      	adds	r3, #68	; 0x44
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f002 faaf 	bl	800532a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3344      	adds	r3, #68	; 0x44
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	441a      	add	r2, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	202c      	movs	r0, #44	; 0x2c
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	440b      	add	r3, r1
 8002dec:	3344      	adds	r3, #68	; 0x44
 8002dee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3350      	adds	r3, #80	; 0x50
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	441a      	add	r2, r3
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	202c      	movs	r0, #44	; 0x2c
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3350      	adds	r3, #80	; 0x50
 8002e12:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	0cdb      	lsrs	r3, r3, #19
 8002e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e28:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3340      	adds	r3, #64	; 0x40
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d13c      	bne.n	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d039      	beq.n	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e5e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3354      	adds	r3, #84	; 0x54
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2d8      	uxtb	r0, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3354      	adds	r3, #84	; 0x54
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	701a      	strb	r2, [r3, #0]
      break;
 8002ea2:	e00b      	b.n	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3360      	adds	r3, #96	; 0x60
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
      break;
 8002eb6:	e001      	b.n	8002ebc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ebc:	bf00      	nop
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ef2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d10b      	bne.n	8002f16 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f005 f811 	bl	8007f30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d132      	bne.n	8002f86 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d126      	bne.n	8002f80 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d113      	bne.n	8002f62 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f44:	d106      	bne.n	8002f54 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fb27 	bl	80055a0 <USB_InitFSLSPClkSel>
 8002f52:	e011      	b.n	8002f78 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fb20 	bl	80055a0 <USB_InitFSLSPClkSel>
 8002f60:	e00a      	b.n	8002f78 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d106      	bne.n	8002f78 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f70:	461a      	mov	r2, r3
 8002f72:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f76:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f005 f803 	bl	8007f84 <HAL_HCD_PortEnabled_Callback>
 8002f7e:	e002      	b.n	8002f86 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f005 f80d 	bl	8007fa0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d103      	bne.n	8002f98 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e12b      	b.n	8003216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fd38 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003010:	f001 f9fc 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8003014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a81      	ldr	r2, [pc, #516]	; (8003220 <HAL_I2C_Init+0x274>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d807      	bhi.n	8003030 <HAL_I2C_Init+0x84>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a80      	ldr	r2, [pc, #512]	; (8003224 <HAL_I2C_Init+0x278>)
 8003024:	4293      	cmp	r3, r2
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e006      	b.n	800303e <HAL_I2C_Init+0x92>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a7d      	ldr	r2, [pc, #500]	; (8003228 <HAL_I2C_Init+0x27c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	bf94      	ite	ls
 8003038:	2301      	movls	r3, #1
 800303a:	2300      	movhi	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0e7      	b.n	8003216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a78      	ldr	r2, [pc, #480]	; (800322c <HAL_I2C_Init+0x280>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9b      	lsrs	r3, r3, #18
 8003050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_I2C_Init+0x274>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d802      	bhi.n	8003080 <HAL_I2C_Init+0xd4>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3301      	adds	r3, #1
 800307e:	e009      	b.n	8003094 <HAL_I2C_Init+0xe8>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	4a69      	ldr	r2, [pc, #420]	; (8003230 <HAL_I2C_Init+0x284>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	3301      	adds	r3, #1
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	495c      	ldr	r1, [pc, #368]	; (8003220 <HAL_I2C_Init+0x274>)
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d819      	bhi.n	80030e8 <HAL_I2C_Init+0x13c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e59      	subs	r1, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c2:	1c59      	adds	r1, r3, #1
 80030c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c8:	400b      	ands	r3, r1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_I2C_Init+0x138>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e59      	subs	r1, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	e051      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e04f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_I2C_Init+0x168>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e012      	b.n	800313a <HAL_I2C_Init+0x18e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x196>
 800313e:	2301      	movs	r3, #1
 8003140:	e022      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <HAL_I2C_Init+0x1bc>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e58      	subs	r0, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	fbb0 f3f3 	udiv	r3, r0, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003166:	e00f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	6809      	ldr	r1, [r1, #0]
 800318c:	4313      	orrs	r3, r2
 800318e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6911      	ldr	r1, [r2, #16]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	000186a0 	.word	0x000186a0
 8003224:	001e847f 	.word	0x001e847f
 8003228:	003d08ff 	.word	0x003d08ff
 800322c:	431bde83 	.word	0x431bde83
 8003230:	10624dd3 	.word	0x10624dd3

08003234 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e128      	b.n	8003498 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a90      	ldr	r2, [pc, #576]	; (80034a0 <HAL_I2S_Init+0x26c>)
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7fd fc39 	bl	8000ad8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800327c:	f023 030f 	bic.w	r3, r3, #15
 8003280:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2202      	movs	r2, #2
 8003288:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d060      	beq.n	8003354 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800329a:	2310      	movs	r3, #16
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d802      	bhi.n	80032b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f001 f9a0 	bl	80045f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c2:	d125      	bne.n	8003310 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	3305      	adds	r3, #5
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e01f      	b.n	800332e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	3305      	adds	r3, #5
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e00e      	b.n	800332e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fbb2 f2f3 	udiv	r2, r2, r3
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	3305      	adds	r3, #5
 800332c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4a5c      	ldr	r2, [pc, #368]	; (80034a4 <HAL_I2S_Init+0x270>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e003      	b.n	800335c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003354:	2302      	movs	r3, #2
 8003356:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d902      	bls.n	8003368 <HAL_I2S_Init+0x134>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2bff      	cmp	r3, #255	; 0xff
 8003366:	d907      	bls.n	8003378 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e08f      	b.n	8003498 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	ea42 0103 	orr.w	r1, r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	430a      	orrs	r2, r1
 800338a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6851      	ldr	r1, [r2, #4]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6892      	ldr	r2, [r2, #8]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68d2      	ldr	r2, [r2, #12]
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6992      	ldr	r2, [r2, #24]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d161      	bne.n	8003488 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <HAL_I2S_Init+0x274>)
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a37      	ldr	r2, [pc, #220]	; (80034ac <HAL_I2S_Init+0x278>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_I2S_Init+0x1a4>
 80033d4:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_I2S_Init+0x27c>)
 80033d6:	e001      	b.n	80033dc <HAL_I2S_Init+0x1a8>
 80033d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	4932      	ldr	r1, [pc, #200]	; (80034ac <HAL_I2S_Init+0x278>)
 80033e4:	428a      	cmp	r2, r1
 80033e6:	d101      	bne.n	80033ec <HAL_I2S_Init+0x1b8>
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <HAL_I2S_Init+0x27c>)
 80033ea:	e001      	b.n	80033f0 <HAL_I2S_Init+0x1bc>
 80033ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f4:	f023 030f 	bic.w	r3, r3, #15
 80033f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_I2S_Init+0x278>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_I2S_Init+0x1d4>
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_I2S_Init+0x27c>)
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x1d8>
 8003408:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340c:	2202      	movs	r2, #2
 800340e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_I2S_Init+0x278>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_I2S_Init+0x1ea>
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_I2S_Init+0x27c>)
 800341c:	e001      	b.n	8003422 <HAL_I2S_Init+0x1ee>
 800341e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342e:	d003      	beq.n	8003438 <HAL_I2S_Init+0x204>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e001      	b.n	8003444 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800344e:	4313      	orrs	r3, r2
 8003450:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003458:	4313      	orrs	r3, r2
 800345a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003462:	4313      	orrs	r3, r2
 8003464:	b29a      	uxth	r2, r3
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	4313      	orrs	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003470:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <HAL_I2S_Init+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_I2S_Init+0x24c>
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_I2S_Init+0x27c>)
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x250>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	897a      	ldrh	r2, [r7, #10]
 8003486:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	080035ab 	.word	0x080035ab
 80034a4:	cccccccd 	.word	0xcccccccd
 80034a8:	080036c1 	.word	0x080036c1
 80034ac:	40003800 	.word	0x40003800
 80034b0:	40003400 	.word	0x40003400

080034b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003534:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffb8 	bl	80034b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	b292      	uxth	r2, r2
 8003560:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10e      	bne.n	80035a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003592:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff93 	bl	80034c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d13a      	bne.n	800363c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d109      	bne.n	80035e4 <I2S_IRQHandler+0x3a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d102      	bne.n	80035e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffb4 	bl	800354c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d126      	bne.n	800363c <I2S_IRQHandler+0x92>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d11f      	bne.n	800363c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0202 	orr.w	r2, r3, #2
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff50 	bl	80034dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d136      	bne.n	80036b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d109      	bne.n	8003666 <I2S_IRQHandler+0xbc>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d102      	bne.n	8003666 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff45 	bl	80034f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d122      	bne.n	80036b6 <I2S_IRQHandler+0x10c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d11b      	bne.n	80036b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff13 	bl	80034dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4aa2      	ldr	r2, [pc, #648]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036da:	4ba2      	ldr	r3, [pc, #648]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a9b      	ldr	r2, [pc, #620]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036f8:	4b9a      	ldr	r3, [pc, #616]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036fa:	e001      	b.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d004      	beq.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8099 	bne.w	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d107      	bne.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f925 	bl	800397c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9c8 	bl	8003adc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d13a      	bne.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d035      	beq.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7e      	ldr	r2, [pc, #504]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800376a:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4979      	ldr	r1, [pc, #484]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800377e:	4b79      	ldr	r3, [pc, #484]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800378a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe88 	bl	80034dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	f040 80be 	bne.w	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b8 	beq.w	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037fe:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4954      	ldr	r1, [pc, #336]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380e:	428b      	cmp	r3, r1
 8003810:	d101      	bne.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003814:	e001      	b.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0204 	orr.w	r2, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fe4a 	bl	80034dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003848:	e084      	b.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d107      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8be 	bl	80039e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8fd 	bl	8003a78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d12f      	bne.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02a      	beq.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ae:	e001      	b.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4929      	ldr	r1, [pc, #164]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038bc:	428b      	cmp	r3, r1
 80038be:	d101      	bne.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038c2:	e001      	b.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fdfa 	bl	80034dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d131      	bne.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02c      	beq.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4912      	ldr	r1, [pc, #72]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003916:	428b      	cmp	r3, r1
 8003918:	d101      	bne.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800391c:	e001      	b.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800391e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003926:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003936:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fdc5 	bl	80034dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003952:	e000      	b.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003954:	bf00      	nop
}
 8003956:	bf00      	nop
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40003800 	.word	0x40003800
 8003964:	40003400 	.word	0x40003400

08003968 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c99      	adds	r1, r3, #2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6251      	str	r1, [r2, #36]	; 0x24
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d113      	bne.n	80039d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffc9 	bl	8003968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	1c99      	adds	r1, r3, #2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6251      	str	r1, [r2, #36]	; 0x24
 80039f2:	8819      	ldrh	r1, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <I2SEx_TxISR_I2SExt+0x90>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <I2SEx_TxISR_I2SExt+0x22>
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <I2SEx_TxISR_I2SExt+0x94>)
 8003a00:	e001      	b.n	8003a06 <I2SEx_TxISR_I2SExt+0x26>
 8003a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a06:	460a      	mov	r2, r1
 8003a08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <I2SEx_TxISR_I2SExt+0x90>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <I2SEx_TxISR_I2SExt+0x50>
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <I2SEx_TxISR_I2SExt+0x94>)
 8003a2e:	e001      	b.n	8003a34 <I2SEx_TxISR_I2SExt+0x54>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	490d      	ldr	r1, [pc, #52]	; (8003a70 <I2SEx_TxISR_I2SExt+0x90>)
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d101      	bne.n	8003a44 <I2SEx_TxISR_I2SExt+0x64>
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <I2SEx_TxISR_I2SExt+0x94>)
 8003a42:	e001      	b.n	8003a48 <I2SEx_TxISR_I2SExt+0x68>
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff81 	bl	8003968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40003800 	.word	0x40003800
 8003a74:	40003400 	.word	0x40003400

08003a78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68d8      	ldr	r0, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	1c99      	adds	r1, r3, #2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a90:	b282      	uxth	r2, r0
 8003a92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d113      	bne.n	8003ad4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff4a 	bl	8003968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <I2SEx_RxISR_I2SExt+0x90>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <I2SEx_RxISR_I2SExt+0x16>
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <I2SEx_RxISR_I2SExt+0x94>)
 8003af0:	e001      	b.n	8003af6 <I2SEx_RxISR_I2SExt+0x1a>
 8003af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af6:	68d8      	ldr	r0, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	1c99      	adds	r1, r3, #2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b02:	b282      	uxth	r2, r0
 8003b04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d121      	bne.n	8003b62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <I2SEx_RxISR_I2SExt+0x90>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <I2SEx_RxISR_I2SExt+0x50>
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <I2SEx_RxISR_I2SExt+0x94>)
 8003b2a:	e001      	b.n	8003b30 <I2SEx_RxISR_I2SExt+0x54>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	490d      	ldr	r1, [pc, #52]	; (8003b6c <I2SEx_RxISR_I2SExt+0x90>)
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	d101      	bne.n	8003b40 <I2SEx_RxISR_I2SExt+0x64>
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <I2SEx_RxISR_I2SExt+0x94>)
 8003b3e:	e001      	b.n	8003b44 <I2SEx_RxISR_I2SExt+0x68>
 8003b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff03 	bl	8003968 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40003800 	.word	0x40003800
 8003b70:	40003400 	.word	0x40003400

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e264      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	4ba3      	ldr	r3, [pc, #652]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e23f      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a90      	ldr	r2, [pc, #576]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a8a      	ldr	r2, [pc, #552]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a87      	ldr	r2, [pc, #540]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b84      	ldr	r3, [pc, #528]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd f948 	bl	8000ec0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd f944 	bl	8000ec0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e204      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd f934 	bl	8000ec0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd f930 	bl	8000ec0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f0      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1c4      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b56      	ldr	r3, [pc, #344]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4952      	ldr	r1, [pc, #328]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <HAL_RCC_OscConfig+0x2b0>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd f8e9 	bl	8000ec0 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fd f8e5 	bl	8000ec0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1a5      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4940      	ldr	r1, [pc, #256]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_OscConfig+0x2b0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f8c8 	bl	8000ec0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fd f8c4 	bl	8000ec0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e184      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d030      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <HAL_RCC_OscConfig+0x2b4>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd f8a8 	bl	8000ec0 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd f8a4 	bl	8000ec0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e164      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e015      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x2b4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd f891 	bl	8000ec0 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fd f88d 	bl	8000ec0 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e14d      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a0 	beq.w	8003f0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d121      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fd f853 	bl	8000ec0 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e011      	b.n	8003e42 <HAL_RCC_OscConfig+0x2ce>
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470000 	.word	0x42470000
 8003e28:	42470e80 	.word	0x42470e80
 8003e2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fd f846 	bl	8000ec0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e106      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCC_OscConfig+0x4e4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d106      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
 8003e56:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a80      	ldr	r2, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
 8003e62:	e01c      	b.n	8003e9e <HAL_RCC_OscConfig+0x32a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x312>
 8003e6c:	4b7b      	ldr	r3, [pc, #492]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a7a      	ldr	r2, [pc, #488]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	4b78      	ldr	r3, [pc, #480]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	e00b      	b.n	8003e9e <HAL_RCC_OscConfig+0x32a>
 8003e86:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a74      	ldr	r2, [pc, #464]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd f80b 	bl	8000ec0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd f807 	bl	8000ec0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0c5      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec4:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ee      	beq.n	8003eae <HAL_RCC_OscConfig+0x33a>
 8003ed0:	e014      	b.n	8003efc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7fc fff5 	bl	8000ec0 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fc fff1 	bl	8000ec0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0af      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a55      	ldr	r2, [pc, #340]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 809b 	beq.w	800404e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d05c      	beq.n	8003fde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d141      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fc ffc5 	bl	8000ec0 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fc ffc1 	bl	8000ec0 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e081      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	019b      	lsls	r3, r3, #6
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fc ff9a 	bl	8000ec0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fc ff96 	bl	8000ec0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e056      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x41c>
 8003fae:	e04e      	b.n	800404e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fc ff83 	bl	8000ec0 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fc ff7f 	bl	8000ec0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e03f      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCC_OscConfig+0x44a>
 8003fdc:	e037      	b.n	800404e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e032      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fea:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d028      	beq.n	800404a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d121      	bne.n	800404a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d11a      	bne.n	800404a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004020:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004022:	4293      	cmp	r3, r2
 8004024:	d111      	bne.n	800404a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	3b01      	subs	r3, #1
 8004034:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d107      	bne.n	800404a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40007000 	.word	0x40007000
 800405c:	40023800 	.word	0x40023800
 8004060:	42470060 	.word	0x42470060

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fc feb4 	bl	8000ec0 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fc feb0 	bl	8000ec0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc fe14 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	080085d4 	.word	0x080085d4
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80bd 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e0b7      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004266:	60bb      	str	r3, [r7, #8]
       break;
 8004268:	e0b7      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800426c:	60bb      	str	r3, [r7, #8]
      break;
 800426e:	e0b4      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04d      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	461a      	mov	r2, r3
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	ea02 0800 	and.w	r8, r2, r0
 800429e:	ea03 0901 	and.w	r9, r3, r1
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	014b      	lsls	r3, r1, #5
 80042b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b4:	0142      	lsls	r2, r0, #5
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	ebb0 0008 	subs.w	r0, r0, r8
 80042be:	eb61 0109 	sbc.w	r1, r1, r9
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	018b      	lsls	r3, r1, #6
 80042cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d0:	0182      	lsls	r2, r0, #6
 80042d2:	1a12      	subs	r2, r2, r0
 80042d4:	eb63 0301 	sbc.w	r3, r3, r1
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	00d9      	lsls	r1, r3, #3
 80042e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e6:	00d0      	lsls	r0, r2, #3
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	eb12 0208 	adds.w	r2, r2, r8
 80042f0:	eb43 0309 	adc.w	r3, r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0259      	lsls	r1, r3, #9
 80042fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004302:	0250      	lsls	r0, r2, #9
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f7fb ff58 	bl	80001c8 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e04a      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	461a      	mov	r2, r3
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	ea02 0400 	and.w	r4, r2, r0
 800433a:	ea03 0501 	and.w	r5, r3, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	014b      	lsls	r3, r1, #5
 800434c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004350:	0142      	lsls	r2, r0, #5
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	1b00      	subs	r0, r0, r4
 8004358:	eb61 0105 	sbc.w	r1, r1, r5
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	018b      	lsls	r3, r1, #6
 8004366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800436a:	0182      	lsls	r2, r0, #6
 800436c:	1a12      	subs	r2, r2, r0
 800436e:	eb63 0301 	sbc.w	r3, r3, r1
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	00d9      	lsls	r1, r3, #3
 800437c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004380:	00d0      	lsls	r0, r2, #3
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1912      	adds	r2, r2, r4
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0299      	lsls	r1, r3, #10
 8004396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800439a:	0290      	lsls	r0, r2, #10
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fb ff0c 	bl	80001c8 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	080085e4 	.word	0x080085e4

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d035      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800445c:	4b62      	ldr	r3, [pc, #392]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004462:	f7fc fd2d 	bl	8000ec0 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800446a:	f7fc fd29 	bl	8000ec0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0b0      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800447c:	4b5b      	ldr	r3, [pc, #364]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	019a      	lsls	r2, r3, #6
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	071b      	lsls	r3, r3, #28
 8004494:	4955      	ldr	r1, [pc, #340]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800449c:	4b52      	ldr	r3, [pc, #328]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044a2:	f7fc fd0d 	bl	8000ec0 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044aa:	f7fc fd09 	bl	8000ec0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e090      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044bc:	4b4b      	ldr	r3, [pc, #300]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b44      	ldr	r3, [pc, #272]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a43      	ldr	r2, [pc, #268]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3e      	ldr	r2, [pc, #248]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044fe:	f7fc fcdf 	bl	8000ec0 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fc fcdb 	bl	8000ec0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e062      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004524:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02f      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d028      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454c:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004552:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004558:	4a24      	ldr	r2, [pc, #144]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800455e:	4b23      	ldr	r3, [pc, #140]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d114      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800456a:	f7fc fca9 	bl	8000ec0 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fc fca5 	bl	8000ec0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e02a      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a0:	d10d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	490d      	ldr	r1, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]
 80045bc:	e005      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c8:	6093      	str	r3, [r2, #8]
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d6:	4905      	ldr	r1, [pc, #20]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	42470068 	.word	0x42470068
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40007000 	.word	0x40007000
 80045f4:	42470e40 	.word	0x42470e40

080045f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d13e      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d12f      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800462c:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800462e:	617b      	str	r3, [r7, #20]
          break;
 8004630:	e02f      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463e:	d108      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004640:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	e007      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465a:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	fb02 f303 	mul.w	r3, r2, r3
 8004674:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	0f1b      	lsrs	r3, r3, #28
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
          break;
 800468a:	e002      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
          break;
 8004690:	bf00      	nop
        }
      }
      break;
 8004692:	bf00      	nop
    }
  }
  return frequency;
 8004694:	697b      	ldr	r3, [r7, #20]
}
 8004696:	4618      	mov	r0, r3
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	00bb8000 	.word	0x00bb8000
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07b      	b.n	80047be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d6:	d009      	beq.n	80046ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
 80046de:	e005      	b.n	80046ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fa4e 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f003 0104 	and.w	r1, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0210 	and.w	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e041      	b.n	800485c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc fa23 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 fa9b 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e04e      	b.n	800491a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_TIM_Base_Start_IT+0xc4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d01d      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_Base_Start_IT+0xc8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <HAL_TIM_Base_Start_IT+0xcc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIM_Base_Start_IT+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_TIM_Base_Start_IT+0xd4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_TIM_Base_Start_IT+0xd8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIM_Base_Start_IT+0xdc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40010400 	.word	0x40010400
 800493c:	40014000 	.word	0x40014000
 8004940:	40001800 	.word	0x40001800

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0202 	mvn.w	r2, #2
 8004970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9bc 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9ae 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9bf 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f992 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f984 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f995 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f968 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f95a 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f96b 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0210 	mvn.w	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2208      	movs	r2, #8
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f93e 	bl	8004d04 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f930 	bl	8004cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f941 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0201 	mvn.w	r2, #1
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f90a 	bl	8004cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fae6 	bl	80050c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f906 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0220 	mvn.w	r2, #32
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fab0 	bl	80050ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_ConfigClockSource+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0b3      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x180>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xd0>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	f000 8085 	beq.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xa2>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x116>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bcc:	2b50      	cmp	r3, #80	; 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xf6>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x136>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f000 f9b5 	bl	8004f74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04e      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f000 f99e 	bl	8004f74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f912 	bl	8004e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	; 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f96b 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f931 	bl	8004ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	; 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f95b 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f8f2 	bl	8004e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f94b 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 f942 	bl	8004f3e <TIM_ITRx_SetConfig>
        break;
 8004cba:	e002      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d027      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d023      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <TIM_Base_SetConfig+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <TIM_Base_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <TIM_Base_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <TIM_Base_SetConfig+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <TIM_Base_SetConfig+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0xf8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40010400 	.word	0x40010400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	40001800 	.word	0x40001800
 8004e78:	40001c00 	.word	0x40001c00
 8004e7c:	40002000 	.word	0x40002000

08004e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f023 030a 	bic.w	r3, r3, #10
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0210 	bic.w	r2, r3, #16
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f043 0307 	orr.w	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e05a      	b.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d022      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d01d      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1a      	ldr	r2, [pc, #104]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10c      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4313      	orrs	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40010000 	.word	0x40010000
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40010400 	.word	0x40010400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40001800 	.word	0x40001800

080050ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d4:	b084      	sub	sp, #16
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	f107 001c 	add.w	r0, r7, #28
 80050e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d122      	bne.n	8005132 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f94a 	bl	80053c0 <USB_CoreReset>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e01a      	b.n	8005168 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f93e 	bl	80053c0 <USB_CoreReset>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
 800515a:	e005      	b.n	8005168 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b01      	cmp	r3, #1
 800516c:	d10b      	bne.n	8005186 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f043 0206 	orr.w	r2, r3, #6
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005192:	b004      	add	sp, #16
 8005194:	4770      	bx	lr

08005196 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 0201 	bic.w	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e00b      	b.n	800521e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60da      	str	r2, [r3, #12]
 8005218:	e001      	b.n	800521e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e003      	b.n	8005226 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800521e:	2032      	movs	r0, #50	; 0x32
 8005220:	f7fb fe5a 	bl	8000ed8 <HAL_Delay>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <USB_FlushTxFifo+0x48>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b20      	cmp	r3, #32
 8005266:	d0f0      	beq.n	800524a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	00030d40 	.word	0x00030d40

0800527c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2210      	movs	r2, #16
 800528c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <USB_FlushRxFifo+0x40>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d0f0      	beq.n	800528e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	00030d40 	.word	0x00030d40

080052c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	460b      	mov	r3, r1
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11a      	bne.n	800531c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052e6:	88bb      	ldrh	r3, [r7, #4]
 80052e8:	3303      	adds	r3, #3
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	e00f      	b.n	8005314 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	031a      	lsls	r2, r3, #12
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005300:	461a      	mov	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3304      	adds	r3, #4
 800530c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3301      	adds	r3, #1
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3eb      	bcc.n	80052f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800532a:	b480      	push	{r7}
 800532c:	b089      	sub	sp, #36	; 0x24
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	3303      	adds	r3, #3
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	e00b      	b.n	8005366 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	601a      	str	r2, [r3, #0]
    pDest++;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3304      	adds	r3, #4
 800535e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	3301      	adds	r3, #1
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3ef      	bcc.n	800534e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800536e:	69fb      	ldr	r3, [r7, #28]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3724      	adds	r7, #36	; 0x24
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0301 	and.w	r3, r3, #1
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a13      	ldr	r2, [pc, #76]	; (8005424 <USB_CoreReset+0x64>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e01b      	b.n	8005416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	daf2      	bge.n	80053cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <USB_CoreReset+0x64>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e006      	b.n	8005416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d0f0      	beq.n	80053f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	00030d40 	.word	0x00030d40

08005428 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005428:	b084      	sub	sp, #16
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	f107 001c 	add.w	r0, r7, #28
 8005436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005444:	461a      	mov	r2, r3
 8005446:	2300      	movs	r3, #0
 8005448:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d018      	beq.n	80054ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10a      	bne.n	8005496 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e014      	b.n	80054c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e009      	b.n	80054c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ba:	f023 0304 	bic.w	r3, r3, #4
 80054be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80054c0:	2110      	movs	r1, #16
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff feb4 	bl	8005230 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fed7 	bl	800527c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e015      	b.n	8005500 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e0:	461a      	mov	r2, r3
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	429a      	cmp	r2, r3
 8005506:	d3e5      	bcc.n	80054d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005508:	2101      	movs	r1, #1
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8ac 	bl	8005668 <USB_DriveVbus>

  HAL_Delay(200U);
 8005510:	20c8      	movs	r0, #200	; 0xc8
 8005512:	f7fb fce1 	bl	8000ed8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005522:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a14      	ldr	r2, [pc, #80]	; (800558c <USB_HostInit+0x164>)
 800553c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <USB_HostInit+0x168>)
 8005542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005546:	e009      	b.n	800555c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a10      	ldr	r2, [pc, #64]	; (8005594 <USB_HostInit+0x16c>)
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a10      	ldr	r2, [pc, #64]	; (8005598 <USB_HostInit+0x170>)
 8005558:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0210 	orr.w	r2, r3, #16
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <USB_HostInit+0x174>)
 8005574:	4313      	orrs	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005586:	b004      	add	sp, #16
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	01000200 	.word	0x01000200
 8005590:	00e00300 	.word	0x00e00300
 8005594:	00600080 	.word	0x00600080
 8005598:	004000e0 	.word	0x004000e0
 800559c:	a3200008 	.word	0xa3200008

080055a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e8:	461a      	mov	r2, r3
 80055ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055ee:	6053      	str	r3, [r2, #4]
 80055f0:	e009      	b.n	8005606 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d106      	bne.n	8005606 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fe:	461a      	mov	r2, r3
 8005600:	f241 7370 	movw	r3, #6000	; 0x1770
 8005604:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005634:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800563e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005642:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005644:	2064      	movs	r0, #100	; 0x64
 8005646:	f7fb fc47 	bl	8000ed8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005656:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005658:	200a      	movs	r0, #10
 800565a:	f7fb fc3d 	bl	8000ed8 <HAL_Delay>

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800568c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <USB_DriveVbus+0x44>
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d106      	bne.n	80056ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d109      	bne.n	80056cc <USB_DriveVbus+0x64>
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	0c5b      	lsrs	r3, r3, #17
 80056f8:	f003 0303 	and.w	r3, r3, #3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	b29b      	uxth	r3, r3
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	4603      	mov	r3, r0
 800573c:	70fb      	strb	r3, [r7, #3]
 800573e:	460b      	mov	r3, r1
 8005740:	70bb      	strb	r3, [r7, #2]
 8005742:	4613      	mov	r3, r2
 8005744:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	461a      	mov	r2, r3
 800575c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005760:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005762:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005766:	2b03      	cmp	r3, #3
 8005768:	d87e      	bhi.n	8005868 <USB_HC_Init+0x13c>
 800576a:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <USB_HC_Init+0x44>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005781 	.word	0x08005781
 8005774:	0800582b 	.word	0x0800582b
 8005778:	08005781 	.word	0x08005781
 800577c:	080057ed 	.word	0x080057ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	461a      	mov	r2, r3
 800578e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005792:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	da10      	bge.n	80057be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80057bc:	e057      	b.n	800586e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d051      	beq.n	800586e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057e8:	60d3      	str	r3, [r2, #12]
      break;
 80057ea:	e040      	b.n	800586e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	461a      	mov	r2, r3
 80057fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80057fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005800:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da34      	bge.n	8005872 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	440a      	add	r2, r1
 800581e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005826:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005828:	e023      	b.n	8005872 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	461a      	mov	r2, r3
 8005838:	f240 2325 	movw	r3, #549	; 0x225
 800583c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800583e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da17      	bge.n	8005876 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	440a      	add	r2, r1
 800585c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005860:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005864:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005866:	e006      	b.n	8005876 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	77fb      	strb	r3, [r7, #31]
      break;
 800586c:	e004      	b.n	8005878 <USB_HC_Init+0x14c>
      break;
 800586e:	bf00      	nop
 8005870:	e002      	b.n	8005878 <USB_HC_Init+0x14c>
      break;
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <USB_HC_Init+0x14c>
      break;
 8005876:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005892:	4313      	orrs	r3, r2
 8005894:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da03      	bge.n	80058b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	e001      	b.n	80058b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ff0f 	bl	80056da <USB_GetHostSpeed>
 80058bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d106      	bne.n	80058d4 <USB_HC_Init+0x1a8>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d003      	beq.n	80058d4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e001      	b.n	80058d8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d8:	787b      	ldrb	r3, [r7, #1]
 80058da:	059b      	lsls	r3, r3, #22
 80058dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e0:	78bb      	ldrb	r3, [r7, #2]
 80058e2:	02db      	lsls	r3, r3, #11
 80058e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ee:	049b      	lsls	r3, r3, #18
 80058f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	0159      	lsls	r1, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	440b      	add	r3, r1
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005914:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800591a:	2b03      	cmp	r3, #3
 800591c:	d10f      	bne.n	800593e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	440a      	add	r2, r1
 8005934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800593c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800593e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005964:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d02d      	beq.n	80059ce <USB_HC_StartXfer+0x86>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	791b      	ldrb	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d129      	bne.n	80059ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d117      	bne.n	80059b0 <USB_HC_StartXfer+0x68>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	79db      	ldrb	r3, [r3, #7]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <USB_HC_StartXfer+0x48>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	79db      	ldrb	r3, [r3, #7]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d10f      	bne.n	80059b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <USB_HC_StartXfer+0x86>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	795b      	ldrb	r3, [r3, #5]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	4619      	mov	r1, r3
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fa2f 	bl	8005e28 <USB_DoPing>
      return HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e0f8      	b.n	8005bc0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	8912      	ldrh	r2, [r2, #8]
 80059de:	4413      	add	r3, r2
 80059e0:	3b01      	subs	r3, #1
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	8912      	ldrh	r2, [r2, #8]
 80059e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059ee:	8b7b      	ldrh	r3, [r7, #26]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d90b      	bls.n	8005a0c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	8912      	ldrh	r2, [r2, #8]
 80059fe:	fb02 f203 	mul.w	r2, r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	e001      	b.n	8005a0c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	78db      	ldrb	r3, [r3, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	8912      	ldrh	r2, [r2, #8]
 8005a1a:	fb02 f203 	mul.w	r2, r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	611a      	str	r2, [r3, #16]
 8005a22:	e003      	b.n	8005a2c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a36:	04d9      	lsls	r1, r3, #19
 8005a38:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <USB_HC_StartXfer+0x280>)
 8005a3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	7a9b      	ldrb	r3, [r3, #10]
 8005a42:	075b      	lsls	r3, r3, #29
 8005a44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a48:	69f9      	ldr	r1, [r7, #28]
 8005a4a:	0148      	lsls	r0, r1, #5
 8005a4c:	6a39      	ldr	r1, [r7, #32]
 8005a4e:	4401      	add	r1, r0
 8005a50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68d9      	ldr	r1, [r3, #12]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6e:	460a      	mov	r2, r1
 8005a70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aa8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	7e7b      	ldrb	r3, [r7, #25]
 8005aba:	075b      	lsls	r3, r3, #29
 8005abc:	69f9      	ldr	r1, [r7, #28]
 8005abe:	0148      	lsls	r0, r1, #5
 8005ac0:	6a39      	ldr	r1, [r7, #32]
 8005ac2:	4401      	add	r1, r0
 8005ac4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e003      	b.n	8005afe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005afc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e04e      	b.n	8005bc0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d149      	bne.n	8005bbe <USB_HC_StartXfer+0x276>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d045      	beq.n	8005bbe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	79db      	ldrb	r3, [r3, #7]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d830      	bhi.n	8005b9c <USB_HC_StartXfer+0x254>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <USB_HC_StartXfer+0x1f8>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005b51 	.word	0x08005b51
 8005b4c:	08005b75 	.word	0x08005b75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	3303      	adds	r3, #3
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b5a:	8afa      	ldrh	r2, [r7, #22]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d91c      	bls.n	8005ba0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b72:	e015      	b.n	8005ba0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	3303      	adds	r3, #3
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b7e:	8afa      	ldrh	r2, [r7, #22]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d90a      	bls.n	8005ba4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b9a:	e003      	b.n	8005ba4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e002      	b.n	8005ba6 <USB_HC_StartXfer+0x25e>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <USB_HC_StartXfer+0x25e>
        break;
 8005ba4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	785a      	ldrb	r2, [r3, #1]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	9000      	str	r0, [sp, #0]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fb81 	bl	80052c0 <USB_WritePacket>
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3728      	adds	r7, #40	; 0x28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	1ff80000 	.word	0x1ff80000

08005bcc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	b29b      	uxth	r3, r3
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b089      	sub	sp, #36	; 0x24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	0c9b      	lsrs	r3, r3, #18
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	0fdb      	lsrs	r3, r3, #31
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d104      	bne.n	8005c48 <USB_HC_Halt+0x5a>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e0e8      	b.n	8005e1a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <USB_HC_Halt+0x66>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d173      	bne.n	8005d3c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 80cb 	bne.w	8005e18 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d143      	bne.n	8005d16 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cec:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfa:	d81d      	bhi.n	8005d38 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d12:	d0ec      	beq.n	8005cee <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d14:	e080      	b.n	8005e18 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d36:	e06f      	b.n	8005e18 <USB_HC_Halt+0x22a>
            break;
 8005d38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d3a:	e06d      	b.n	8005e18 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d143      	bne.n	8005df4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005daa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd8:	d81d      	bhi.n	8005e16 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d0ec      	beq.n	8005dcc <USB_HC_Halt+0x1de>
 8005df2:	e011      	b.n	8005e18 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e000      	b.n	8005e18 <USB_HC_Halt+0x22a>
          break;
 8005e16:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	04da      	lsls	r2, r3, #19
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <USB_DoPing+0x74>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	1ff80000 	.word	0x1ff80000

08005ea0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff f981 	bl	80051b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff f9b9 	bl	8005230 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff f9dc 	bl	800527c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e01f      	b.n	8005f0a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b0f      	cmp	r3, #15
 8005f0e:	d9dc      	bls.n	8005eca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e034      	b.n	8005f80 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3301      	adds	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d80c      	bhi.n	8005f78 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f74:	d0ec      	beq.n	8005f50 <USB_StopHost+0xb0>
 8005f76:	e000      	b.n	8005f7a <USB_StopHost+0xda>
        break;
 8005f78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2b0f      	cmp	r3, #15
 8005f84:	d9c7      	bls.n	8005f16 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f9a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff f8fa 	bl	8005196 <USB_EnableGlobalInt>

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	2102      	movs	r1, #2
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fc66 	bl	800688c <USBH_FindInterface>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2bff      	cmp	r3, #255	; 0xff
 8005fc8:	d002      	beq.n	8005fd0 <USBH_CDC_InterfaceInit+0x24>
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d901      	bls.n	8005fd4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e13d      	b.n	8006250 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc3b 	bl	8006854 <USBH_SelectInterface>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e131      	b.n	8006250 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005ff2:	2050      	movs	r0, #80	; 0x50
 8005ff4:	f002 fa00 	bl	80083f8 <malloc>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800600c:	2302      	movs	r3, #2
 800600e:	e11f      	b.n	8006250 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006010:	2250      	movs	r2, #80	; 0x50
 8006012:	2100      	movs	r1, #0
 8006014:	68b8      	ldr	r0, [r7, #8]
 8006016:	f002 f9ff 	bl	8008418 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	211a      	movs	r1, #26
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b25b      	sxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	da15      	bge.n	800605e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	211a      	movs	r1, #26
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	4413      	add	r3, r2
 800603e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	211a      	movs	r1, #26
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	4413      	add	r3, r2
 8006054:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006058:	881a      	ldrh	r2, [r3, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 fe32 	bl	8007cce <USBH_AllocPipe>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7858      	ldrb	r0, [r3, #1]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	8952      	ldrh	r2, [r2, #10]
 800608a:	9202      	str	r2, [sp, #8]
 800608c:	2203      	movs	r2, #3
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4623      	mov	r3, r4
 8006094:	4602      	mov	r2, r0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fdea 	bl	8007c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 f8f9 	bl	800829c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060aa:	2300      	movs	r3, #0
 80060ac:	2200      	movs	r2, #0
 80060ae:	210a      	movs	r1, #10
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fbeb 	bl	800688c <USBH_FindInterface>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	2bff      	cmp	r3, #255	; 0xff
 80060be:	d002      	beq.n	80060c6 <USBH_CDC_InterfaceInit+0x11a>
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d901      	bls.n	80060ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0c2      	b.n	8006250 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	211a      	movs	r1, #26
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da16      	bge.n	8006110 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	211a      	movs	r1, #26
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	211a      	movs	r1, #26
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	835a      	strh	r2, [r3, #26]
 800610e:	e015      	b.n	800613c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	211a      	movs	r1, #26
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	211a      	movs	r1, #26
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4413      	add	r3, r2
 8006132:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	211a      	movs	r1, #26
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f203 3356 	addw	r3, r3, #854	; 0x356
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b25b      	sxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	da16      	bge.n	8006182 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	211a      	movs	r1, #26
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	4413      	add	r3, r2
 8006160:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	211a      	movs	r1, #26
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800617a:	881a      	ldrh	r2, [r3, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	835a      	strh	r2, [r3, #26]
 8006180:	e015      	b.n	80061ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	211a      	movs	r1, #26
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	211a      	movs	r1, #26
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	7b9b      	ldrb	r3, [r3, #14]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fd8a 	bl	8007cce <USBH_AllocPipe>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	7bdb      	ldrb	r3, [r3, #15]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fd80 	bl	8007cce <USBH_AllocPipe>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	7b59      	ldrb	r1, [r3, #13]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	7b98      	ldrb	r0, [r3, #14]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	8b12      	ldrh	r2, [r2, #24]
 80061ee:	9202      	str	r2, [sp, #8]
 80061f0:	2202      	movs	r2, #2
 80061f2:	9201      	str	r2, [sp, #4]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4623      	mov	r3, r4
 80061f8:	4602      	mov	r2, r0
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fd38 	bl	8007c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	7b19      	ldrb	r1, [r3, #12]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	7bd8      	ldrb	r0, [r3, #15]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	8b52      	ldrh	r2, [r2, #26]
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	2202      	movs	r2, #2
 800621c:	9201      	str	r2, [sp, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4623      	mov	r3, r4
 8006222:	4602      	mov	r2, r0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 fd23 	bl	8007c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	7b5b      	ldrb	r3, [r3, #13]
 8006236:	2200      	movs	r2, #0
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f002 f82e 	bl	800829c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 f827 	bl	800829c <USBH_LL_SetToggle>

  return USBH_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}

08006258 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fd18 	bl	8007cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fd43 	bl	8007d10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	7b1b      	ldrb	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	7b1b      	ldrb	r3, [r3, #12]
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fd05 	bl	8007cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	7b1b      	ldrb	r3, [r3, #12]
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fd30 	bl	8007d10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	7b5b      	ldrb	r3, [r3, #13]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	7b5b      	ldrb	r3, [r3, #13]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fcf2 	bl	8007cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	7b5b      	ldrb	r3, [r3, #13]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fd1d 	bl	8007d10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f002 f889 	bl	8008408 <free>
    phost->pActiveClass->pData = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062fc:	2200      	movs	r2, #0
 80062fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3340      	adds	r3, #64	; 0x40
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8b1 	bl	800648a <GetLineCoding>
 8006328:	4603      	mov	r3, r0
 800632a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006338:	2102      	movs	r1, #2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800633e:	7afb      	ldrb	r3, [r7, #11]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006368:	2b04      	cmp	r3, #4
 800636a:	d877      	bhi.n	800645c <USBH_CDC_Process+0x114>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USBH_CDC_Process+0x2c>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006389 	.word	0x08006389
 8006378:	0800638f 	.word	0x0800638f
 800637c:	080063bf 	.word	0x080063bf
 8006380:	08006433 	.word	0x08006433
 8006384:	08006441 	.word	0x08006441
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e06d      	b.n	800646a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f897 	bl	80064c8 <SetLineCoding>
 800639a:	4603      	mov	r3, r0
 800639c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063ac:	e058      	b.n	8006460 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d055      	beq.n	8006460 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2204      	movs	r2, #4
 80063b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063bc:	e050      	b.n	8006460 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	3340      	adds	r3, #64	; 0x40
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f860 	bl	800648a <GetLineCoding>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d126      	bne.n	8006422 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	791b      	ldrb	r3, [r3, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d13b      	bne.n	8006464 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d133      	bne.n	8006464 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006406:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006408:	429a      	cmp	r2, r3
 800640a:	d12b      	bne.n	8006464 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006414:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006416:	429a      	cmp	r2, r3
 8006418:	d124      	bne.n	8006464 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f958 	bl	80066d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006420:	e020      	b.n	8006464 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d01d      	beq.n	8006464 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2204      	movs	r2, #4
 800642c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006430:	e018      	b.n	8006464 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f867 	bl	8006506 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f8da 	bl	80065f2 <CDC_ProcessReception>
      break;
 800643e:	e014      	b.n	800646a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006440:	2100      	movs	r1, #0
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 ffe3 	bl	800740e <USBH_ClrFeature>
 8006448:	4603      	mov	r3, r0
 800644a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800645a:	e005      	b.n	8006468 <USBH_CDC_Process+0x120>

    default:
      break;
 800645c:	bf00      	nop
 800645e:	e004      	b.n	800646a <USBH_CDC_Process+0x122>
      break;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <USBH_CDC_Process+0x122>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <USBH_CDC_Process+0x122>
      break;
 8006468:	bf00      	nop

  }

  return status;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	22a1      	movs	r2, #161	; 0xa1
 8006498:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2221      	movs	r2, #33	; 0x21
 800649e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2207      	movs	r2, #7
 80064b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2207      	movs	r2, #7
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f988 	bl	80077ce <USBH_CtlReq>
 80064be:	4603      	mov	r3, r0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2221      	movs	r2, #33	; 0x21
 80064d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2207      	movs	r2, #7
 80064ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2207      	movs	r2, #7
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f969 	bl	80077ce <USBH_CtlReq>
 80064fc:	4603      	mov	r3, r0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af02      	add	r7, sp, #8
 800650c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006518:	2300      	movs	r3, #0
 800651a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006522:	2b01      	cmp	r3, #1
 8006524:	d002      	beq.n	800652c <CDC_ProcessTransmission+0x26>
 8006526:	2b02      	cmp	r3, #2
 8006528:	d023      	beq.n	8006572 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800652a:	e05e      	b.n	80065ea <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	8b12      	ldrh	r2, [r2, #24]
 8006534:	4293      	cmp	r3, r2
 8006536:	d90b      	bls.n	8006550 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	69d9      	ldr	r1, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8b1a      	ldrh	r2, [r3, #24]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	7b5b      	ldrb	r3, [r3, #13]
 8006544:	2001      	movs	r0, #1
 8006546:	9000      	str	r0, [sp, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fb4e 	bl	8007bea <USBH_BulkSendData>
 800654e:	e00b      	b.n	8006568 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	7b5b      	ldrb	r3, [r3, #13]
 800655e:	2001      	movs	r0, #1
 8006560:	9000      	str	r0, [sp, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fb41 	bl	8007bea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006570:	e03b      	b.n	80065ea <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	7b5b      	ldrb	r3, [r3, #13]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe65 	bl	8008248 <USBH_LL_GetURBState>
 800657e:	4603      	mov	r3, r0
 8006580:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d128      	bne.n	80065da <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	8b12      	ldrh	r2, [r2, #24]
 8006590:	4293      	cmp	r3, r2
 8006592:	d90e      	bls.n	80065b2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	8b12      	ldrh	r2, [r2, #24]
 800659c:	1a9a      	subs	r2, r3, r2
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	8b12      	ldrh	r2, [r2, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	61da      	str	r2, [r3, #28]
 80065b0:	e002      	b.n	80065b8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065c8:	e00e      	b.n	80065e8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f868 	bl	80066a8 <USBH_CDC_TransmitCallback>
      break;
 80065d8:	e006      	b.n	80065e8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d103      	bne.n	80065e8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065e8:	bf00      	nop
  }
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006604:	2300      	movs	r3, #0
 8006606:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800660e:	2b03      	cmp	r3, #3
 8006610:	d002      	beq.n	8006618 <CDC_ProcessReception+0x26>
 8006612:	2b04      	cmp	r3, #4
 8006614:	d00e      	beq.n	8006634 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006616:	e043      	b.n	80066a0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a19      	ldr	r1, [r3, #32]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	8b5a      	ldrh	r2, [r3, #26]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fb05 	bl	8007c34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2204      	movs	r2, #4
 800662e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006632:	e035      	b.n	80066a0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	7b1b      	ldrb	r3, [r3, #12]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fe04 	bl	8008248 <USBH_LL_GetURBState>
 8006640:	4603      	mov	r3, r0
 8006642:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d129      	bne.n	800669e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	7b1b      	ldrb	r3, [r3, #12]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 fd67 	bl	8008124 <USBH_LL_GetLastXferSize>
 8006656:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	429a      	cmp	r2, r3
 8006660:	d016      	beq.n	8006690 <CDC_ProcessReception+0x9e>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	8b5b      	ldrh	r3, [r3, #26]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4293      	cmp	r3, r2
 800666c:	d910      	bls.n	8006690 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad2      	subs	r2, r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1a      	ldr	r2, [r3, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	441a      	add	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800668e:	e006      	b.n	800669e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f80f 	bl	80066bc <USBH_CDC_ReceiveCallback>
      break;
 800669e:	bf00      	nop
  }
}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066f8:	2302      	movs	r3, #2
 80066fa:	e029      	b.n	8006750 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	79fa      	ldrb	r2, [r7, #7]
 8006700:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f81f 	bl	8006758 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f001 fc37 	bl	8007fbc <USBH_LL_Init>

  return USBH_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e009      	b.n	800677e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	33e0      	adds	r3, #224	; 0xe0
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b0e      	cmp	r3, #14
 8006782:	d9f2      	bls.n	800676a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e009      	b.n	800679e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d3f1      	bcc.n	800678a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2240      	movs	r2, #64	; 0x40
 80067ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d016      	beq.n	8006842 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10e      	bne.n	800683c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	33de      	adds	r3, #222	; 0xde
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	e004      	b.n	8006846 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800683c:	2302      	movs	r3, #2
 800683e:	73fb      	strb	r3, [r7, #15]
 8006840:	e001      	b.n	8006846 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	429a      	cmp	r2, r3
 800686e:	d204      	bcs.n	800687a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006878:	e001      	b.n	800687e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800687a:	2302      	movs	r3, #2
 800687c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4603      	mov	r3, r0
 800689c:	70fb      	strb	r3, [r7, #3]
 800689e:	460b      	mov	r3, r1
 80068a0:	70bb      	strb	r3, [r7, #2]
 80068a2:	4613      	mov	r3, r2
 80068a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80068b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068b6:	e025      	b.n	8006904 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	221a      	movs	r2, #26
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	3308      	adds	r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	3302      	adds	r3, #2
 80068c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	795b      	ldrb	r3, [r3, #5]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d002      	beq.n	80068da <USBH_FindInterface+0x4e>
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d111      	bne.n	80068fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80068de:	78ba      	ldrb	r2, [r7, #2]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d002      	beq.n	80068ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068e4:	78bb      	ldrb	r3, [r7, #2]
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d109      	bne.n	80068fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068ee:	787a      	ldrb	r2, [r7, #1]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d002      	beq.n	80068fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068f4:	787b      	ldrb	r3, [r7, #1]
 80068f6:	2bff      	cmp	r3, #255	; 0xff
 80068f8:	d101      	bne.n	80068fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	e006      	b.n	800690c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	3301      	adds	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d9d6      	bls.n	80068b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800690a:	23ff      	movs	r3, #255	; 0xff
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fb87 	bl	8008034 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fca0 	bl	800826e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af04      	add	r7, sp, #16
 800693e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006940:	2302      	movs	r3, #2
 8006942:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2203      	movs	r2, #3
 8006958:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b0b      	cmp	r3, #11
 8006962:	f200 81b3 	bhi.w	8006ccc <USBH_Process+0x394>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <USBH_Process+0x34>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	0800699d 	.word	0x0800699d
 8006970:	080069cf 	.word	0x080069cf
 8006974:	08006a37 	.word	0x08006a37
 8006978:	08006c67 	.word	0x08006c67
 800697c:	08006ccd 	.word	0x08006ccd
 8006980:	08006adb 	.word	0x08006adb
 8006984:	08006c0d 	.word	0x08006c0d
 8006988:	08006b11 	.word	0x08006b11
 800698c:	08006b31 	.word	0x08006b31
 8006990:	08006b51 	.word	0x08006b51
 8006994:	08006b7f 	.word	0x08006b7f
 8006998:	08006c4f 	.word	0x08006c4f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8193 	beq.w	8006cd0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80069b0:	20c8      	movs	r0, #200	; 0xc8
 80069b2:	f001 fca3 	bl	80082fc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fb99 	bl	80080ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069cc:	e180      	b.n	8006cd0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069e6:	e182      	b.n	8006cee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f2:	d914      	bls.n	8006a1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069fa:	3301      	adds	r3, #1
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d903      	bls.n	8006a16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	220d      	movs	r2, #13
 8006a12:	701a      	strb	r2, [r3, #0]
      break;
 8006a14:	e16b      	b.n	8006cee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
      break;
 8006a1c:	e167      	b.n	8006cee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a24:	f103 020a 	add.w	r2, r3, #10
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006a2e:	200a      	movs	r0, #10
 8006a30:	f001 fc64 	bl	80082fc <USBH_Delay>
      break;
 8006a34:	e15b      	b.n	8006cee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a46:	2104      	movs	r1, #4
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a4c:	2064      	movs	r0, #100	; 0x64
 8006a4e:	f001 fc55 	bl	80082fc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fb24 	bl	80080a0 <USBH_LL_GetSpeed>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2205      	movs	r2, #5
 8006a66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a68:	2100      	movs	r1, #0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 f92f 	bl	8007cce <USBH_AllocPipe>
 8006a70:	4603      	mov	r3, r0
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f927 	bl	8007cce <USBH_AllocPipe>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7919      	ldrb	r1, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a9c:	b292      	uxth	r2, r2
 8006a9e:	9202      	str	r2, [sp, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	9201      	str	r2, [sp, #4]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f8e0 	bl	8007c70 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7959      	ldrb	r1, [r3, #5]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	9201      	str	r2, [sp, #4]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 f8cc 	bl	8007c70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ad8:	e109      	b.n	8006cee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f90c 	bl	8006cf8 <USBH_HandleEnum>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 80f3 	bne.w	8006cd4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d103      	bne.n	8006b08 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2208      	movs	r2, #8
 8006b04:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b06:	e0e5      	b.n	8006cd4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e0e1      	b.n	8006cd4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 80de 	beq.w	8006cd8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b2e:	e0d3      	b.n	8006cd8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fc20 	bl	8007380 <USBH_SetCfg>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 80ca 	bne.w	8006cdc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2209      	movs	r2, #9
 8006b4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b4e:	e0c5      	b.n	8006cdc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006b5e:	2101      	movs	r1, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc30 	bl	80073c6 <USBH_SetFeature>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f040 80b9 	bne.w	8006ce0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	220a      	movs	r2, #10
 8006b72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b74:	e0b4      	b.n	8006ce0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	220a      	movs	r2, #10
 8006b7a:	701a      	strb	r2, [r3, #0]
      break;
 8006b7c:	e0b0      	b.n	8006ce0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80ad 	beq.w	8006ce4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	e016      	b.n	8006bc6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b98:	7bfa      	ldrb	r2, [r7, #15]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	32de      	adds	r2, #222	; 0xde
 8006b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba2:	791a      	ldrb	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d108      	bne.n	8006bc0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006bae:	7bfa      	ldrb	r2, [r7, #15]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32de      	adds	r2, #222	; 0xde
 8006bb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006bbe:	e005      	b.n	8006bcc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e5      	beq.n	8006b98 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d016      	beq.n	8006c04 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2206      	movs	r2, #6
 8006bec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bf4:	2103      	movs	r1, #3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bfa:	e073      	b.n	8006ce4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	220d      	movs	r2, #13
 8006c00:	701a      	strb	r2, [r3, #0]
      break;
 8006c02:	e06f      	b.n	8006ce4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	220d      	movs	r2, #13
 8006c08:	701a      	strb	r2, [r3, #0]
      break;
 8006c0a:	e06b      	b.n	8006ce4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d017      	beq.n	8006c46 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220b      	movs	r2, #11
 8006c32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c34:	e058      	b.n	8006ce8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d154      	bne.n	8006ce8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220d      	movs	r2, #13
 8006c42:	701a      	strb	r2, [r3, #0]
      break;
 8006c44:	e050      	b.n	8006ce8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220d      	movs	r2, #13
 8006c4a:	701a      	strb	r2, [r3, #0]
      break;
 8006c4c:	e04c      	b.n	8006ce8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d049      	beq.n	8006cec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
      }
      break;
 8006c64:	e042      	b.n	8006cec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fd72 	bl	8006758 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ca2:	2105      	movs	r1, #5
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d107      	bne.n	8006cc4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fe2b 	bl	8006918 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cc2:	e014      	b.n	8006cee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f9b5 	bl	8008034 <USBH_LL_Start>
      break;
 8006cca:	e010      	b.n	8006cee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ccc:	bf00      	nop
 8006cce:	e00e      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e00c      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e00a      	b.n	8006cee <USBH_Process+0x3b6>
    break;
 8006cd8:	bf00      	nop
 8006cda:	e008      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e006      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e004      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e002      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006ce8:	bf00      	nop
 8006cea:	e000      	b.n	8006cee <USBH_Process+0x3b6>
      break;
 8006cec:	bf00      	nop
  }
  return USBH_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af04      	add	r7, sp, #16
 8006cfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	f200 81c1 	bhi.w	8007094 <USBH_HandleEnum+0x39c>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBH_HandleEnum+0x20>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006df7 	.word	0x08006df7
 8006d20:	08006e61 	.word	0x08006e61
 8006d24:	08006eef 	.word	0x08006eef
 8006d28:	08006f59 	.word	0x08006f59
 8006d2c:	08006fc9 	.word	0x08006fc9
 8006d30:	0800700f 	.word	0x0800700f
 8006d34:	08007055 	.word	0x08007055
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d38:	2108      	movs	r1, #8
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa50 	bl	80071e0 <USBH_Get_DevDesc>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d130      	bne.n	8006dac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7919      	ldrb	r1, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 ff77 	bl	8007c70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7959      	ldrb	r1, [r3, #5]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d96:	b292      	uxth	r2, r2
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	2200      	movs	r2, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 ff63 	bl	8007c70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006daa:	e175      	b.n	8007098 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	f040 8172 	bne.w	8007098 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d903      	bls.n	8006dd6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220d      	movs	r2, #13
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e160      	b.n	8007098 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	795b      	ldrb	r3, [r3, #5]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ff97 	bl	8007d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 ff91 	bl	8007d10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
      break;
 8006df4:	e150      	b.n	8007098 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006df6:	2112      	movs	r1, #18
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9f1 	bl	80071e0 <USBH_Get_DevDesc>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d103      	bne.n	8006e10 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e0e:	e145      	b.n	800709c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	f040 8142 	bne.w	800709c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e1e:	3301      	adds	r3, #1
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d903      	bls.n	8006e3a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	220d      	movs	r2, #13
 8006e36:	701a      	strb	r2, [r3, #0]
      break;
 8006e38:	e130      	b.n	800709c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	795b      	ldrb	r3, [r3, #5]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 ff65 	bl	8007d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	791b      	ldrb	r3, [r3, #4]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 ff5f 	bl	8007d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
      break;
 8006e5e:	e11d      	b.n	800709c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa68 	bl	8007338 <USBH_SetAddress>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d132      	bne.n	8006ed8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e72:	2002      	movs	r0, #2
 8006e74:	f001 fa42 	bl	80082fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2203      	movs	r2, #3
 8006e84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7919      	ldrb	r1, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	9202      	str	r2, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	9201      	str	r2, [sp, #4]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fee1 	bl	8007c70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7959      	ldrb	r1, [r3, #5]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fecd 	bl	8007c70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ed6:	e0e3      	b.n	80070a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	f040 80e0 	bne.w	80070a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220d      	movs	r2, #13
 8006ee4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	705a      	strb	r2, [r3, #1]
      break;
 8006eec:	e0d8      	b.n	80070a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006eee:	2109      	movs	r1, #9
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f99d 	bl	8007230 <USBH_Get_CfgDesc>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2204      	movs	r2, #4
 8006f04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f06:	e0cd      	b.n	80070a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f040 80ca 	bne.w	80070a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d903      	bls.n	8006f32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	220d      	movs	r2, #13
 8006f2e:	701a      	strb	r2, [r3, #0]
      break;
 8006f30:	e0b8      	b.n	80070a4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	795b      	ldrb	r3, [r3, #5]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fee9 	bl	8007d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	791b      	ldrb	r3, [r3, #4]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fee3 	bl	8007d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
      break;
 8006f56:	e0a5      	b.n	80070a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f965 	bl	8007230 <USBH_Get_CfgDesc>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2205      	movs	r2, #5
 8006f74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f76:	e097      	b.n	80070a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	f040 8094 	bne.w	80070a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f86:	3301      	adds	r3, #1
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d903      	bls.n	8006fa2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	220d      	movs	r2, #13
 8006f9e:	701a      	strb	r2, [r3, #0]
      break;
 8006fa0:	e082      	b.n	80070a8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	795b      	ldrb	r3, [r3, #5]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 feb1 	bl	8007d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	791b      	ldrb	r3, [r3, #4]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 feab 	bl	8007d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
      break;
 8006fc6:	e06f      	b.n	80070a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d019      	beq.n	8007006 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006fde:	23ff      	movs	r3, #255	; 0xff
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f949 	bl	8007278 <USBH_Get_StringDesc>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2206      	movs	r2, #6
 8006ff4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ff6:	e059      	b.n	80070ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d156      	bne.n	80070ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2206      	movs	r2, #6
 8007002:	705a      	strb	r2, [r3, #1]
      break;
 8007004:	e052      	b.n	80070ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2206      	movs	r2, #6
 800700a:	705a      	strb	r2, [r3, #1]
      break;
 800700c:	e04e      	b.n	80070ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007014:	2b00      	cmp	r3, #0
 8007016:	d019      	beq.n	800704c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007024:	23ff      	movs	r3, #255	; 0xff
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f926 	bl	8007278 <USBH_Get_StringDesc>
 800702c:	4603      	mov	r3, r0
 800702e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2207      	movs	r2, #7
 800703a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800703c:	e038      	b.n	80070b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d135      	bne.n	80070b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2207      	movs	r2, #7
 8007048:	705a      	strb	r2, [r3, #1]
      break;
 800704a:	e031      	b.n	80070b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2207      	movs	r2, #7
 8007050:	705a      	strb	r2, [r3, #1]
      break;
 8007052:	e02d      	b.n	80070b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800705a:	2b00      	cmp	r3, #0
 800705c:	d017      	beq.n	800708e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800706a:	23ff      	movs	r3, #255	; 0xff
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f903 	bl	8007278 <USBH_Get_StringDesc>
 8007072:	4603      	mov	r3, r0
 8007074:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007080:	e018      	b.n	80070b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d115      	bne.n	80070b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
      break;
 800708c:	e012      	b.n	80070b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
      break;
 8007092:	e00f      	b.n	80070b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007094:	bf00      	nop
 8007096:	e00e      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 8007098:	bf00      	nop
 800709a:	e00c      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 800709c:	bf00      	nop
 800709e:	e00a      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070a0:	bf00      	nop
 80070a2:	e008      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070a4:	bf00      	nop
 80070a6:	e006      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070a8:	bf00      	nop
 80070aa:	e004      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070ac:	bf00      	nop
 80070ae:	e002      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <USBH_HandleEnum+0x3be>
      break;
 80070b4:	bf00      	nop
  }
  return Status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f804 	bl	8007102 <USBH_HandleSof>
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b0b      	cmp	r3, #11
 8007112:	d10a      	bne.n	800712a <USBH_HandleSof+0x28>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007142:	bf00      	nop
}
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800715e:	bf00      	nop
}
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 ff56 	bl	800806a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fda3 	bl	8007d10 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	795b      	ldrb	r3, [r3, #5]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd9d 	bl	8007d10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f864 	bl	80072ce <USBH_GetDescriptor>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	b292      	uxth	r2, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f000 f918 	bl	8007456 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af02      	add	r7, sp, #8
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	331c      	adds	r3, #28
 8007240:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724c:	2100      	movs	r1, #0
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f83d 	bl	80072ce <USBH_GetDescriptor>
 8007254:	4603      	mov	r3, r0
 8007256:	72fb      	strb	r3, [r7, #11]
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d107      	bne.n	800726e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007264:	887a      	ldrh	r2, [r7, #2]
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f964 	bl	8007536 <USBH_ParseCfgDesc>
  }

  return status;
 800726e:	7afb      	ldrb	r3, [r7, #11]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
 8007288:	4613      	mov	r3, r2
 800728a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007294:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800729c:	893b      	ldrh	r3, [r7, #8]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	460b      	mov	r3, r1
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f812 	bl	80072ce <USBH_GetDescriptor>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072ba:	893a      	ldrh	r2, [r7, #8]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fa37 	bl	8007732 <USBH_ParseStringDesc>
  }

  return status;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	72fb      	strb	r3, [r7, #11]
 80072dc:	4613      	mov	r3, r2
 80072de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	789b      	ldrb	r3, [r3, #2]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d11c      	bne.n	8007322 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2206      	movs	r2, #6
 80072f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	893a      	ldrh	r2, [r7, #8]
 80072fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800730a:	d104      	bne.n	8007316 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f240 4209 	movw	r2, #1033	; 0x409
 8007312:	829a      	strh	r2, [r3, #20]
 8007314:	e002      	b.n	800731c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8b3a      	ldrh	r2, [r7, #24]
 8007320:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007322:	8b3b      	ldrh	r3, [r7, #24]
 8007324:	461a      	mov	r2, r3
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fa50 	bl	80077ce <USBH_CtlReq>
 800732e:	4603      	mov	r3, r0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	789b      	ldrb	r3, [r3, #2]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10f      	bne.n	800736c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2205      	movs	r2, #5
 8007356:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa2c 	bl	80077ce <USBH_CtlReq>
 8007376:	4603      	mov	r3, r0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	789b      	ldrb	r3, [r3, #2]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10e      	bne.n	80073b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2209      	movs	r2, #9
 800739e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	887a      	ldrh	r2, [r7, #2]
 80073a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa09 	bl	80077ce <USBH_CtlReq>
 80073bc:	4603      	mov	r3, r0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	789b      	ldrb	r3, [r3, #2]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d10f      	bne.n	80073fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2203      	movs	r2, #3
 80073e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f9e5 	bl	80077ce <USBH_CtlReq>
 8007404:	4603      	mov	r3, r0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	789b      	ldrb	r3, [r3, #2]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d10f      	bne.n	8007442 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007442:	2200      	movs	r2, #0
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9c1 	bl	80077ce <USBH_CtlReq>
 800744c:	4603      	mov	r3, r0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	4613      	mov	r3, r2
 8007462:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	785a      	ldrb	r2, [r3, #1]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3302      	adds	r3, #2
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b29a      	uxth	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	3303      	adds	r3, #3
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	b29b      	uxth	r3, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	791a      	ldrb	r2, [r3, #4]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	795a      	ldrb	r2, [r3, #5]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	799a      	ldrb	r2, [r3, #6]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	79da      	ldrb	r2, [r3, #7]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d939      	bls.n	800752a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	3308      	adds	r3, #8
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	3309      	adds	r3, #9
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	330a      	adds	r3, #10
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	330b      	adds	r3, #11
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	330c      	adds	r3, #12
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	330d      	adds	r3, #13
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	b29b      	uxth	r3, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	7b9a      	ldrb	r2, [r3, #14]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	7bda      	ldrb	r2, [r3, #15]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	7c1a      	ldrb	r2, [r3, #16]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	7c5a      	ldrb	r2, [r3, #17]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	745a      	strb	r2, [r3, #17]
  }
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b08a      	sub	sp, #40	; 0x28
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	4613      	mov	r3, r2
 8007542:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	785a      	ldrb	r2, [r3, #1]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	3302      	adds	r3, #2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	3303      	adds	r3, #3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b29b      	uxth	r3, r3
 800757c:	4313      	orrs	r3, r2
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	791a      	ldrb	r2, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	795a      	ldrb	r2, [r3, #5]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	799a      	ldrb	r2, [r3, #6]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	79da      	ldrb	r2, [r3, #7]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	7a1a      	ldrb	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d95f      	bls.n	8007672 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80075b2:	2309      	movs	r3, #9
 80075b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075ba:	e051      	b.n	8007660 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075bc:	f107 0316 	add.w	r3, r7, #22
 80075c0:	4619      	mov	r1, r3
 80075c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075c4:	f000 f8e8 	bl	8007798 <USBH_GetNextDesc>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d146      	bne.n	8007660 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80075d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d6:	221a      	movs	r2, #26
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	3308      	adds	r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	3302      	adds	r3, #2
 80075e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80075e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075e8:	69f8      	ldr	r0, [r7, #28]
 80075ea:	f000 f846 	bl	800767a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075f8:	e022      	b.n	8007640 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075fa:	f107 0316 	add.w	r3, r7, #22
 80075fe:	4619      	mov	r1, r3
 8007600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007602:	f000 f8c9 	bl	8007798 <USBH_GetNextDesc>
 8007606:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b05      	cmp	r3, #5
 800760e:	d117      	bne.n	8007640 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007614:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007618:	3201      	adds	r2, #1
 800761a:	00d2      	lsls	r2, r2, #3
 800761c:	211a      	movs	r1, #26
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	4413      	add	r3, r2
 8007624:	3308      	adds	r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	3304      	adds	r3, #4
 800762c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800762e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007630:	69b8      	ldr	r0, [r7, #24]
 8007632:	f000 f851 	bl	80076d8 <USBH_ParseEPDesc>
            ep_ix++;
 8007636:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800763a:	3301      	adds	r3, #1
 800763c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	791b      	ldrb	r3, [r3, #4]
 8007644:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007648:	429a      	cmp	r2, r3
 800764a:	d204      	bcs.n	8007656 <USBH_ParseCfgDesc+0x120>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	885a      	ldrh	r2, [r3, #2]
 8007650:	8afb      	ldrh	r3, [r7, #22]
 8007652:	429a      	cmp	r2, r3
 8007654:	d8d1      	bhi.n	80075fa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800765a:	3301      	adds	r3, #1
 800765c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007664:	2b01      	cmp	r3, #1
 8007666:	d804      	bhi.n	8007672 <USBH_ParseCfgDesc+0x13c>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	885a      	ldrh	r2, [r3, #2]
 800766c:	8afb      	ldrh	r3, [r7, #22]
 800766e:	429a      	cmp	r2, r3
 8007670:	d8a4      	bhi.n	80075bc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007672:	bf00      	nop
 8007674:	3728      	adds	r7, #40	; 0x28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785a      	ldrb	r2, [r3, #1]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	789a      	ldrb	r2, [r3, #2]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	78da      	ldrb	r2, [r3, #3]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	791a      	ldrb	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	795a      	ldrb	r2, [r3, #5]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	799a      	ldrb	r2, [r3, #6]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	79da      	ldrb	r2, [r3, #7]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	7a1a      	ldrb	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	721a      	strb	r2, [r3, #8]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	785a      	ldrb	r2, [r3, #1]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	789a      	ldrb	r2, [r3, #2]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	78da      	ldrb	r2, [r3, #3]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3304      	adds	r3, #4
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3305      	adds	r3, #5
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	b29b      	uxth	r3, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	799a      	ldrb	r2, [r3, #6]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	719a      	strb	r2, [r3, #6]
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007732:	b480      	push	{r7}
 8007734:	b087      	sub	sp, #28
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	4613      	mov	r3, r2
 800773e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d120      	bne.n	800778c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	1e9a      	subs	r2, r3, #2
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	4293      	cmp	r3, r2
 8007754:	bf28      	it	cs
 8007756:	4613      	movcs	r3, r2
 8007758:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3302      	adds	r3, #2
 800775e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007760:	2300      	movs	r3, #0
 8007762:	82fb      	strh	r3, [r7, #22]
 8007764:	e00b      	b.n	800777e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3301      	adds	r3, #1
 8007776:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007778:	8afb      	ldrh	r3, [r7, #22]
 800777a:	3302      	adds	r3, #2
 800777c:	82fb      	strh	r3, [r7, #22]
 800777e:	8afa      	ldrh	r2, [r7, #22]
 8007780:	8abb      	ldrh	r3, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d3ef      	bcc.n	8007766 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
  }
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	881a      	ldrh	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	4613      	mov	r3, r2
 80077da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077dc:	2301      	movs	r3, #1
 80077de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	789b      	ldrb	r3, [r3, #2]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d002      	beq.n	80077ee <USBH_CtlReq+0x20>
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d00f      	beq.n	800780c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077ec:	e027      	b.n	800783e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2202      	movs	r2, #2
 8007804:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
      break;
 800780a:	e018      	b.n	800783e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f81b 	bl	8007848 <USBH_HandleControl>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <USBH_CtlReq+0x54>
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d106      	bne.n	8007830 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	761a      	strb	r2, [r3, #24]
      break;
 800782e:	e005      	b.n	800783c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d102      	bne.n	800783c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	709a      	strb	r2, [r3, #2]
      break;
 800783c:	bf00      	nop
  }
  return status;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af02      	add	r7, sp, #8
 800784e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7e1b      	ldrb	r3, [r3, #24]
 800785c:	3b01      	subs	r3, #1
 800785e:	2b0a      	cmp	r3, #10
 8007860:	f200 8156 	bhi.w	8007b10 <USBH_HandleControl+0x2c8>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <USBH_HandleControl+0x24>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	08007899 	.word	0x08007899
 8007870:	080078b3 	.word	0x080078b3
 8007874:	0800791d 	.word	0x0800791d
 8007878:	08007943 	.word	0x08007943
 800787c:	0800797b 	.word	0x0800797b
 8007880:	080079a5 	.word	0x080079a5
 8007884:	080079f7 	.word	0x080079f7
 8007888:	08007a19 	.word	0x08007a19
 800788c:	08007a55 	.word	0x08007a55
 8007890:	08007a7b 	.word	0x08007a7b
 8007894:	08007ab9 	.word	0x08007ab9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f103 0110 	add.w	r1, r3, #16
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	795b      	ldrb	r3, [r3, #5]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f943 	bl	8007b30 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	761a      	strb	r2, [r3, #24]
      break;
 80078b0:	e139      	b.n	8007b26 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	795b      	ldrb	r3, [r3, #5]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fcc5 	bl	8008248 <USBH_LL_GetURBState>
 80078be:	4603      	mov	r3, r0
 80078c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11e      	bne.n	8007906 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7c1b      	ldrb	r3, [r3, #16]
 80078cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8adb      	ldrh	r3, [r3, #22]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078da:	7b7b      	ldrb	r3, [r7, #13]
 80078dc:	2b80      	cmp	r3, #128	; 0x80
 80078de:	d103      	bne.n	80078e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2203      	movs	r2, #3
 80078e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078e6:	e115      	b.n	8007b14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2205      	movs	r2, #5
 80078ec:	761a      	strb	r2, [r3, #24]
      break;
 80078ee:	e111      	b.n	8007b14 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078f0:	7b7b      	ldrb	r3, [r7, #13]
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d103      	bne.n	80078fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2209      	movs	r2, #9
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e10a      	b.n	8007b14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2207      	movs	r2, #7
 8007902:	761a      	strb	r2, [r3, #24]
      break;
 8007904:	e106      	b.n	8007b14 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d003      	beq.n	8007914 <USBH_HandleControl+0xcc>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b02      	cmp	r3, #2
 8007910:	f040 8100 	bne.w	8007b14 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220b      	movs	r2, #11
 8007918:	761a      	strb	r2, [r3, #24]
      break;
 800791a:	e0fb      	b.n	8007b14 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007922:	b29a      	uxth	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6899      	ldr	r1, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	899a      	ldrh	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	791b      	ldrb	r3, [r3, #4]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f93a 	bl	8007bae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	761a      	strb	r2, [r3, #24]
      break;
 8007940:	e0f1      	b.n	8007b26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	791b      	ldrb	r3, [r3, #4]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc7d 	bl	8008248 <USBH_LL_GetURBState>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d102      	bne.n	800795e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2209      	movs	r2, #9
 800795c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b05      	cmp	r3, #5
 8007962:	d102      	bne.n	800796a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007964:	2303      	movs	r3, #3
 8007966:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007968:	e0d6      	b.n	8007b18 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b04      	cmp	r3, #4
 800796e:	f040 80d3 	bne.w	8007b18 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	220b      	movs	r2, #11
 8007976:	761a      	strb	r2, [r3, #24]
      break;
 8007978:	e0ce      	b.n	8007b18 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6899      	ldr	r1, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	899a      	ldrh	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	2001      	movs	r0, #1
 8007988:	9000      	str	r0, [sp, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8ea 	bl	8007b64 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2206      	movs	r2, #6
 80079a0:	761a      	strb	r2, [r3, #24]
      break;
 80079a2:	e0c0      	b.n	8007b26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	795b      	ldrb	r3, [r3, #5]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fc4c 	bl	8008248 <USBH_LL_GetURBState>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d103      	bne.n	80079c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2207      	movs	r2, #7
 80079be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079c0:	e0ac      	b.n	8007b1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d105      	bne.n	80079d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	220c      	movs	r2, #12
 80079cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079ce:	2303      	movs	r3, #3
 80079d0:	73fb      	strb	r3, [r7, #15]
      break;
 80079d2:	e0a3      	b.n	8007b1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d103      	bne.n	80079e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2205      	movs	r2, #5
 80079de:	761a      	strb	r2, [r3, #24]
      break;
 80079e0:	e09c      	b.n	8007b1c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	f040 8099 	bne.w	8007b1c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	220b      	movs	r2, #11
 80079ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079f0:	2302      	movs	r3, #2
 80079f2:	73fb      	strb	r3, [r7, #15]
      break;
 80079f4:	e092      	b.n	8007b1c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f8d5 	bl	8007bae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2208      	movs	r2, #8
 8007a14:	761a      	strb	r2, [r3, #24]

      break;
 8007a16:	e086      	b.n	8007b26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc12 	bl	8008248 <USBH_LL_GetURBState>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d105      	bne.n	8007a3a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	220d      	movs	r2, #13
 8007a32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a38:	e072      	b.n	8007b20 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d103      	bne.n	8007a48 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	220b      	movs	r2, #11
 8007a44:	761a      	strb	r2, [r3, #24]
      break;
 8007a46:	e06b      	b.n	8007b20 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d168      	bne.n	8007b20 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	73fb      	strb	r3, [r7, #15]
      break;
 8007a52:	e065      	b.n	8007b20 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	795b      	ldrb	r3, [r3, #5]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	9200      	str	r2, [sp, #0]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f87f 	bl	8007b64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	220a      	movs	r2, #10
 8007a76:	761a      	strb	r2, [r3, #24]
      break;
 8007a78:	e055      	b.n	8007b26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	795b      	ldrb	r3, [r3, #5]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fbe1 	bl	8008248 <USBH_LL_GetURBState>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d105      	bne.n	8007a9c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	220d      	movs	r2, #13
 8007a98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a9a:	e043      	b.n	8007b24 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d103      	bne.n	8007aaa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2209      	movs	r2, #9
 8007aa6:	761a      	strb	r2, [r3, #24]
      break;
 8007aa8:	e03c      	b.n	8007b24 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d139      	bne.n	8007b24 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	220b      	movs	r2, #11
 8007ab4:	761a      	strb	r2, [r3, #24]
      break;
 8007ab6:	e035      	b.n	8007b24 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e5b      	ldrb	r3, [r3, #25]
 8007abc:	3301      	adds	r3, #1
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	765a      	strb	r2, [r3, #25]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7e5b      	ldrb	r3, [r3, #25]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d806      	bhi.n	8007ada <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ad8:	e025      	b.n	8007b26 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ae0:	2106      	movs	r1, #6
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	795b      	ldrb	r3, [r3, #5]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f90c 	bl	8007d10 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f906 	bl	8007d10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0e:	e00a      	b.n	8007b26 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b10:	bf00      	nop
 8007b12:	e008      	b.n	8007b26 <USBH_HandleControl+0x2de>
      break;
 8007b14:	bf00      	nop
 8007b16:	e006      	b.n	8007b26 <USBH_HandleControl+0x2de>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e004      	b.n	8007b26 <USBH_HandleControl+0x2de>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <USBH_HandleControl+0x2de>
      break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <USBH_HandleControl+0x2de>
      break;
 8007b24:	bf00      	nop
  }

  return status;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af04      	add	r7, sp, #16
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b3e:	79f9      	ldrb	r1, [r7, #7]
 8007b40:	2300      	movs	r3, #0
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	2308      	movs	r3, #8
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fb46 	bl	80081e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	460b      	mov	r3, r1
 8007b74:	80fb      	strh	r3, [r7, #6]
 8007b76:	4613      	mov	r3, r2
 8007b78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b88:	7979      	ldrb	r1, [r7, #5]
 8007b8a:	7e3b      	ldrb	r3, [r7, #24]
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	2301      	movs	r3, #1
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fb21 	bl	80081e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b088      	sub	sp, #32
 8007bb2:	af04      	add	r7, sp, #16
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	80fb      	strh	r3, [r7, #6]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bc4:	7979      	ldrb	r1, [r7, #5]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2201      	movs	r2, #1
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fb03 	bl	80081e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007be0:	2300      	movs	r3, #0

}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b088      	sub	sp, #32
 8007bee:	af04      	add	r7, sp, #16
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	80fb      	strh	r3, [r7, #6]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c0e:	7979      	ldrb	r1, [r7, #5]
 8007c10:	7e3b      	ldrb	r3, [r7, #24]
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2302      	movs	r3, #2
 8007c22:	2200      	movs	r2, #0
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fade 	bl	80081e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af04      	add	r7, sp, #16
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	461a      	mov	r2, r3
 8007c42:	460b      	mov	r3, r1
 8007c44:	80fb      	strh	r3, [r7, #6]
 8007c46:	4613      	mov	r3, r2
 8007c48:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c4a:	7979      	ldrb	r1, [r7, #5]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	9302      	str	r3, [sp, #8]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2301      	movs	r3, #1
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	2201      	movs	r2, #1
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fac0 	bl	80081e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	70fb      	strb	r3, [r7, #3]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70bb      	strb	r3, [r7, #2]
 8007c86:	4613      	mov	r3, r2
 8007c88:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c8a:	7878      	ldrb	r0, [r7, #1]
 8007c8c:	78ba      	ldrb	r2, [r7, #2]
 8007c8e:	78f9      	ldrb	r1, [r7, #3]
 8007c90:	8b3b      	ldrh	r3, [r7, #24]
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	7d3b      	ldrb	r3, [r7, #20]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	7c3b      	ldrb	r3, [r7, #16]
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa53 	bl	800814a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa72 	bl	80081a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f836 	bl	8007d4c <USBH_GetFreePipe>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ce4:	89fb      	ldrh	r3, [r7, #14]
 8007ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00a      	beq.n	8007d04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	89fb      	ldrh	r3, [r7, #14]
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	33e0      	adds	r3, #224	; 0xe0
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	b2db      	uxtb	r3, r3
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	2b0a      	cmp	r3, #10
 8007d20:	d80d      	bhi.n	8007d3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	33e0      	adds	r3, #224	; 0xe0
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	33e0      	adds	r3, #224	; 0xe0
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
 8007d5c:	e00f      	b.n	8007d7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	33e0      	adds	r3, #224	; 0xe0
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	e007      	b.n	8007d88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	2b0a      	cmp	r3, #10
 8007d82:	d9ec      	bls.n	8007d5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <MX_USB_HOST_Init+0x40>)
 8007d9c:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <MX_USB_HOST_Init+0x44>)
 8007d9e:	f7fe fca1 	bl	80066e4 <USBH_Init>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007da8:	f7f8 fe18 	bl	80009dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dac:	490b      	ldr	r1, [pc, #44]	; (8007ddc <MX_USB_HOST_Init+0x48>)
 8007dae:	480a      	ldr	r0, [pc, #40]	; (8007dd8 <MX_USB_HOST_Init+0x44>)
 8007db0:	f7fe fd26 	bl	8006800 <USBH_RegisterClass>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dba:	f7f8 fe0f 	bl	80009dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dbe:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <MX_USB_HOST_Init+0x44>)
 8007dc0:	f7fe fdaa 	bl	8006918 <USBH_Start>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dca:	f7f8 fe07 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dce:	bf00      	nop
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	200001fc 	.word	0x200001fc
 8007ddc:	2000000c 	.word	0x2000000c

08007de0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007de4:	4802      	ldr	r0, [pc, #8]	; (8007df0 <MX_USB_HOST_Process+0x10>)
 8007de6:	f7fe fda7 	bl	8006938 <USBH_Process>
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200001fc 	.word	0x200001fc

08007df4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d819      	bhi.n	8007e3c <USBH_UserProcess+0x48>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <USBH_UserProcess+0x1c>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e25 	.word	0x08007e25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e24:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <USBH_UserProcess+0x58>)
 8007e26:	2203      	movs	r2, #3
 8007e28:	701a      	strb	r2, [r3, #0]
  break;
 8007e2a:	e008      	b.n	8007e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <USBH_UserProcess+0x58>)
 8007e2e:	2202      	movs	r2, #2
 8007e30:	701a      	strb	r2, [r3, #0]
  break;
 8007e32:	e004      	b.n	8007e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <USBH_UserProcess+0x58>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	701a      	strb	r2, [r3, #0]
  break;
 8007e3a:	e000      	b.n	8007e3e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	200000b0 	.word	0x200000b0

08007e50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	609a      	str	r2, [r3, #8]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e70:	d147      	bne.n	8007f02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6313      	str	r3, [r2, #48]	; 0x30
 8007e82:	4b22      	ldr	r3, [pc, #136]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e9c:	f107 0314 	add.w	r3, r7, #20
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	481b      	ldr	r0, [pc, #108]	; (8007f10 <HAL_HCD_MspInit+0xc0>)
 8007ea4:	f7f9 f94e 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ea8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eba:	230a      	movs	r3, #10
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ebe:	f107 0314 	add.w	r3, r7, #20
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4812      	ldr	r0, [pc, #72]	; (8007f10 <HAL_HCD_MspInit+0xc0>)
 8007ec6:	f7f9 f93d 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eca:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed4:	6353      	str	r3, [r2, #52]	; 0x34
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	4a0b      	ldr	r2, [pc, #44]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ee6:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <HAL_HCD_MspInit+0xbc>)
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	2043      	movs	r0, #67	; 0x43
 8007ef8:	f7f9 f8ed 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007efc:	2043      	movs	r0, #67	; 0x43
 8007efe:	f7f9 f906 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f02:	bf00      	nop
 8007f04:	3728      	adds	r7, #40	; 0x28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40023800 	.word	0x40023800
 8007f10:	40020000 	.word	0x40020000

08007f14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff f8db 	bl	80070de <USBH_LL_IncTimer>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff f913 	bl	800716a <USBH_LL_Connect>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff f91c 	bl	8007198 <USBH_LL_Disconnect>
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
 8007f74:	4613      	mov	r3, r2
 8007f76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f8cd 	bl	8007132 <USBH_LL_PortEnabled>
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff f8cd 	bl	800714e <USBH_LL_PortDisabled>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d12a      	bne.n	8008024 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fce:	4a18      	ldr	r2, [pc, #96]	; (8008030 <USBH_LL_Init+0x74>)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a15      	ldr	r2, [pc, #84]	; (8008030 <USBH_LL_Init+0x74>)
 8007fda:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fde:	4b14      	ldr	r3, [pc, #80]	; (8008030 <USBH_LL_Init+0x74>)
 8007fe0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fe4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fe6:	4b12      	ldr	r3, [pc, #72]	; (8008030 <USBH_LL_Init+0x74>)
 8007fe8:	2208      	movs	r2, #8
 8007fea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <USBH_LL_Init+0x74>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <USBH_LL_Init+0x74>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <USBH_LL_Init+0x74>)
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <USBH_LL_Init+0x74>)
 8008000:	2200      	movs	r2, #0
 8008002:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008004:	480a      	ldr	r0, [pc, #40]	; (8008030 <USBH_LL_Init+0x74>)
 8008006:	f7f9 fa6c 	bl	80014e2 <HAL_HCD_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008010:	f7f8 fce4 	bl	80009dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008014:	4806      	ldr	r0, [pc, #24]	; (8008030 <USBH_LL_Init+0x74>)
 8008016:	f7f9 fe49 	bl	8001cac <HAL_HCD_GetCurrentFrame>
 800801a:	4603      	mov	r3, r0
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f84e 	bl	80070c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	200005d4 	.word	0x200005d4

08008034 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800804a:	4618      	mov	r0, r3
 800804c:	f7f9 fdb8 	bl	8001bc0 <HAL_HCD_Start>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f95c 	bl	8008314 <USBH_Get_USB_Status>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008060:	7bbb      	ldrb	r3, [r7, #14]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008080:	4618      	mov	r0, r3
 8008082:	f7f9 fdc0 	bl	8001c06 <HAL_HCD_Stop>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f941 	bl	8008314 <USBH_Get_USB_Status>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008096:	7bbb      	ldrb	r3, [r7, #14]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f9 fe08 	bl	8001cc8 <HAL_HCD_GetCurrentSpeed>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d00c      	beq.n	80080d8 <USBH_LL_GetSpeed+0x38>
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d80d      	bhi.n	80080de <USBH_LL_GetSpeed+0x3e>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <USBH_LL_GetSpeed+0x2c>
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d003      	beq.n	80080d2 <USBH_LL_GetSpeed+0x32>
 80080ca:	e008      	b.n	80080de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	e008      	b.n	80080e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
    break;
 80080d6:	e005      	b.n	80080e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080d8:	2302      	movs	r3, #2
 80080da:	73fb      	strb	r3, [r7, #15]
    break;
 80080dc:	e002      	b.n	80080e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
    break;
 80080e2:	bf00      	nop
  }
  return  speed;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008104:	4618      	mov	r0, r3
 8008106:	f7f9 fd9b 	bl	8001c40 <HAL_HCD_ResetPort>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f8ff 	bl	8008314 <USBH_Get_USB_Status>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811a:	7bbb      	ldrb	r3, [r7, #14]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f7f9 fda2 	bl	8001c84 <HAL_HCD_HC_GetXferCount>
 8008140:	4603      	mov	r3, r0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800814a:	b590      	push	{r4, r7, lr}
 800814c:	b089      	sub	sp, #36	; 0x24
 800814e:	af04      	add	r7, sp, #16
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	461a      	mov	r2, r3
 8008158:	4603      	mov	r3, r0
 800815a:	70fb      	strb	r3, [r7, #3]
 800815c:	460b      	mov	r3, r1
 800815e:	70bb      	strb	r3, [r7, #2]
 8008160:	4613      	mov	r3, r2
 8008162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008172:	787c      	ldrb	r4, [r7, #1]
 8008174:	78ba      	ldrb	r2, [r7, #2]
 8008176:	78f9      	ldrb	r1, [r7, #3]
 8008178:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4623      	mov	r3, r4
 800818a:	f7f9 fa0c 	bl	80015a6 <HAL_HCD_HC_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f8bd 	bl	8008314 <USBH_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd90      	pop	{r4, r7, pc}

080081a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f9 fa7c 	bl	80016c4 <HAL_HCD_HC_Halt>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f89e 	bl	8008314 <USBH_Get_USB_Status>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b089      	sub	sp, #36	; 0x24
 80081ea:	af04      	add	r7, sp, #16
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	461a      	mov	r2, r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	70fb      	strb	r3, [r7, #3]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70bb      	strb	r3, [r7, #2]
 80081fc:	4613      	mov	r3, r2
 80081fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800820e:	787c      	ldrb	r4, [r7, #1]
 8008210:	78ba      	ldrb	r2, [r7, #2]
 8008212:	78f9      	ldrb	r1, [r7, #3]
 8008214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4623      	mov	r3, r4
 800822a:	f7f9 fa6f 	bl	800170c <HAL_HCD_HC_SubmitRequest>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f86d 	bl	8008314 <USBH_Get_USB_Status>
 800823a:	4603      	mov	r3, r0
 800823c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	bd90      	pop	{r4, r7, pc}

08008248 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800825a:	78fa      	ldrb	r2, [r7, #3]
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f7f9 fcfc 	bl	8001c5c <HAL_HCD_HC_GetURBState>
 8008264:	4603      	mov	r3, r0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008280:	2b01      	cmp	r3, #1
 8008282:	d103      	bne.n	800828c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f870 	bl	800836c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800828c:	20c8      	movs	r0, #200	; 0xc8
 800828e:	f7f8 fe23 	bl	8000ed8 <HAL_Delay>
  return USBH_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
 80082a8:	4613      	mov	r3, r2
 80082aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	212c      	movs	r1, #44	; 0x2c
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	333b      	adds	r3, #59	; 0x3b
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	212c      	movs	r1, #44	; 0x2c
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	3354      	adds	r3, #84	; 0x54
 80082d6:	78ba      	ldrb	r2, [r7, #2]
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e008      	b.n	80082ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	212c      	movs	r1, #44	; 0x2c
 80082e2:	fb01 f303 	mul.w	r3, r1, r3
 80082e6:	4413      	add	r3, r2
 80082e8:	3355      	adds	r3, #85	; 0x55
 80082ea:	78ba      	ldrb	r2, [r7, #2]
 80082ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7f8 fde7 	bl	8000ed8 <HAL_Delay>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d817      	bhi.n	8008358 <USBH_Get_USB_Status+0x44>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBH_Get_USB_Status+0x1c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008341 	.word	0x08008341
 8008334:	08008347 	.word	0x08008347
 8008338:	0800834d 	.word	0x0800834d
 800833c:	08008353 	.word	0x08008353
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e00b      	b.n	800835e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e008      	b.n	800835e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	e005      	b.n	800835e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008352:	2302      	movs	r3, #2
 8008354:	73fb      	strb	r3, [r7, #15]
    break;
 8008356:	e002      	b.n	800835e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008358:	2302      	movs	r3, #2
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	bf00      	nop
  }
  return usb_status;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
 8008384:	e001      	b.n	800838a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	461a      	mov	r2, r3
 800838e:	2101      	movs	r1, #1
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <MX_DriverVbusFS+0x34>)
 8008392:	f7f9 f873 	bl	800147c <HAL_GPIO_WritePin>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40020800 	.word	0x40020800

080083a4 <__errno>:
 80083a4:	4b01      	ldr	r3, [pc, #4]	; (80083ac <__errno+0x8>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	2000002c 	.word	0x2000002c

080083b0 <__libc_init_array>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4d0d      	ldr	r5, [pc, #52]	; (80083e8 <__libc_init_array+0x38>)
 80083b4:	4c0d      	ldr	r4, [pc, #52]	; (80083ec <__libc_init_array+0x3c>)
 80083b6:	1b64      	subs	r4, r4, r5
 80083b8:	10a4      	asrs	r4, r4, #2
 80083ba:	2600      	movs	r6, #0
 80083bc:	42a6      	cmp	r6, r4
 80083be:	d109      	bne.n	80083d4 <__libc_init_array+0x24>
 80083c0:	4d0b      	ldr	r5, [pc, #44]	; (80083f0 <__libc_init_array+0x40>)
 80083c2:	4c0c      	ldr	r4, [pc, #48]	; (80083f4 <__libc_init_array+0x44>)
 80083c4:	f000 f8f8 	bl	80085b8 <_init>
 80083c8:	1b64      	subs	r4, r4, r5
 80083ca:	10a4      	asrs	r4, r4, #2
 80083cc:	2600      	movs	r6, #0
 80083ce:	42a6      	cmp	r6, r4
 80083d0:	d105      	bne.n	80083de <__libc_init_array+0x2e>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d8:	4798      	blx	r3
 80083da:	3601      	adds	r6, #1
 80083dc:	e7ee      	b.n	80083bc <__libc_init_array+0xc>
 80083de:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e2:	4798      	blx	r3
 80083e4:	3601      	adds	r6, #1
 80083e6:	e7f2      	b.n	80083ce <__libc_init_array+0x1e>
 80083e8:	080085f4 	.word	0x080085f4
 80083ec:	080085f4 	.word	0x080085f4
 80083f0:	080085f4 	.word	0x080085f4
 80083f4:	080085f8 	.word	0x080085f8

080083f8 <malloc>:
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <malloc+0xc>)
 80083fa:	4601      	mov	r1, r0
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f000 b863 	b.w	80084c8 <_malloc_r>
 8008402:	bf00      	nop
 8008404:	2000002c 	.word	0x2000002c

08008408 <free>:
 8008408:	4b02      	ldr	r3, [pc, #8]	; (8008414 <free+0xc>)
 800840a:	4601      	mov	r1, r0
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f000 b80b 	b.w	8008428 <_free_r>
 8008412:	bf00      	nop
 8008414:	2000002c 	.word	0x2000002c

08008418 <memset>:
 8008418:	4402      	add	r2, r0
 800841a:	4603      	mov	r3, r0
 800841c:	4293      	cmp	r3, r2
 800841e:	d100      	bne.n	8008422 <memset+0xa>
 8008420:	4770      	bx	lr
 8008422:	f803 1b01 	strb.w	r1, [r3], #1
 8008426:	e7f9      	b.n	800841c <memset+0x4>

08008428 <_free_r>:
 8008428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800842a:	2900      	cmp	r1, #0
 800842c:	d048      	beq.n	80084c0 <_free_r+0x98>
 800842e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008432:	9001      	str	r0, [sp, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f1a1 0404 	sub.w	r4, r1, #4
 800843a:	bfb8      	it	lt
 800843c:	18e4      	addlt	r4, r4, r3
 800843e:	f000 f8ad 	bl	800859c <__malloc_lock>
 8008442:	4a20      	ldr	r2, [pc, #128]	; (80084c4 <_free_r+0x9c>)
 8008444:	9801      	ldr	r0, [sp, #4]
 8008446:	6813      	ldr	r3, [r2, #0]
 8008448:	4615      	mov	r5, r2
 800844a:	b933      	cbnz	r3, 800845a <_free_r+0x32>
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	6014      	str	r4, [r2, #0]
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008456:	f000 b8a7 	b.w	80085a8 <__malloc_unlock>
 800845a:	42a3      	cmp	r3, r4
 800845c:	d90b      	bls.n	8008476 <_free_r+0x4e>
 800845e:	6821      	ldr	r1, [r4, #0]
 8008460:	1862      	adds	r2, r4, r1
 8008462:	4293      	cmp	r3, r2
 8008464:	bf04      	itt	eq
 8008466:	681a      	ldreq	r2, [r3, #0]
 8008468:	685b      	ldreq	r3, [r3, #4]
 800846a:	6063      	str	r3, [r4, #4]
 800846c:	bf04      	itt	eq
 800846e:	1852      	addeq	r2, r2, r1
 8008470:	6022      	streq	r2, [r4, #0]
 8008472:	602c      	str	r4, [r5, #0]
 8008474:	e7ec      	b.n	8008450 <_free_r+0x28>
 8008476:	461a      	mov	r2, r3
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b10b      	cbz	r3, 8008480 <_free_r+0x58>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d9fa      	bls.n	8008476 <_free_r+0x4e>
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	1855      	adds	r5, r2, r1
 8008484:	42a5      	cmp	r5, r4
 8008486:	d10b      	bne.n	80084a0 <_free_r+0x78>
 8008488:	6824      	ldr	r4, [r4, #0]
 800848a:	4421      	add	r1, r4
 800848c:	1854      	adds	r4, r2, r1
 800848e:	42a3      	cmp	r3, r4
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	d1dd      	bne.n	8008450 <_free_r+0x28>
 8008494:	681c      	ldr	r4, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	6053      	str	r3, [r2, #4]
 800849a:	4421      	add	r1, r4
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	e7d7      	b.n	8008450 <_free_r+0x28>
 80084a0:	d902      	bls.n	80084a8 <_free_r+0x80>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6003      	str	r3, [r0, #0]
 80084a6:	e7d3      	b.n	8008450 <_free_r+0x28>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf04      	itt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	bf04      	itt	eq
 80084b8:	1949      	addeq	r1, r1, r5
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	6054      	str	r4, [r2, #4]
 80084be:	e7c7      	b.n	8008450 <_free_r+0x28>
 80084c0:	b003      	add	sp, #12
 80084c2:	bd30      	pop	{r4, r5, pc}
 80084c4:	200000b4 	.word	0x200000b4

080084c8 <_malloc_r>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	1ccd      	adds	r5, r1, #3
 80084cc:	f025 0503 	bic.w	r5, r5, #3
 80084d0:	3508      	adds	r5, #8
 80084d2:	2d0c      	cmp	r5, #12
 80084d4:	bf38      	it	cc
 80084d6:	250c      	movcc	r5, #12
 80084d8:	2d00      	cmp	r5, #0
 80084da:	4606      	mov	r6, r0
 80084dc:	db01      	blt.n	80084e2 <_malloc_r+0x1a>
 80084de:	42a9      	cmp	r1, r5
 80084e0:	d903      	bls.n	80084ea <_malloc_r+0x22>
 80084e2:	230c      	movs	r3, #12
 80084e4:	6033      	str	r3, [r6, #0]
 80084e6:	2000      	movs	r0, #0
 80084e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ea:	f000 f857 	bl	800859c <__malloc_lock>
 80084ee:	4921      	ldr	r1, [pc, #132]	; (8008574 <_malloc_r+0xac>)
 80084f0:	680a      	ldr	r2, [r1, #0]
 80084f2:	4614      	mov	r4, r2
 80084f4:	b99c      	cbnz	r4, 800851e <_malloc_r+0x56>
 80084f6:	4f20      	ldr	r7, [pc, #128]	; (8008578 <_malloc_r+0xb0>)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	b923      	cbnz	r3, 8008506 <_malloc_r+0x3e>
 80084fc:	4621      	mov	r1, r4
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f83c 	bl	800857c <_sbrk_r>
 8008504:	6038      	str	r0, [r7, #0]
 8008506:	4629      	mov	r1, r5
 8008508:	4630      	mov	r0, r6
 800850a:	f000 f837 	bl	800857c <_sbrk_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d123      	bne.n	800855a <_malloc_r+0x92>
 8008512:	230c      	movs	r3, #12
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	4630      	mov	r0, r6
 8008518:	f000 f846 	bl	80085a8 <__malloc_unlock>
 800851c:	e7e3      	b.n	80084e6 <_malloc_r+0x1e>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	1b5b      	subs	r3, r3, r5
 8008522:	d417      	bmi.n	8008554 <_malloc_r+0x8c>
 8008524:	2b0b      	cmp	r3, #11
 8008526:	d903      	bls.n	8008530 <_malloc_r+0x68>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	441c      	add	r4, r3
 800852c:	6025      	str	r5, [r4, #0]
 800852e:	e004      	b.n	800853a <_malloc_r+0x72>
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	42a2      	cmp	r2, r4
 8008534:	bf0c      	ite	eq
 8008536:	600b      	streq	r3, [r1, #0]
 8008538:	6053      	strne	r3, [r2, #4]
 800853a:	4630      	mov	r0, r6
 800853c:	f000 f834 	bl	80085a8 <__malloc_unlock>
 8008540:	f104 000b 	add.w	r0, r4, #11
 8008544:	1d23      	adds	r3, r4, #4
 8008546:	f020 0007 	bic.w	r0, r0, #7
 800854a:	1ac2      	subs	r2, r0, r3
 800854c:	d0cc      	beq.n	80084e8 <_malloc_r+0x20>
 800854e:	1a1b      	subs	r3, r3, r0
 8008550:	50a3      	str	r3, [r4, r2]
 8008552:	e7c9      	b.n	80084e8 <_malloc_r+0x20>
 8008554:	4622      	mov	r2, r4
 8008556:	6864      	ldr	r4, [r4, #4]
 8008558:	e7cc      	b.n	80084f4 <_malloc_r+0x2c>
 800855a:	1cc4      	adds	r4, r0, #3
 800855c:	f024 0403 	bic.w	r4, r4, #3
 8008560:	42a0      	cmp	r0, r4
 8008562:	d0e3      	beq.n	800852c <_malloc_r+0x64>
 8008564:	1a21      	subs	r1, r4, r0
 8008566:	4630      	mov	r0, r6
 8008568:	f000 f808 	bl	800857c <_sbrk_r>
 800856c:	3001      	adds	r0, #1
 800856e:	d1dd      	bne.n	800852c <_malloc_r+0x64>
 8008570:	e7cf      	b.n	8008512 <_malloc_r+0x4a>
 8008572:	bf00      	nop
 8008574:	200000b4 	.word	0x200000b4
 8008578:	200000b8 	.word	0x200000b8

0800857c <_sbrk_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d06      	ldr	r5, [pc, #24]	; (8008598 <_sbrk_r+0x1c>)
 8008580:	2300      	movs	r3, #0
 8008582:	4604      	mov	r4, r0
 8008584:	4608      	mov	r0, r1
 8008586:	602b      	str	r3, [r5, #0]
 8008588:	f7f8 fbc2 	bl	8000d10 <_sbrk>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_sbrk_r+0x1a>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	b103      	cbz	r3, 8008596 <_sbrk_r+0x1a>
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	200008d8 	.word	0x200008d8

0800859c <__malloc_lock>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__malloc_lock+0x8>)
 800859e:	f000 b809 	b.w	80085b4 <__retarget_lock_acquire_recursive>
 80085a2:	bf00      	nop
 80085a4:	200008e0 	.word	0x200008e0

080085a8 <__malloc_unlock>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__malloc_unlock+0x8>)
 80085aa:	f000 b804 	b.w	80085b6 <__retarget_lock_release_recursive>
 80085ae:	bf00      	nop
 80085b0:	200008e0 	.word	0x200008e0

080085b4 <__retarget_lock_acquire_recursive>:
 80085b4:	4770      	bx	lr

080085b6 <__retarget_lock_release_recursive>:
 80085b6:	4770      	bx	lr

080085b8 <_init>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr

080085c4 <_fini>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr
