
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001065c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  080107e8  080107e8  000207e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dc0  08010dc0  00030274  2**0
                  CONTENTS
  4 .ARM          00000008  08010dc0  08010dc0  00020dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dc8  08010dc8  00030274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dc8  08010dc8  00020dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dcc  08010dcc  00020dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08010dd0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b1c  20000278  08011044  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d94  08011044  00030d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000289f9  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000560d  00000000  00000000  00058c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  0005e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  0005fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002651a  00000000  00000000  000617f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000266cf  00000000  00000000  00087d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9172  00000000  00000000  000ae3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018754b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007954  00000000  00000000  001875a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080107cc 	.word	0x080107cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	080107cc 	.word	0x080107cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e92:	f000 f853 	bl	8000f3c <read_one_digit_from_keyboard>
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b23      	cmp	r3, #35	; 0x23
 8000e9e:	d10a      	bne.n	8000eb6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000ea0:	221e      	movs	r2, #30
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4824      	ldr	r0, [pc, #144]	; (8000f38 <read_digits+0xb0>)
 8000ea6:	f00f f84d 	bl	800ff44 <memset>
		keyboard.read_digits_position = 0;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <read_digits+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <read_digits+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000eba:	d109      	bne.n	8000ed0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <read_digits+0xb0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <read_digits+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <read_digits+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d028      	beq.n	8000f28 <read_digits+0xa0>
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b23      	cmp	r3, #35	; 0x23
 8000eda:	d025      	beq.n	8000f28 <read_digits+0xa0>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee0:	d022      	beq.n	8000f28 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <read_digits+0xb0>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <read_digits+0xb0>)
 8000ee8:	7f92      	ldrb	r2, [r2, #30]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dc11      	bgt.n	8000f12 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <read_digits+0xb0>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4911      	ldr	r1, [pc, #68]	; (8000f38 <read_digits+0xb0>)
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <read_digits+0xb0>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <read_digits+0xb0>)
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <read_digits+0xb0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <read_digits+0xb0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f10:	e00e      	b.n	8000f30 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <read_digits+0xb0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <read_digits+0xb0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <read_digits+0xb0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f26:	e003      	b.n	8000f30 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <read_digits+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	77da      	strb	r2, [r3, #31]
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200002ac 	.word	0x200002ac

08000f3c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f42:	2300      	movs	r3, #0
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	48cf      	ldr	r0, [pc, #828]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f4e:	f005 fddd 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f58:	48cc      	ldr	r0, [pc, #816]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f5a:	f005 fdd7 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	48c9      	ldr	r0, [pc, #804]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f66:	f005 fdd1 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	48c6      	ldr	r0, [pc, #792]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f72:	f005 fdcb 	bl	8006b0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	48c5      	ldr	r0, [pc, #788]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000f7c:	f005 fdae 	bl	8006adc <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d169      	bne.n	800105a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	48bf      	ldr	r0, [pc, #764]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f8e:	f005 fdbd 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	48bc      	ldr	r0, [pc, #752]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f9a:	f005 fdb7 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	48b9      	ldr	r0, [pc, #740]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f005 fdb1 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb0:	48b6      	ldr	r0, [pc, #728]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f005 fdab 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48b5      	ldr	r0, [pc, #724]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f005 fd8e 	bl	8006adc <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000fc6:	2331      	movs	r3, #49	; 0x31
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd0:	48ae      	ldr	r0, [pc, #696]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f005 fd9b 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	48ab      	ldr	r0, [pc, #684]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fde:	f005 fd95 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	48aa      	ldr	r0, [pc, #680]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f005 fd78 	bl	8006adc <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000ff2:	2334      	movs	r3, #52	; 0x34
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffc:	48a3      	ldr	r0, [pc, #652]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f005 fd85 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	48a0      	ldr	r0, [pc, #640]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800100a:	f005 fd7f 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	489f      	ldr	r0, [pc, #636]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001014:	f005 fd62 	bl	8006adc <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800101e:	2337      	movs	r3, #55	; 0x37
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4898      	ldr	r0, [pc, #608]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800102a:	f005 fd6f 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4895      	ldr	r0, [pc, #596]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001036:	f005 fd69 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800103a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103e:	4894      	ldr	r0, [pc, #592]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001040:	f005 fd4c 	bl	8006adc <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800104a:	232a      	movs	r3, #42	; 0x2a
 800104c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	488d      	ldr	r0, [pc, #564]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001056:	f005 fd59 	bl	8006b0c <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	488a      	ldr	r0, [pc, #552]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001062:	f005 fd53 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4887      	ldr	r0, [pc, #540]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800106e:	f005 fd4d 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4884      	ldr	r0, [pc, #528]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800107a:	f005 fd47 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001086:	f005 fd41 	bl	8006b0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4880      	ldr	r0, [pc, #512]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001090:	f005 fd24 	bl	8006adc <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d169      	bne.n	800116e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	487a      	ldr	r0, [pc, #488]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010a2:	f005 fd33 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4877      	ldr	r0, [pc, #476]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ae:	f005 fd2d 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4874      	ldr	r0, [pc, #464]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ba:	f005 fd27 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4871      	ldr	r0, [pc, #452]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010c6:	f005 fd21 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4870      	ldr	r0, [pc, #448]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f005 fd04 	bl	8006adc <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010da:	2332      	movs	r3, #50	; 0x32
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4869      	ldr	r0, [pc, #420]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010e6:	f005 fd11 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	4866      	ldr	r0, [pc, #408]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010f2:	f005 fd0b 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4865      	ldr	r0, [pc, #404]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f005 fcee 	bl	8006adc <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001106:	2335      	movs	r3, #53	; 0x35
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001112:	f005 fcfb 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	485b      	ldr	r0, [pc, #364]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800111e:	f005 fcf5 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	485a      	ldr	r0, [pc, #360]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001128:	f005 fcd8 	bl	8006adc <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001132:	2338      	movs	r3, #56	; 0x38
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4853      	ldr	r0, [pc, #332]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800113e:	f005 fce5 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4850      	ldr	r0, [pc, #320]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800114a:	f005 fcdf 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	484f      	ldr	r0, [pc, #316]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001154:	f005 fcc2 	bl	8006adc <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800115e:	2330      	movs	r3, #48	; 0x30
 8001160:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	4848      	ldr	r0, [pc, #288]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800116a:	f005 fccf 	bl	8006b0c <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001176:	f005 fcc9 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4842      	ldr	r0, [pc, #264]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001182:	f005 fcc3 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800118e:	f005 fcbd 	bl	8006b0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	483c      	ldr	r0, [pc, #240]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800119a:	f005 fcb7 	bl	8006b0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011a4:	f005 fc9a 	bl	8006adc <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d169      	bne.n	8001282 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4835      	ldr	r0, [pc, #212]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011b6:	f005 fca9 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c0:	4832      	ldr	r0, [pc, #200]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011c2:	f005 fca3 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	482f      	ldr	r0, [pc, #188]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011ce:	f005 fc9d 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011da:	f005 fc97 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	482c      	ldr	r0, [pc, #176]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f005 fc7a 	bl	8006adc <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011ee:	2333      	movs	r3, #51	; 0x33
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011fa:	f005 fc87 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001206:	f005 fc81 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4821      	ldr	r0, [pc, #132]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001210:	f005 fc64 	bl	8006adc <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800121a:	2336      	movs	r3, #54	; 0x36
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001226:	f005 fc71 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001232:	f005 fc6b 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 800123c:	f005 fc4e 	bl	8006adc <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001246:	2339      	movs	r3, #57	; 0x39
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001252:	f005 fc5b 	bl	8006b0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800125e:	f005 fc55 	bl	8006b0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001268:	f005 fc38 	bl	8006adc <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001272:	2323      	movs	r3, #35	; 0x23
 8001274:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800127e:	f005 fc45 	bl	8006b0c <HAL_GPIO_WritePin>
	}
	return digit;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40020400 	.word	0x40020400
 8001294:	40021000 	.word	0x40021000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f005 f8d9 	bl	8006454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f843 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 faf3 	bl	8001890 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012aa:	f000 f96b 	bl	8001584 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80012ae:	f00e faf9 	bl	800f8a4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80012b2:	f000 fa2b 	bl	800170c <MX_TIM2_Init>
  MX_SPI2_Init();
 80012b6:	f000 f99b 	bl	80015f0 <MX_SPI2_Init>
  MX_RNG_Init();
 80012ba:	f000 f94f 	bl	800155c <MX_RNG_Init>
  MX_TIM3_Init();
 80012be:	f000 fa73 	bl	80017a8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012c2:	f000 f9cb 	bl	800165c <MX_TIM1_Init>
  MX_I2C3_Init();
 80012c6:	f000 f8ed 	bl	80014a4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012ca:	f000 f8bd 	bl	8001448 <MX_I2C2_Init>
  MX_I2S3_Init();
 80012ce:	f000 f917 	bl	8001500 <MX_I2S3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012d2:	f000 f8ad 	bl	8001430 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012d6:	f001 fa53 	bl	8002780 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012da:	2000      	movs	r0, #0
 80012dc:	f001 fbf6 	bl	8002acc <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012e0:	2003      	movs	r0, #3
 80012e2:	f001 f9ef 	bl	80026c4 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f001 fbf0 	bl	8002acc <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f002 fab7 	bl	8003864 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fbe8 	bl	8002acc <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <main+0x8c>)
 80012fe:	f00a fb97 	bl	800ba30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x8c>)
 8001306:	f00a fc03 	bl	800bb10 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0x90>)
 800130c:	220a      	movs	r2, #10
 800130e:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 8001310:	f003 fd8c 	bl	8004e2c <detect_all_sensors_and_init>
  measure_sensors();
 8001314:	f003 fdb2 	bl	8004e7c <measure_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 8001318:	f001 fd22 	bl	8002d60 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800131c:	f00e fae8 	bl	800f8f0 <MX_USB_HOST_Process>
	 menu();
 8001320:	e7fa      	b.n	8001318 <main+0x80>
 8001322:	bf00      	nop
 8001324:	200003d4 	.word	0x200003d4
 8001328:	200002ac 	.word	0x200002ac

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b098      	sub	sp, #96	; 0x60
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2230      	movs	r2, #48	; 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00e fe02 	bl	800ff44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <SystemClock_Config+0xfc>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <SystemClock_Config+0xfc>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <SystemClock_Config+0xfc>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <SystemClock_Config+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <SystemClock_Config+0x100>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <SystemClock_Config+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001396:	2301      	movs	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c0:	4618      	mov	r0, r3
 80013c2:	f009 fa27 	bl	800a814 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013cc:	f000 fbe8 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2105      	movs	r1, #5
 80013ee:	4618      	mov	r0, r3
 80013f0:	f009 fc88 	bl	800ad04 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013fa:	f000 fbd1 	bl	8001ba0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f009 fe60 	bl	800b0d4 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800141a:	f000 fbc1 	bl	8001ba0 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3760      	adds	r7, #96	; 0x60
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	201c      	movs	r0, #28
 800143a:	f005 f97c 	bl	8006736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143e:	201c      	movs	r0, #28
 8001440:	f005 f995 	bl	800676e <HAL_NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C2_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C2_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C2_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C2_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C2_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C2_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C2_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C2_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C2_Init+0x50>)
 8001486:	f007 f8f1 	bl	800866c <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fb86 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000380 	.word	0x20000380
 800149c:	40005800 	.word	0x40005800
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_I2C3_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_I2C3_Init+0x58>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014e2:	f007 f8c3 	bl	800866c <HAL_I2C_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 fb58 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002d4 	.word	0x200002d4
 80014f8:	40005c00 	.word	0x40005c00
 80014fc:	000186a0 	.word	0x000186a0

08001500 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_I2S3_Init+0x54>)
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_I2S3_Init+0x58>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2S3_Init+0x54>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_I2S3_Init+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2S3_Init+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_I2S3_Init+0x54>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_I2S3_Init+0x54>)
 8001526:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800152a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2S3_Init+0x54>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_I2S3_Init+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2S3_Init+0x54>)
 800153a:	2201      	movs	r2, #1
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_I2S3_Init+0x54>)
 8001540:	f008 fcc8 	bl	8009ed4 <HAL_I2S_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800154a:	f000 fb29 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000514 	.word	0x20000514
 8001558:	40003c00 	.word	0x40003c00

0800155c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_RNG_Init+0x20>)
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <MX_RNG_Init+0x24>)
 8001564:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_RNG_Init+0x20>)
 8001568:	f009 fef4 	bl	800b354 <HAL_RNG_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001572:	f000 fb15 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000464 	.word	0x20000464
 8001580:	50060800 	.word	0x50060800

08001584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f009 ff4b 	bl	800b470 <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 fade 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000474 	.word	0x20000474
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_SPI2_Init+0x64>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <MX_SPI2_Init+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI2_Init+0x64>)
 80015fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI2_Init+0x64>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI2_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI2_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI2_Init+0x64>)
 800163c:	220a      	movs	r2, #10
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_SPI2_Init+0x64>)
 8001642:	f009 ff15 	bl	800b470 <HAL_SPI_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800164c:	f000 faa8 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000328 	.word	0x20000328
 8001658:	40003800 	.word	0x40003800

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00e fc6a 	bl	800ff44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <MX_TIM1_Init+0xa8>)
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <MX_TIM1_Init+0xac>)
 800167c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_TIM1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_TIM1_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_TIM1_Init+0xa8>)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_TIM1_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_TIM1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_TIM1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_TIM1_Init+0xa8>)
 80016d0:	f00a fb85 	bl	800bdde <HAL_TIM_Encoder_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016da:	f000 fa61 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_TIM1_Init+0xa8>)
 80016ec:	f00b f9ea 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016f6:	f000 fa53 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3730      	adds	r7, #48	; 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000041c 	.word	0x2000041c
 8001708:	40010000 	.word	0x40010000

0800170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM2_Init+0x98>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001732:	f240 3247 	movw	r2, #839	; 0x347
 8001736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM2_Init+0x98>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001740:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM2_Init+0x98>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001754:	f00a f91c 	bl	800b990 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800175e:	f000 fa1f 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001770:	f00a fda2 	bl	800c2b8 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177a:	f000 fa11 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800177e:	2310      	movs	r3, #16
 8001780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM2_Init+0x98>)
 800178c:	f00b f99a 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001796:	f000 fa03 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200004cc 	.word	0x200004cc

080017a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017da:	4a2c      	ldr	r2, [pc, #176]	; (800188c <MX_TIM3_Init+0xe4>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017e0:	f640 0233 	movw	r2, #2099	; 0x833
 80017e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_TIM3_Init+0xe0>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001800:	4821      	ldr	r0, [pc, #132]	; (8001888 <MX_TIM3_Init+0xe0>)
 8001802:	f00a f8c5 	bl	800b990 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800180c:	f000 f9c8 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	4619      	mov	r1, r3
 800181c:	481a      	ldr	r0, [pc, #104]	; (8001888 <MX_TIM3_Init+0xe0>)
 800181e:	f00a fd4b 	bl	800c2b8 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001828:	f000 f9ba 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800182c:	4816      	ldr	r0, [pc, #88]	; (8001888 <MX_TIM3_Init+0xe0>)
 800182e:	f00a fa7d 	bl	800bd2c <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001838:	f000 f9b2 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4619      	mov	r1, r3
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <MX_TIM3_Init+0xe0>)
 800184c:	f00b f93a 	bl	800cac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001856:	f000 f9a3 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	; 0x60
 800185c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_TIM3_Init+0xe0>)
 8001872:	f00a fc63 	bl	800c13c <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800187c:	f000 f990 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3738      	adds	r7, #56	; 0x38
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200003d4 	.word	0x200003d4
 800188c:	40000400 	.word	0x40000400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	4bab      	ldr	r3, [pc, #684]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4aaa      	ldr	r2, [pc, #680]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4ba8      	ldr	r3, [pc, #672]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4ba4      	ldr	r3, [pc, #656]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4aa3      	ldr	r2, [pc, #652]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4ba1      	ldr	r3, [pc, #644]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b9d      	ldr	r3, [pc, #628]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a9c      	ldr	r2, [pc, #624]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a95      	ldr	r2, [pc, #596]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a8e      	ldr	r2, [pc, #568]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a87      	ldr	r2, [pc, #540]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <MX_GPIO_Init+0x2c8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800194e:	2200      	movs	r2, #0
 8001950:	217c      	movs	r1, #124	; 0x7c
 8001952:	4882      	ldr	r0, [pc, #520]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 8001954:	f005 f8da 	bl	8006b0c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	2101      	movs	r1, #1
 800195c:	4880      	ldr	r0, [pc, #512]	; (8001b60 <MX_GPIO_Init+0x2d0>)
 800195e:	f005 f8d5 	bl	8006b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001962:	2200      	movs	r2, #0
 8001964:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001968:	487e      	ldr	r0, [pc, #504]	; (8001b64 <MX_GPIO_Init+0x2d4>)
 800196a:	f005 f8cf 	bl	8006b0c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001974:	487a      	ldr	r0, [pc, #488]	; (8001b60 <MX_GPIO_Init+0x2d0>)
 8001976:	f005 f8c9 	bl	8006b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001980:	4879      	ldr	r0, [pc, #484]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001982:	f005 f8c3 	bl	8006b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001986:	2374      	movs	r3, #116	; 0x74
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	486f      	ldr	r0, [pc, #444]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 800199e:	f004 ff01 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019a2:	2308      	movs	r3, #8
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4868      	ldr	r0, [pc, #416]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 80019ba:	f004 fef3 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin;
 80019be:	f242 0302 	movw	r3, #8194	; 0x2002
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4863      	ldr	r0, [pc, #396]	; (8001b60 <MX_GPIO_Init+0x2d0>)
 80019d4:	f004 fee6 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019d8:	f640 0341 	movw	r3, #2113	; 0x841
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	485b      	ldr	r0, [pc, #364]	; (8001b60 <MX_GPIO_Init+0x2d0>)
 80019f2:	f004 fed7 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019f6:	2308      	movs	r3, #8
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a06:	2305      	movs	r3, #5
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4853      	ldr	r0, [pc, #332]	; (8001b60 <MX_GPIO_Init+0x2d0>)
 8001a12:	f004 fec7 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a16:	2304      	movs	r3, #4
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	484f      	ldr	r0, [pc, #316]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001a2a:	f004 febb 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <MX_GPIO_Init+0x2dc>)
 8001a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4846      	ldr	r0, [pc, #280]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 8001a44:	f004 feae 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	483f      	ldr	r0, [pc, #252]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 8001a5e:	f004 fea1 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a62:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	483c      	ldr	r0, [pc, #240]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001a78:	f004 fe94 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a7c:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a80:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	4833      	ldr	r0, [pc, #204]	; (8001b64 <MX_GPIO_Init+0x2d4>)
 8001a96:	f004 fe85 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482d      	ldr	r0, [pc, #180]	; (8001b64 <MX_GPIO_Init+0x2d4>)
 8001aae:	f004 fe79 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4827      	ldr	r0, [pc, #156]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001aca:	f004 fe6b 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001ace:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4820      	ldr	r0, [pc, #128]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001ae8:	f004 fe5c 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	2312      	movs	r3, #18
 8001af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afe:	2304      	movs	r3, #4
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <MX_GPIO_Init+0x2d8>)
 8001b0a:	f004 fe4b 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 8001b22:	f004 fe3f 	bl	80067a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_GPIO_Init+0x2e0>)
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <MX_GPIO_Init+0x2cc>)
 8001b3a:	f004 fe33 	bl	80067a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2028      	movs	r0, #40	; 0x28
 8001b44:	f004 fdf7 	bl	8006736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b48:	2028      	movs	r0, #40	; 0x28
 8001b4a:	f004 fe10 	bl	800676e <HAL_NVIC_EnableIRQ>

}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	10110000 	.word	0x10110000
 8001b70:	10120000 	.word	0x10120000

08001b74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b84:	d105      	bne.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x28>)
 8001b8e:	f004 ffbd 	bl	8006b0c <HAL_GPIO_WritePin>
	}
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020c00 	.word	0x40020c00

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <Error_Handler+0x8>
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x5c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bea:	2007      	movs	r0, #7
 8001bec:	f004 fd98 	bl	8006720 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2005      	movs	r0, #5
 8001bf6:	f004 fd9e 	bl	8006736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f004 fdb7 	bl	800676e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a42      	ldr	r2, [pc, #264]	; (8001d34 <HAL_I2C_MspInit+0x128>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d12d      	bne.n	8001c8a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	2312      	movs	r3, #18
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4835      	ldr	r0, [pc, #212]	; (8001d3c <HAL_I2C_MspInit+0x130>)
 8001c68:	f004 fd9c 	bl	80067a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c88:	e050      	b.n	8001d2c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <HAL_I2C_MspInit+0x134>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d14b      	bne.n	8001d2c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd2:	2312      	movs	r3, #18
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4816      	ldr	r0, [pc, #88]	; (8001d44 <HAL_I2C_MspInit+0x138>)
 8001cea:	f004 fd5b 	bl	80067a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf4:	2312      	movs	r3, #18
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d00:	2304      	movs	r3, #4
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480f      	ldr	r0, [pc, #60]	; (8001d48 <HAL_I2C_MspInit+0x13c>)
 8001d0c:	f004 fd4a 	bl	80067a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_I2C_MspInit+0x12c>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40005800 	.word	0x40005800
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40005c00 	.word	0x40005c00
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_I2S_MspInit+0xfc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d168      	bne.n	8001e40 <HAL_I2S_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_I2S_MspInit+0x100>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    PB4     ------> I2S3_ext_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001dde:	2310      	movs	r3, #16
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dee:	2306      	movs	r3, #6
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4815      	ldr	r0, [pc, #84]	; (8001e50 <HAL_I2S_MspInit+0x104>)
 8001dfa:	f004 fcd3 	bl	80067a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e10:	2306      	movs	r3, #6
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480e      	ldr	r0, [pc, #56]	; (8001e54 <HAL_I2S_MspInit+0x108>)
 8001e1c:	f004 fcc2 	bl	80067a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e20:	2310      	movs	r3, #16
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 8001e30:	2307      	movs	r3, #7
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <HAL_I2S_MspInit+0x10c>)
 8001e3c:	f004 fcb2 	bl	80067a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	; 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40003c00 	.word	0x40003c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020400 	.word	0x40020400

08001e5c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_RNG_MspInit+0x3c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RNG_MspInit+0x40>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RNG_MspInit+0x40>)
 8001e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_RNG_MspInit+0x40>)
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	50060800 	.word	0x50060800
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a41      	ldr	r2, [pc, #260]	; (8001fc4 <HAL_SPI_MspInit+0x124>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a3f      	ldr	r2, [pc, #252]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a38      	ldr	r2, [pc, #224]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001efa:	23e0      	movs	r3, #224	; 0xe0
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	482d      	ldr	r0, [pc, #180]	; (8001fcc <HAL_SPI_MspInit+0x12c>)
 8001f16:	f004 fc45 	bl	80067a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f1a:	e04f      	b.n	8001fbc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_SPI_MspInit+0x130>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d14a      	bne.n	8001fbc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_SPI_MspInit+0x128>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	480f      	ldr	r0, [pc, #60]	; (8001fd4 <HAL_SPI_MspInit+0x134>)
 8001f96:	f004 fc05 	bl	80067a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f9a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fac:	2305      	movs	r3, #5
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <HAL_SPI_MspInit+0x138>)
 8001fb8:	f004 fbf4 	bl	80067a4 <HAL_GPIO_Init>
}
 8001fbc:	bf00      	nop
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40013000 	.word	0x40013000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40003800 	.word	0x40003800
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020400 	.word	0x40020400

08001fdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12c      	bne.n	8002058 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_TIM_Encoder_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002036:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002048:	2301      	movs	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002054:	f004 fba6 	bl	80067a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010000 	.word	0x40010000
 8002064:	40023800 	.word	0x40023800
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d10e      	bne.n	800209c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800209a:	e01a      	b.n	80020d2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_TIM_Base_MspInit+0x74>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d115      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_TIM_Base_MspInit+0x70>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	201d      	movs	r0, #29
 80020c8:	f004 fb35 	bl	8006736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020cc:	201d      	movs	r0, #29
 80020ce:	f004 fb4e 	bl	800676e <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40000400 	.word	0x40000400

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f004 f9e2 	bl	80064f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 800214c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002150:	481b      	ldr	r0, [pc, #108]	; (80021c0 <TIM2_IRQHandler+0x78>)
 8002152:	f004 fcf4 	bl	8006b3e <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <TIM2_IRQHandler+0x7c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d111      	bne.n	8002182 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <TIM2_IRQHandler+0x80>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2bc8      	cmp	r3, #200	; 0xc8
 8002164:	dc0a      	bgt.n	800217c <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <TIM2_IRQHandler+0x80>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <TIM2_IRQHandler+0x84>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <TIM2_IRQHandler+0x80>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <TIM2_IRQHandler+0x80>)
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e002      	b.n	8002182 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <TIM2_IRQHandler+0x7c>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <TIM2_IRQHandler+0x7c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d114      	bne.n	80021b4 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <TIM2_IRQHandler+0x80>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b63      	cmp	r3, #99	; 0x63
 8002190:	dd0a      	ble.n	80021a8 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <TIM2_IRQHandler+0x80>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <TIM2_IRQHandler+0x84>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <TIM2_IRQHandler+0x80>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <TIM2_IRQHandler+0x80>)
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e005      	b.n	80021b4 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <TIM2_IRQHandler+0x7c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
		  i = 100;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <TIM2_IRQHandler+0x80>)
 80021b0:	2264      	movs	r2, #100	; 0x64
 80021b2:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <TIM2_IRQHandler+0x84>)
 80021b6:	f009 feb8 	bl	800bf2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	20000294 	.word	0x20000294
 80021c8:	20000000 	.word	0x20000000
 80021cc:	200004cc 	.word	0x200004cc

080021d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80021d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <TIM3_IRQHandler+0x1c>)
 80021da:	f004 fcb0 	bl	8006b3e <HAL_GPIO_TogglePin>
  read_digits();
 80021de:	f7fe fe53 	bl	8000e88 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <TIM3_IRQHandler+0x20>)
 80021e4:	f009 fea1 	bl	800bf2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	200003d4 	.word	0x200003d4

080021f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021fc:	f004 fcba 	bl	8006b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <OTG_FS_IRQHandler+0x10>)
 800220a:	f004 ff35 	bl	8007078 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a80 	.word	0x20000a80

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f00d fe34 	bl	800feb4 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000298 	.word	0x20000298
 8002280:	20000d98 	.word	0x20000d98

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b08b      	sub	sp, #44	; 0x2c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4604      	mov	r4, r0
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	4603      	mov	r3, r0
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]
 80022c2:	4613      	mov	r3, r2
 80022c4:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	f1c3 0301 	rsb	r3, r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80022e0:	e061      	b.n	80023a6 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e018      	b.n	800231e <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	b298      	uxth	r0, r3
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	883a      	ldrh	r2, [r7, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f000 fc0b 	bl	8002b18 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	b298      	uxth	r0, r3
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	b29b      	uxth	r3, r3
 800230a:	88ba      	ldrh	r2, [r7, #4]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	b29b      	uxth	r3, r3
 8002310:	883a      	ldrh	r2, [r7, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	f000 fc00 	bl	8002b18 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	3301      	adds	r3, #1
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	4413      	add	r3, r2
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	429a      	cmp	r2, r3
 8002328:	dde0      	ble.n	80022ec <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800232a:	88fa      	ldrh	r2, [r7, #6]
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e018      	b.n	8002366 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	b298      	uxth	r0, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	b29a      	uxth	r2, r3
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	b29b      	uxth	r3, r3
 8002342:	883a      	ldrh	r2, [r7, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f000 fbe7 	bl	8002b18 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b298      	uxth	r0, r3
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	b29b      	uxth	r3, r3
 8002352:	88ba      	ldrh	r2, [r7, #4]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29b      	uxth	r3, r3
 8002358:	883a      	ldrh	r2, [r7, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	f000 fbdc 	bl	8002b18 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	4413      	add	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	429a      	cmp	r2, r3
 8002370:	dde0      	ble.n	8002334 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	3301      	adds	r3, #1
 8002376:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	3302      	adds	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005a      	lsls	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	dd09      	ble.n	80023a6 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	3b01      	subs	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3302      	adds	r3, #2
 80023a4:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	da99      	bge.n	80022e2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	372c      	adds	r7, #44	; 0x2c
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	4603      	mov	r3, r0
 80023cc:	80bb      	strh	r3, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	71bb      	strb	r3, [r7, #6]
 80023d2:	4613      	mov	r3, r2
 80023d4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b1f      	cmp	r3, #31
 80023de:	d902      	bls.n	80023e6 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	3b20      	subs	r3, #32
 80023e4:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	753b      	strb	r3, [r7, #20]
 80023ea:	e012      	b.n	8002412 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80023ec:	7dfa      	ldrb	r2, [r7, #23]
 80023ee:	7d38      	ldrb	r0, [r7, #20]
 80023f0:	7d39      	ldrb	r1, [r7, #20]
 80023f2:	4c3b      	ldr	r4, [pc, #236]	; (80024e0 <ILI9341_Draw_Char+0x128>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4423      	add	r3, r4
 80023fe:	4403      	add	r3, r0
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	440b      	add	r3, r1
 8002408:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800240c:	7d3b      	ldrb	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	753b      	strb	r3, [r7, #20]
 8002412:	7d3b      	ldrb	r3, [r7, #20]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d9e9      	bls.n	80023ec <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	b299      	uxth	r1, r3
 800241c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800241e:	461a      	mov	r2, r3
 8002420:	0052      	lsls	r2, r2, #1
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	b29c      	uxth	r4, r3
 800242e:	88b8      	ldrh	r0, [r7, #4]
 8002430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4623      	mov	r3, r4
 8002436:	f000 fc37 	bl	8002ca8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800243a:	2300      	movs	r3, #0
 800243c:	757b      	strb	r3, [r7, #21]
 800243e:	e046      	b.n	80024ce <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002440:	2300      	movs	r3, #0
 8002442:	75bb      	strb	r3, [r7, #22]
 8002444:	e03d      	b.n	80024c2 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8002446:	7d7b      	ldrb	r3, [r7, #21]
 8002448:	f107 0218 	add.w	r2, r7, #24
 800244c:	4413      	add	r3, r2
 800244e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002452:	461a      	mov	r2, r3
 8002454:	7dbb      	ldrb	r3, [r7, #22]
 8002456:	fa42 f303 	asr.w	r3, r2, r3
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02c      	beq.n	80024bc <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8002462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10f      	bne.n	8002488 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002468:	7d7b      	ldrb	r3, [r7, #21]
 800246a:	b29a      	uxth	r2, r3
 800246c:	88bb      	ldrh	r3, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	b298      	uxth	r0, r3
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	b29a      	uxth	r2, r3
 8002476:	7dbb      	ldrb	r3, [r7, #22]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4413      	add	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	4619      	mov	r1, r3
 8002482:	f000 fb49 	bl	8002b18 <ILI9341_Draw_Pixel>
 8002486:	e019      	b.n	80024bc <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002488:	7d7b      	ldrb	r3, [r7, #21]
 800248a:	b29b      	uxth	r3, r3
 800248c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800248e:	fb12 f303 	smulbb	r3, r2, r3
 8002492:	b29a      	uxth	r2, r3
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	b298      	uxth	r0, r3
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	b29a      	uxth	r2, r3
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80024a4:	fb11 f303 	smulbb	r3, r1, r3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	b299      	uxth	r1, r3
 80024ae:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80024b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4623      	mov	r3, r4
 80024b8:	f000 fbf6 	bl	8002ca8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80024bc:	7dbb      	ldrb	r3, [r7, #22]
 80024be:	3301      	adds	r3, #1
 80024c0:	75bb      	strb	r3, [r7, #22]
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	2b07      	cmp	r3, #7
 80024c6:	d9be      	bls.n	8002446 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80024c8:	7d7b      	ldrb	r3, [r7, #21]
 80024ca:	3301      	adds	r3, #1
 80024cc:	757b      	strb	r3, [r7, #21]
 80024ce:	7d7b      	ldrb	r3, [r7, #21]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d9b5      	bls.n	8002440 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	0801091c 	.word	0x0801091c

080024e4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	727b      	strb	r3, [r7, #9]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 80024fe:	e016      	b.n	800252e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60fa      	str	r2, [r7, #12]
 8002506:	7818      	ldrb	r0, [r3, #0]
 8002508:	88fc      	ldrh	r4, [r7, #6]
 800250a:	7a7a      	ldrb	r2, [r7, #9]
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	8c3b      	ldrh	r3, [r7, #32]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4623      	mov	r3, r4
 8002518:	f7ff ff4e 	bl	80023b8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800251c:	8c3b      	ldrh	r3, [r7, #32]
 800251e:	461a      	mov	r2, r3
 8002520:	0052      	lsls	r2, r2, #1
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	897b      	ldrh	r3, [r7, #10]
 800252a:	4413      	add	r3, r2
 800252c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e4      	bne.n	8002500 <ILI9341_Draw_Text+0x1c>
    }
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}

08002540 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002544:	2200      	movs	r2, #0
 8002546:	2110      	movs	r1, #16
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <ILI9341_SPI_Init+0x14>)
 800254a:	f004 fadf 	bl	8006b0c <HAL_GPIO_WritePin>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002562:	1df9      	adds	r1, r7, #7
 8002564:	2301      	movs	r3, #1
 8002566:	2201      	movs	r2, #1
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <ILI9341_SPI_Send+0x20>)
 800256a:	f009 f80a 	bl	800b582 <HAL_SPI_Transmit>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000328 	.word	0x20000328

0800257c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2110      	movs	r1, #16
 800258a:	480a      	ldr	r0, [pc, #40]	; (80025b4 <ILI9341_Write_Command+0x38>)
 800258c:	f004 fabe 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002590:	2200      	movs	r2, #0
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <ILI9341_Write_Command+0x38>)
 8002596:	f004 fab9 	bl	8006b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ffdb 	bl	8002558 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80025a2:	2201      	movs	r2, #1
 80025a4:	2110      	movs	r1, #16
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <ILI9341_Write_Command+0x38>)
 80025a8:	f004 fab0 	bl	8006b0c <HAL_GPIO_WritePin>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80025c2:	2201      	movs	r2, #1
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	480a      	ldr	r0, [pc, #40]	; (80025f0 <ILI9341_Write_Data+0x38>)
 80025c8:	f004 faa0 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2110      	movs	r1, #16
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <ILI9341_Write_Data+0x38>)
 80025d2:	f004 fa9b 	bl	8006b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ffbd 	bl	8002558 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	2110      	movs	r1, #16
 80025e2:	4803      	ldr	r0, [pc, #12]	; (80025f0 <ILI9341_Write_Data+0x38>)
 80025e4:	f004 fa92 	bl	8006b0c <HAL_GPIO_WritePin>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4604      	mov	r4, r0
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	80fb      	strh	r3, [r7, #6]
 8002606:	4603      	mov	r3, r0
 8002608:	80bb      	strh	r3, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	807b      	strh	r3, [r7, #2]
 800260e:	4613      	mov	r3, r2
 8002610:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002612:	202a      	movs	r0, #42	; 0x2a
 8002614:	f7ff ffb2 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b29b      	uxth	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ffc9 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffc4 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b29b      	uxth	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ffbd 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ffb8 	bl	80025b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002648:	202b      	movs	r0, #43	; 0x2b
 800264a:	f7ff ff97 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	b29b      	uxth	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffae 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ffa9 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ffa2 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002674:	883b      	ldrh	r3, [r7, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff9d 	bl	80025b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800267e:	202c      	movs	r0, #44	; 0x2c
 8002680:	f7ff ff7c 	bl	800257c <ILI9341_Write_Command>
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}

0800268c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2120      	movs	r1, #32
 8002694:	480a      	ldr	r0, [pc, #40]	; (80026c0 <ILI9341_Reset+0x34>)
 8002696:	f004 fa39 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 800269a:	20c8      	movs	r0, #200	; 0xc8
 800269c:	f003 ff4c 	bl	8006538 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2110      	movs	r1, #16
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <ILI9341_Reset+0x34>)
 80026a6:	f004 fa31 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80026aa:	20c8      	movs	r0, #200	; 0xc8
 80026ac:	f003 ff44 	bl	8006538 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80026b0:	2201      	movs	r2, #1
 80026b2:	2120      	movs	r1, #32
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <ILI9341_Reset+0x34>)
 80026b6:	f004 fa29 	bl	8006b0c <HAL_GPIO_WritePin>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80026d2:	2036      	movs	r0, #54	; 0x36
 80026d4:	f7ff ff52 	bl	800257c <ILI9341_Write_Command>
HAL_Delay(1);
 80026d8:	2001      	movs	r0, #1
 80026da:	f003 ff2d 	bl	8006538 <HAL_Delay>
	
switch(screen_rotation) 
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d837      	bhi.n	8002754 <ILI9341_Set_Rotation+0x90>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <ILI9341_Set_Rotation+0x28>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	08002713 	.word	0x08002713
 80026f4:	08002729 	.word	0x08002729
 80026f8:	0800273f 	.word	0x0800273f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80026fc:	2048      	movs	r0, #72	; 0x48
 80026fe:	f7ff ff5b 	bl	80025b8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <ILI9341_Set_Rotation+0x9c>)
 8002704:	22f0      	movs	r2, #240	; 0xf0
 8002706:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <ILI9341_Set_Rotation+0xa0>)
 800270a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800270e:	801a      	strh	r2, [r3, #0]
			break;
 8002710:	e021      	b.n	8002756 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002712:	2028      	movs	r0, #40	; 0x28
 8002714:	f7ff ff50 	bl	80025b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <ILI9341_Set_Rotation+0x9c>)
 800271a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800271e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <ILI9341_Set_Rotation+0xa0>)
 8002722:	22f0      	movs	r2, #240	; 0xf0
 8002724:	801a      	strh	r2, [r3, #0]
			break;
 8002726:	e016      	b.n	8002756 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002728:	2088      	movs	r0, #136	; 0x88
 800272a:	f7ff ff45 	bl	80025b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <ILI9341_Set_Rotation+0x9c>)
 8002730:	22f0      	movs	r2, #240	; 0xf0
 8002732:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <ILI9341_Set_Rotation+0xa0>)
 8002736:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800273a:	801a      	strh	r2, [r3, #0]
			break;
 800273c:	e00b      	b.n	8002756 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800273e:	20e8      	movs	r0, #232	; 0xe8
 8002740:	f7ff ff3a 	bl	80025b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <ILI9341_Set_Rotation+0x9c>)
 8002746:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800274a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <ILI9341_Set_Rotation+0xa0>)
 800274e:	22f0      	movs	r2, #240	; 0xf0
 8002750:	801a      	strh	r2, [r3, #0]
			break;
 8002752:	e000      	b.n	8002756 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002754:	bf00      	nop
	}
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000000a 	.word	0x2000000a
 8002764:	20000008 	.word	0x20000008

08002768 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2120      	movs	r1, #32
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <ILI9341_Enable+0x14>)
 8002772:	f004 f9cb 	bl	8006b0c <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002784:	f7ff fff0 	bl	8002768 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002788:	f7ff feda 	bl	8002540 <ILI9341_SPI_Init>
ILI9341_Reset();
 800278c:	f7ff ff7e 	bl	800268c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002790:	2001      	movs	r0, #1
 8002792:	f7ff fef3 	bl	800257c <ILI9341_Write_Command>
HAL_Delay(1000);
 8002796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800279a:	f003 fecd 	bl	8006538 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800279e:	20cb      	movs	r0, #203	; 0xcb
 80027a0:	f7ff feec 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80027a4:	2039      	movs	r0, #57	; 0x39
 80027a6:	f7ff ff07 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80027aa:	202c      	movs	r0, #44	; 0x2c
 80027ac:	f7ff ff04 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff ff01 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80027b6:	2034      	movs	r0, #52	; 0x34
 80027b8:	f7ff fefe 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80027bc:	2002      	movs	r0, #2
 80027be:	f7ff fefb 	bl	80025b8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80027c2:	20cf      	movs	r0, #207	; 0xcf
 80027c4:	f7ff feda 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff fef5 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80027ce:	20c1      	movs	r0, #193	; 0xc1
 80027d0:	f7ff fef2 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80027d4:	2030      	movs	r0, #48	; 0x30
 80027d6:	f7ff feef 	bl	80025b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80027da:	20e8      	movs	r0, #232	; 0xe8
 80027dc:	f7ff fece 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80027e0:	2085      	movs	r0, #133	; 0x85
 80027e2:	f7ff fee9 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff fee6 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80027ec:	2078      	movs	r0, #120	; 0x78
 80027ee:	f7ff fee3 	bl	80025b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80027f2:	20ea      	movs	r0, #234	; 0xea
 80027f4:	f7ff fec2 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fedd 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7ff feda 	bl	80025b8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002804:	20ed      	movs	r0, #237	; 0xed
 8002806:	f7ff feb9 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800280a:	2064      	movs	r0, #100	; 0x64
 800280c:	f7ff fed4 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002810:	2003      	movs	r0, #3
 8002812:	f7ff fed1 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002816:	2012      	movs	r0, #18
 8002818:	f7ff fece 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800281c:	2081      	movs	r0, #129	; 0x81
 800281e:	f7ff fecb 	bl	80025b8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002822:	20f7      	movs	r0, #247	; 0xf7
 8002824:	f7ff feaa 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002828:	2020      	movs	r0, #32
 800282a:	f7ff fec5 	bl	80025b8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800282e:	20c0      	movs	r0, #192	; 0xc0
 8002830:	f7ff fea4 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002834:	2023      	movs	r0, #35	; 0x23
 8002836:	f7ff febf 	bl	80025b8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800283a:	20c1      	movs	r0, #193	; 0xc1
 800283c:	f7ff fe9e 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002840:	2010      	movs	r0, #16
 8002842:	f7ff feb9 	bl	80025b8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002846:	20c5      	movs	r0, #197	; 0xc5
 8002848:	f7ff fe98 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800284c:	203e      	movs	r0, #62	; 0x3e
 800284e:	f7ff feb3 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002852:	2028      	movs	r0, #40	; 0x28
 8002854:	f7ff feb0 	bl	80025b8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002858:	20c7      	movs	r0, #199	; 0xc7
 800285a:	f7ff fe8f 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800285e:	2086      	movs	r0, #134	; 0x86
 8002860:	f7ff feaa 	bl	80025b8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002864:	2036      	movs	r0, #54	; 0x36
 8002866:	f7ff fe89 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800286a:	2048      	movs	r0, #72	; 0x48
 800286c:	f7ff fea4 	bl	80025b8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002870:	203a      	movs	r0, #58	; 0x3a
 8002872:	f7ff fe83 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002876:	2055      	movs	r0, #85	; 0x55
 8002878:	f7ff fe9e 	bl	80025b8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800287c:	20b1      	movs	r0, #177	; 0xb1
 800287e:	f7ff fe7d 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7ff fe98 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002888:	2018      	movs	r0, #24
 800288a:	f7ff fe95 	bl	80025b8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800288e:	20b6      	movs	r0, #182	; 0xb6
 8002890:	f7ff fe74 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002894:	2008      	movs	r0, #8
 8002896:	f7ff fe8f 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800289a:	2082      	movs	r0, #130	; 0x82
 800289c:	f7ff fe8c 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80028a0:	2027      	movs	r0, #39	; 0x27
 80028a2:	f7ff fe89 	bl	80025b8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80028a6:	20f2      	movs	r0, #242	; 0xf2
 80028a8:	f7ff fe68 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff fe83 	bl	80025b8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80028b2:	2026      	movs	r0, #38	; 0x26
 80028b4:	f7ff fe62 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f7ff fe7d 	bl	80025b8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80028be:	20e0      	movs	r0, #224	; 0xe0
 80028c0:	f7ff fe5c 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80028c4:	200f      	movs	r0, #15
 80028c6:	f7ff fe77 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028ca:	2031      	movs	r0, #49	; 0x31
 80028cc:	f7ff fe74 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80028d0:	202b      	movs	r0, #43	; 0x2b
 80028d2:	f7ff fe71 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028d6:	200c      	movs	r0, #12
 80028d8:	f7ff fe6e 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80028dc:	200e      	movs	r0, #14
 80028de:	f7ff fe6b 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80028e2:	2008      	movs	r0, #8
 80028e4:	f7ff fe68 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80028e8:	204e      	movs	r0, #78	; 0x4e
 80028ea:	f7ff fe65 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80028ee:	20f1      	movs	r0, #241	; 0xf1
 80028f0:	f7ff fe62 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80028f4:	2037      	movs	r0, #55	; 0x37
 80028f6:	f7ff fe5f 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80028fa:	2007      	movs	r0, #7
 80028fc:	f7ff fe5c 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002900:	2010      	movs	r0, #16
 8002902:	f7ff fe59 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002906:	2003      	movs	r0, #3
 8002908:	f7ff fe56 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800290c:	200e      	movs	r0, #14
 800290e:	f7ff fe53 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002912:	2009      	movs	r0, #9
 8002914:	f7ff fe50 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7ff fe4d 	bl	80025b8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800291e:	20e1      	movs	r0, #225	; 0xe1
 8002920:	f7ff fe2c 	bl	800257c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7ff fe47 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800292a:	200e      	movs	r0, #14
 800292c:	f7ff fe44 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002930:	2014      	movs	r0, #20
 8002932:	f7ff fe41 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002936:	2003      	movs	r0, #3
 8002938:	f7ff fe3e 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800293c:	2011      	movs	r0, #17
 800293e:	f7ff fe3b 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002942:	2007      	movs	r0, #7
 8002944:	f7ff fe38 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002948:	2031      	movs	r0, #49	; 0x31
 800294a:	f7ff fe35 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800294e:	20c1      	movs	r0, #193	; 0xc1
 8002950:	f7ff fe32 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002954:	2048      	movs	r0, #72	; 0x48
 8002956:	f7ff fe2f 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800295a:	2008      	movs	r0, #8
 800295c:	f7ff fe2c 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002960:	200f      	movs	r0, #15
 8002962:	f7ff fe29 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002966:	200c      	movs	r0, #12
 8002968:	f7ff fe26 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800296c:	2031      	movs	r0, #49	; 0x31
 800296e:	f7ff fe23 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f7ff fe20 	bl	80025b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002978:	200f      	movs	r0, #15
 800297a:	f7ff fe1d 	bl	80025b8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800297e:	2011      	movs	r0, #17
 8002980:	f7ff fdfc 	bl	800257c <ILI9341_Write_Command>
HAL_Delay(120);
 8002984:	2078      	movs	r0, #120	; 0x78
 8002986:	f003 fdd7 	bl	8006538 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800298a:	2029      	movs	r0, #41	; 0x29
 800298c:	f7ff fdf6 	bl	800257c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002990:	2003      	movs	r0, #3
 8002992:	f7ff fe97 	bl	80026c4 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002996:	200a      	movs	r0, #10
 8002998:	f003 fdce 	bl	8006538 <HAL_Delay>
//
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}

080029a0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	80fb      	strh	r3, [r7, #6]
 80029ac:	466b      	mov	r3, sp
 80029ae:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029bc:	d202      	bcs.n	80029c4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e002      	b.n	80029ca <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80029c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80029ca:	2201      	movs	r2, #1
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	483d      	ldr	r0, [pc, #244]	; (8002ac4 <ILI9341_Draw_Colour_Burst+0x124>)
 80029d0:	f004 f89c 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2110      	movs	r1, #16
 80029d8:	483a      	ldr	r0, [pc, #232]	; (8002ac4 <ILI9341_Draw_Colour_Burst+0x124>)
 80029da:	f004 f897 	bl	8006b0c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80029e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80029ea:	4623      	mov	r3, r4
 80029ec:	3b01      	subs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	4620      	mov	r0, r4
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	00cb      	lsls	r3, r1, #3
 8002a00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a04:	00c2      	lsls	r2, r0, #3
 8002a06:	4620      	mov	r0, r4
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	00cb      	lsls	r3, r1, #3
 8002a16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a1a:	00c2      	lsls	r2, r0, #3
 8002a1c:	1de3      	adds	r3, r4, #7
 8002a1e:	08db      	lsrs	r3, r3, #3
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	ebad 0d03 	sub.w	sp, sp, r3
 8002a26:	466b      	mov	r3, sp
 8002a28:	3300      	adds	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	e00e      	b.n	8002a50 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a3c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	3301      	adds	r3, #1
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	b2d1      	uxtb	r1, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3ec      	bcc.n	8002a32 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a72:	fb01 f202 	mul.w	r2, r1, r2
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a84:	e009      	b.n	8002a9a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002a90:	f008 fd77 	bl	800b582 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	3301      	adds	r3, #1
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3f1      	bcc.n	8002a86 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002aac:	f008 fd69 	bl	800b582 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <ILI9341_Draw_Colour_Burst+0x124>)
 8002ab6:	f004 f829 	bl	8006b0c <HAL_GPIO_WritePin>
 8002aba:	46ad      	mov	sp, r5
}
 8002abc:	bf00      	nop
 8002abe:	3730      	adds	r7, #48	; 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	20000328 	.word	0x20000328

08002acc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <ILI9341_Fill_Screen+0x44>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <ILI9341_Fill_Screen+0x48>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7ff fd85 	bl	80025f4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <ILI9341_Fill_Screen+0x44>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <ILI9341_Fill_Screen+0x48>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	fb03 f302 	mul.w	r3, r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff4c 	bl	80029a0 <ILI9341_Draw_Colour_Burst>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000000a 	.word	0x2000000a
 8002b14:	20000008 	.word	0x20000008

08002b18 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
 8002b22:	460b      	mov	r3, r1
 8002b24:	80bb      	strh	r3, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <ILI9341_Draw_Pixel+0x180>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	f080 80ac 	bcs.w	8002c90 <ILI9341_Draw_Pixel+0x178>
 8002b38:	4b58      	ldr	r3, [pc, #352]	; (8002c9c <ILI9341_Draw_Pixel+0x184>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	88ba      	ldrh	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f080 80a5 	bcs.w	8002c90 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b46:	2200      	movs	r2, #0
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	4855      	ldr	r0, [pc, #340]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002b4c:	f003 ffde 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2110      	movs	r1, #16
 8002b54:	4852      	ldr	r0, [pc, #328]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002b56:	f003 ffd9 	bl	8006b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002b5a:	202a      	movs	r0, #42	; 0x2a
 8002b5c:	f7ff fcfc 	bl	8002558 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002b60:	2201      	movs	r2, #1
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	484e      	ldr	r0, [pc, #312]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002b66:	f003 ffd1 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	484c      	ldr	r0, [pc, #304]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002b70:	f003 ffcc 	bl	8006b0c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b74:	2200      	movs	r2, #0
 8002b76:	2110      	movs	r1, #16
 8002b78:	4849      	ldr	r0, [pc, #292]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002b7a:	f003 ffc7 	bl	8006b0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	753b      	strb	r3, [r7, #20]
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	757b      	strb	r3, [r7, #21]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	3301      	adds	r3, #1
 8002b92:	121b      	asrs	r3, r3, #8
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	75bb      	strb	r3, [r7, #22]
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ba2:	f107 0114 	add.w	r1, r7, #20
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	2204      	movs	r2, #4
 8002baa:	483e      	ldr	r0, [pc, #248]	; (8002ca4 <ILI9341_Draw_Pixel+0x18c>)
 8002bac:	f008 fce9 	bl	800b582 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2110      	movs	r1, #16
 8002bb4:	483a      	ldr	r0, [pc, #232]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002bb6:	f003 ffa9 	bl	8006b0c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	4838      	ldr	r0, [pc, #224]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002bc0:	f003 ffa4 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4835      	ldr	r0, [pc, #212]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002bca:	f003 ff9f 	bl	8006b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002bce:	202b      	movs	r0, #43	; 0x2b
 8002bd0:	f7ff fcc2 	bl	8002558 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2140      	movs	r1, #64	; 0x40
 8002bd8:	4831      	ldr	r0, [pc, #196]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002bda:	f003 ff97 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002bde:	2201      	movs	r2, #1
 8002be0:	2110      	movs	r1, #16
 8002be2:	482f      	ldr	r0, [pc, #188]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002be4:	f003 ff92 	bl	8006b0c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2110      	movs	r1, #16
 8002bec:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002bee:	f003 ff8d 	bl	8006b0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002bf2:	88bb      	ldrh	r3, [r7, #4]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	743b      	strb	r3, [r7, #16]
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	747b      	strb	r3, [r7, #17]
 8002c02:	88bb      	ldrh	r3, [r7, #4]
 8002c04:	3301      	adds	r3, #1
 8002c06:	121b      	asrs	r3, r3, #8
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	74bb      	strb	r3, [r7, #18]
 8002c0c:	88bb      	ldrh	r3, [r7, #4]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002c16:	f107 0110 	add.w	r1, r7, #16
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <ILI9341_Draw_Pixel+0x18c>)
 8002c20:	f008 fcaf 	bl	800b582 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	2110      	movs	r1, #16
 8002c28:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c2a:	f003 ff6f 	bl	8006b0c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	481b      	ldr	r0, [pc, #108]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c34:	f003 ff6a 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c3e:	f003 ff65 	bl	8006b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	f7ff fc88 	bl	8002558 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c4e:	f003 ff5d 	bl	8006b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002c52:	2201      	movs	r2, #1
 8002c54:	2110      	movs	r1, #16
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c58:	f003 ff58 	bl	8006b0c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2110      	movs	r1, #16
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c62:	f003 ff53 	bl	8006b0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	733b      	strb	r3, [r7, #12]
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002c76:	f107 010c 	add.w	r1, r7, #12
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <ILI9341_Draw_Pixel+0x18c>)
 8002c80:	f008 fc7f 	bl	800b582 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c84:	2201      	movs	r2, #1
 8002c86:	2110      	movs	r1, #16
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <ILI9341_Draw_Pixel+0x188>)
 8002c8a:	f003 ff3f 	bl	8006b0c <HAL_GPIO_WritePin>
 8002c8e:	e000      	b.n	8002c92 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002c90:	bf00      	nop
	
}
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2000000a 	.word	0x2000000a
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	20000328 	.word	0x20000328

08002ca8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4604      	mov	r4, r0
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	80fb      	strh	r3, [r7, #6]
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80bb      	strh	r3, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	807b      	strh	r3, [r7, #2]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <ILI9341_Draw_Rectangle+0xb0>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d23d      	bcs.n	8002d4e <ILI9341_Draw_Rectangle+0xa6>
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <ILI9341_Draw_Rectangle+0xb4>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	88ba      	ldrh	r2, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d237      	bcs.n	8002d4e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <ILI9341_Draw_Rectangle+0xb0>)
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	4293      	cmp	r3, r2
 8002cec:	dd05      	ble.n	8002cfa <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <ILI9341_Draw_Rectangle+0xb0>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002cfa:	88ba      	ldrh	r2, [r7, #4]
 8002cfc:	883b      	ldrh	r3, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <ILI9341_Draw_Rectangle+0xb4>)
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	b292      	uxth	r2, r2
 8002d06:	4293      	cmp	r3, r2
 8002d08:	dd05      	ble.n	8002d16 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <ILI9341_Draw_Rectangle+0xb4>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	88bb      	ldrh	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29c      	uxth	r4, r3
 8002d22:	88ba      	ldrh	r2, [r7, #4]
 8002d24:	883b      	ldrh	r3, [r7, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	88b9      	ldrh	r1, [r7, #4]
 8002d30:	88f8      	ldrh	r0, [r7, #6]
 8002d32:	4622      	mov	r2, r4
 8002d34:	f7ff fc5e 	bl	80025f4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002d38:	883b      	ldrh	r3, [r7, #0]
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	8b3b      	ldrh	r3, [r7, #24]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fe2a 	bl	80029a0 <ILI9341_Draw_Colour_Burst>
 8002d4c:	e000      	b.n	8002d50 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002d4e:	bf00      	nop
}
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000000a 	.word	0x2000000a
 8002d5c:	20000008 	.word	0x20000008

08002d60 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002d66:	4832      	ldr	r0, [pc, #200]	; (8002e30 <menu+0xd0>)
 8002d68:	f000 fd4a 	bl	8003800 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002d6c:	4831      	ldr	r0, [pc, #196]	; (8002e34 <menu+0xd4>)
 8002d6e:	f000 fd19 	bl	80037a4 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002d72:	f000 fc4f 	bl	8003614 <getPressKey>
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2bff      	cmp	r3, #255	; 0xff
 8002d7e:	d04a      	beq.n	8002e16 <menu+0xb6>
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <menu+0xd8>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d043      	beq.n	8002e16 <menu+0xb6>
	   {
			flagPressed = true;
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <menu+0xd8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d83b      	bhi.n	8002e12 <menu+0xb2>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <menu+0x40>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db5 	.word	0x08002db5
 8002da4:	08002dc5 	.word	0x08002dc5
 8002da8:	08002de1 	.word	0x08002de1
 8002dac:	08002dfd 	.word	0x08002dfd
 8002db0:	08002e0d 	.word	0x08002e0d
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002db4:	f000 fcea 	bl	800378c <Menu_GetCurrentMenu>
 8002db8:	4603      	mov	r3, r0
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fcf1 	bl	80037a4 <Menu_Navigate>
					break;
 8002dc2:	e027      	b.n	8002e14 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <menu+0xdc>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <menu+0xdc>)
 8002dce:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002dd0:	f000 fcdc 	bl	800378c <Menu_GetCurrentMenu>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fce3 	bl	80037a4 <Menu_Navigate>
					break;
 8002dde:	e019      	b.n	8002e14 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <menu+0xdc>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <menu+0xdc>)
 8002dea:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002dec:	f000 fcce 	bl	800378c <Menu_GetCurrentMenu>
 8002df0:	4603      	mov	r3, r0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fcd5 	bl	80037a4 <Menu_Navigate>
					break;
 8002dfa:	e00b      	b.n	8002e14 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002dfc:	f000 fcc6 	bl	800378c <Menu_GetCurrentMenu>
 8002e00:	4603      	mov	r3, r0
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fccd 	bl	80037a4 <Menu_Navigate>
					break;
 8002e0a:	e003      	b.n	8002e14 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002e0c:	f000 fd0c 	bl	8003828 <Menu_EnterCurrentItem>
					break;
 8002e10:	e000      	b.n	8002e14 <menu+0xb4>

			 default:
			  break;
 8002e12:	bf00      	nop
			switch(pressed_key)
 8002e14:	e00b      	b.n	8002e2e <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002e16:	f000 fbfd 	bl	8003614 <getPressKey>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2bff      	cmp	r3, #255	; 0xff
 8002e1e:	d1a8      	bne.n	8002d72 <menu+0x12>
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <menu+0xd8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0a4      	beq.n	8002d72 <menu+0x12>
	   {
		   flagPressed = false;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <menu+0xd8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
	  {
 8002e2e:	e7a0      	b.n	8002d72 <menu+0x12>
 8002e30:	08003745 	.word	0x08003745
 8002e34:	08010b74 	.word	0x08010b74
 8002e38:	200002a0 	.word	0x200002a0
 8002e3c:	20000148 	.word	0x20000148

08002e40 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002e46:	2300      	movs	r3, #0
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e52:	226e      	movs	r2, #110	; 0x6e
 8002e54:	211e      	movs	r1, #30
 8002e56:	4884      	ldr	r0, [pc, #528]	; (8003068 <print_all_top_menu+0x228>)
 8002e58:	f7ff fb44 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e68:	2282      	movs	r2, #130	; 0x82
 8002e6a:	211e      	movs	r1, #30
 8002e6c:	487e      	ldr	r0, [pc, #504]	; (8003068 <print_all_top_menu+0x228>)
 8002e6e:	f7ff fb39 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002e72:	2300      	movs	r3, #0
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2302      	movs	r3, #2
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e7e:	2296      	movs	r2, #150	; 0x96
 8002e80:	211e      	movs	r1, #30
 8002e82:	4879      	ldr	r0, [pc, #484]	; (8003068 <print_all_top_menu+0x228>)
 8002e84:	f7ff fb2e 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e94:	22aa      	movs	r2, #170	; 0xaa
 8002e96:	211e      	movs	r1, #30
 8002e98:	4873      	ldr	r0, [pc, #460]	; (8003068 <print_all_top_menu+0x228>)
 8002e9a:	f7ff fb23 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002eaa:	22be      	movs	r2, #190	; 0xbe
 8002eac:	211e      	movs	r1, #30
 8002eae:	486e      	ldr	r0, [pc, #440]	; (8003068 <print_all_top_menu+0x228>)
 8002eb0:	f7ff fb18 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ec0:	22d2      	movs	r2, #210	; 0xd2
 8002ec2:	211e      	movs	r1, #30
 8002ec4:	4868      	ldr	r0, [pc, #416]	; (8003068 <print_all_top_menu+0x228>)
 8002ec6:	f7ff fb0d 	bl	80024e4 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	2302      	movs	r3, #2
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed6:	226e      	movs	r2, #110	; 0x6e
 8002ed8:	211e      	movs	r1, #30
 8002eda:	4864      	ldr	r0, [pc, #400]	; (800306c <print_all_top_menu+0x22c>)
 8002edc:	f7ff fb02 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eec:	2282      	movs	r2, #130	; 0x82
 8002eee:	211e      	movs	r1, #30
 8002ef0:	485f      	ldr	r0, [pc, #380]	; (8003070 <print_all_top_menu+0x230>)
 8002ef2:	f7ff faf7 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	2302      	movs	r3, #2
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f02:	2296      	movs	r2, #150	; 0x96
 8002f04:	211e      	movs	r1, #30
 8002f06:	485b      	ldr	r0, [pc, #364]	; (8003074 <print_all_top_menu+0x234>)
 8002f08:	f7ff faec 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2302      	movs	r3, #2
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f18:	22aa      	movs	r2, #170	; 0xaa
 8002f1a:	211e      	movs	r1, #30
 8002f1c:	4856      	ldr	r0, [pc, #344]	; (8003078 <print_all_top_menu+0x238>)
 8002f1e:	f7ff fae1 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002f22:	2300      	movs	r3, #0
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2302      	movs	r3, #2
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2e:	22be      	movs	r2, #190	; 0xbe
 8002f30:	211e      	movs	r1, #30
 8002f32:	4852      	ldr	r0, [pc, #328]	; (800307c <print_all_top_menu+0x23c>)
 8002f34:	f7ff fad6 	bl	80024e4 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002f38:	4b51      	ldr	r3, [pc, #324]	; (8003080 <print_all_top_menu+0x240>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <print_all_top_menu+0x240>)
 8002f42:	2205      	movs	r2, #5
 8002f44:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <print_all_top_menu+0x240>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d902      	bls.n	8002f54 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <print_all_top_menu+0x240>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002f54:	2300      	movs	r3, #0
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f60:	226e      	movs	r2, #110	; 0x6e
 8002f62:	2105      	movs	r1, #5
 8002f64:	4847      	ldr	r0, [pc, #284]	; (8003084 <print_all_top_menu+0x244>)
 8002f66:	f7ff fabd 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f76:	2282      	movs	r2, #130	; 0x82
 8002f78:	2105      	movs	r1, #5
 8002f7a:	4842      	ldr	r0, [pc, #264]	; (8003084 <print_all_top_menu+0x244>)
 8002f7c:	f7ff fab2 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002f80:	2300      	movs	r3, #0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8c:	2296      	movs	r2, #150	; 0x96
 8002f8e:	2105      	movs	r1, #5
 8002f90:	483c      	ldr	r0, [pc, #240]	; (8003084 <print_all_top_menu+0x244>)
 8002f92:	f7ff faa7 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002f96:	2300      	movs	r3, #0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa2:	22aa      	movs	r2, #170	; 0xaa
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	4837      	ldr	r0, [pc, #220]	; (8003084 <print_all_top_menu+0x244>)
 8002fa8:	f7ff fa9c 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002fac:	2300      	movs	r3, #0
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb8:	22be      	movs	r2, #190	; 0xbe
 8002fba:	2105      	movs	r1, #5
 8002fbc:	4831      	ldr	r0, [pc, #196]	; (8003084 <print_all_top_menu+0x244>)
 8002fbe:	f7ff fa91 	bl	80024e4 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <print_all_top_menu+0x240>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d849      	bhi.n	8003060 <print_all_top_menu+0x220>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <print_all_top_menu+0x194>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002fe9 	.word	0x08002fe9
 8002fd8:	08003001 	.word	0x08003001
 8002fdc:	08003019 	.word	0x08003019
 8002fe0:	08003031 	.word	0x08003031
 8002fe4:	08003049 	.word	0x08003049
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	2302      	movs	r3, #2
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ff4:	226e      	movs	r2, #110	; 0x6e
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	4823      	ldr	r0, [pc, #140]	; (8003088 <print_all_top_menu+0x248>)
 8002ffa:	f7ff fa73 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8002ffe:	e02f      	b.n	8003060 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003000:	2300      	movs	r3, #0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2302      	movs	r3, #2
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800300c:	2282      	movs	r2, #130	; 0x82
 800300e:	2105      	movs	r1, #5
 8003010:	481d      	ldr	r0, [pc, #116]	; (8003088 <print_all_top_menu+0x248>)
 8003012:	f7ff fa67 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003016:	e023      	b.n	8003060 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003018:	2300      	movs	r3, #0
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2302      	movs	r3, #2
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003024:	2296      	movs	r2, #150	; 0x96
 8003026:	2105      	movs	r1, #5
 8003028:	4817      	ldr	r0, [pc, #92]	; (8003088 <print_all_top_menu+0x248>)
 800302a:	f7ff fa5b 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800302e:	e017      	b.n	8003060 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003030:	2300      	movs	r3, #0
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	2302      	movs	r3, #2
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800303c:	22aa      	movs	r2, #170	; 0xaa
 800303e:	2105      	movs	r1, #5
 8003040:	4811      	ldr	r0, [pc, #68]	; (8003088 <print_all_top_menu+0x248>)
 8003042:	f7ff fa4f 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003046:	e00b      	b.n	8003060 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2302      	movs	r3, #2
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003054:	22be      	movs	r2, #190	; 0xbe
 8003056:	2105      	movs	r1, #5
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <print_all_top_menu+0x248>)
 800305a:	f7ff fa43 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800305e:	bf00      	nop
	}

}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	080107e8 	.word	0x080107e8
 800306c:	20000010 	.word	0x20000010
 8003070:	2000002e 	.word	0x2000002e
 8003074:	2000004c 	.word	0x2000004c
 8003078:	2000006a 	.word	0x2000006a
 800307c:	20000088 	.word	0x20000088
 8003080:	20000148 	.word	0x20000148
 8003084:	0801080c 	.word	0x0801080c
 8003088:	08010810 	.word	0x08010810

0800308c <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003092:	2300      	movs	r3, #0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800309e:	226e      	movs	r2, #110	; 0x6e
 80030a0:	211e      	movs	r1, #30
 80030a2:	4877      	ldr	r0, [pc, #476]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 80030a4:	f7ff fa1e 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80030a8:	2300      	movs	r3, #0
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030b4:	2282      	movs	r2, #130	; 0x82
 80030b6:	211e      	movs	r1, #30
 80030b8:	4871      	ldr	r0, [pc, #452]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 80030ba:	f7ff fa13 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80030be:	2300      	movs	r3, #0
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2302      	movs	r3, #2
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030ca:	2296      	movs	r2, #150	; 0x96
 80030cc:	211e      	movs	r1, #30
 80030ce:	486c      	ldr	r0, [pc, #432]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 80030d0:	f7ff fa08 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80030d4:	2300      	movs	r3, #0
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030e0:	22aa      	movs	r2, #170	; 0xaa
 80030e2:	211e      	movs	r1, #30
 80030e4:	4866      	ldr	r0, [pc, #408]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 80030e6:	f7ff f9fd 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80030ea:	2300      	movs	r3, #0
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030f6:	22be      	movs	r2, #190	; 0xbe
 80030f8:	211e      	movs	r1, #30
 80030fa:	4861      	ldr	r0, [pc, #388]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 80030fc:	f7ff f9f2 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003100:	2300      	movs	r3, #0
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	2302      	movs	r3, #2
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800310c:	22d2      	movs	r2, #210	; 0xd2
 800310e:	211e      	movs	r1, #30
 8003110:	485b      	ldr	r0, [pc, #364]	; (8003280 <print_all_menu_1_menus+0x1f4>)
 8003112:	f7ff f9e7 	bl	80024e4 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003122:	226e      	movs	r2, #110	; 0x6e
 8003124:	2105      	movs	r1, #5
 8003126:	4857      	ldr	r0, [pc, #348]	; (8003284 <print_all_menu_1_menus+0x1f8>)
 8003128:	f7ff f9dc 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003138:	2282      	movs	r2, #130	; 0x82
 800313a:	2105      	movs	r1, #5
 800313c:	4851      	ldr	r0, [pc, #324]	; (8003284 <print_all_menu_1_menus+0x1f8>)
 800313e:	f7ff f9d1 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800314e:	2296      	movs	r2, #150	; 0x96
 8003150:	2105      	movs	r1, #5
 8003152:	484c      	ldr	r0, [pc, #304]	; (8003284 <print_all_menu_1_menus+0x1f8>)
 8003154:	f7ff f9c6 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003164:	22aa      	movs	r2, #170	; 0xaa
 8003166:	2105      	movs	r1, #5
 8003168:	4846      	ldr	r0, [pc, #280]	; (8003284 <print_all_menu_1_menus+0x1f8>)
 800316a:	f7ff f9bb 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800317a:	22be      	movs	r2, #190	; 0xbe
 800317c:	2105      	movs	r1, #5
 800317e:	4841      	ldr	r0, [pc, #260]	; (8003284 <print_all_menu_1_menus+0x1f8>)
 8003180:	f7ff f9b0 	bl	80024e4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003190:	226e      	movs	r2, #110	; 0x6e
 8003192:	211e      	movs	r1, #30
 8003194:	483c      	ldr	r0, [pc, #240]	; (8003288 <print_all_menu_1_menus+0x1fc>)
 8003196:	f7ff f9a5 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a6:	2282      	movs	r2, #130	; 0x82
 80031a8:	211e      	movs	r1, #30
 80031aa:	4838      	ldr	r0, [pc, #224]	; (800328c <print_all_menu_1_menus+0x200>)
 80031ac:	f7ff f99a 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80031b0:	2300      	movs	r3, #0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2302      	movs	r3, #2
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031bc:	2296      	movs	r2, #150	; 0x96
 80031be:	211e      	movs	r1, #30
 80031c0:	4833      	ldr	r0, [pc, #204]	; (8003290 <print_all_menu_1_menus+0x204>)
 80031c2:	f7ff f98f 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d2:	22aa      	movs	r2, #170	; 0xaa
 80031d4:	211e      	movs	r1, #30
 80031d6:	482f      	ldr	r0, [pc, #188]	; (8003294 <print_all_menu_1_menus+0x208>)
 80031d8:	f7ff f984 	bl	80024e4 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80031dc:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <print_all_menu_1_menus+0x20c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <print_all_menu_1_menus+0x20c>)
 80031e6:	2204      	movs	r2, #4
 80031e8:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <print_all_menu_1_menus+0x20c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d902      	bls.n	80031f8 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <print_all_menu_1_menus+0x20c>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <print_all_menu_1_menus+0x20c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d83a      	bhi.n	8003278 <print_all_menu_1_menus+0x1ec>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <print_all_menu_1_menus+0x17c>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003219 	.word	0x08003219
 800320c:	08003231 	.word	0x08003231
 8003210:	08003249 	.word	0x08003249
 8003214:	08003261 	.word	0x08003261
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003218:	2300      	movs	r3, #0
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2302      	movs	r3, #2
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003224:	226e      	movs	r2, #110	; 0x6e
 8003226:	2105      	movs	r1, #5
 8003228:	481c      	ldr	r0, [pc, #112]	; (800329c <print_all_menu_1_menus+0x210>)
 800322a:	f7ff f95b 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800322e:	e023      	b.n	8003278 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003230:	2300      	movs	r3, #0
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	2302      	movs	r3, #2
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800323c:	2282      	movs	r2, #130	; 0x82
 800323e:	2105      	movs	r1, #5
 8003240:	4816      	ldr	r0, [pc, #88]	; (800329c <print_all_menu_1_menus+0x210>)
 8003242:	f7ff f94f 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003246:	e017      	b.n	8003278 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003248:	2300      	movs	r3, #0
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	2302      	movs	r3, #2
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003254:	2296      	movs	r2, #150	; 0x96
 8003256:	2105      	movs	r1, #5
 8003258:	4810      	ldr	r0, [pc, #64]	; (800329c <print_all_menu_1_menus+0x210>)
 800325a:	f7ff f943 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800325e:	e00b      	b.n	8003278 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003260:	2300      	movs	r3, #0
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	2302      	movs	r3, #2
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326c:	22aa      	movs	r2, #170	; 0xaa
 800326e:	2105      	movs	r1, #5
 8003270:	480a      	ldr	r0, [pc, #40]	; (800329c <print_all_menu_1_menus+0x210>)
 8003272:	f7ff f937 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003276:	bf00      	nop
	}
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	080107e8 	.word	0x080107e8
 8003284:	0801080c 	.word	0x0801080c
 8003288:	200000a8 	.word	0x200000a8
 800328c:	200000bc 	.word	0x200000bc
 8003290:	200000d0 	.word	0x200000d0
 8003294:	200000e4 	.word	0x200000e4
 8003298:	20000148 	.word	0x20000148
 800329c:	08010810 	.word	0x08010810

080032a0 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80032a6:	2300      	movs	r3, #0
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	2302      	movs	r3, #2
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b2:	226e      	movs	r2, #110	; 0x6e
 80032b4:	211e      	movs	r1, #30
 80032b6:	4877      	ldr	r0, [pc, #476]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 80032b8:	f7ff f914 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80032bc:	2300      	movs	r3, #0
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2302      	movs	r3, #2
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032c8:	2282      	movs	r2, #130	; 0x82
 80032ca:	211e      	movs	r1, #30
 80032cc:	4871      	ldr	r0, [pc, #452]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 80032ce:	f7ff f909 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80032d2:	2300      	movs	r3, #0
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2302      	movs	r3, #2
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032de:	2296      	movs	r2, #150	; 0x96
 80032e0:	211e      	movs	r1, #30
 80032e2:	486c      	ldr	r0, [pc, #432]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 80032e4:	f7ff f8fe 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80032e8:	2300      	movs	r3, #0
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2302      	movs	r3, #2
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f4:	22aa      	movs	r2, #170	; 0xaa
 80032f6:	211e      	movs	r1, #30
 80032f8:	4866      	ldr	r0, [pc, #408]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 80032fa:	f7ff f8f3 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80032fe:	2300      	movs	r3, #0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	2302      	movs	r3, #2
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800330a:	22be      	movs	r2, #190	; 0xbe
 800330c:	211e      	movs	r1, #30
 800330e:	4861      	ldr	r0, [pc, #388]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 8003310:	f7ff f8e8 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003314:	2300      	movs	r3, #0
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003320:	22d2      	movs	r2, #210	; 0xd2
 8003322:	211e      	movs	r1, #30
 8003324:	485b      	ldr	r0, [pc, #364]	; (8003494 <print_all_menu_1_1_menus+0x1f4>)
 8003326:	f7ff f8dd 	bl	80024e4 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800332a:	2300      	movs	r3, #0
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2302      	movs	r3, #2
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003336:	226e      	movs	r2, #110	; 0x6e
 8003338:	2105      	movs	r1, #5
 800333a:	4857      	ldr	r0, [pc, #348]	; (8003498 <print_all_menu_1_1_menus+0x1f8>)
 800333c:	f7ff f8d2 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003340:	2300      	movs	r3, #0
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	2302      	movs	r3, #2
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334c:	2282      	movs	r2, #130	; 0x82
 800334e:	2105      	movs	r1, #5
 8003350:	4851      	ldr	r0, [pc, #324]	; (8003498 <print_all_menu_1_1_menus+0x1f8>)
 8003352:	f7ff f8c7 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003356:	2300      	movs	r3, #0
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	2302      	movs	r3, #2
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003362:	2296      	movs	r2, #150	; 0x96
 8003364:	2105      	movs	r1, #5
 8003366:	484c      	ldr	r0, [pc, #304]	; (8003498 <print_all_menu_1_1_menus+0x1f8>)
 8003368:	f7ff f8bc 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800336c:	2300      	movs	r3, #0
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2302      	movs	r3, #2
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003378:	22aa      	movs	r2, #170	; 0xaa
 800337a:	2105      	movs	r1, #5
 800337c:	4846      	ldr	r0, [pc, #280]	; (8003498 <print_all_menu_1_1_menus+0x1f8>)
 800337e:	f7ff f8b1 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8003382:	2300      	movs	r3, #0
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2302      	movs	r3, #2
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338e:	22be      	movs	r2, #190	; 0xbe
 8003390:	2105      	movs	r1, #5
 8003392:	4841      	ldr	r0, [pc, #260]	; (8003498 <print_all_menu_1_1_menus+0x1f8>)
 8003394:	f7ff f8a6 	bl	80024e4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 8003398:	2300      	movs	r3, #0
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2302      	movs	r3, #2
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033a4:	226e      	movs	r2, #110	; 0x6e
 80033a6:	211e      	movs	r1, #30
 80033a8:	483c      	ldr	r0, [pc, #240]	; (800349c <print_all_menu_1_1_menus+0x1fc>)
 80033aa:	f7ff f89b 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80033ae:	2300      	movs	r3, #0
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2302      	movs	r3, #2
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ba:	2282      	movs	r2, #130	; 0x82
 80033bc:	211e      	movs	r1, #30
 80033be:	4838      	ldr	r0, [pc, #224]	; (80034a0 <print_all_menu_1_1_menus+0x200>)
 80033c0:	f7ff f890 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 80033c4:	2300      	movs	r3, #0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2302      	movs	r3, #2
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d0:	2296      	movs	r2, #150	; 0x96
 80033d2:	211e      	movs	r1, #30
 80033d4:	4833      	ldr	r0, [pc, #204]	; (80034a4 <print_all_menu_1_1_menus+0x204>)
 80033d6:	f7ff f885 	bl	80024e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 80033da:	2300      	movs	r3, #0
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2302      	movs	r3, #2
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033e6:	22aa      	movs	r2, #170	; 0xaa
 80033e8:	211e      	movs	r1, #30
 80033ea:	482f      	ldr	r0, [pc, #188]	; (80034a8 <print_all_menu_1_1_menus+0x208>)
 80033ec:	f7ff f87a 	bl	80024e4 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80033f0:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <print_all_menu_1_1_menus+0x20c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <print_all_menu_1_1_menus+0x20c>)
 80033fa:	2204      	movs	r2, #4
 80033fc:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <print_all_menu_1_1_menus+0x20c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d902      	bls.n	800340c <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <print_all_menu_1_1_menus+0x20c>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <print_all_menu_1_1_menus+0x20c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	3b01      	subs	r3, #1
 8003412:	2b03      	cmp	r3, #3
 8003414:	d83a      	bhi.n	800348c <print_all_menu_1_1_menus+0x1ec>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <print_all_menu_1_1_menus+0x17c>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003445 	.word	0x08003445
 8003424:	0800345d 	.word	0x0800345d
 8003428:	08003475 	.word	0x08003475
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800342c:	2300      	movs	r3, #0
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2302      	movs	r3, #2
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003438:	226e      	movs	r2, #110	; 0x6e
 800343a:	2105      	movs	r1, #5
 800343c:	481c      	ldr	r0, [pc, #112]	; (80034b0 <print_all_menu_1_1_menus+0x210>)
 800343e:	f7ff f851 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003442:	e023      	b.n	800348c <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003444:	2300      	movs	r3, #0
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2302      	movs	r3, #2
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003450:	2282      	movs	r2, #130	; 0x82
 8003452:	2105      	movs	r1, #5
 8003454:	4816      	ldr	r0, [pc, #88]	; (80034b0 <print_all_menu_1_1_menus+0x210>)
 8003456:	f7ff f845 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800345a:	e017      	b.n	800348c <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800345c:	2300      	movs	r3, #0
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003468:	2296      	movs	r2, #150	; 0x96
 800346a:	2105      	movs	r1, #5
 800346c:	4810      	ldr	r0, [pc, #64]	; (80034b0 <print_all_menu_1_1_menus+0x210>)
 800346e:	f7ff f839 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 8003472:	e00b      	b.n	800348c <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003480:	22aa      	movs	r2, #170	; 0xaa
 8003482:	2105      	movs	r1, #5
 8003484:	480a      	ldr	r0, [pc, #40]	; (80034b0 <print_all_menu_1_1_menus+0x210>)
 8003486:	f7ff f82d 	bl	80024e4 <ILI9341_Draw_Text>
			break;
 800348a:	bf00      	nop
	}
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	080107e8 	.word	0x080107e8
 8003498:	0801080c 	.word	0x0801080c
 800349c:	200000f8 	.word	0x200000f8
 80034a0:	2000010c 	.word	0x2000010c
 80034a4:	20000120 	.word	0x20000120
 80034a8:	20000134 	.word	0x20000134
 80034ac:	20000148 	.word	0x20000148
 80034b0:	08010810 	.word	0x08010810

080034b4 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 80034b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <tongle_green_led+0x14>)
 80034be:	f003 fb3e 	bl	8006b3e <HAL_GPIO_TogglePin>
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40020c00 	.word	0x40020c00

080034cc <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80034d0:	2201      	movs	r2, #1
 80034d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d6:	4802      	ldr	r0, [pc, #8]	; (80034e0 <RED_LED_ON+0x14>)
 80034d8:	f003 fb18 	bl	8006b0c <HAL_GPIO_WritePin>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40020c00 	.word	0x40020c00

080034e4 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ee:	4802      	ldr	r0, [pc, #8]	; (80034f8 <RED_LED_OFF+0x14>)
 80034f0:	f003 fb0c 	bl	8006b0c <HAL_GPIO_WritePin>
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40020c00 	.word	0x40020c00

080034fc <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8003502:	2300      	movs	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8003506:	2300      	movs	r3, #0
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2302      	movs	r3, #2
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	210a      	movs	r1, #10
 8003516:	4838      	ldr	r0, [pc, #224]	; (80035f8 <Level1Item3_Enter+0xfc>)
 8003518:	f7fe ffe4 	bl	80024e4 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 800351c:	2300      	movs	r3, #0
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	2302      	movs	r3, #2
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003528:	223c      	movs	r2, #60	; 0x3c
 800352a:	210a      	movs	r1, #10
 800352c:	4833      	ldr	r0, [pc, #204]	; (80035fc <Level1Item3_Enter+0x100>)
 800352e:	f7fe ffd9 	bl	80024e4 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8003532:	e049      	b.n	80035c8 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003538:	4831      	ldr	r0, [pc, #196]	; (8003600 <Level1Item3_Enter+0x104>)
 800353a:	f003 facf 	bl	8006adc <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d019      	beq.n	800357c <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10b      	bne.n	8003566 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 800354e:	2300      	movs	r3, #0
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2302      	movs	r3, #2
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800355a:	223c      	movs	r2, #60	; 0x3c
 800355c:	2196      	movs	r1, #150	; 0x96
 800355e:	4829      	ldr	r0, [pc, #164]	; (8003604 <Level1Item3_Enter+0x108>)
 8003560:	f7fe ffc0 	bl	80024e4 <ILI9341_Draw_Text>
 8003564:	e00a      	b.n	800357c <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 8003566:	2300      	movs	r3, #0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2302      	movs	r3, #2
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003572:	223c      	movs	r2, #60	; 0x3c
 8003574:	2196      	movs	r1, #150	; 0x96
 8003576:	4824      	ldr	r0, [pc, #144]	; (8003608 <Level1Item3_Enter+0x10c>)
 8003578:	f7fe ffb4 	bl	80024e4 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 800357c:	f000 f84a 	bl	8003614 <getPressKey>
 8003580:	4603      	mov	r3, r0
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d016      	beq.n	80035b4 <Level1Item3_Enter+0xb8>
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8003592:	2301      	movs	r3, #1
 8003594:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 8003596:	f000 f83d 	bl	8003614 <getPressKey>
 800359a:	4603      	mov	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <Level1Item3_Enter+0xaa>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d003      	beq.n	80035ac <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80035a4:	e005      	b.n	80035b2 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80035a6:	f7ff ff91 	bl	80034cc <RED_LED_ON>
	  	  		  break;
 80035aa:	e002      	b.n	80035b2 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80035ac:	f7ff ff9a 	bl	80034e4 <RED_LED_OFF>
	  	  		  break;
 80035b0:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80035b2:	e009      	b.n	80035c8 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80035b4:	f000 f82e 	bl	8003614 <getPressKey>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2bff      	cmp	r3, #255	; 0xff
 80035bc:	d104      	bne.n	80035c8 <Level1Item3_Enter+0xcc>
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 80035c4:	2300      	movs	r3, #0
 80035c6:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 80035c8:	f000 f824 	bl	8003614 <getPressKey>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1b0      	bne.n	8003534 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 80035d2:	2300      	movs	r3, #0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2302      	movs	r3, #2
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035de:	223c      	movs	r2, #60	; 0x3c
 80035e0:	210a      	movs	r1, #10
 80035e2:	480a      	ldr	r0, [pc, #40]	; (800360c <Level1Item3_Enter+0x110>)
 80035e4:	f7fe ff7e 	bl	80024e4 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 80035e8:	4809      	ldr	r0, [pc, #36]	; (8003610 <Level1Item3_Enter+0x114>)
 80035ea:	f000 f8db 	bl	80037a4 <Menu_Navigate>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	08010814 	.word	0x08010814
 80035fc:	08010830 	.word	0x08010830
 8003600:	40020c00 	.word	0x40020c00
 8003604:	0801083c 	.word	0x0801083c
 8003608:	08010840 	.word	0x08010840
 800360c:	08010844 	.word	0x08010844
 8003610:	08010bcc 	.word	0x08010bcc

08003614 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
	char digit = '\0';
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800361e:	4a48      	ldr	r2, [pc, #288]	; (8003740 <getPressKey+0x12c>)
 8003620:	463b      	mov	r3, r7
 8003622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003626:	6018      	str	r0, [r3, #0]
 8003628:	3304      	adds	r3, #4
 800362a:	8019      	strh	r1, [r3, #0]
 800362c:	1dbb      	adds	r3, r7, #6
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8003638:	f7fd fc80 	bl	8000f3c <read_one_digit_from_keyboard>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	3b32      	subs	r3, #50	; 0x32
 8003644:	2b06      	cmp	r3, #6
 8003646:	d875      	bhi.n	8003734 <getPressKey+0x120>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <getPressKey+0x3c>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003695 	.word	0x08003695
 8003654:	08003735 	.word	0x08003735
 8003658:	0800366d 	.word	0x0800366d
 800365c:	0800370d 	.word	0x0800370d
 8003660:	080036e5 	.word	0x080036e5
 8003664:	08003735 	.word	0x08003735
 8003668:	080036bd 	.word	0x080036bd
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 800366c:	f107 0117 	add.w	r1, r7, #23
 8003670:	463b      	mov	r3, r7
 8003672:	2201      	movs	r2, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f00c fd27 	bl	80100c8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800367a:	4638      	mov	r0, r7
 800367c:	2300      	movs	r3, #0
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2302      	movs	r3, #2
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	f7fe ff2a 	bl	80024e4 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8003690:	2300      	movs	r3, #0
 8003692:	e050      	b.n	8003736 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8003694:	f107 0117 	add.w	r1, r7, #23
 8003698:	463b      	mov	r3, r7
 800369a:	2201      	movs	r2, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f00c fd13 	bl	80100c8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036a2:	4638      	mov	r0, r7
 80036a4:	2300      	movs	r3, #0
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2302      	movs	r3, #2
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	f7fe ff16 	bl	80024e4 <ILI9341_Draw_Text>
			return BUTTON_UP;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e03c      	b.n	8003736 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 80036bc:	f107 0117 	add.w	r1, r7, #23
 80036c0:	463b      	mov	r3, r7
 80036c2:	2201      	movs	r2, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f00c fcff 	bl	80100c8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036ca:	4638      	mov	r0, r7
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	f7fe ff02 	bl	80024e4 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 80036e0:	2302      	movs	r3, #2
 80036e2:	e028      	b.n	8003736 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 80036e4:	f107 0117 	add.w	r1, r7, #23
 80036e8:	463b      	mov	r3, r7
 80036ea:	2201      	movs	r2, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f00c fceb 	bl	80100c8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80036f2:	4638      	mov	r0, r7
 80036f4:	2300      	movs	r3, #0
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	2302      	movs	r3, #2
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003700:	2200      	movs	r2, #0
 8003702:	2100      	movs	r1, #0
 8003704:	f7fe feee 	bl	80024e4 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8003708:	2303      	movs	r3, #3
 800370a:	e014      	b.n	8003736 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 800370c:	f107 0117 	add.w	r1, r7, #23
 8003710:	463b      	mov	r3, r7
 8003712:	2201      	movs	r2, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f00c fcd7 	bl	80100c8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800371a:	4638      	mov	r0, r7
 800371c:	2300      	movs	r3, #0
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	2302      	movs	r3, #2
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003728:	2200      	movs	r2, #0
 800372a:	2100      	movs	r1, #0
 800372c:	f7fe feda 	bl	80024e4 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003730:	2304      	movs	r3, #4
 8003732:	e000      	b.n	8003736 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003734:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	08010860 	.word	0x08010860

08003744 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
	if (Text)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003752:	2300      	movs	r3, #0
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2301      	movs	r3, #1
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800375e:	2264      	movs	r2, #100	; 0x64
 8003760:	210a      	movs	r1, #10
 8003762:	4809      	ldr	r0, [pc, #36]	; (8003788 <Generic_Write+0x44>)
 8003764:	f7fe febe 	bl	80024e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8003768:	2300      	movs	r3, #0
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2301      	movs	r3, #1
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003774:	2264      	movs	r2, #100	; 0x64
 8003776:	210a      	movs	r1, #10
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fe feb3 	bl	80024e4 <ILI9341_Draw_Text>
	}
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	08010874 	.word	0x08010874

0800378c <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <Menu_GetCurrentMenu+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <Menu_Navigate+0x50>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d01a      	beq.n	80037ea <Menu_Navigate+0x46>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 80037ba:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <Menu_Navigate+0x54>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <Menu_Navigate+0x58>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <Menu_Navigate+0x58>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <Menu_Navigate+0x54>)
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	3218      	adds	r2, #24
 80037d2:	4610      	mov	r0, r2
 80037d4:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <Menu_Navigate+0x54>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4798      	blx	r3
 80037e8:	e000      	b.n	80037ec <Menu_Navigate+0x48>
		return;		// Exit
 80037ea:	bf00      	nop
	}
}
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08010b5c 	.word	0x08010b5c
 80037f8:	2000000c 	.word	0x2000000c
 80037fc:	2000029c 	.word	0x2000029c

08003800 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8003808:	4a05      	ldr	r2, [pc, #20]	; (8003820 <Menu_SetGenericWriteCallback+0x20>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <Menu_SetGenericWriteCallback+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ffc6 	bl	80037a4 <Menu_Navigate>
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000029c 	.word	0x2000029c
 8003824:	2000000c 	.word	0x2000000c

08003828 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <Menu_EnterCurrentItem+0x34>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <Menu_EnterCurrentItem+0x38>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00d      	beq.n	8003854 <Menu_EnterCurrentItem+0x2c>
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <Menu_EnterCurrentItem+0x34>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <Menu_EnterCurrentItem+0x34>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4798      	blx	r3
 8003852:	e000      	b.n	8003856 <Menu_EnterCurrentItem+0x2e>
		return;
 8003854:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000000c 	.word	0x2000000c
 8003860:	08010b5c 	.word	0x08010b5c

08003864 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	int i =0;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8003870:	e036      	b.n	80038e0 <speed_test_LCD+0x7c>
	{
		i ++;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800388c:	4819      	ldr	r0, [pc, #100]	; (80038f4 <speed_test_LCD+0x90>)
 800388e:	f007 fdda 	bl	800b446 <HAL_RNG_GetRandomNumber>
 8003892:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003898:	4816      	ldr	r0, [pc, #88]	; (80038f4 <speed_test_LCD+0x90>)
 800389a:	f007 fdd4 	bl	800b446 <HAL_RNG_GetRandomNumber>
 800389e:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80038a4:	4813      	ldr	r0, [pc, #76]	; (80038f4 <speed_test_LCD+0x90>)
 80038a6:	f007 fdce 	bl	800b446 <HAL_RNG_GetRandomNumber>
 80038aa:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80038b0:	4810      	ldr	r0, [pc, #64]	; (80038f4 <speed_test_LCD+0x90>)
 80038b2:	f007 fdc8 	bl	800b446 <HAL_RNG_GetRandomNumber>
 80038b6:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 80038bc:	89fb      	ldrh	r3, [r7, #14]
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 80038c4:	89bb      	ldrh	r3, [r7, #12]
 80038c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ca:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 80038d4:	893b      	ldrh	r3, [r7, #8]
 80038d6:	897a      	ldrh	r2, [r7, #10]
 80038d8:	89b9      	ldrh	r1, [r7, #12]
 80038da:	89f8      	ldrh	r0, [r7, #14]
 80038dc:	f7fe fce4 	bl	80022a8 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	ddc4      	ble.n	8003872 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000464 	.word	0x20000464

080038f8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003900:	2305      	movs	r3, #5
 8003902:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 f9ef 	bl	8004cec <null_ptr_check>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d133      	bne.n	8003982 <bme280_init+0x8a>
		while (try_count) {
 800391a:	e028      	b.n	800396e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800391c:	f107 010d 	add.w	r1, r7, #13
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	20d0      	movs	r0, #208	; 0xd0
 8003926:	f000 f832 	bl	800398e <bme280_get_regs>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <bme280_init+0x68>
 8003936:	7b7b      	ldrb	r3, [r7, #13]
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d111      	bne.n	8003960 <bme280_init+0x68>
				dev->chip_id = chip_id;
 800393c:	7b7a      	ldrb	r2, [r7, #13]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f976 	bl	8003c34 <bme280_soft_reset>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 800394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d110      	bne.n	8003976 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f001 f83f 	bl	80049d8 <get_calib_data>
 800395a:	4603      	mov	r3, r0
 800395c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800395e:	e00a      	b.n	8003976 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2001      	movs	r0, #1
 8003966:	4798      	blx	r3
			--try_count;
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	3b01      	subs	r3, #1
 800396c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800396e:	7bbb      	ldrb	r3, [r7, #14]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1d3      	bne.n	800391c <bme280_init+0x24>
 8003974:	e000      	b.n	8003978 <bme280_init+0x80>
				break;
 8003976:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800397e:	23fe      	movs	r3, #254	; 0xfe
 8003980:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800398e:	b590      	push	{r4, r7, lr}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	4603      	mov	r3, r0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	4613      	mov	r3, r2
 800399e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f001 f9a3 	bl	8004cec <null_ptr_check>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80039aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d117      	bne.n	80039e2 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d003      	beq.n	80039c2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685c      	ldr	r4, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7858      	ldrb	r0, [r3, #1]
 80039ca:	89bb      	ldrh	r3, [r7, #12]
 80039cc:	7bf9      	ldrb	r1, [r7, #15]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	47a0      	blx	r4
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80039d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80039de:	23fc      	movs	r3, #252	; 0xfc
 80039e0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80039e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}

080039ee <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b08d      	sub	sp, #52	; 0x34
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	2b0a      	cmp	r3, #10
 8003a02:	d901      	bls.n	8003a08 <bme280_set_regs+0x1a>
		len = 10;
 8003a04:	230a      	movs	r3, #10
 8003a06:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f001 f96f 	bl	8004cec <null_ptr_check>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d154      	bne.n	8003ac6 <bme280_set_regs+0xd8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d051      	beq.n	8003ac6 <bme280_set_regs+0xd8>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d04e      	beq.n	8003ac6 <bme280_set_regs+0xd8>
		if (len != 0) {
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d047      	beq.n	8003abe <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	789b      	ldrb	r3, [r3, #2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d01a      	beq.n	8003a72 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e011      	b.n	8003a68 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	440b      	add	r3, r1
 8003a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a62:	3301      	adds	r3, #1
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a68:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3e8      	bcc.n	8003a44 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d90b      	bls.n	8003a90 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f107 0114 	add.w	r1, r7, #20
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 ffee 	bl	8004a62 <interleave_reg_addr>
				temp_len = len * 2;
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003a8e:	e001      	b.n	8003a94 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689c      	ldr	r4, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	7858      	ldrb	r0, [r3, #1]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	7819      	ldrb	r1, [r3, #0]
 8003aa0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003aa2:	f107 0214 	add.w	r2, r7, #20
 8003aa6:	47a0      	blx	r4
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003aae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8003ab6:	23fc      	movs	r3, #252	; 0xfc
 8003ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003abc:	e007      	b.n	8003ace <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003abe:	23fd      	movs	r3, #253	; 0xfd
 8003ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003ac4:	e003      	b.n	8003ace <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003ac6:	23ff      	movs	r3, #255	; 0xff
 8003ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003acc:	e000      	b.n	8003ad0 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003ace:	bf00      	nop
	}


	return rslt;
 8003ad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3734      	adds	r7, #52	; 0x34
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}

08003adc <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f001 f8ff 	bl	8004cec <null_ptr_check>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13f      	bne.n	8003b7a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003afa:	f107 030e 	add.w	r3, r7, #14
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f874 	bl	8003bee <bme280_get_sensor_mode>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <bme280_set_sensor_settings+0x46>
 8003b12:	7bbb      	ldrb	r3, [r7, #14]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f000 fb4e 	bl	80041ba <put_device_to_sleep>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d127      	bne.n	8003b7a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	2007      	movs	r0, #7
 8003b30:	f001 f8c0 	bl	8004cb4 <are_settings_changed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f98a 	bl	8003e5e <set_osr_settings>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d111      	bne.n	8003b7a <bme280_set_sensor_settings+0x9e>
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	2018      	movs	r0, #24
 8003b5c:	f001 f8aa 	bl	8004cb4 <are_settings_changed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fa11 	bl	8003f98 <set_filter_standby_settings>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	6039      	str	r1, [r7, #0]
 8003b90:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	f001 f8aa 	bl	8004cec <null_ptr_check>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11e      	bne.n	8003be2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003ba4:	f107 030e 	add.w	r3, r7, #14
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f81f 	bl	8003bee <bme280_get_sensor_mode>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <bme280_set_sensor_mode+0x46>
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8003bc2:	6838      	ldr	r0, [r7, #0]
 8003bc4:	f000 faf9 	bl	80041ba <put_device_to_sleep>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fabb 	bl	8004154 <write_power_mode>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003bf8:	6838      	ldr	r0, [r7, #0]
 8003bfa:	f001 f877 	bl	8004cec <null_ptr_check>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	20f4      	movs	r0, #244	; 0xf4
 8003c12:	f7ff febc 	bl	800398e <bme280_get_regs>
 8003c16:	4603      	mov	r3, r0
 8003c18:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003c3c:	23e0      	movs	r3, #224	; 0xe0
 8003c3e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003c40:	23b6      	movs	r3, #182	; 0xb6
 8003c42:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f001 f851 	bl	8004cec <null_ptr_check>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003c56:	f107 010d 	add.w	r1, r7, #13
 8003c5a:	f107 000e 	add.w	r0, r7, #14
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f7ff fec4 	bl	80039ee <bme280_set_regs>
 8003c66:	4603      	mov	r3, r0
 8003c68:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2002      	movs	r0, #2
 8003c70:	4798      	blx	r3
	}

	return rslt;
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	; 0x28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003c94:	f107 0310 	add.w	r3, r7, #16
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f001 f823 	bl	8004cec <null_ptr_check>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d124      	bne.n	8003cfe <bme280_get_sensor_data+0x80>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d021      	beq.n	8003cfe <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003cba:	f107 011c 	add.w	r1, r7, #28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	20f7      	movs	r0, #247	; 0xf7
 8003cc4:	f7ff fe63 	bl	800398e <bme280_get_regs>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003cd6:	f107 0210 	add.w	r2, r7, #16
 8003cda:	f107 031c 	add.w	r3, r7, #28
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f815 	bl	8003d10 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3310      	adds	r3, #16
 8003cea:	f107 0110 	add.w	r1, r7, #16
 8003cee:	7bf8      	ldrb	r0, [r7, #15]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	f000 f853 	bl	8003d9c <bme280_compensate_data>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003cfc:	e002      	b.n	8003d04 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003cfe:	23ff      	movs	r3, #255	; 0xff
 8003d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3728      	adds	r7, #40	; 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	031b      	lsls	r3, r3, #12
 8003d20:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3301      	adds	r3, #1
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3302      	adds	r3, #2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	031b      	lsls	r3, r3, #12
 8003d4e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3305      	adds	r3, #5
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3306      	adds	r3, #6
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3307      	adds	r3, #7
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04b      	beq.n	8003e4e <bme280_compensate_data+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d048      	beq.n	8003e4e <bme280_compensate_data+0xb2>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d045      	beq.n	8003e4e <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	f000 fa2b 	bl	8004254 <compensate_temperature>
 8003dfe:	eeb0 7a40 	vmov.f32	s14, s0
 8003e02:	eef0 7a60 	vmov.f32	s15, s1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f000 faed 	bl	80043f8 <compensate_pressure>
 8003e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e22:	eef0 7a60 	vmov.f32	s15, s1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	68b8      	ldr	r0, [r7, #8]
 8003e3a:	f000 fcad 	bl	8004798 <compensate_humidity>
 8003e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e42:	eef0 7a60 	vmov.f32	s15, s1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8003e4c:	e001      	b.n	8003e52 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003e4e:	23ff      	movs	r3, #255	; 0xff
 8003e50:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f000 f815 	bl	8003eac <set_osr_humidity_settings>
 8003e82:	4603      	mov	r3, r0
 8003e84:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f842 	bl	8003f20 <set_osr_press_temp_settings>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003eb6:	23f2      	movs	r3, #242	; 0xf2
 8003eb8:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	789b      	ldrb	r3, [r3, #2]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003ec6:	f107 010e 	add.w	r1, r7, #14
 8003eca:	f107 000c 	add.w	r0, r7, #12
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f7ff fd8c 	bl	80039ee <bme280_set_regs>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003ee2:	23f4      	movs	r3, #244	; 0xf4
 8003ee4:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003ee6:	7b38      	ldrb	r0, [r7, #12]
 8003ee8:	f107 010d 	add.w	r1, r7, #13
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f7ff fd4d 	bl	800398e <bme280_get_regs>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003f00:	f107 010d 	add.w	r1, r7, #13
 8003f04:	f107 000c 	add.w	r0, r7, #12
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f7ff fd6f 	bl	80039ee <bme280_set_regs>
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003f2e:	23f4      	movs	r3, #244	; 0xf4
 8003f30:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003f32:	7db8      	ldrb	r0, [r7, #22]
 8003f34:	f107 0115 	add.w	r1, r7, #21
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f7ff fd27 	bl	800398e <bme280_get_regs>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11f      	bne.n	8003f8c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8003f56:	f107 0315 	add.w	r3, r7, #21
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f88e 	bl	800407e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003f6c:	f107 0315 	add.w	r3, r7, #21
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f8a0 	bl	80040b8 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f78:	f107 0115 	add.w	r1, r7, #21
 8003f7c:	f107 0016 	add.w	r0, r7, #22
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f7ff fd33 	bl	80039ee <bme280_set_regs>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003fa6:	23f5      	movs	r3, #245	; 0xf5
 8003fa8:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003faa:	7db8      	ldrb	r0, [r7, #22]
 8003fac:	f107 0115 	add.w	r1, r7, #21
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f7ff fceb 	bl	800398e <bme280_get_regs>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d11f      	bne.n	8004004 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003fce:	f107 0315 	add.w	r3, r7, #21
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f81b 	bl	8004010 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8003fe4:	f107 0315 	add.w	r3, r7, #21
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f82d 	bl	800404a <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ff0:	f107 0115 	add.w	r1, r7, #21
 8003ff4:	f107 0016 	add.w	r0, r7, #22
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f7ff fcf7 	bl	80039ee <bme280_set_regs>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b25b      	sxtb	r3, r3
 8004020:	f023 031c 	bic.w	r3, r3, #28
 8004024:	b25a      	sxtb	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	78db      	ldrb	r3, [r3, #3]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	b25b      	sxtb	r3, r3
 800402e:	f003 031c 	and.w	r3, r3, #28
 8004032:	b25b      	sxtb	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b25b      	sxtb	r3, r3
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	701a      	strb	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b25b      	sxtb	r3, r3
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	b25a      	sxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	791b      	ldrb	r3, [r3, #4]
 8004064:	015b      	lsls	r3, r3, #5
 8004066:	b25b      	sxtb	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b25b      	sxtb	r3, r3
 800406c:	b2da      	uxtb	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	701a      	strb	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f023 031c 	bic.w	r3, r3, #28
 8004092:	b25a      	sxtb	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	b25b      	sxtb	r3, r3
 800409c:	f003 031c 	and.w	r3, r3, #28
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	701a      	strb	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	b25a      	sxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	701a      	strb	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3302      	adds	r3, #2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	109b      	asrs	r3, r3, #2
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3302      	adds	r3, #2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3303      	adds	r3, #3
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	109b      	asrs	r3, r3, #2
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	b2da      	uxtb	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3303      	adds	r3, #3
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	b2da      	uxtb	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	711a      	strb	r2, [r3, #4]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004160:	23f4      	movs	r3, #244	; 0xf4
 8004162:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004164:	7bb8      	ldrb	r0, [r7, #14]
 8004166:	f107 010d 	add.w	r1, r7, #13
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	f7ff fc0e 	bl	800398e <bme280_get_regs>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d117      	bne.n	80041ae <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	b25a      	sxtb	r2, r3
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	b25b      	sxtb	r3, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	b25b      	sxtb	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800419a:	f107 010d 	add.w	r1, r7, #13
 800419e:	f107 000e 	add.w	r0, r7, #14
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f7ff fc22 	bl	80039ee <bme280_set_regs>
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80041c2:	f107 0110 	add.w	r1, r7, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	20f2      	movs	r0, #242	; 0xf2
 80041cc:	f7ff fbdf 	bl	800398e <bme280_get_regs>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80041d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d118      	bne.n	800420e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80041dc:	f107 0208 	add.w	r2, r7, #8
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff80 	bl	80040ec <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fd21 	bl	8003c34 <bme280_soft_reset>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80041f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f808 	bl	800421a <reload_device_settings>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800420e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	201f      	movs	r0, #31
 800422a:	f7ff fe18 	bl	8003e5e <set_osr_settings>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8004232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	201f      	movs	r0, #31
 8004240:	f7ff feaa 	bl	8003f98 <set_filter_standby_settings>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8004254:	b5b0      	push	{r4, r5, r7, lr}
 8004256:	b08c      	sub	sp, #48	; 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	4b5f      	ldr	r3, [pc, #380]	; (80043e0 <compensate_temperature+0x18c>)
 8004264:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	4b5d      	ldr	r3, [pc, #372]	; (80043e4 <compensate_temperature+0x190>)
 800426e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f8e8 	bl	800044c <__aeabi_ui2d>
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <compensate_temperature+0x194>)
 8004282:	f7fc fa87 	bl	8000794 <__aeabi_ddiv>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4614      	mov	r4, r2
 800428c:	461d      	mov	r5, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc f8da 	bl	800044c <__aeabi_ui2d>
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <compensate_temperature+0x198>)
 800429e:	f7fc fa79 	bl	8000794 <__aeabi_ddiv>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4620      	mov	r0, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	f7fb ff91 	bl	80001d0 <__aeabi_dsub>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f8d5 	bl	800046c <__aeabi_i2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ca:	f7fc f939 	bl	8000540 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc f8b6 	bl	800044c <__aeabi_ui2d>
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80042e8:	f7fc fa54 	bl	8000794 <__aeabi_ddiv>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	461d      	mov	r5, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc f8a7 	bl	800044c <__aeabi_ui2d>
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <compensate_temperature+0x19c>)
 8004304:	f7fc fa46 	bl	8000794 <__aeabi_ddiv>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f7fb ff5e 	bl	80001d0 <__aeabi_dsub>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 800431c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004324:	f7fc f90c 	bl	8000540 <__aeabi_dmul>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f898 	bl	800046c <__aeabi_i2d>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4620      	mov	r0, r4
 8004342:	4629      	mov	r1, r5
 8004344:	f7fc f8fc 	bl	8000540 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8004350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004358:	f7fb ff3c 	bl	80001d4 <__adddf3>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f7fc fb9c 	bl	8000aa0 <__aeabi_d2iz>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 800436e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004376:	f7fb ff2d 	bl	80001d4 <__adddf3>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <compensate_temperature+0x1a0>)
 8004388:	f7fc fa04 	bl	8000794 <__aeabi_ddiv>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8004394:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004398:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800439c:	f7fc fb42 	bl	8000a24 <__aeabi_dcmplt>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80043a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80043ae:	e00c      	b.n	80043ca <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80043b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043b8:	f7fc fb52 	bl	8000a60 <__aeabi_dcmpgt>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <compensate_temperature+0x176>
		temperature = temperature_max;
 80043c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 80043ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80043d2:	eeb0 0a47 	vmov.f32	s0, s14
 80043d6:	eef0 0a67 	vmov.f32	s1, s15
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	bdb0      	pop	{r4, r5, r7, pc}
 80043e0:	c0440000 	.word	0xc0440000
 80043e4:	40554000 	.word	0x40554000
 80043e8:	40d00000 	.word	0x40d00000
 80043ec:	40900000 	.word	0x40900000
 80043f0:	40c00000 	.word	0x40c00000
 80043f4:	40b40000 	.word	0x40b40000

080043f8 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80043f8:	b5b0      	push	{r4, r5, r7, lr}
 80043fa:	b08e      	sub	sp, #56	; 0x38
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8004402:	a3d9      	add	r3, pc, #868	; (adr r3, 8004768 <compensate_pressure+0x370>)
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 800440c:	a3d8      	add	r3, pc, #864	; (adr r3, 8004770 <compensate_pressure+0x378>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc f826 	bl	800046c <__aeabi_i2d>
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004428:	f7fc f9b4 	bl	8000794 <__aeabi_ddiv>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	4bc1      	ldr	r3, [pc, #772]	; (8004740 <compensate_pressure+0x348>)
 800443a:	f7fb fec9 	bl	80001d0 <__aeabi_dsub>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8004446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800444e:	f7fc f877 	bl	8000540 <__aeabi_dmul>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4614      	mov	r4, r2
 8004458:	461d      	mov	r5, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc f803 	bl	800046c <__aeabi_i2d>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	f7fc f867 	bl	8000540 <__aeabi_dmul>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	4bb1      	ldr	r3, [pc, #708]	; (8004744 <compensate_pressure+0x34c>)
 8004480:	f7fc f988 	bl	8000794 <__aeabi_ddiv>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fb ffea 	bl	800046c <__aeabi_i2d>
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	f7fc f850 	bl	8000540 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	f7fb fe92 	bl	80001d4 <__adddf3>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044b8:	f7fb fe8c 	bl	80001d4 <__adddf3>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	4b9f      	ldr	r3, [pc, #636]	; (8004748 <compensate_pressure+0x350>)
 80044ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044ce:	f7fc f961 	bl	8000794 <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4614      	mov	r4, r2
 80044d8:	461d      	mov	r5, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fb ffc3 	bl	800046c <__aeabi_i2d>
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	4b98      	ldr	r3, [pc, #608]	; (800474c <compensate_pressure+0x354>)
 80044ec:	f7fc f828 	bl	8000540 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f7fb fe6c 	bl	80001d4 <__adddf3>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fb ffae 	bl	800046c <__aeabi_i2d>
 8004510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004514:	f7fc f814 	bl	8000540 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004524:	f7fc f80c 	bl	8000540 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	4b86      	ldr	r3, [pc, #536]	; (8004750 <compensate_pressure+0x358>)
 8004536:	f7fc f92d 	bl	8000794 <__aeabi_ddiv>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fb ff8f 	bl	800046c <__aeabi_i2d>
 800454e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004552:	f7fb fff5 	bl	8000540 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004562:	f7fb fe37 	bl	80001d4 <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	4b77      	ldr	r3, [pc, #476]	; (8004750 <compensate_pressure+0x358>)
 8004574:	f7fc f90e 	bl	8000794 <__aeabi_ddiv>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <compensate_pressure+0x34c>)
 8004586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800458a:	f7fc f903 	bl	8000794 <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <compensate_pressure+0x35c>)
 800459c:	f7fb fe1a 	bl	80001d4 <__adddf3>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	88db      	ldrh	r3, [r3, #6]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fb ff4d 	bl	800044c <__aeabi_ui2d>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fb ffc1 	bl	8000540 <__aeabi_dmul>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045d2:	f7fc fa1d 	bl	8000a10 <__aeabi_dcmpeq>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 80cd 	bne.w	8004778 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ff32 	bl	800044c <__aeabi_ui2d>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	f04f 0000 	mov.w	r0, #0
 80045f0:	4959      	ldr	r1, [pc, #356]	; (8004758 <compensate_pressure+0x360>)
 80045f2:	f7fb fded 	bl	80001d0 <__aeabi_dsub>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <compensate_pressure+0x364>)
 8004604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004608:	f7fc f8c4 	bl	8000794 <__aeabi_ddiv>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004614:	f7fb fddc 	bl	80001d0 <__aeabi_dsub>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	a345      	add	r3, pc, #276	; (adr r3, 8004738 <compensate_pressure+0x340>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb ff8b 	bl	8000540 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004636:	f7fc f8ad 	bl	8000794 <__aeabi_ddiv>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff0f 	bl	800046c <__aeabi_i2d>
 800464e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004652:	f7fb ff75 	bl	8000540 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004662:	f7fb ff6d 	bl	8000540 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <compensate_pressure+0x368>)
 8004674:	f7fc f88e 	bl	8000794 <__aeabi_ddiv>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb fef0 	bl	800046c <__aeabi_i2d>
 800468c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004690:	f7fb ff56 	bl	8000540 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <compensate_pressure+0x34c>)
 80046a2:	f7fc f877 	bl	8000794 <__aeabi_ddiv>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 80046ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046b6:	f7fb fd8d 	bl	80001d4 <__adddf3>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4614      	mov	r4, r2
 80046c0:	461d      	mov	r5, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb fecf 	bl	800046c <__aeabi_i2d>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4620      	mov	r0, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	f7fb fd7d 	bl	80001d4 <__adddf3>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <compensate_pressure+0x36c>)
 80046e8:	f7fc f854 	bl	8000794 <__aeabi_ddiv>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046f4:	f7fb fd6e 	bl	80001d4 <__adddf3>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004704:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004708:	f7fc f98c 	bl	8000a24 <__aeabi_dcmplt>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <compensate_pressure+0x324>
			pressure = pressure_min;
 8004712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004716:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800471a:	e031      	b.n	8004780 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 800471c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004720:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004724:	f7fc f99c 	bl	8000a60 <__aeabi_dcmpgt>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d028      	beq.n	8004780 <compensate_pressure+0x388>
			pressure = pressure_max;
 800472e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004732:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004736:	e023      	b.n	8004780 <compensate_pressure+0x388>
 8004738:	00000000 	.word	0x00000000
 800473c:	40b86a00 	.word	0x40b86a00
 8004740:	40ef4000 	.word	0x40ef4000
 8004744:	40e00000 	.word	0x40e00000
 8004748:	40100000 	.word	0x40100000
 800474c:	40f00000 	.word	0x40f00000
 8004750:	41200000 	.word	0x41200000
 8004754:	3ff00000 	.word	0x3ff00000
 8004758:	41300000 	.word	0x41300000
 800475c:	40b00000 	.word	0x40b00000
 8004760:	41e00000 	.word	0x41e00000
 8004764:	40300000 	.word	0x40300000
 8004768:	00000000 	.word	0x00000000
 800476c:	40dd4c00 	.word	0x40dd4c00
 8004770:	00000000 	.word	0x00000000
 8004774:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8004778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800477c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8004780:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004784:	ec43 2b17 	vmov	d7, r2, r3
}
 8004788:	eeb0 0a47 	vmov.f32	s0, s14
 800478c:	eef0 0a67 	vmov.f32	s1, s15
 8004790:	3738      	adds	r7, #56	; 0x38
 8004792:	46bd      	mov	sp, r7
 8004794:	bdb0      	pop	{r4, r5, r7, pc}
 8004796:	bf00      	nop

08004798 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004798:	b5b0      	push	{r4, r5, r7, lr}
 800479a:	b094      	sub	sp, #80	; 0x50
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	4b81      	ldr	r3, [pc, #516]	; (80049b8 <compensate_humidity+0x220>)
 80047b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb fe55 	bl	800046c <__aeabi_i2d>
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	4b7d      	ldr	r3, [pc, #500]	; (80049bc <compensate_humidity+0x224>)
 80047c8:	f7fb fd02 	bl	80001d0 <__aeabi_dsub>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fe46 	bl	800046c <__aeabi_i2d>
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <compensate_humidity+0x228>)
 80047e6:	f7fb feab 	bl	8000540 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	461d      	mov	r5, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fe37 	bl	800046c <__aeabi_i2d>
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <compensate_humidity+0x22c>)
 8004804:	f7fb ffc6 	bl	8000794 <__aeabi_ddiv>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004814:	f7fb fe94 	bl	8000540 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fcd8 	bl	80001d4 <__adddf3>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fb fe0b 	bl	800044c <__aeabi_ui2d>
 8004836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800483a:	f7fb fcc9 	bl	80001d0 <__aeabi_dsub>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fb fe0d 	bl	800046c <__aeabi_i2d>
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <compensate_humidity+0x230>)
 8004858:	f7fb ff9c 	bl	8000794 <__aeabi_ddiv>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	7f1b      	ldrb	r3, [r3, #28]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fdef 	bl	800044c <__aeabi_ui2d>
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <compensate_humidity+0x234>)
 8004874:	f7fb ff8e 	bl	8000794 <__aeabi_ddiv>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004884:	f7fb fe5c 	bl	8000540 <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <compensate_humidity+0x238>)
 8004896:	f7fb fc9d 	bl	80001d4 <__adddf3>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fddf 	bl	800046c <__aeabi_i2d>
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	4b46      	ldr	r3, [pc, #280]	; (80049cc <compensate_humidity+0x234>)
 80048b4:	f7fb ff6e 	bl	8000794 <__aeabi_ddiv>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048c4:	f7fb fe3c 	bl	8000540 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048d4:	f7fb fe34 	bl	8000540 <__aeabi_dmul>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <compensate_humidity+0x238>)
 80048e6:	f7fb fc75 	bl	80001d4 <__adddf3>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 80048f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80048fa:	f7fb fe21 	bl	8000540 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4614      	mov	r4, r2
 8004904:	461d      	mov	r5, r3
 8004906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800490a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800490e:	f7fb fe17 	bl	8000540 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb fe11 	bl	8000540 <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	7e1b      	ldrb	r3, [r3, #24]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fb fd8e 	bl	800044c <__aeabi_ui2d>
 8004930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004934:	f7fb fe04 	bl	8000540 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <compensate_humidity+0x23c>)
 8004946:	f7fb ff25 	bl	8000794 <__aeabi_ddiv>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	f04f 0000 	mov.w	r0, #0
 8004952:	491f      	ldr	r1, [pc, #124]	; (80049d0 <compensate_humidity+0x238>)
 8004954:	f7fb fc3c 	bl	80001d0 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004960:	f7fb fdee 	bl	8000540 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 800496c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004970:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004974:	f7fc f874 	bl	8000a60 <__aeabi_dcmpgt>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 800497e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004982:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004986:	e00c      	b.n	80049a2 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8004988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004990:	f7fc f848 	bl	8000a24 <__aeabi_dcmplt>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <compensate_humidity+0x20a>
		humidity = humidity_min;
 800499a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800499e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 80049a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80049aa:	eeb0 0a47 	vmov.f32	s0, s14
 80049ae:	eef0 0a67 	vmov.f32	s1, s15
 80049b2:	3750      	adds	r7, #80	; 0x50
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bdb0      	pop	{r4, r5, r7, pc}
 80049b8:	40590000 	.word	0x40590000
 80049bc:	40f2c000 	.word	0x40f2c000
 80049c0:	40500000 	.word	0x40500000
 80049c4:	40d00000 	.word	0x40d00000
 80049c8:	40f00000 	.word	0x40f00000
 80049cc:	41900000 	.word	0x41900000
 80049d0:	3ff00000 	.word	0x3ff00000
 80049d4:	41200000 	.word	0x41200000

080049d8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80049e0:	2388      	movs	r3, #136	; 0x88
 80049e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	f107 0310 	add.w	r3, r7, #16
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	611a      	str	r2, [r3, #16]
 80049fa:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80049fc:	f107 010c 	add.w	r1, r7, #12
 8004a00:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	221a      	movs	r2, #26
 8004a08:	f7fe ffc1 	bl	800398e <bme280_get_regs>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8004a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f84a 	bl	8004aba <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004a26:	23e1      	movs	r3, #225	; 0xe1
 8004a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004a2c:	f107 010c 	add.w	r1, r7, #12
 8004a30:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2207      	movs	r2, #7
 8004a38:	f7fe ffa9 	bl	800398e <bme280_get_regs>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004a4a:	f107 030c 	add.w	r3, r7, #12
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f8e1 	bl	8004c18 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8004a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3728      	adds	r7, #40	; 0x28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
 8004a74:	e016      	b.n	8004aa4 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	3b01      	subs	r3, #1
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	440b      	add	r3, r1
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	441a      	add	r2, r3
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4619      	mov	r1, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	440b      	add	r3, r1
 8004a9a:	7812      	ldrb	r2, [r2, #0]
 8004a9c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
 8004aa4:	7dfa      	ldrb	r2, [r7, #23]
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3e4      	bcc.n	8004a76 <interleave_reg_addr+0x14>
	}
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3301      	adds	r3, #1
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3302      	adds	r3, #2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3305      	adds	r3, #5
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3306      	adds	r3, #6
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3309      	adds	r3, #9
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3308      	adds	r3, #8
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b21a      	sxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	330b      	adds	r3, #11
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	b21a      	sxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	330a      	adds	r3, #10
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	4313      	orrs	r3, r2
 8004b62:	b21a      	sxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	330d      	adds	r3, #13
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	330c      	adds	r3, #12
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b21b      	sxth	r3, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b21a      	sxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	330f      	adds	r3, #15
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	330e      	adds	r3, #14
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	b21a      	sxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3311      	adds	r3, #17
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	b21a      	sxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3310      	adds	r3, #16
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b21a      	sxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3313      	adds	r3, #19
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	b21a      	sxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3312      	adds	r3, #18
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	b21a      	sxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3315      	adds	r3, #21
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3314      	adds	r3, #20
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b21a      	sxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3317      	adds	r3, #23
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	b21a      	sxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3316      	adds	r3, #22
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	b21a      	sxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7e5a      	ldrb	r2, [r3, #25]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	761a      	strb	r2, [r3, #24]

}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	3310      	adds	r3, #16
 8004c26:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b21a      	sxth	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	789a      	ldrb	r2, [r3, #2]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3303      	adds	r3, #3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004c66:	8a7a      	ldrh	r2, [r7, #18]
 8004c68:	8a3b      	ldrh	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3305      	adds	r3, #5
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004c8e:	89fa      	ldrh	r2, [r7, #14]
 8004c90:	89bb      	ldrh	r3, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3306      	adds	r3, #6
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b25a      	sxtb	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004ca8:	bf00      	nop
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	71fb      	strb	r3, [r7, #7]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004cc8:	79fa      	ldrb	r2, [r7, #7]
 8004cca:	79bb      	ldrb	r3, [r7, #6]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e001      	b.n	8004cde <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <null_ptr_check+0x26>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <null_ptr_check+0x26>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <null_ptr_check+0x26>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004d12:	23ff      	movs	r3, #255	; 0xff
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	e001      	b.n	8004d1c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	603a      	str	r2, [r7, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	71bb      	strb	r3, [r7, #6]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	b299      	uxth	r1, r3
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2301      	movs	r3, #1
 8004d52:	4811      	ldr	r0, [pc, #68]	; (8004d98 <user_i2c_read+0x6c>)
 8004d54:	f003 fdce 	bl	80088f4 <HAL_I2C_Master_Transmit>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <user_i2c_read+0x38>
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d62:	e014      	b.n	8004d8e <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	b299      	uxth	r1, r3
 8004d72:	88bb      	ldrh	r3, [r7, #4]
 8004d74:	220a      	movs	r2, #10
 8004d76:	9200      	str	r2, [sp, #0]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	4807      	ldr	r0, [pc, #28]	; (8004d98 <user_i2c_read+0x6c>)
 8004d7c:	f003 feb8 	bl	8008af0 <HAL_I2C_Master_Receive>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <user_i2c_read+0x60>
 8004d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8a:	e000      	b.n	8004d8e <user_i2c_read+0x62>

  return 0;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200002d4 	.word	0x200002d4

08004d9c <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fbc7 	bl	8006538 <HAL_Delay>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	603a      	str	r2, [r7, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	71bb      	strb	r3, [r7, #6]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004dca:	88bb      	ldrh	r3, [r7, #4]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f00b f89a 	bl	800ff08 <malloc>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004dd8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	88ba      	ldrh	r2, [r7, #4]
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f00b f89d 	bl	800ff28 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	b299      	uxth	r1, r3
 8004df6:	88bb      	ldrh	r3, [r7, #4]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e00:	9200      	str	r2, [sp, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4808      	ldr	r0, [pc, #32]	; (8004e28 <user_i2c_write+0x74>)
 8004e06:	f003 fd75 	bl	80088f4 <HAL_I2C_Master_Transmit>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <user_i2c_write+0x62>
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e14:	e003      	b.n	8004e1e <user_i2c_write+0x6a>

  free(buf);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f00b f87e 	bl	800ff18 <free>
  return 0;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200002d4 	.word	0x200002d4

08004e2c <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
	detect_bme280();
 8004e30:	f000 fa5c 	bl	80052ec <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <detect_all_sensors_and_init+0x4c>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 8004e3c:	f000 f9d4 	bl	80051e8 <init_bme280>
	}

	detect_mpu6050();
 8004e40:	f000 fa8a 	bl	8005358 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <detect_all_sensors_and_init+0x4c>)
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 8004e4c:	f000 f986 	bl	800515c <init_mpu6050>
	}



	detect_ms5611();
 8004e50:	f000 fb32 	bl	80054b8 <detect_ms5611>
	if(i2c_device.MS5611_ready_status == true)
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <detect_all_sensors_and_init+0x4c>)
 8004e56:	78db      	ldrb	r3, [r3, #3]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <detect_all_sensors_and_init+0x34>
	{
		init_ms5611();
 8004e5c:	f000 f958 	bl	8005110 <init_ms5611>
	}

	init_am2302();			// Init AM2302 sensor
 8004e60:	f000 f83e 	bl	8004ee0 <init_am2302>

	//////////////////////////////////////////////////////////////
	// DON'T WORK
	denect_hmc5883l();								// Don't work
 8004e64:	f000 fafa 	bl	800545c <denect_hmc5883l>

	detect_apds9960();
 8004e68:	f000 fb54 	bl	8005514 <detect_apds9960>
	if(i2c_device.APDS9960_ready_status == true)
	{
		//init_apds9960();
	}
	///////////////////////////////////////////////////////////////
	detect_oled_screen();
 8004e6c:	f000 fb88 	bl	8005580 <detect_oled_screen>
	detect_ds3231();
 8004e70:	f000 fbac 	bl	80055cc <detect_ds3231>

}
 8004e74:	bf00      	nop
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000618 	.word	0x20000618

08004e7c <measure_sensors>:
//---------------------------------------------------------------------------------------
// Measure one time
void measure_sensors(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
	while(1)
	{
		bme280_measure();
 8004e80:	f000 f9fc 	bl	800527c <bme280_measure>
		mpu6050_measure();
 8004e84:	f000 f97a 	bl	800517c <mpu6050_measure>
		ms5611_measure();
 8004e88:	f000 f94e 	bl	8005128 <ms5611_measure>
		am2302_measure();	// Measure must be less than one time per 2-3 seconds
 8004e8c:	f000 f84c 	bl	8004f28 <am2302_measure>

		//	apds9960();   DON't work !!!!
		HAL_Delay(1000);
 8004e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e94:	f001 fb50 	bl	8006538 <HAL_Delay>
		bme280_measure();
 8004e98:	e7f2      	b.n	8004e80 <measure_sensors+0x4>
	...

08004e9c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <DelayMicro+0x3c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <DelayMicro+0x3c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <DelayMicro+0x40>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0ddb      	lsrs	r3, r3, #23
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	607b      	str	r3, [r7, #4]
	while (micros--);
 8004ebe:	bf00      	nop
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1e5a      	subs	r2, r3, #1
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1fa      	bne.n	8004ec0 <DelayMicro+0x24>
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20000004 	.word	0x20000004
 8004edc:	ffa71ee7 	.word	0xffa71ee7

08004ee0 <init_am2302>:
//----------------------------------------------------------------------------------------
void init_am2302(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <init_am2302+0x44>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <init_am2302+0x44>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <init_am2302+0x44>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <init_am2302+0x44>)
 8004ef6:	f023 0302 	bic.w	r3, r3, #2
 8004efa:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <init_am2302+0x44>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <init_am2302+0x44>)
 8004f02:	f043 0302 	orr.w	r3, r3, #2
 8004f06:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <init_am2302+0x44>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <init_am2302+0x44>)
 8004f0e:	f083 0302 	eor.w	r3, r3, #2
 8004f12:	6153      	str	r3, [r2, #20]
	HAL_Delay(2000); 							// First init must be 2 seconds delay
 8004f14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f18:	f001 fb0e 	bl	8006538 <HAL_Delay>
	am2302_measure(); 							// For fill in i2c_device.AM2302_ready_status
 8004f1c:	f000 f804 	bl	8004f28 <am2302_measure>
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40020800 	.word	0x40020800

08004f28 <am2302_measure>:
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
	int j = 0;   							// Counter bytes
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
	int i = 0;								// Counter bits
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	603b      	str	r3, [r7, #0]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004f3e:	4b72      	ldr	r3, [pc, #456]	; (8005108 <am2302_measure+0x1e0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a71      	ldr	r2, [pc, #452]	; (8005108 <am2302_measure+0x1e0>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004f4a:	4b6f      	ldr	r3, [pc, #444]	; (8005108 <am2302_measure+0x1e0>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4a6e      	ldr	r2, [pc, #440]	; (8005108 <am2302_measure+0x1e0>)
 8004f50:	f023 0302 	bic.w	r3, r3, #2
 8004f54:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004f56:	4b6c      	ldr	r3, [pc, #432]	; (8005108 <am2302_measure+0x1e0>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a6b      	ldr	r2, [pc, #428]	; (8005108 <am2302_measure+0x1e0>)
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6093      	str	r3, [r2, #8]

	// Make output pin C1
	GPIOC->ODR &= ~0x02;		// Low level
 8004f62:	4b69      	ldr	r3, [pc, #420]	; (8005108 <am2302_measure+0x1e0>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4a68      	ldr	r2, [pc, #416]	; (8005108 <am2302_measure+0x1e0>)
 8004f68:	f023 0302 	bic.w	r3, r3, #2
 8004f6c:	6153      	str	r3, [r2, #20]
	DelayMicro(18000);
 8004f6e:	f244 6050 	movw	r0, #18000	; 0x4650
 8004f72:	f7ff ff93 	bl	8004e9c <DelayMicro>
	GPIOC->ODR ^= 0x02;			// High level
 8004f76:	4b64      	ldr	r3, [pc, #400]	; (8005108 <am2302_measure+0x1e0>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4a63      	ldr	r2, [pc, #396]	; (8005108 <am2302_measure+0x1e0>)
 8004f7c:	f083 0302 	eor.w	r3, r3, #2
 8004f80:	6153      	str	r3, [r2, #20]
	DelayMicro(39);
 8004f82:	2027      	movs	r0, #39	; 0x27
 8004f84:	f7ff ff8a 	bl	8004e9c <DelayMicro>

	// Make input pin C1
	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8004f88:	4b5f      	ldr	r3, [pc, #380]	; (8005108 <am2302_measure+0x1e0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5e      	ldr	r2, [pc, #376]	; (8005108 <am2302_measure+0x1e0>)
 8004f8e:	f023 0304 	bic.w	r3, r3, #4
 8004f92:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8004f94:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <am2302_measure+0x1e0>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a5b      	ldr	r2, [pc, #364]	; (8005108 <am2302_measure+0x1e0>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	60d3      	str	r3, [r2, #12]

	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8004fa0:	4b59      	ldr	r3, [pc, #356]	; (8005108 <am2302_measure+0x1e0>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <am2302_measure+0x8a>
	{
		get_data_status = false; 					// Error. Sensor not response
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
 8004fb0:	e001      	b.n	8004fb6 <am2302_measure+0x8e>
	}
	else
	{
		get_data_status = true;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
	}

	DelayMicro(80);
 8004fb6:	2050      	movs	r0, #80	; 0x50
 8004fb8:	f7ff ff70 	bl	8004e9c <DelayMicro>
	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8004fbc:	4b52      	ldr	r3, [pc, #328]	; (8005108 <am2302_measure+0x1e0>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <am2302_measure+0xa6>
	{
		get_data_status = false; 					// Error. Sensor not response
 8004fc8:	2300      	movs	r3, #0
 8004fca:	75fb      	strb	r3, [r7, #23]
 8004fcc:	e001      	b.n	8004fd2 <am2302_measure+0xaa>
	}
	else
	{
		get_data_status = true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
	}
	DelayMicro(80);
 8004fd2:	2050      	movs	r0, #80	; 0x50
 8004fd4:	f7ff ff62 	bl	8004e9c <DelayMicro>

	if(get_data_status == true)
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 808c 	beq.w	80050f8 <am2302_measure+0x1d0>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e048      	b.n	8005078 <am2302_measure+0x150>
		{
			data[4-j] = 0;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f1c3 0304 	rsb	r3, r3, #4
 8004fec:	f107 0218 	add.w	r2, r7, #24
 8004ff0:	4413      	add	r3, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e034      	b.n	8005068 <am2302_measure+0x140>
			{
				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004ffe:	bf00      	nop
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <am2302_measure+0x1e0>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f9      	beq.n	8005000 <am2302_measure+0xd8>
				DelayMicro(30);
 800500c:	201e      	movs	r0, #30
 800500e:	f7ff ff45 	bl	8004e9c <DelayMicro>
				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8005012:	4b3d      	ldr	r3, [pc, #244]	; (8005108 <am2302_measure+0x1e0>)
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01a      	beq.n	8005054 <am2302_measure+0x12c>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f1c3 0304 	rsb	r3, r3, #4
 8005024:	f107 0218 	add.w	r2, r7, #24
 8005028:	4413      	add	r3, r2
 800502a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800502e:	b25a      	sxtb	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	b25b      	sxtb	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b25a      	sxtb	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f1c3 0304 	rsb	r3, r3, #4
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f107 0118 	add.w	r1, r7, #24
 800504e:	440b      	add	r3, r1
 8005050:	f803 2c18 	strb.w	r2, [r3, #-24]
				}
				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8005054:	bf00      	nop
 8005056:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <am2302_measure+0x1e0>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f9      	bne.n	8005056 <am2302_measure+0x12e>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b07      	cmp	r3, #7
 800506c:	ddc7      	ble.n	8004ffe <am2302_measure+0xd6>
			}
			get_data_status = true;										// Data was been written okay
 800506e:	2301      	movs	r3, #1
 8005070:	75fb      	strb	r3, [r7, #23]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b04      	cmp	r3, #4
 800507c:	ddb3      	ble.n	8004fe6 <am2302_measure+0xbe>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 800507e:	463b      	mov	r3, r7
 8005080:	3301      	adds	r3, #1
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005090:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005098:	edc7 7a02 	vstr	s15, [r7, #8]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 800509c:	463b      	mov	r3, r7
 800509e:	3301      	adds	r3, #1
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b21b      	sxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da0f      	bge.n	80050c8 <am2302_measure+0x1a0>
 80050a8:	68b8      	ldr	r0, [r7, #8]
 80050aa:	f7fb f9f1 	bl	8000490 <__aeabi_f2d>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	f7fb fd1b 	bl	8000af0 <__aeabi_d2f>
 80050ba:	4603      	mov	r3, r0
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef1 7a67 	vneg.f32	s15, s15
 80050c4:	edc7 7a02 	vstr	s15, [r7, #8]

		i2c_device.AM2302_temperature = temper;
 80050c8:	4a10      	ldr	r2, [pc, #64]	; (800510c <am2302_measure+0x1e4>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6613      	str	r3, [r2, #96]	; 0x60

		hum = (float)(*(int16_t*)(data+3)) / 10;
 80050ce:	463b      	mov	r3, r7
 80050d0:	3303      	adds	r3, #3
 80050d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050de:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80050e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050e6:	edc7 7a01 	vstr	s15, [r7, #4]
		i2c_device.AM2302_humidity = hum;
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <am2302_measure+0x1e4>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6653      	str	r3, [r2, #100]	; 0x64

		i2c_device.AM2302_ready_status = true;
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <am2302_measure+0x1e4>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.AM2302_ready_status = false;
	}
}
 80050f6:	e002      	b.n	80050fe <am2302_measure+0x1d6>
		i2c_device.AM2302_ready_status = false;
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <am2302_measure+0x1e4>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	715a      	strb	r2, [r3, #5]
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40020800 	.word	0x40020800
 800510c:	20000618 	.word	0x20000618

08005110 <init_ms5611>:
//----------------------------------------------------------------------------------------
void init_ms5611(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
	ms5611_set_i2c(&hi2c2);
 8005114:	4803      	ldr	r0, [pc, #12]	; (8005124 <init_ms5611+0x14>)
 8005116:	f000 fe21 	bl	8005d5c <ms5611_set_i2c>
	ms5611_init();
 800511a:	f000 fe73 	bl	8005e04 <ms5611_init>
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000380 	.word	0x20000380

08005128 <ms5611_measure>:
//----------------------------------------------------------------------------------------
void ms5611_measure(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	ms5611_update();
 800512c:	f000 ff08 	bl	8005f40 <ms5611_update>

	i2c_device.MS5611_temperature = ms5611_get_temperature();
 8005130:	f000 ff0e 	bl	8005f50 <ms5611_get_temperature>
 8005134:	eeb0 7a40 	vmov.f32	s14, s0
 8005138:	eef0 7a60 	vmov.f32	s15, s1
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <ms5611_measure+0x30>)
 800513e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	i2c_device.MS5611_pressure = ms5611_get_pressure();
 8005142:	f000 ff81 	bl	8006048 <ms5611_get_pressure>
 8005146:	eeb0 7a40 	vmov.f32	s14, s0
 800514a:	eef0 7a60 	vmov.f32	s15, s1
 800514e:	4b02      	ldr	r3, [pc, #8]	; (8005158 <ms5611_measure+0x30>)
 8005150:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000618 	.word	0x20000618

0800515c <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 8005160:	4805      	ldr	r0, [pc, #20]	; (8005178 <init_mpu6050+0x1c>)
 8005162:	f000 fa61 	bl	8005628 <MPU6050_Init>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <init_mpu6050+0x14>
	{
		return 0;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 8005170:	2301      	movs	r3, #1
	}
}
 8005172:	4618      	mov	r0, r3
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000380 	.word	0x20000380

0800517c <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 8005180:	4916      	ldr	r1, [pc, #88]	; (80051dc <mpu6050_measure+0x60>)
 8005182:	4817      	ldr	r0, [pc, #92]	; (80051e0 <mpu6050_measure+0x64>)
 8005184:	f000 faa8 	bl	80056d8 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <mpu6050_measure+0x60>)
 800518a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800518e:	4915      	ldr	r1, [pc, #84]	; (80051e4 <mpu6050_measure+0x68>)
 8005190:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <mpu6050_measure+0x60>)
 8005196:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800519a:	4912      	ldr	r1, [pc, #72]	; (80051e4 <mpu6050_measure+0x68>)
 800519c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <mpu6050_measure+0x60>)
 80051a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051a6:	490f      	ldr	r1, [pc, #60]	; (80051e4 <mpu6050_measure+0x68>)
 80051a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <mpu6050_measure+0x60>)
 80051ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80051b2:	490c      	ldr	r1, [pc, #48]	; (80051e4 <mpu6050_measure+0x68>)
 80051b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <mpu6050_measure+0x60>)
 80051ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <mpu6050_measure+0x68>)
 80051c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <mpu6050_measure+0x60>)
 80051c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80051ca:	4906      	ldr	r1, [pc, #24]	; (80051e4 <mpu6050_measure+0x68>)
 80051cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 80051d0:	4b02      	ldr	r3, [pc, #8]	; (80051dc <mpu6050_measure+0x60>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <mpu6050_measure+0x68>)
 80051d6:	6493      	str	r3, [r2, #72]	; 0x48
}
 80051d8:	bf00      	nop
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	200005c0 	.word	0x200005c0
 80051e0:	20000380 	.word	0x20000380
 80051e4:	20000618 	.word	0x20000618

080051e8 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80051ec:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <init_bme280+0x80>)
 80051ee:	2276      	movs	r2, #118	; 0x76
 80051f0:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80051f2:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <init_bme280+0x80>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <init_bme280+0x80>)
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <init_bme280+0x84>)
 80051fc:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80051fe:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <init_bme280+0x80>)
 8005200:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <init_bme280+0x88>)
 8005202:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8005204:	4b18      	ldr	r3, [pc, #96]	; (8005268 <init_bme280+0x80>)
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <init_bme280+0x8c>)
 8005208:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 800520a:	4817      	ldr	r0, [pc, #92]	; (8005268 <init_bme280+0x80>)
 800520c:	f7fe fb74 	bl	80038f8 <bme280_init>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b18      	ldr	r3, [pc, #96]	; (8005278 <init_bme280+0x90>)
 8005216:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8005218:	4b13      	ldr	r3, [pc, #76]	; (8005268 <init_bme280+0x80>)
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <init_bme280+0x80>)
 8005222:	2205      	movs	r2, #5
 8005224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <init_bme280+0x80>)
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <init_bme280+0x80>)
 8005232:	2204      	movs	r2, #4
 8005234:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8005238:	490b      	ldr	r1, [pc, #44]	; (8005268 <init_bme280+0x80>)
 800523a:	200f      	movs	r0, #15
 800523c:	f7fe fc4e 	bl	8003adc <bme280_set_sensor_settings>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <init_bme280+0x90>)
 8005246:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8005248:	4907      	ldr	r1, [pc, #28]	; (8005268 <init_bme280+0x80>)
 800524a:	2003      	movs	r0, #3
 800524c:	f7fe fc9b 	bl	8003b86 <bme280_set_sensor_mode>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <init_bme280+0x90>)
 8005256:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <init_bme280+0x80>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2028      	movs	r0, #40	; 0x28
 800525e:	4798      	blx	r3
}
 8005260:	bf00      	nop
 8005262:	4618      	mov	r0, r3
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000560 	.word	0x20000560
 800526c:	08004d2d 	.word	0x08004d2d
 8005270:	08004db5 	.word	0x08004db5
 8005274:	08004d9d 	.word	0x08004d9d
 8005278:	200005a0 	.word	0x200005a0

0800527c <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <bme280_measure+0x60>)
 8005282:	4917      	ldr	r1, [pc, #92]	; (80052e0 <bme280_measure+0x64>)
 8005284:	2007      	movs	r0, #7
 8005286:	f7fe fcfa 	bl	8003c7e <bme280_get_sensor_data>
 800528a:	4603      	mov	r3, r0
 800528c:	461a      	mov	r2, r3
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <bme280_measure+0x68>)
 8005290:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <bme280_measure+0x68>)
 8005294:	f993 3000 	ldrsb.w	r3, [r3]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11d      	bne.n	80052d8 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <bme280_measure+0x64>)
 800529e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fb fc23 	bl	8000af0 <__aeabi_d2f>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <bme280_measure+0x6c>)
 80052ae:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <bme280_measure+0x64>)
 80052b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb fc19 	bl	8000af0 <__aeabi_d2f>
 80052be:	4603      	mov	r3, r0
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <bme280_measure+0x6c>)
 80052c2:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <bme280_measure+0x64>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	f7fb fc0f 	bl	8000af0 <__aeabi_d2f>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <bme280_measure+0x6c>)
 80052d6:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000560 	.word	0x20000560
 80052e0:	200005a8 	.word	0x200005a8
 80052e4:	200005a0 	.word	0x200005a0
 80052e8:	20000618 	.word	0x20000618

080052ec <detect_bme280>:

// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
// Temperature, humidity and pressure sensor
void detect_bme280(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 80052f6:	2376      	movs	r3, #118	; 0x76
 80052f8:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 80052fa:	23d0      	movs	r3, #208	; 0xd0
 80052fc:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 80052fe:	2360      	movs	r3, #96	; 0x60
 8005300:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8005302:	2300      	movs	r3, #0
 8005304:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	b299      	uxth	r1, r3
 800530c:	887a      	ldrh	r2, [r7, #2]
 800530e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	2301      	movs	r3, #1
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	463b      	mov	r3, r7
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2301      	movs	r3, #1
 800531e:	480c      	ldr	r0, [pc, #48]	; (8005350 <detect_bme280+0x64>)
 8005320:	f003 ff06 	bl	8009130 <HAL_I2C_Mem_Read>
 8005324:	4603      	mov	r3, r0
 8005326:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8005328:	783b      	ldrb	r3, [r7, #0]
 800532a:	787a      	ldrb	r2, [r7, #1]
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <detect_bme280+0x52>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <detect_bme280+0x68>)
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e003      	b.n	8005346 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <detect_bme280+0x68>)
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
	}
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200002d4 	.word	0x200002d4
 8005354:	20000618 	.word	0x20000618

08005358 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
// 1. IMU Module. Measure Acceleration X, Y, Z and Gyroscope X, Y, Z.
// 2. Turn on ability work with  hmc5883l ( Magnetometer  sensor ).
void detect_mpu6050(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8005362:	23d0      	movs	r3, #208	; 0xd0
 8005364:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8005366:	2375      	movs	r3, #117	; 0x75
 8005368:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 800536a:	2368      	movs	r3, #104	; 0x68
 800536c:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8005372:	897a      	ldrh	r2, [r7, #10]
 8005374:	89b9      	ldrh	r1, [r7, #12]
 8005376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537a:	9302      	str	r3, [sp, #8]
 800537c:	2301      	movs	r3, #1
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2301      	movs	r3, #1
 8005388:	4832      	ldr	r0, [pc, #200]	; (8005454 <detect_mpu6050+0xfc>)
 800538a:	f003 fed1 	bl	8009130 <HAL_I2C_Mem_Read>
 800538e:	4603      	mov	r3, r0
 8005390:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8005392:	7a3b      	ldrb	r3, [r7, #8]
 8005394:	7a7a      	ldrb	r2, [r7, #9]
 8005396:	429a      	cmp	r2, r3
 8005398:	d106      	bne.n	80053a8 <detect_mpu6050+0x50>
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 80053a0:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <detect_mpu6050+0x100>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	705a      	strb	r2, [r3, #1]
 80053a6:	e002      	b.n	80053ae <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 80053a8:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <detect_mpu6050+0x100>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <detect_mpu6050+0x100>)
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04a      	beq.n	800544c <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 80053b6:	2300      	movs	r3, #0
 80053b8:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 80053ba:	89b9      	ldrh	r1, [r7, #12]
 80053bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	2301      	movs	r3, #1
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	1dfb      	adds	r3, r7, #7
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2301      	movs	r3, #1
 80053cc:	226a      	movs	r2, #106	; 0x6a
 80053ce:	4821      	ldr	r0, [pc, #132]	; (8005454 <detect_mpu6050+0xfc>)
 80053d0:	f003 fdb4 	bl	8008f3c <HAL_I2C_Mem_Write>
 80053d4:	4603      	mov	r3, r0
 80053d6:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 80053d8:	2302      	movs	r3, #2
 80053da:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 80053dc:	89b9      	ldrh	r1, [r7, #12]
 80053de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053e2:	9302      	str	r3, [sp, #8]
 80053e4:	2301      	movs	r3, #1
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	1dfb      	adds	r3, r7, #7
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2301      	movs	r3, #1
 80053ee:	2237      	movs	r2, #55	; 0x37
 80053f0:	4818      	ldr	r0, [pc, #96]	; (8005454 <detect_mpu6050+0xfc>)
 80053f2:	f003 fda3 	bl	8008f3c <HAL_I2C_Mem_Write>
 80053f6:	4603      	mov	r3, r0
 80053f8:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 80053fe:	89b9      	ldrh	r1, [r7, #12]
 8005400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005404:	9302      	str	r3, [sp, #8]
 8005406:	2301      	movs	r3, #1
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	f107 0308 	add.w	r3, r7, #8
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	2301      	movs	r3, #1
 8005412:	226a      	movs	r2, #106	; 0x6a
 8005414:	480f      	ldr	r0, [pc, #60]	; (8005454 <detect_mpu6050+0xfc>)
 8005416:	f003 fe8b 	bl	8009130 <HAL_I2C_Mem_Read>
 800541a:	4603      	mov	r3, r0
 800541c:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8005422:	89b9      	ldrh	r1, [r7, #12]
 8005424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	2301      	movs	r3, #1
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2301      	movs	r3, #1
 8005436:	2237      	movs	r2, #55	; 0x37
 8005438:	4806      	ldr	r0, [pc, #24]	; (8005454 <detect_mpu6050+0xfc>)
 800543a:	f003 fe79 	bl	8009130 <HAL_I2C_Mem_Read>
 800543e:	4603      	mov	r3, r0
 8005440:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 8005442:	89fb      	ldrh	r3, [r7, #14]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8005448:	f000 f808 	bl	800545c <denect_hmc5883l>
		}
	}
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000380 	.word	0x20000380
 8005458:	20000618 	.word	0x20000618

0800545c <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8005466:	231e      	movs	r3, #30
 8005468:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 800546a:	230a      	movs	r3, #10
 800546c:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 8005472:	88bb      	ldrh	r3, [r7, #4]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	b299      	uxth	r1, r3
 8005478:	887a      	ldrh	r2, [r7, #2]
 800547a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800547e:	9302      	str	r3, [sp, #8]
 8005480:	2301      	movs	r3, #1
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	1c7b      	adds	r3, r7, #1
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2301      	movs	r3, #1
 800548a:	4809      	ldr	r0, [pc, #36]	; (80054b0 <denect_hmc5883l+0x54>)
 800548c:	f003 fe50 	bl	8009130 <HAL_I2C_Mem_Read>
 8005490:	4603      	mov	r3, r0
 8005492:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <denect_hmc5883l+0x58>)
 800549c:	2201      	movs	r2, #1
 800549e:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 80054a0:	e002      	b.n	80054a8 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 80054a2:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <denect_hmc5883l+0x58>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	709a      	strb	r2, [r3, #2]
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000380 	.word	0x20000380
 80054b4:	20000618 	.word	0x20000618

080054b8 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 80054c2:	2377      	movs	r3, #119	; 0x77
 80054c4:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 80054c6:	2300      	movs	r3, #0
 80054c8:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80054ce:	88bb      	ldrh	r3, [r7, #4]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	b299      	uxth	r1, r3
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	2301      	movs	r3, #1
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	1c7b      	adds	r3, r7, #1
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2301      	movs	r3, #1
 80054e6:	4809      	ldr	r0, [pc, #36]	; (800550c <detect_ms5611+0x54>)
 80054e8:	f003 fe22 	bl	8009130 <HAL_I2C_Mem_Read>
 80054ec:	4603      	mov	r3, r0
 80054ee:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <detect_ms5611+0x58>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 80054fc:	e002      	b.n	8005504 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <detect_ms5611+0x58>)
 8005500:	2200      	movs	r2, #0
 8005502:	70da      	strb	r2, [r3, #3]
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000380 	.word	0x20000380
 8005510:	20000618 	.word	0x20000618

08005514 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800551e:	2339      	movs	r3, #57	; 0x39
 8005520:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 8005522:	2392      	movs	r3, #146	; 0x92
 8005524:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8005526:	23a8      	movs	r3, #168	; 0xa8
 8005528:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800552e:	88bb      	ldrh	r3, [r7, #4]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	b299      	uxth	r1, r3
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	2301      	movs	r3, #1
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	463b      	mov	r3, r7
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2301      	movs	r3, #1
 8005546:	480c      	ldr	r0, [pc, #48]	; (8005578 <detect_apds9960+0x64>)
 8005548:	f003 fdf2 	bl	8009130 <HAL_I2C_Mem_Read>
 800554c:	4603      	mov	r3, r0
 800554e:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 8005550:	783b      	ldrb	r3, [r7, #0]
 8005552:	787a      	ldrb	r2, [r7, #1]
 8005554:	429a      	cmp	r2, r3
 8005556:	d106      	bne.n	8005566 <detect_apds9960+0x52>
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <detect_apds9960+0x68>)
 8005560:	2201      	movs	r2, #1
 8005562:	711a      	strb	r2, [r3, #4]
 8005564:	e003      	b.n	800556e <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <detect_apds9960+0x68>)
 8005568:	2200      	movs	r2, #0
 800556a:	711a      	strb	r2, [r3, #4]
	}
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000380 	.word	0x20000380
 800557c:	20000618 	.word	0x20000618

08005580 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 800558a:	2300      	movs	r3, #0
 800558c:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 800558e:	23ae      	movs	r3, #174	; 0xae
 8005590:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 8005592:	1d3a      	adds	r2, r7, #4
 8005594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2302      	movs	r3, #2
 800559c:	2178      	movs	r1, #120	; 0x78
 800559e:	4809      	ldr	r0, [pc, #36]	; (80055c4 <detect_oled_screen+0x44>)
 80055a0:	f003 f9a8 	bl	80088f4 <HAL_I2C_Master_Transmit>
 80055a4:	4603      	mov	r3, r0
 80055a6:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <detect_oled_screen+0x48>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 80055b4:	e002      	b.n	80055bc <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <detect_oled_screen+0x48>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	719a      	strb	r2, [r3, #6]
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200002d4 	.word	0x200002d4
 80055c8:	20000618 	.word	0x20000618

080055cc <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 80055d6:	2368      	movs	r3, #104	; 0x68
 80055d8:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 80055da:	2300      	movs	r3, #0
 80055dc:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80055e2:	88bb      	ldrh	r3, [r7, #4]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	b299      	uxth	r1, r3
 80055e8:	887a      	ldrh	r2, [r7, #2]
 80055ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ee:	9302      	str	r3, [sp, #8]
 80055f0:	2301      	movs	r3, #1
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	1c7b      	adds	r3, r7, #1
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2301      	movs	r3, #1
 80055fa:	4809      	ldr	r0, [pc, #36]	; (8005620 <detect_ds3231+0x54>)
 80055fc:	f003 fd98 	bl	8009130 <HAL_I2C_Mem_Read>
 8005600:	4603      	mov	r3, r0
 8005602:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <detect_ds3231+0x58>)
 800560c:	2201      	movs	r2, #1
 800560e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 8005610:	e002      	b.n	8005618 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 8005612:	4b04      	ldr	r3, [pc, #16]	; (8005624 <detect_ds3231+0x58>)
 8005614:	2200      	movs	r2, #0
 8005616:	71da      	strb	r2, [r3, #7]
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200002d4 	.word	0x200002d4
 8005624:	20000618 	.word	0x20000618

08005628 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af04      	add	r7, sp, #16
 800562e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8005630:	2364      	movs	r3, #100	; 0x64
 8005632:	9302      	str	r3, [sp, #8]
 8005634:	2301      	movs	r3, #1
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	f107 030f 	add.w	r3, r7, #15
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	2301      	movs	r3, #1
 8005640:	2275      	movs	r2, #117	; 0x75
 8005642:	21d0      	movs	r1, #208	; 0xd0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f003 fd73 	bl	8009130 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b68      	cmp	r3, #104	; 0x68
 800564e:	d13d      	bne.n	80056cc <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8005654:	2364      	movs	r3, #100	; 0x64
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	2301      	movs	r3, #1
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	f107 030e 	add.w	r3, r7, #14
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2301      	movs	r3, #1
 8005664:	226b      	movs	r2, #107	; 0x6b
 8005666:	21d0      	movs	r1, #208	; 0xd0
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f003 fc67 	bl	8008f3c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800566e:	2307      	movs	r3, #7
 8005670:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8005672:	2364      	movs	r3, #100	; 0x64
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	2301      	movs	r3, #1
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	f107 030e 	add.w	r3, r7, #14
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	2301      	movs	r3, #1
 8005682:	2219      	movs	r2, #25
 8005684:	21d0      	movs	r1, #208	; 0xd0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 fc58 	bl	8008f3c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800568c:	2300      	movs	r3, #0
 800568e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005690:	2364      	movs	r3, #100	; 0x64
 8005692:	9302      	str	r3, [sp, #8]
 8005694:	2301      	movs	r3, #1
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	f107 030e 	add.w	r3, r7, #14
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2301      	movs	r3, #1
 80056a0:	221c      	movs	r2, #28
 80056a2:	21d0      	movs	r1, #208	; 0xd0
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f003 fc49 	bl	8008f3c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80056ae:	2364      	movs	r3, #100	; 0x64
 80056b0:	9302      	str	r3, [sp, #8]
 80056b2:	2301      	movs	r3, #1
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	f107 030e 	add.w	r3, r7, #14
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2301      	movs	r3, #1
 80056be:	221b      	movs	r2, #27
 80056c0:	21d0      	movs	r1, #208	; 0xd0
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f003 fc3a 	bl	8008f3c <HAL_I2C_Mem_Write>
        return 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <MPU6050_Init+0xa6>
    }
    return 1;
 80056cc:	2301      	movs	r3, #1
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b094      	sub	sp, #80	; 0x50
 80056de:	af04      	add	r7, sp, #16
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80056e4:	2364      	movs	r3, #100	; 0x64
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	230e      	movs	r3, #14
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	f107 0308 	add.w	r3, r7, #8
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	2301      	movs	r3, #1
 80056f4:	223b      	movs	r2, #59	; 0x3b
 80056f6:	21d0      	movs	r1, #208	; 0xd0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f003 fd19 	bl	8009130 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80056fe:	7a3b      	ldrb	r3, [r7, #8]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	b21a      	sxth	r2, r3
 8005704:	7a7b      	ldrb	r3, [r7, #9]
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21a      	sxth	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8005710:	7abb      	ldrb	r3, [r7, #10]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	b21a      	sxth	r2, r3
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	b21b      	sxth	r3, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	b21a      	sxth	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8005722:	7b3b      	ldrb	r3, [r7, #12]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	b21a      	sxth	r2, r3
 8005728:	7b7b      	ldrb	r3, [r7, #13]
 800572a:	b21b      	sxth	r3, r3
 800572c:	4313      	orrs	r3, r2
 800572e:	b21a      	sxth	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	b21a      	sxth	r2, r3
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	b21b      	sxth	r3, r3
 800573e:	4313      	orrs	r3, r2
 8005740:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8005742:	7c3b      	ldrb	r3, [r7, #16]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	b21a      	sxth	r2, r3
 8005748:	7c7b      	ldrb	r3, [r7, #17]
 800574a:	b21b      	sxth	r3, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	b21a      	sxth	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8005754:	7cbb      	ldrb	r3, [r7, #18]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	b21b      	sxth	r3, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	b21a      	sxth	r2, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8005766:	7d3b      	ldrb	r3, [r7, #20]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	b21a      	sxth	r2, r3
 800576c:	7d7b      	ldrb	r3, [r7, #21]
 800576e:	b21b      	sxth	r3, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	b21a      	sxth	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa fe74 	bl	800046c <__aeabi_i2d>
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	4bbd      	ldr	r3, [pc, #756]	; (8005a80 <MPU6050_Read_All+0x3a8>)
 800578a:	f7fb f803 	bl	8000794 <__aeabi_ddiv>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe64 	bl	800046c <__aeabi_i2d>
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	4bb5      	ldr	r3, [pc, #724]	; (8005a80 <MPU6050_Read_All+0x3a8>)
 80057aa:	f7fa fff3 	bl	8000794 <__aeabi_ddiv>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fe54 	bl	800046c <__aeabi_i2d>
 80057c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8005a68 <MPU6050_Read_All+0x390>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa ffe3 	bl	8000794 <__aeabi_ddiv>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80057d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057dc:	ee07 3a90 	vmov	s15, r3
 80057e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057e4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8005a84 <MPU6050_Read_All+0x3ac>
 80057e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057ec:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005a88 <MPU6050_Read_All+0x3b0>
 80057f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fe33 	bl	800046c <__aeabi_i2d>
 8005806:	a39a      	add	r3, pc, #616	; (adr r3, 8005a70 <MPU6050_Read_All+0x398>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa ffc2 	bl	8000794 <__aeabi_ddiv>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa fe23 	bl	800046c <__aeabi_i2d>
 8005826:	a392      	add	r3, pc, #584	; (adr r3, 8005a70 <MPU6050_Read_All+0x398>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f7fa ffb2 	bl	8000794 <__aeabi_ddiv>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005840:	4618      	mov	r0, r3
 8005842:	f7fa fe13 	bl	800046c <__aeabi_i2d>
 8005846:	a38a      	add	r3, pc, #552	; (adr r3, 8005a70 <MPU6050_Read_All+0x398>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa ffa2 	bl	8000794 <__aeabi_ddiv>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800585a:	f000 fe61 	bl	8006520 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	4b8a      	ldr	r3, [pc, #552]	; (8005a8c <MPU6050_Read_All+0x3b4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fdf0 	bl	800044c <__aeabi_ui2d>
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	4b87      	ldr	r3, [pc, #540]	; (8005a90 <MPU6050_Read_All+0x3b8>)
 8005872:	f7fa ff8f 	bl	8000794 <__aeabi_ddiv>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800587e:	f000 fe4f 	bl	8006520 <HAL_GetTick>
 8005882:	4603      	mov	r3, r0
 8005884:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <MPU6050_Read_All+0x3b4>)
 8005886:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800588e:	461a      	mov	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005896:	fb03 f202 	mul.w	r2, r3, r2
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058a0:	4619      	mov	r1, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058a8:	fb03 f301 	mul.w	r3, r3, r1
 80058ac:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fa fddc 	bl	800046c <__aeabi_i2d>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	ec43 2b10 	vmov	d0, r2, r3
 80058bc:	f00a fdd4 	bl	8010468 <sqrt>
 80058c0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058d0:	f7fb f89e 	bl	8000a10 <__aeabi_dcmpeq>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11f      	bne.n	800591a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fa fdc3 	bl	800046c <__aeabi_i2d>
 80058e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ea:	f7fa ff53 	bl	8000794 <__aeabi_ddiv>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	ec43 2b17 	vmov	d7, r2, r3
 80058f6:	eeb0 0a47 	vmov.f32	s0, s14
 80058fa:	eef0 0a67 	vmov.f32	s1, s15
 80058fe:	f00a fc07 	bl	8010110 <atan>
 8005902:	ec51 0b10 	vmov	r0, r1, d0
 8005906:	a35c      	add	r3, pc, #368	; (adr r3, 8005a78 <MPU6050_Read_All+0x3a0>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fe18 	bl	8000540 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005918:	e005      	b.n	8005926 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800592c:	425b      	negs	r3, r3
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fd9c 	bl	800046c <__aeabi_i2d>
 8005934:	4682      	mov	sl, r0
 8005936:	468b      	mov	fp, r1
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fa fd94 	bl	800046c <__aeabi_i2d>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	ec43 2b11 	vmov	d1, r2, r3
 800594c:	ec4b ab10 	vmov	d0, sl, fp
 8005950:	f00a fd87 	bl	8010462 <atan2>
 8005954:	ec51 0b10 	vmov	r0, r1, d0
 8005958:	a347      	add	r3, pc, #284	; (adr r3, 8005a78 <MPU6050_Read_All+0x3a0>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f7fa fdef 	bl	8000540 <__aeabi_dmul>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	4b49      	ldr	r3, [pc, #292]	; (8005a94 <MPU6050_Read_All+0x3bc>)
 8005970:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005974:	f7fb f856 	bl	8000a24 <__aeabi_dcmplt>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <MPU6050_Read_All+0x2bc>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <MPU6050_Read_All+0x3c0>)
 800598a:	f7fb f869 	bl	8000a60 <__aeabi_dcmpgt>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d114      	bne.n	80059be <MPU6050_Read_All+0x2e6>
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <MPU6050_Read_All+0x3c0>)
 800599a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800599e:	f7fb f85f 	bl	8000a60 <__aeabi_dcmpgt>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <MPU6050_Read_All+0x2fc>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <MPU6050_Read_All+0x3bc>)
 80059b4:	f7fb f836 	bl	8000a24 <__aeabi_dcmplt>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80059be:	4937      	ldr	r1, [pc, #220]	; (8005a9c <MPU6050_Read_All+0x3c4>)
 80059c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80059d2:	e014      	b.n	80059fe <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80059da:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80059de:	eeb0 1a47 	vmov.f32	s2, s14
 80059e2:	eef0 1a67 	vmov.f32	s3, s15
 80059e6:	ed97 0b06 	vldr	d0, [r7, #24]
 80059ea:	482c      	ldr	r0, [pc, #176]	; (8005a9c <MPU6050_Read_All+0x3c4>)
 80059ec:	f000 f85a 	bl	8005aa4 <Kalman_getAngle>
 80059f0:	eeb0 7a40 	vmov.f32	s14, s0
 80059f4:	eef0 7a60 	vmov.f32	s15, s1
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005a04:	4690      	mov	r8, r2
 8005a06:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <MPU6050_Read_All+0x3c0>)
 8005a10:	4640      	mov	r0, r8
 8005a12:	4649      	mov	r1, r9
 8005a14:	f7fb f824 	bl	8000a60 <__aeabi_dcmpgt>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005a24:	4614      	mov	r4, r2
 8005a26:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005a36:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005a3a:	eeb0 1a47 	vmov.f32	s2, s14
 8005a3e:	eef0 1a67 	vmov.f32	s3, s15
 8005a42:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005a46:	4816      	ldr	r0, [pc, #88]	; (8005aa0 <MPU6050_Read_All+0x3c8>)
 8005a48:	f000 f82c 	bl	8005aa4 <Kalman_getAngle>
 8005a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8005a50:	eef0 7a60 	vmov.f32	s15, s1
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8005a5a:	bf00      	nop
 8005a5c:	3740      	adds	r7, #64	; 0x40
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a64:	f3af 8000 	nop.w
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	40cc2900 	.word	0x40cc2900
 8005a70:	00000000 	.word	0x00000000
 8005a74:	40606000 	.word	0x40606000
 8005a78:	1a63c1f8 	.word	0x1a63c1f8
 8005a7c:	404ca5dc 	.word	0x404ca5dc
 8005a80:	40d00000 	.word	0x40d00000
 8005a84:	43aa0000 	.word	0x43aa0000
 8005a88:	42121eb8 	.word	0x42121eb8
 8005a8c:	2000068c 	.word	0x2000068c
 8005a90:	408f4000 	.word	0x408f4000
 8005a94:	c0568000 	.word	0xc0568000
 8005a98:	40568000 	.word	0x40568000
 8005a9c:	20000198 	.word	0x20000198
 8005aa0:	20000150 	.word	0x20000150

08005aa4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8005aa4:	b5b0      	push	{r4, r5, r7, lr}
 8005aa6:	b096      	sub	sp, #88	; 0x58
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	61f8      	str	r0, [r7, #28]
 8005aac:	ed87 0b04 	vstr	d0, [r7, #16]
 8005ab0:	ed87 1b02 	vstr	d1, [r7, #8]
 8005ab4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac2:	f7fa fb85 	bl	80001d0 <__aeabi_dsub>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005adc:	f7fa fd30 	bl	8000540 <__aeabi_dmul>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa fb74 	bl	80001d4 <__adddf3>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b06:	f7fa fd1b 	bl	8000540 <__aeabi_dmul>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005b18:	f7fa fb5a 	bl	80001d0 <__aeabi_dsub>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005b2a:	f7fa fb51 	bl	80001d0 <__aeabi_dsub>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fb4a 	bl	80001d4 <__adddf3>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4c:	f7fa fcf8 	bl	8000540 <__aeabi_dmul>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fa fb3c 	bl	80001d4 <__adddf3>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b76:	f7fa fce3 	bl	8000540 <__aeabi_dmul>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa fb25 	bl	80001d0 <__aeabi_dsub>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba0:	f7fa fcce 	bl	8000540 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fb10 	bl	80001d0 <__aeabi_dsub>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	69f9      	ldr	r1, [r7, #28]
 8005bb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bca:	f7fa fcb9 	bl	8000540 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fafd 	bl	80001d4 <__adddf3>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	69f9      	ldr	r1, [r7, #28]
 8005be0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005bf0:	f7fa faf0 	bl	80001d4 <__adddf3>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005c02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c06:	f7fa fdc5 	bl	8000794 <__aeabi_ddiv>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c1c:	f7fa fdba 	bl	8000794 <__aeabi_ddiv>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c32:	f7fa facd 	bl	80001d0 <__aeabi_dsub>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005c44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c4c:	f7fa fc78 	bl	8000540 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fabc 	bl	80001d4 <__adddf3>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c74:	f7fa fc64 	bl	8000540 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa faa8 	bl	80001d4 <__adddf3>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005c94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005ca8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb0:	f7fa fc46 	bl	8000540 <__aeabi_dmul>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa fa88 	bl	80001d0 <__aeabi_dsub>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005cd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cd8:	f7fa fc32 	bl	8000540 <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	f7fa fa74 	bl	80001d0 <__aeabi_dsub>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005cf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d00:	f7fa fc1e 	bl	8000540 <__aeabi_dmul>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7fa fa60 	bl	80001d0 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005d20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d28:	f7fa fc0a 	bl	8000540 <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	f7fa fa4c 	bl	80001d0 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005d48:	ec43 2b17 	vmov	d7, r2, r3
};
 8005d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8005d50:	eef0 0a67 	vmov.f32	s1, s15
 8005d54:	3758      	adds	r7, #88	; 0x58
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005d5c <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 8005d64:	4a04      	ldr	r2, [pc, #16]	; (8005d78 <ms5611_set_i2c+0x1c>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000688 	.word	0x20000688

08005d7c <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af04      	add	r7, sp, #16
 8005d82:	4603      	mov	r3, r0
 8005d84:	603a      	str	r2, [r7, #0]
 8005d86:	71fb      	strb	r3, [r7, #7]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	79bb      	ldrb	r3, [r7, #6]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d9c:	9102      	str	r1, [sp, #8]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2301      	movs	r3, #1
 8005da6:	21ee      	movs	r1, #238	; 0xee
 8005da8:	4804      	ldr	r0, [pc, #16]	; (8005dbc <ms5611_read_i2c+0x40>)
 8005daa:	f003 f9c1 	bl	8009130 <HAL_I2C_Mem_Read>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000380 	.word	0x20000380

08005dc0 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	603a      	str	r2, [r7, #0]
 8005dca:	71fb      	strb	r3, [r7, #7]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	79bb      	ldrb	r3, [r7, #6]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005de0:	9102      	str	r1, [sp, #8]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2301      	movs	r3, #1
 8005dea:	21ee      	movs	r1, #238	; 0xee
 8005dec:	4804      	ldr	r0, [pc, #16]	; (8005e00 <ms5611_write_i2c+0x40>)
 8005dee:	f003 f99f 	bl	8009130 <HAL_I2C_Mem_Read>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]

}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000380 	.word	0x20000380

08005e04 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	e01c      	b.n	8005e4a <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	3b5e      	subs	r3, #94	; 0x5e
 8005e1a:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8005e20:	463a      	mov	r2, r7
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff ffa8 	bl	8005d7c <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8005e2c:	783b      	ldrb	r3, [r7, #0]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	b21a      	sxth	r2, r3
 8005e32:	787b      	ldrb	r3, [r7, #1]
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	b299      	uxth	r1, r3
 8005e3c:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <ms5611_init+0x58>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3301      	adds	r3, #1
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	dddf      	ble.n	8005e10 <ms5611_init+0xc>
	}
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000694 	.word	0x20000694

08005e60 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005e66:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <ms5611_update_pressure+0x64>)
 8005e68:	463b      	mov	r3, r7
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	8019      	strh	r1, [r3, #0]
 8005e70:	3302      	adds	r3, #2
 8005e72:	0c12      	lsrs	r2, r2, #16
 8005e74:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <ms5611_update_pressure+0x68>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	463a      	mov	r2, r7
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff98 	bl	8005dc0 <ms5611_write_i2c>
 8005e90:	4603      	mov	r3, r0
 8005e92:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8005e94:	200c      	movs	r0, #12
 8005e96:	f000 fb4f 	bl	8006538 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2103      	movs	r1, #3
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	f7ff ff6b 	bl	8005d7c <ms5611_read_i2c>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005eaa:	783b      	ldrb	r3, [r7, #0]
 8005eac:	041a      	lsls	r2, r3, #16
 8005eae:	787b      	ldrb	r3, [r7, #1]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	78ba      	ldrb	r2, [r7, #2]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <ms5611_update_pressure+0x6c>)
 8005eba:	6013      	str	r3, [r2, #0]

}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	080108fc 	.word	0x080108fc
 8005ec8:	200001e0 	.word	0x200001e0
 8005ecc:	20000690 	.word	0x20000690

08005ed0 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <ms5611_update_temperature+0x64>)
 8005ed8:	463b      	mov	r3, r7
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	4611      	mov	r1, r2
 8005ede:	8019      	strh	r1, [r3, #0]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	0c12      	lsrs	r2, r2, #16
 8005ee4:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <ms5611_update_temperature+0x68>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff60 	bl	8005dc0 <ms5611_write_i2c>
 8005f00:	4603      	mov	r3, r0
 8005f02:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8005f04:	200c      	movs	r0, #12
 8005f06:	f000 fb17 	bl	8006538 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2103      	movs	r1, #3
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7ff ff33 	bl	8005d7c <ms5611_read_i2c>
 8005f16:	4603      	mov	r3, r0
 8005f18:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005f1a:	783b      	ldrb	r3, [r7, #0]
 8005f1c:	041a      	lsls	r2, r3, #16
 8005f1e:	787b      	ldrb	r3, [r7, #1]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	4313      	orrs	r3, r2
 8005f24:	78ba      	ldrb	r2, [r7, #2]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <ms5611_update_temperature+0x6c>)
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	080108fc 	.word	0x080108fc
 8005f38:	200001e0 	.word	0x200001e0
 8005f3c:	200006a0 	.word	0x200006a0

08005f40 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 8005f44:	f7ff ffc4 	bl	8005ed0 <ms5611_update_temperature>
	ms5611_update_pressure();
 8005f48:	f7ff ff8a 	bl	8005e60 <ms5611_update_pressure>
}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8005f50:	b5b0      	push	{r4, r5, r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <ms5611_get_temperature+0xe0>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b36      	ldr	r3, [pc, #216]	; (8006034 <ms5611_get_temperature+0xe4>)
 8005f5c:	891b      	ldrh	r3, [r3, #8]
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7fa fa71 	bl	800044c <__aeabi_ui2d>
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	4b31      	ldr	r3, [pc, #196]	; (8006034 <ms5611_get_temperature+0xe4>)
 8005f70:	895b      	ldrh	r3, [r3, #10]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa fa7a 	bl	800046c <__aeabi_i2d>
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <ms5611_get_temperature+0xe8>)
 8005f7e:	f7fa fc09 	bl	8000794 <__aeabi_ddiv>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa fad9 	bl	8000540 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	4b28      	ldr	r3, [pc, #160]	; (800603c <ms5611_get_temperature+0xec>)
 8005f9c:	f7fa f91a 	bl	80001d4 <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	4b20      	ldr	r3, [pc, #128]	; (800603c <ms5611_get_temperature+0xec>)
 8005fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fbe:	f7fa fd31 	bl	8000a24 <__aeabi_dcmplt>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d016      	beq.n	8005ff6 <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7fa fa3f 	bl	800044c <__aeabi_ui2d>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7fa fa3a 	bl	800044c <__aeabi_ui2d>
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	4b18      	ldr	r3, [pc, #96]	; (8006040 <ms5611_get_temperature+0xf0>)
 8005fde:	f7fa fbd9 	bl	8000794 <__aeabi_ddiv>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa faa9 	bl	8000540 <__aeabi_dmul>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 8005ff6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ffe:	f7fa f8e7 	bl	80001d0 <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <ms5611_get_temperature+0xf4>)
 8006010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006014:	f7fa fbbe 	bl	8000794 <__aeabi_ddiv>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006020:	eeb0 0a47 	vmov.f32	s0, s14
 8006024:	eef0 0a67 	vmov.f32	s1, s15
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bdb0      	pop	{r4, r5, r7, pc}
 800602e:	bf00      	nop
 8006030:	200006a0 	.word	0x200006a0
 8006034:	20000694 	.word	0x20000694
 8006038:	41600000 	.word	0x41600000
 800603c:	409f4000 	.word	0x409f4000
 8006040:	41e00000 	.word	0x41e00000
 8006044:	40590000 	.word	0x40590000

08006048 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8006048:	b5b0      	push	{r4, r5, r7, lr}
 800604a:	b090      	sub	sp, #64	; 0x40
 800604c:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800604e:	4bc4      	ldr	r3, [pc, #784]	; (8006360 <ms5611_get_pressure+0x318>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4bc4      	ldr	r3, [pc, #784]	; (8006364 <ms5611_get_pressure+0x31c>)
 8006054:	891b      	ldrh	r3, [r3, #8]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800605c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800605e:	f7fa f9f5 	bl	800044c <__aeabi_ui2d>
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
 8006066:	4bbf      	ldr	r3, [pc, #764]	; (8006364 <ms5611_get_pressure+0x31c>)
 8006068:	895b      	ldrh	r3, [r3, #10]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fa f9fe 	bl	800046c <__aeabi_i2d>
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	4bbc      	ldr	r3, [pc, #752]	; (8006368 <ms5611_get_pressure+0x320>)
 8006076:	f7fa fb8d 	bl	8000794 <__aeabi_ddiv>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f7fa fa5d 	bl	8000540 <__aeabi_dmul>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	4bb6      	ldr	r3, [pc, #728]	; (800636c <ms5611_get_pressure+0x324>)
 8006094:	f7fa f89e 	bl	80001d4 <__adddf3>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 80060a0:	4bb0      	ldr	r3, [pc, #704]	; (8006364 <ms5611_get_pressure+0x31c>)
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	041b      	lsls	r3, r3, #16
 80060a6:	461a      	mov	r2, r3
 80060a8:	4bae      	ldr	r3, [pc, #696]	; (8006364 <ms5611_get_pressure+0x31c>)
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	fb03 f301 	mul.w	r3, r3, r1
 80060b4:	09db      	lsrs	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fa f9c7 	bl	800044c <__aeabi_ui2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 80060c6:	4ba7      	ldr	r3, [pc, #668]	; (8006364 <ms5611_get_pressure+0x31c>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	03db      	lsls	r3, r3, #15
 80060cc:	461a      	mov	r2, r3
 80060ce:	4ba5      	ldr	r3, [pc, #660]	; (8006364 <ms5611_get_pressure+0x31c>)
 80060d0:	889b      	ldrh	r3, [r3, #4]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	fb03 f301 	mul.w	r3, r3, r1
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	4413      	add	r3, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa f9b4 	bl	800044c <__aeabi_ui2d>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 80060ec:	4ba0      	ldr	r3, [pc, #640]	; (8006370 <ms5611_get_pressure+0x328>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fa f9ab 	bl	800044c <__aeabi_ui2d>
 80060f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fa:	f7fa fa21 	bl	8000540 <__aeabi_dmul>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <ms5611_get_pressure+0x32c>)
 800610c:	f7fa fb42 	bl	8000794 <__aeabi_ddiv>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800611c:	f7fa f858 	bl	80001d0 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4610      	mov	r0, r2
 8006126:	4619      	mov	r1, r3
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	4b92      	ldr	r3, [pc, #584]	; (8006378 <ms5611_get_pressure+0x330>)
 800612e:	f7fa fb31 	bl	8000794 <__aeabi_ddiv>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	4b82      	ldr	r3, [pc, #520]	; (800636c <ms5611_get_pressure+0x324>)
 8006164:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006168:	f7fa fc5c 	bl	8000a24 <__aeabi_dcmplt>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80cc 	beq.w	800630c <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	fb03 f303 	mul.w	r3, r3, r3
 800617a:	0fdb      	lsrs	r3, r3, #31
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	4610      	mov	r0, r2
 8006184:	4619      	mov	r1, r3
 8006186:	f7fa f9ad 	bl	80004e4 <__aeabi_l2d>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	4b75      	ldr	r3, [pc, #468]	; (800636c <ms5611_get_pressure+0x324>)
 8006198:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800619c:	f7fa f818 	bl	80001d0 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	4b73      	ldr	r3, [pc, #460]	; (800637c <ms5611_get_pressure+0x334>)
 80061ae:	f7fa f9c7 	bl	8000540 <__aeabi_dmul>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4614      	mov	r4, r2
 80061b8:	461d      	mov	r5, r3
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	4b6b      	ldr	r3, [pc, #428]	; (800636c <ms5611_get_pressure+0x324>)
 80061c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80061c4:	f7fa f804 	bl	80001d0 <__aeabi_dsub>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4620      	mov	r0, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	f7fa f9b6 	bl	8000540 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061e4:	f7fa fad6 	bl	8000794 <__aeabi_ddiv>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	4b5d      	ldr	r3, [pc, #372]	; (800636c <ms5611_get_pressure+0x324>)
 80061f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80061fa:	f7f9 ffe9 	bl	80001d0 <__aeabi_dsub>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4610      	mov	r0, r2
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	4b5c      	ldr	r3, [pc, #368]	; (800637c <ms5611_get_pressure+0x334>)
 800620c:	f7fa f998 	bl	8000540 <__aeabi_dmul>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	4b53      	ldr	r3, [pc, #332]	; (800636c <ms5611_get_pressure+0x324>)
 800621e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006222:	f7f9 ffd5 	bl	80001d0 <__aeabi_dsub>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa f987 	bl	8000540 <__aeabi_dmul>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4610      	mov	r0, r2
 8006238:	4619      	mov	r1, r3
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	4b50      	ldr	r3, [pc, #320]	; (8006380 <ms5611_get_pressure+0x338>)
 8006240:	f7fa faa8 	bl	8000794 <__aeabi_ddiv>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 800624c:	a340      	add	r3, pc, #256	; (adr r3, 8006350 <ms5611_get_pressure+0x308>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006256:	f7fa fbe5 	bl	8000a24 <__aeabi_dcmplt>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d055      	beq.n	800630c <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8006260:	a33d      	add	r3, pc, #244	; (adr r3, 8006358 <ms5611_get_pressure+0x310>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800626a:	f7f9 ffb3 	bl	80001d4 <__adddf3>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4610      	mov	r0, r2
 8006274:	4619      	mov	r1, r3
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	4b42      	ldr	r3, [pc, #264]	; (8006384 <ms5611_get_pressure+0x33c>)
 800627c:	f7fa f960 	bl	8000540 <__aeabi_dmul>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4614      	mov	r4, r2
 8006286:	461d      	mov	r5, r3
 8006288:	a333      	add	r3, pc, #204	; (adr r3, 8006358 <ms5611_get_pressure+0x310>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006292:	f7f9 ff9f 	bl	80001d4 <__adddf3>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa f94f 	bl	8000540 <__aeabi_dmul>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80062aa:	f7f9 ff93 	bl	80001d4 <__adddf3>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 80062b6:	a328      	add	r3, pc, #160	; (adr r3, 8006358 <ms5611_get_pressure+0x310>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062c0:	f7f9 ff88 	bl	80001d4 <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <ms5611_get_pressure+0x334>)
 80062d2:	f7fa f935 	bl	8000540 <__aeabi_dmul>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4614      	mov	r4, r2
 80062dc:	461d      	mov	r5, r3
 80062de:	a31e      	add	r3, pc, #120	; (adr r3, 8006358 <ms5611_get_pressure+0x310>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062e8:	f7f9 ff74 	bl	80001d4 <__adddf3>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7fa f924 	bl	8000540 <__aeabi_dmul>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006300:	f7f9 ff68 	bl	80001d4 <__adddf3>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 800630c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006310:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006314:	f7f9 ff5c 	bl	80001d0 <__aeabi_dsub>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 8006320:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006328:	f7f9 ff52 	bl	80001d0 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 8006334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633c:	f7f9 ff48 	bl	80001d0 <__aeabi_dsub>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <ms5611_get_pressure+0x328>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	e01b      	b.n	8006388 <ms5611_get_pressure+0x340>
 8006350:	00000000 	.word	0x00000000
 8006354:	c0977000 	.word	0xc0977000
 8006358:	00000000 	.word	0x00000000
 800635c:	40977000 	.word	0x40977000
 8006360:	200006a0 	.word	0x200006a0
 8006364:	20000694 	.word	0x20000694
 8006368:	41600000 	.word	0x41600000
 800636c:	409f4000 	.word	0x409f4000
 8006370:	20000690 	.word	0x20000690
 8006374:	41400000 	.word	0x41400000
 8006378:	40e00000 	.word	0x40e00000
 800637c:	40140000 	.word	0x40140000
 8006380:	40100000 	.word	0x40100000
 8006384:	401c0000 	.word	0x401c0000
 8006388:	f7fa f860 	bl	800044c <__aeabi_ui2d>
 800638c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006390:	f7fa f8d6 	bl	8000540 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <ms5611_get_pressure+0x3ac>)
 80063a2:	f7fa f9f7 	bl	8000794 <__aeabi_ddiv>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063b2:	f7f9 ff0d 	bl	80001d0 <__aeabi_dsub>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <ms5611_get_pressure+0x3b0>)
 80063c4:	f7fa f9e6 	bl	8000794 <__aeabi_ddiv>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <ms5611_get_pressure+0x3b4>)
 80063d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063da:	f7fa f9db 	bl	8000794 <__aeabi_ddiv>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80063e6:	eeb0 0a47 	vmov.f32	s0, s14
 80063ea:	eef0 0a67 	vmov.f32	s1, s15
 80063ee:	3740      	adds	r7, #64	; 0x40
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bdb0      	pop	{r4, r5, r7, pc}
 80063f4:	41400000 	.word	0x41400000
 80063f8:	40e00000 	.word	0x40e00000
 80063fc:	40590000 	.word	0x40590000

08006400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006404:	480d      	ldr	r0, [pc, #52]	; (800643c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006406:	490e      	ldr	r1, [pc, #56]	; (8006440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006408:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800640a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800640c:	e002      	b.n	8006414 <LoopCopyDataInit>

0800640e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800640e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006412:	3304      	adds	r3, #4

08006414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006418:	d3f9      	bcc.n	800640e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800641c:	4c0b      	ldr	r4, [pc, #44]	; (800644c <LoopFillZerobss+0x26>)
  movs r3, #0
 800641e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006420:	e001      	b.n	8006426 <LoopFillZerobss>

08006422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006424:	3204      	adds	r2, #4

08006426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006428:	d3fb      	bcc.n	8006422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800642a:	f7fb ff2b 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800642e:	f009 fd47 	bl	800fec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006432:	f7fa ff31 	bl	8001298 <main>
  bx  lr    
 8006436:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800643c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006440:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8006444:	08010dd0 	.word	0x08010dd0
  ldr r2, =_sbss
 8006448:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800644c:	20000d94 	.word	0x20000d94

08006450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC_IRQHandler>
	...

08006454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <HAL_Init+0x40>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <HAL_Init+0x40>)
 800645e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_Init+0x40>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a0a      	ldr	r2, [pc, #40]	; (8006494 <HAL_Init+0x40>)
 800646a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800646e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_Init+0x40>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a07      	ldr	r2, [pc, #28]	; (8006494 <HAL_Init+0x40>)
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800647c:	2003      	movs	r0, #3
 800647e:	f000 f94f 	bl	8006720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006482:	2000      	movs	r0, #0
 8006484:	f000 f808 	bl	8006498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006488:	f7fb fb90 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023c00 	.word	0x40023c00

08006498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_InitTick+0x54>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_InitTick+0x58>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f967 	bl	800678a <HAL_SYSTICK_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e00e      	b.n	80064e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b0f      	cmp	r3, #15
 80064ca:	d80a      	bhi.n	80064e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064cc:	2200      	movs	r2, #0
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d4:	f000 f92f 	bl	8006736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064d8:	4a06      	ldr	r2, [pc, #24]	; (80064f4 <HAL_InitTick+0x5c>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000004 	.word	0x20000004
 80064f0:	200001e8 	.word	0x200001e8
 80064f4:	200001e4 	.word	0x200001e4

080064f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_IncTick+0x20>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_IncTick+0x24>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4413      	add	r3, r2
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <HAL_IncTick+0x24>)
 800650a:	6013      	str	r3, [r2, #0]
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200001e8 	.word	0x200001e8
 800651c:	200006a4 	.word	0x200006a4

08006520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return uwTick;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <HAL_GetTick+0x14>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200006a4 	.word	0x200006a4

08006538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006540:	f7ff ffee 	bl	8006520 <HAL_GetTick>
 8006544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006550:	d005      	beq.n	800655e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006552:	4b0a      	ldr	r3, [pc, #40]	; (800657c <HAL_Delay+0x44>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800655e:	bf00      	nop
 8006560:	f7ff ffde 	bl	8006520 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d8f7      	bhi.n	8006560 <HAL_Delay+0x28>
  {
  }
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200001e8 	.word	0x200001e8

08006580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800659c:	4013      	ands	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	60d3      	str	r3, [r2, #12]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	e000ed00 	.word	0xe000ed00

080065c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <__NVIC_GetPriorityGrouping+0x18>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	f003 0307 	and.w	r3, r3, #7
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db0b      	blt.n	800660e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 021f 	and.w	r2, r3, #31
 80065fc:	4907      	ldr	r1, [pc, #28]	; (800661c <__NVIC_EnableIRQ+0x38>)
 80065fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2001      	movs	r0, #1
 8006606:	fa00 f202 	lsl.w	r2, r0, r2
 800660a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e100 	.word	0xe000e100

08006620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800662c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db0a      	blt.n	800664a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	490c      	ldr	r1, [pc, #48]	; (800666c <__NVIC_SetPriority+0x4c>)
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	0112      	lsls	r2, r2, #4
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	440b      	add	r3, r1
 8006644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006648:	e00a      	b.n	8006660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4908      	ldr	r1, [pc, #32]	; (8006670 <__NVIC_SetPriority+0x50>)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	3b04      	subs	r3, #4
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	440b      	add	r3, r1
 800665e:	761a      	strb	r2, [r3, #24]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000e100 	.word	0xe000e100
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	; 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f1c3 0307 	rsb	r3, r3, #7
 800668e:	2b04      	cmp	r3, #4
 8006690:	bf28      	it	cs
 8006692:	2304      	movcs	r3, #4
 8006694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3304      	adds	r3, #4
 800669a:	2b06      	cmp	r3, #6
 800669c:	d902      	bls.n	80066a4 <NVIC_EncodePriority+0x30>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3b03      	subs	r3, #3
 80066a2:	e000      	b.n	80066a6 <NVIC_EncodePriority+0x32>
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43da      	mvns	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	401a      	ands	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa01 f303 	lsl.w	r3, r1, r3
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066cc:	4313      	orrs	r3, r2
         );
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ec:	d301      	bcc.n	80066f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ee:	2301      	movs	r3, #1
 80066f0:	e00f      	b.n	8006712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <SysTick_Config+0x40>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066fa:	210f      	movs	r1, #15
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006700:	f7ff ff8e 	bl	8006620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <SysTick_Config+0x40>)
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <SysTick_Config+0x40>)
 800670c:	2207      	movs	r2, #7
 800670e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000e010 	.word	0xe000e010

08006720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff29 	bl	8006580 <__NVIC_SetPriorityGrouping>
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	4603      	mov	r3, r0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006748:	f7ff ff3e 	bl	80065c8 <__NVIC_GetPriorityGrouping>
 800674c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff8e 	bl	8006674 <NVIC_EncodePriority>
 8006758:	4602      	mov	r2, r0
 800675a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff ff5d 	bl	8006620 <__NVIC_SetPriority>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ff31 	bl	80065e4 <__NVIC_EnableIRQ>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ffa2 	bl	80066dc <SysTick_Config>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b089      	sub	sp, #36	; 0x24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	e16b      	b.n	8006a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067c0:	2201      	movs	r2, #1
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4013      	ands	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	429a      	cmp	r2, r3
 80067da:	f040 815a 	bne.w	8006a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d005      	beq.n	80067f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d130      	bne.n	8006858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	2203      	movs	r2, #3
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	4313      	orrs	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800682c:	2201      	movs	r2, #1
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	43db      	mvns	r3, r3
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4013      	ands	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 0201 	and.w	r2, r3, #1
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4313      	orrs	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d017      	beq.n	8006894 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	2203      	movs	r2, #3
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	43db      	mvns	r3, r3
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	4313      	orrs	r3, r2
 800688c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d123      	bne.n	80068e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	08da      	lsrs	r2, r3, #3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3208      	adds	r2, #8
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	220f      	movs	r2, #15
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4013      	ands	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	08da      	lsrs	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3208      	adds	r2, #8
 80068e2:	69b9      	ldr	r1, [r7, #24]
 80068e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	2203      	movs	r2, #3
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 0203 	and.w	r2, r3, #3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4313      	orrs	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80b4 	beq.w	8006a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	4b60      	ldr	r3, [pc, #384]	; (8006ab0 <HAL_GPIO_Init+0x30c>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	4a5f      	ldr	r2, [pc, #380]	; (8006ab0 <HAL_GPIO_Init+0x30c>)
 8006934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006938:	6453      	str	r3, [r2, #68]	; 0x44
 800693a:	4b5d      	ldr	r3, [pc, #372]	; (8006ab0 <HAL_GPIO_Init+0x30c>)
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006946:	4a5b      	ldr	r2, [pc, #364]	; (8006ab4 <HAL_GPIO_Init+0x310>)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	089b      	lsrs	r3, r3, #2
 800694c:	3302      	adds	r3, #2
 800694e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	220f      	movs	r2, #15
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a52      	ldr	r2, [pc, #328]	; (8006ab8 <HAL_GPIO_Init+0x314>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d02b      	beq.n	80069ca <HAL_GPIO_Init+0x226>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a51      	ldr	r2, [pc, #324]	; (8006abc <HAL_GPIO_Init+0x318>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d025      	beq.n	80069c6 <HAL_GPIO_Init+0x222>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a50      	ldr	r2, [pc, #320]	; (8006ac0 <HAL_GPIO_Init+0x31c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01f      	beq.n	80069c2 <HAL_GPIO_Init+0x21e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a4f      	ldr	r2, [pc, #316]	; (8006ac4 <HAL_GPIO_Init+0x320>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d019      	beq.n	80069be <HAL_GPIO_Init+0x21a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a4e      	ldr	r2, [pc, #312]	; (8006ac8 <HAL_GPIO_Init+0x324>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_GPIO_Init+0x216>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a4d      	ldr	r2, [pc, #308]	; (8006acc <HAL_GPIO_Init+0x328>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00d      	beq.n	80069b6 <HAL_GPIO_Init+0x212>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a4c      	ldr	r2, [pc, #304]	; (8006ad0 <HAL_GPIO_Init+0x32c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <HAL_GPIO_Init+0x20e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a4b      	ldr	r2, [pc, #300]	; (8006ad4 <HAL_GPIO_Init+0x330>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <HAL_GPIO_Init+0x20a>
 80069aa:	2307      	movs	r3, #7
 80069ac:	e00e      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069ae:	2308      	movs	r3, #8
 80069b0:	e00c      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069b2:	2306      	movs	r3, #6
 80069b4:	e00a      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069b6:	2305      	movs	r3, #5
 80069b8:	e008      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069ba:	2304      	movs	r3, #4
 80069bc:	e006      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069be:	2303      	movs	r3, #3
 80069c0:	e004      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e002      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_GPIO_Init+0x228>
 80069ca:	2300      	movs	r3, #0
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	f002 0203 	and.w	r2, r2, #3
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	4093      	lsls	r3, r2
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	4313      	orrs	r3, r2
 80069da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069dc:	4935      	ldr	r1, [pc, #212]	; (8006ab4 <HAL_GPIO_Init+0x310>)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	089b      	lsrs	r3, r3, #2
 80069e2:	3302      	adds	r3, #2
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069ea:	4b3b      	ldr	r3, [pc, #236]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4013      	ands	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a0e:	4a32      	ldr	r2, [pc, #200]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a14:	4b30      	ldr	r3, [pc, #192]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4013      	ands	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a38:	4a27      	ldr	r2, [pc, #156]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a3e:	4b26      	ldr	r3, [pc, #152]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	4013      	ands	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a8c:	4a12      	ldr	r2, [pc, #72]	; (8006ad8 <HAL_GPIO_Init+0x334>)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	3301      	adds	r3, #1
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	2b0f      	cmp	r3, #15
 8006a9c:	f67f ae90 	bls.w	80067c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	3724      	adds	r7, #36	; 0x24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	40013800 	.word	0x40013800
 8006ab8:	40020000 	.word	0x40020000
 8006abc:	40020400 	.word	0x40020400
 8006ac0:	40020800 	.word	0x40020800
 8006ac4:	40020c00 	.word	0x40020c00
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40021400 	.word	0x40021400
 8006ad0:	40021800 	.word	0x40021800
 8006ad4:	40021c00 	.word	0x40021c00
 8006ad8:	40013c00 	.word	0x40013c00

08006adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
 8006af8:	e001      	b.n	8006afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	807b      	strh	r3, [r7, #2]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b1c:	787b      	ldrb	r3, [r7, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b28:	e003      	b.n	8006b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	041a      	lsls	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	619a      	str	r2, [r3, #24]
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b50:	887a      	ldrh	r2, [r7, #2]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4013      	ands	r3, r2
 8006b56:	041a      	lsls	r2, r3, #16
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	43d9      	mvns	r1, r3
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	400b      	ands	r3, r1
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fa ffee 	bl	8001b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40013c00 	.word	0x40013c00

08006ba4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba6:	b08f      	sub	sp, #60	; 0x3c
 8006ba8:	af0a      	add	r7, sp, #40	; 0x28
 8006baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e054      	b.n	8006c60 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f008 fec5 	bl	800f960 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2203      	movs	r2, #3
 8006bda:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f006 f867 	bl	800ccc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	687e      	ldr	r6, [r7, #4]
 8006c02:	466d      	mov	r5, sp
 8006c04:	f106 0410 	add.w	r4, r6, #16
 8006c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c14:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c18:	1d33      	adds	r3, r6, #4
 8006c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c1c:	6838      	ldr	r0, [r7, #0]
 8006c1e:	f005 ffe1 	bl	800cbe4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f006 f85e 	bl	800ccea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	687e      	ldr	r6, [r7, #4]
 8006c36:	466d      	mov	r5, sp
 8006c38:	f106 0410 	add.w	r4, r6, #16
 8006c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c4c:	1d33      	adds	r3, r6, #4
 8006c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c50:	6838      	ldr	r0, [r7, #0]
 8006c52:	f006 f971 	bl	800cf38 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c68 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b089      	sub	sp, #36	; 0x24
 8006c6c:	af04      	add	r7, sp, #16
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	70fb      	strb	r3, [r7, #3]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70bb      	strb	r3, [r7, #2]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_HCD_HC_Init+0x28>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e076      	b.n	8006d7e <HAL_HCD_HC_Init+0x116>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	212c      	movs	r1, #44	; 0x2c
 8006c9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	333d      	adds	r3, #61	; 0x3d
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	212c      	movs	r1, #44	; 0x2c
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3338      	adds	r3, #56	; 0x38
 8006cb8:	787a      	ldrb	r2, [r7, #1]
 8006cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	212c      	movs	r1, #44	; 0x2c
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3340      	adds	r3, #64	; 0x40
 8006cca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ccc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	212c      	movs	r1, #44	; 0x2c
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	3339      	adds	r3, #57	; 0x39
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	212c      	movs	r1, #44	; 0x2c
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	333f      	adds	r3, #63	; 0x3f
 8006cee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	78ba      	ldrb	r2, [r7, #2]
 8006cf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006cfc:	b2d0      	uxtb	r0, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	333a      	adds	r3, #58	; 0x3a
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006d0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da09      	bge.n	8006d2a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	212c      	movs	r1, #44	; 0x2c
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	4413      	add	r3, r2
 8006d22:	333b      	adds	r3, #59	; 0x3b
 8006d24:	2201      	movs	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e008      	b.n	8006d3c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	212c      	movs	r1, #44	; 0x2c
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	333b      	adds	r3, #59	; 0x3b
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	212c      	movs	r1, #44	; 0x2c
 8006d42:	fb01 f303 	mul.w	r3, r1, r3
 8006d46:	4413      	add	r3, r2
 8006d48:	333c      	adds	r3, #60	; 0x3c
 8006d4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006d4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	787c      	ldrb	r4, [r7, #1]
 8006d56:	78ba      	ldrb	r2, [r7, #2]
 8006d58:	78f9      	ldrb	r1, [r7, #3]
 8006d5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d5c:	9302      	str	r3, [sp, #8]
 8006d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f006 fa66 	bl	800d23c <USB_HC_Init>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd90      	pop	{r4, r7, pc}

08006d86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_HCD_HC_Halt+0x1e>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e00f      	b.n	8006dc4 <HAL_HCD_HC_Halt+0x3e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f006 fca2 	bl	800d6fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	70fb      	strb	r3, [r7, #3]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70bb      	strb	r3, [r7, #2]
 8006de2:	4613      	mov	r3, r2
 8006de4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	212c      	movs	r1, #44	; 0x2c
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	333b      	adds	r3, #59	; 0x3b
 8006df4:	78ba      	ldrb	r2, [r7, #2]
 8006df6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	212c      	movs	r1, #44	; 0x2c
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	4413      	add	r3, r2
 8006e04:	333f      	adds	r3, #63	; 0x3f
 8006e06:	787a      	ldrb	r2, [r7, #1]
 8006e08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006e0a:	7c3b      	ldrb	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d112      	bne.n	8006e36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	212c      	movs	r1, #44	; 0x2c
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3342      	adds	r3, #66	; 0x42
 8006e1e:	2203      	movs	r2, #3
 8006e20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	212c      	movs	r1, #44	; 0x2c
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	333d      	adds	r3, #61	; 0x3d
 8006e30:	7f3a      	ldrb	r2, [r7, #28]
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	e008      	b.n	8006e48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	212c      	movs	r1, #44	; 0x2c
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	3342      	adds	r3, #66	; 0x42
 8006e44:	2202      	movs	r2, #2
 8006e46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006e48:	787b      	ldrb	r3, [r7, #1]
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	f200 80c6 	bhi.w	8006fdc <HAL_HCD_HC_SubmitRequest+0x210>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006fc9 	.word	0x08006fc9
 8006e60:	08006ecd 	.word	0x08006ecd
 8006e64:	08006f4b 	.word	0x08006f4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006e68:	7c3b      	ldrb	r3, [r7, #16]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	f040 80b8 	bne.w	8006fe0 <HAL_HCD_HC_SubmitRequest+0x214>
 8006e70:	78bb      	ldrb	r3, [r7, #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80b4 	bne.w	8006fe0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006e78:	8b3b      	ldrh	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	212c      	movs	r1, #44	; 0x2c
 8006e84:	fb01 f303 	mul.w	r3, r1, r3
 8006e88:	4413      	add	r3, r2
 8006e8a:	3355      	adds	r3, #85	; 0x55
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	212c      	movs	r1, #44	; 0x2c
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	4413      	add	r3, r2
 8006e9c:	3355      	adds	r3, #85	; 0x55
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	212c      	movs	r1, #44	; 0x2c
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	3342      	adds	r3, #66	; 0x42
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006eb6:	e093      	b.n	8006fe0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	212c      	movs	r1, #44	; 0x2c
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3342      	adds	r3, #66	; 0x42
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e089      	b.n	8006fe0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006ecc:	78bb      	ldrb	r3, [r7, #2]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11d      	bne.n	8006f0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	212c      	movs	r1, #44	; 0x2c
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	3355      	adds	r3, #85	; 0x55
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	212c      	movs	r1, #44	; 0x2c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3342      	adds	r3, #66	; 0x42
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006ef8:	e073      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	212c      	movs	r1, #44	; 0x2c
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	3342      	adds	r3, #66	; 0x42
 8006f08:	2202      	movs	r2, #2
 8006f0a:	701a      	strb	r2, [r3, #0]
      break;
 8006f0c:	e069      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	212c      	movs	r1, #44	; 0x2c
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	3354      	adds	r3, #84	; 0x54
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	212c      	movs	r1, #44	; 0x2c
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3342      	adds	r3, #66	; 0x42
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
      break;
 8006f34:	e055      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	212c      	movs	r1, #44	; 0x2c
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	3342      	adds	r3, #66	; 0x42
 8006f44:	2202      	movs	r2, #2
 8006f46:	701a      	strb	r2, [r3, #0]
      break;
 8006f48:	e04b      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006f4a:	78bb      	ldrb	r3, [r7, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11d      	bne.n	8006f8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	212c      	movs	r1, #44	; 0x2c
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3355      	adds	r3, #85	; 0x55
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d109      	bne.n	8006f78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	212c      	movs	r1, #44	; 0x2c
 8006f6a:	fb01 f303 	mul.w	r3, r1, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	3342      	adds	r3, #66	; 0x42
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006f76:	e034      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	212c      	movs	r1, #44	; 0x2c
 8006f7e:	fb01 f303 	mul.w	r3, r1, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	3342      	adds	r3, #66	; 0x42
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e02a      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	212c      	movs	r1, #44	; 0x2c
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	4413      	add	r3, r2
 8006f98:	3354      	adds	r3, #84	; 0x54
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	212c      	movs	r1, #44	; 0x2c
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	3342      	adds	r3, #66	; 0x42
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e016      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	212c      	movs	r1, #44	; 0x2c
 8006fba:	fb01 f303 	mul.w	r3, r1, r3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3342      	adds	r3, #66	; 0x42
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	701a      	strb	r2, [r3, #0]
      break;
 8006fc6:	e00c      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	212c      	movs	r1, #44	; 0x2c
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3342      	adds	r3, #66	; 0x42
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006fe0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	212c      	movs	r1, #44	; 0x2c
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	4413      	add	r3, r2
 8006fee:	3344      	adds	r3, #68	; 0x44
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	8b3a      	ldrh	r2, [r7, #24]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	202c      	movs	r0, #44	; 0x2c
 8006ffc:	fb00 f303 	mul.w	r3, r0, r3
 8007000:	440b      	add	r3, r1
 8007002:	334c      	adds	r3, #76	; 0x4c
 8007004:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	212c      	movs	r1, #44	; 0x2c
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	3360      	adds	r3, #96	; 0x60
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	212c      	movs	r1, #44	; 0x2c
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	3350      	adds	r3, #80	; 0x50
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	212c      	movs	r1, #44	; 0x2c
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	4413      	add	r3, r2
 8007036:	3339      	adds	r3, #57	; 0x39
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	212c      	movs	r1, #44	; 0x2c
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	3361      	adds	r3, #97	; 0x61
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	222c      	movs	r2, #44	; 0x2c
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	3338      	adds	r3, #56	; 0x38
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	18d1      	adds	r1, r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	f006 f9f6 	bl	800d458 <USB_HC_StartXfer>
 800706c:	4603      	mov	r3, r0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop

08007078 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f005 ff0f 	bl	800ceb2 <USB_GetMode>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	f040 80ef 	bne.w	800727a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f005 fef3 	bl	800ce8c <USB_ReadInterrupts>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80e5 	beq.w	8007278 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f005 feea 	bl	800ce8c <USB_ReadInterrupts>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c2:	d104      	bne.n	80070ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f005 feda 	bl	800ce8c <USB_ReadInterrupts>
 80070d8:	4603      	mov	r3, r0
 80070da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e2:	d104      	bne.n	80070ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f005 feca 	bl	800ce8c <USB_ReadInterrupts>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007102:	d104      	bne.n	800710e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800710c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f005 feba 	bl	800ce8c <USB_ReadInterrupts>
 8007118:	4603      	mov	r3, r0
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d103      	bne.n	800712a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2202      	movs	r2, #2
 8007128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f005 feac 	bl	800ce8c <USB_ReadInterrupts>
 8007134:	4603      	mov	r3, r0
 8007136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713e:	d115      	bne.n	800716c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007148:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d108      	bne.n	800716c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f008 fc7e 	bl	800fa5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f005 ffa2 	bl	800d0b0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f005 fe8b 	bl	800ce8c <USB_ReadInterrupts>
 8007176:	4603      	mov	r3, r0
 8007178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800717c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007180:	d102      	bne.n	8007188 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 f9ff 	bl	8008586 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f005 fe7d 	bl	800ce8c <USB_ReadInterrupts>
 8007192:	4603      	mov	r3, r0
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b08      	cmp	r3, #8
 800719a:	d106      	bne.n	80071aa <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f008 fc41 	bl	800fa24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2208      	movs	r2, #8
 80071a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f005 fe6c 	bl	800ce8c <USB_ReadInterrupts>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d101      	bne.n	80071c2 <HAL_HCD_IRQHandler+0x14a>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_HCD_IRQHandler+0x14c>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d012      	beq.n	80071ee <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0210 	bic.w	r2, r2, #16
 80071d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f902 	bl	80083e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0210 	orr.w	r2, r2, #16
 80071ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f005 fe4a 	bl	800ce8c <USB_ReadInterrupts>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007202:	d13a      	bne.n	800727a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f006 fa67 	bl	800d6dc <USB_HC_ReadInterrupt>
 800720e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e025      	b.n	8007262 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d018      	beq.n	800725c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d106      	bne.n	8007250 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f8ab 	bl	80073a4 <HCD_HC_IN_IRQHandler>
 800724e:	e005      	b.n	800725c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fcc6 	bl	8007be8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	3301      	adds	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3d4      	bcc.n	8007216 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007274:	615a      	str	r2, [r3, #20]
 8007276:	e000      	b.n	800727a <HAL_HCD_IRQHandler+0x202>
      return;
 8007278:	bf00      	nop
    }
  }
}
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_HCD_Start+0x16>
 8007292:	2302      	movs	r3, #2
 8007294:	e013      	b.n	80072be <HAL_HCD_Start+0x3e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f005 fcff 	bl	800cca6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f005 ff62 	bl	800d178 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_HCD_Stop+0x16>
 80072d8:	2302      	movs	r3, #2
 80072da:	e00d      	b.n	80072f8 <HAL_HCD_Stop+0x32>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f006 fb61 	bl	800d9b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f005 ff09 	bl	800d124 <USB_ResetPort>
 8007312:	4603      	mov	r3, r0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	212c      	movs	r1, #44	; 0x2c
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	3360      	adds	r3, #96	; 0x60
 8007336:	781b      	ldrb	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	212c      	movs	r1, #44	; 0x2c
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	3350      	adds	r3, #80	; 0x50
 800735e:	681b      	ldr	r3, [r3, #0]
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f005 ff4d 	bl	800d218 <USB_GetCurrentFrame>
 800737e:	4603      	mov	r3, r0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f005 ff28 	bl	800d1ea <USB_GetHostSpeed>
 800739a:	4603      	mov	r3, r0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d119      	bne.n	8007408 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	461a      	mov	r2, r3
 80073e2:	2304      	movs	r3, #4
 80073e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007400:	f043 0302 	orr.w	r3, r3, #2
 8007404:	60d3      	str	r3, [r2, #12]
 8007406:	e101      	b.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d12b      	bne.n	8007478 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	461a      	mov	r2, r3
 800742e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007432:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	212c      	movs	r1, #44	; 0x2c
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	3361      	adds	r3, #97	; 0x61
 8007442:	2207      	movs	r2, #7
 8007444:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	440a      	add	r2, r1
 800745c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007460:	f043 0302 	orr.w	r3, r3, #2
 8007464:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f006 f944 	bl	800d6fe <USB_HC_Halt>
 8007476:	e0c9      	b.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4413      	add	r3, r2
 8007480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d109      	bne.n	80074a2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	4413      	add	r3, r2
 8007496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749a:	461a      	mov	r2, r3
 800749c:	2320      	movs	r3, #32
 800749e:	6093      	str	r3, [r2, #8]
 80074a0:	e0b4      	b.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d133      	bne.n	8007520 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d2:	f043 0302 	orr.w	r3, r3, #2
 80074d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	212c      	movs	r1, #44	; 0x2c
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	4413      	add	r3, r2
 80074e4:	3361      	adds	r3, #97	; 0x61
 80074e6:	2205      	movs	r2, #5
 80074e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f6:	461a      	mov	r2, r3
 80074f8:	2310      	movs	r3, #16
 80074fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007508:	461a      	mov	r2, r3
 800750a:	2308      	movs	r3, #8
 800750c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f006 f8f0 	bl	800d6fe <USB_HC_Halt>
 800751e:	e075      	b.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4413      	add	r3, r2
 8007528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007536:	d134      	bne.n	80075a2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	440a      	add	r2, r1
 800754e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007552:	f043 0302 	orr.w	r3, r3, #2
 8007556:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	212c      	movs	r1, #44	; 0x2c
 800755e:	fb01 f303 	mul.w	r3, r1, r3
 8007562:	4413      	add	r3, r2
 8007564:	3361      	adds	r3, #97	; 0x61
 8007566:	2208      	movs	r2, #8
 8007568:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4413      	add	r3, r2
 8007572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007576:	461a      	mov	r2, r3
 8007578:	2310      	movs	r3, #16
 800757a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007588:	461a      	mov	r2, r3
 800758a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800758e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f006 f8af 	bl	800d6fe <USB_HC_Halt>
 80075a0:	e034      	b.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d129      	bne.n	800760c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d2:	f043 0302 	orr.w	r3, r3, #2
 80075d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	212c      	movs	r1, #44	; 0x2c
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	3361      	adds	r3, #97	; 0x61
 80075e6:	2206      	movs	r2, #6
 80075e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f006 f882 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	461a      	mov	r2, r3
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4413      	add	r3, r2
 8007614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800761e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007622:	d122      	bne.n	800766a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	440a      	add	r2, r1
 800763a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800763e:	f043 0302 	orr.w	r3, r3, #2
 8007642:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f006 f855 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	461a      	mov	r2, r3
 8007662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007666:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007668:	e2ba      	b.n	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4413      	add	r3, r2
 8007672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 811b 	bne.w	80078b8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d019      	beq.n	80076be <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	212c      	movs	r1, #44	; 0x2c
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	4413      	add	r3, r2
 8007696:	3348      	adds	r3, #72	; 0x48
 8007698:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0159      	lsls	r1, r3, #5
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	440b      	add	r3, r1
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80076ac:	1ad2      	subs	r2, r2, r3
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	202c      	movs	r0, #44	; 0x2c
 80076b4:	fb00 f303 	mul.w	r3, r0, r3
 80076b8:	440b      	add	r3, r1
 80076ba:	3350      	adds	r3, #80	; 0x50
 80076bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	212c      	movs	r1, #44	; 0x2c
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	3361      	adds	r3, #97	; 0x61
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	212c      	movs	r1, #44	; 0x2c
 80076d6:	fb01 f303 	mul.w	r3, r1, r3
 80076da:	4413      	add	r3, r2
 80076dc:	335c      	adds	r3, #92	; 0x5c
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	461a      	mov	r2, r3
 80076f0:	2301      	movs	r3, #1
 80076f2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	212c      	movs	r1, #44	; 0x2c
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	4413      	add	r3, r2
 8007700:	333f      	adds	r3, #63	; 0x3f
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	212c      	movs	r1, #44	; 0x2c
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	4413      	add	r3, r2
 8007714:	333f      	adds	r3, #63	; 0x3f
 8007716:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007718:	2b02      	cmp	r3, #2
 800771a:	d121      	bne.n	8007760 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4413      	add	r3, r2
 8007724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	440a      	add	r2, r1
 8007732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007736:	f043 0302 	orr.w	r3, r3, #2
 800773a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f005 ffd9 	bl	800d6fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4413      	add	r3, r2
 8007754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007758:	461a      	mov	r2, r3
 800775a:	2310      	movs	r3, #16
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	e066      	b.n	800782e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	212c      	movs	r1, #44	; 0x2c
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	4413      	add	r3, r2
 800776c:	333f      	adds	r3, #63	; 0x3f
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d127      	bne.n	80077c4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4413      	add	r3, r2
 800777c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	440a      	add	r2, r1
 800778a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007792:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	212c      	movs	r1, #44	; 0x2c
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3360      	adds	r3, #96	; 0x60
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	b2d9      	uxtb	r1, r3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	202c      	movs	r0, #44	; 0x2c
 80077b0:	fb00 f303 	mul.w	r3, r0, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	3360      	adds	r3, #96	; 0x60
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f008 f95b 	bl	800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80077c2:	e034      	b.n	800782e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	212c      	movs	r1, #44	; 0x2c
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	4413      	add	r3, r2
 80077d0:	333f      	adds	r3, #63	; 0x3f
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d12a      	bne.n	800782e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	212c      	movs	r1, #44	; 0x2c
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	3360      	adds	r3, #96	; 0x60
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	212c      	movs	r1, #44	; 0x2c
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	3354      	adds	r3, #84	; 0x54
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f083 0301 	eor.w	r3, r3, #1
 80077fe:	b2d8      	uxtb	r0, r3
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	212c      	movs	r1, #44	; 0x2c
 8007806:	fb01 f303 	mul.w	r3, r1, r3
 800780a:	4413      	add	r3, r2
 800780c:	3354      	adds	r3, #84	; 0x54
 800780e:	4602      	mov	r2, r0
 8007810:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	b2d9      	uxtb	r1, r3
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	202c      	movs	r0, #44	; 0x2c
 800781c:	fb00 f303 	mul.w	r3, r0, r3
 8007820:	4413      	add	r3, r2
 8007822:	3360      	adds	r3, #96	; 0x60
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f008 f925 	bl	800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d12b      	bne.n	800788e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	212c      	movs	r1, #44	; 0x2c
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	3348      	adds	r3, #72	; 0x48
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	202c      	movs	r0, #44	; 0x2c
 800784c:	fb00 f202 	mul.w	r2, r0, r2
 8007850:	440a      	add	r2, r1
 8007852:	3240      	adds	r2, #64	; 0x40
 8007854:	8812      	ldrh	r2, [r2, #0]
 8007856:	fbb3 f3f2 	udiv	r3, r3, r2
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 81be 	beq.w	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	212c      	movs	r1, #44	; 0x2c
 800786a:	fb01 f303 	mul.w	r3, r1, r3
 800786e:	4413      	add	r3, r2
 8007870:	3354      	adds	r3, #84	; 0x54
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f083 0301 	eor.w	r3, r3, #1
 8007878:	b2d8      	uxtb	r0, r3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	212c      	movs	r1, #44	; 0x2c
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	4413      	add	r3, r2
 8007886:	3354      	adds	r3, #84	; 0x54
 8007888:	4602      	mov	r2, r0
 800788a:	701a      	strb	r2, [r3, #0]
}
 800788c:	e1a8      	b.n	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	212c      	movs	r1, #44	; 0x2c
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	4413      	add	r3, r2
 800789a:	3354      	adds	r3, #84	; 0x54
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f083 0301 	eor.w	r3, r3, #1
 80078a2:	b2d8      	uxtb	r0, r3
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	212c      	movs	r1, #44	; 0x2c
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	3354      	adds	r3, #84	; 0x54
 80078b2:	4602      	mov	r2, r0
 80078b4:	701a      	strb	r2, [r3, #0]
}
 80078b6:	e193      	b.n	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	f040 8106 	bne.w	8007adc <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ea:	f023 0302 	bic.w	r3, r3, #2
 80078ee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	212c      	movs	r1, #44	; 0x2c
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	3361      	adds	r3, #97	; 0x61
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d109      	bne.n	8007918 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	212c      	movs	r1, #44	; 0x2c
 800790a:	fb01 f303 	mul.w	r3, r1, r3
 800790e:	4413      	add	r3, r2
 8007910:	3360      	adds	r3, #96	; 0x60
 8007912:	2201      	movs	r2, #1
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e0c9      	b.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	212c      	movs	r1, #44	; 0x2c
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	4413      	add	r3, r2
 8007924:	3361      	adds	r3, #97	; 0x61
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b05      	cmp	r3, #5
 800792a:	d109      	bne.n	8007940 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	212c      	movs	r1, #44	; 0x2c
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	3360      	adds	r3, #96	; 0x60
 800793a:	2205      	movs	r2, #5
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e0b5      	b.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	212c      	movs	r1, #44	; 0x2c
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	4413      	add	r3, r2
 800794c:	3361      	adds	r3, #97	; 0x61
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b06      	cmp	r3, #6
 8007952:	d009      	beq.n	8007968 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	212c      	movs	r1, #44	; 0x2c
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3361      	adds	r3, #97	; 0x61
 8007962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007964:	2b08      	cmp	r3, #8
 8007966:	d150      	bne.n	8007a0a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	212c      	movs	r1, #44	; 0x2c
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	335c      	adds	r3, #92	; 0x5c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	202c      	movs	r0, #44	; 0x2c
 8007980:	fb00 f303 	mul.w	r3, r0, r3
 8007984:	440b      	add	r3, r1
 8007986:	335c      	adds	r3, #92	; 0x5c
 8007988:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	212c      	movs	r1, #44	; 0x2c
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	335c      	adds	r3, #92	; 0x5c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d912      	bls.n	80079c4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	212c      	movs	r1, #44	; 0x2c
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	4413      	add	r3, r2
 80079aa:	335c      	adds	r3, #92	; 0x5c
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	212c      	movs	r1, #44	; 0x2c
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	3360      	adds	r3, #96	; 0x60
 80079be:	2204      	movs	r2, #4
 80079c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80079c2:	e073      	b.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	212c      	movs	r1, #44	; 0x2c
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	3360      	adds	r3, #96	; 0x60
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a02:	461a      	mov	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007a08:	e050      	b.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	212c      	movs	r1, #44	; 0x2c
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	3361      	adds	r3, #97	; 0x61
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d122      	bne.n	8007a64 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	212c      	movs	r1, #44	; 0x2c
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
 8007a28:	4413      	add	r3, r2
 8007a2a:	3360      	adds	r3, #96	; 0x60
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e023      	b.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	212c      	movs	r1, #44	; 0x2c
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	3361      	adds	r3, #97	; 0x61
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b07      	cmp	r3, #7
 8007a76:	d119      	bne.n	8007aac <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	212c      	movs	r1, #44	; 0x2c
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	335c      	adds	r3, #92	; 0x5c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	202c      	movs	r0, #44	; 0x2c
 8007a90:	fb00 f303 	mul.w	r3, r0, r3
 8007a94:	440b      	add	r3, r1
 8007a96:	335c      	adds	r3, #92	; 0x5c
 8007a98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	212c      	movs	r1, #44	; 0x2c
 8007aa0:	fb01 f303 	mul.w	r3, r1, r3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3360      	adds	r3, #96	; 0x60
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2302      	movs	r3, #2
 8007abc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	b2d9      	uxtb	r1, r3
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	202c      	movs	r0, #44	; 0x2c
 8007ac8:	fb00 f303 	mul.w	r3, r0, r3
 8007acc:	4413      	add	r3, r2
 8007ace:	3360      	adds	r3, #96	; 0x60
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f007 ffcf 	bl	800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007ada:	e081      	b.n	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d176      	bne.n	8007be0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	212c      	movs	r1, #44	; 0x2c
 8007af8:	fb01 f303 	mul.w	r3, r1, r3
 8007afc:	4413      	add	r3, r2
 8007afe:	333f      	adds	r3, #63	; 0x3f
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d121      	bne.n	8007b4a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	212c      	movs	r1, #44	; 0x2c
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	335c      	adds	r3, #92	; 0x5c
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b32:	f043 0302 	orr.w	r3, r3, #2
 8007b36:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f005 fddb 	bl	800d6fe <USB_HC_Halt>
 8007b48:	e041      	b.n	8007bce <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	212c      	movs	r1, #44	; 0x2c
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	333f      	adds	r3, #63	; 0x3f
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	212c      	movs	r1, #44	; 0x2c
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	333f      	adds	r3, #63	; 0x3f
 8007b6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d12d      	bne.n	8007bce <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	212c      	movs	r1, #44	; 0x2c
 8007b78:	fb01 f303 	mul.w	r3, r1, r3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	335c      	adds	r3, #92	; 0x5c
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d120      	bne.n	8007bce <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	212c      	movs	r1, #44	; 0x2c
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	3361      	adds	r3, #97	; 0x61
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f005 fd98 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bda:	461a      	mov	r2, r3
 8007bdc:	2310      	movs	r3, #16
 8007bde:	6093      	str	r3, [r2, #8]
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d119      	bne.n	8007c4c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c24:	461a      	mov	r2, r3
 8007c26:	2304      	movs	r3, #4
 8007c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007c4a:	e3c6      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d13e      	bne.n	8007ce0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2320      	movs	r3, #32
 8007c72:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	212c      	movs	r1, #44	; 0x2c
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	333d      	adds	r3, #61	; 0x3d
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	f040 83a8 	bne.w	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	212c      	movs	r1, #44	; 0x2c
 8007c90:	fb01 f303 	mul.w	r3, r1, r3
 8007c94:	4413      	add	r3, r2
 8007c96:	333d      	adds	r3, #61	; 0x3d
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	212c      	movs	r1, #44	; 0x2c
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3360      	adds	r3, #96	; 0x60
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f005 fd10 	bl	800d6fe <USB_HC_Halt>
}
 8007cde:	e37c      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf6:	d122      	bne.n	8007d3e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d12:	f043 0302 	orr.w	r3, r3, #2
 8007d16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f005 fceb 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d34:	461a      	mov	r2, r3
 8007d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d3a:	6093      	str	r3, [r2, #8]
}
 8007d3c:	e34d      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d150      	bne.n	8007df6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	212c      	movs	r1, #44	; 0x2c
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	4413      	add	r3, r2
 8007d60:	335c      	adds	r3, #92	; 0x5c
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d111      	bne.n	8007da0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	212c      	movs	r1, #44	; 0x2c
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	333d      	adds	r3, #61	; 0x3d
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dba:	f043 0302 	orr.w	r3, r3, #2
 8007dbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f005 fc97 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ddc:	461a      	mov	r2, r3
 8007dde:	2301      	movs	r3, #1
 8007de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	212c      	movs	r1, #44	; 0x2c
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	4413      	add	r3, r2
 8007dee:	3361      	adds	r3, #97	; 0x61
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
}
 8007df4:	e2f1      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d13c      	bne.n	8007e86 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	212c      	movs	r1, #44	; 0x2c
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	3361      	adds	r3, #97	; 0x61
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	212c      	movs	r1, #44	; 0x2c
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	333d      	adds	r3, #61	; 0x3d
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	212c      	movs	r1, #44	; 0x2c
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	335c      	adds	r3, #92	; 0x5c
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f005 fc46 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2340      	movs	r3, #64	; 0x40
 8007e82:	6093      	str	r3, [r2, #8]
}
 8007e84:	e2a9      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d12a      	bne.n	8007ef2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2308      	movs	r3, #8
 8007eac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f005 fc10 	bl	800d6fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	212c      	movs	r1, #44	; 0x2c
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	3361      	adds	r3, #97	; 0x61
 8007eec:	2205      	movs	r2, #5
 8007eee:	701a      	strb	r2, [r3, #0]
}
 8007ef0:	e273      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d150      	bne.n	8007faa <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	212c      	movs	r1, #44	; 0x2c
 8007f0e:	fb01 f303 	mul.w	r3, r1, r3
 8007f12:	4413      	add	r3, r2
 8007f14:	335c      	adds	r3, #92	; 0x5c
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	212c      	movs	r1, #44	; 0x2c
 8007f20:	fb01 f303 	mul.w	r3, r1, r3
 8007f24:	4413      	add	r3, r2
 8007f26:	3361      	adds	r3, #97	; 0x61
 8007f28:	2203      	movs	r2, #3
 8007f2a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	212c      	movs	r1, #44	; 0x2c
 8007f32:	fb01 f303 	mul.w	r3, r1, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	333d      	adds	r3, #61	; 0x3d
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d112      	bne.n	8007f66 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	212c      	movs	r1, #44	; 0x2c
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	333c      	adds	r3, #60	; 0x3c
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d108      	bne.n	8007f66 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	212c      	movs	r1, #44	; 0x2c
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	333d      	adds	r3, #61	; 0x3d
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	4611      	mov	r1, r2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f005 fbb4 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	6093      	str	r3, [r2, #8]
}
 8007fa8:	e217      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d174      	bne.n	80080aa <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d121      	bne.n	800800c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	212c      	movs	r1, #44	; 0x2c
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3361      	adds	r3, #97	; 0x61
 8007fd6:	2206      	movs	r2, #6
 8007fd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f005 fb7a 	bl	800d6fe <USB_HC_Halt>
 800800a:	e044      	b.n	8008096 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	212c      	movs	r1, #44	; 0x2c
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	4413      	add	r3, r2
 8008018:	335c      	adds	r3, #92	; 0x5c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	202c      	movs	r0, #44	; 0x2c
 8008024:	fb00 f303 	mul.w	r3, r0, r3
 8008028:	440b      	add	r3, r1
 800802a:	335c      	adds	r3, #92	; 0x5c
 800802c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	212c      	movs	r1, #44	; 0x2c
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	4413      	add	r3, r2
 800803a:	335c      	adds	r3, #92	; 0x5c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d920      	bls.n	8008084 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	212c      	movs	r1, #44	; 0x2c
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	4413      	add	r3, r2
 800804e:	335c      	adds	r3, #92	; 0x5c
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	212c      	movs	r1, #44	; 0x2c
 800805a:	fb01 f303 	mul.w	r3, r1, r3
 800805e:	4413      	add	r3, r2
 8008060:	3360      	adds	r3, #96	; 0x60
 8008062:	2204      	movs	r2, #4
 8008064:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	b2d9      	uxtb	r1, r3
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	202c      	movs	r0, #44	; 0x2c
 8008070:	fb00 f303 	mul.w	r3, r0, r3
 8008074:	4413      	add	r3, r2
 8008076:	3360      	adds	r3, #96	; 0x60
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f007 fcfb 	bl	800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008082:	e008      	b.n	8008096 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	212c      	movs	r1, #44	; 0x2c
 800808a:	fb01 f303 	mul.w	r3, r1, r3
 800808e:	4413      	add	r3, r2
 8008090:	3360      	adds	r3, #96	; 0x60
 8008092:	2202      	movs	r2, #2
 8008094:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a2:	461a      	mov	r2, r3
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	6093      	str	r3, [r2, #8]
}
 80080a8:	e197      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c0:	d134      	bne.n	800812c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f005 fb06 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fe:	461a      	mov	r2, r3
 8008100:	2310      	movs	r3, #16
 8008102:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008110:	461a      	mov	r2, r3
 8008112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	212c      	movs	r1, #44	; 0x2c
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	4413      	add	r3, r2
 8008124:	3361      	adds	r3, #97	; 0x61
 8008126:	2208      	movs	r2, #8
 8008128:	701a      	strb	r2, [r3, #0]
}
 800812a:	e156      	b.n	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b02      	cmp	r3, #2
 8008140:	f040 814b 	bne.w	80083da <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	4413      	add	r3, r2
 800814c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	440a      	add	r2, r1
 800815a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800815e:	f023 0302 	bic.w	r3, r3, #2
 8008162:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	212c      	movs	r1, #44	; 0x2c
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	4413      	add	r3, r2
 8008170:	3361      	adds	r3, #97	; 0x61
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d179      	bne.n	800826c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	212c      	movs	r1, #44	; 0x2c
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	4413      	add	r3, r2
 8008184:	3360      	adds	r3, #96	; 0x60
 8008186:	2201      	movs	r2, #1
 8008188:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	212c      	movs	r1, #44	; 0x2c
 8008190:	fb01 f303 	mul.w	r3, r1, r3
 8008194:	4413      	add	r3, r2
 8008196:	333f      	adds	r3, #63	; 0x3f
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b02      	cmp	r3, #2
 800819c:	d00a      	beq.n	80081b4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	212c      	movs	r1, #44	; 0x2c
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	4413      	add	r3, r2
 80081aa:	333f      	adds	r3, #63	; 0x3f
 80081ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	f040 80fc 	bne.w	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d142      	bne.n	8008242 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	212c      	movs	r1, #44	; 0x2c
 80081c2:	fb01 f303 	mul.w	r3, r1, r3
 80081c6:	4413      	add	r3, r2
 80081c8:	334c      	adds	r3, #76	; 0x4c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80ed 	beq.w	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	212c      	movs	r1, #44	; 0x2c
 80081d8:	fb01 f303 	mul.w	r3, r1, r3
 80081dc:	4413      	add	r3, r2
 80081de:	334c      	adds	r3, #76	; 0x4c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	202c      	movs	r0, #44	; 0x2c
 80081e8:	fb00 f202 	mul.w	r2, r0, r2
 80081ec:	440a      	add	r2, r1
 80081ee:	3240      	adds	r2, #64	; 0x40
 80081f0:	8812      	ldrh	r2, [r2, #0]
 80081f2:	4413      	add	r3, r2
 80081f4:	3b01      	subs	r3, #1
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	202c      	movs	r0, #44	; 0x2c
 80081fc:	fb00 f202 	mul.w	r2, r0, r2
 8008200:	440a      	add	r2, r1
 8008202:	3240      	adds	r2, #64	; 0x40
 8008204:	8812      	ldrh	r2, [r2, #0]
 8008206:	fbb3 f3f2 	udiv	r3, r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80ca 	beq.w	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	212c      	movs	r1, #44	; 0x2c
 800821e:	fb01 f303 	mul.w	r3, r1, r3
 8008222:	4413      	add	r3, r2
 8008224:	3355      	adds	r3, #85	; 0x55
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f083 0301 	eor.w	r3, r3, #1
 800822c:	b2d8      	uxtb	r0, r3
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	212c      	movs	r1, #44	; 0x2c
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	3355      	adds	r3, #85	; 0x55
 800823c:	4602      	mov	r2, r0
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e0b4      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	212c      	movs	r1, #44	; 0x2c
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	3355      	adds	r3, #85	; 0x55
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f083 0301 	eor.w	r3, r3, #1
 8008256:	b2d8      	uxtb	r0, r3
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	212c      	movs	r1, #44	; 0x2c
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	4413      	add	r3, r2
 8008264:	3355      	adds	r3, #85	; 0x55
 8008266:	4602      	mov	r2, r0
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e09f      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	212c      	movs	r1, #44	; 0x2c
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	4413      	add	r3, r2
 8008278:	3361      	adds	r3, #97	; 0x61
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d109      	bne.n	8008294 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	212c      	movs	r1, #44	; 0x2c
 8008286:	fb01 f303 	mul.w	r3, r1, r3
 800828a:	4413      	add	r3, r2
 800828c:	3360      	adds	r3, #96	; 0x60
 800828e:	2202      	movs	r2, #2
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e08b      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	212c      	movs	r1, #44	; 0x2c
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	3361      	adds	r3, #97	; 0x61
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d109      	bne.n	80082bc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	212c      	movs	r1, #44	; 0x2c
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	4413      	add	r3, r2
 80082b4:	3360      	adds	r3, #96	; 0x60
 80082b6:	2202      	movs	r2, #2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e077      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	212c      	movs	r1, #44	; 0x2c
 80082c2:	fb01 f303 	mul.w	r3, r1, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	3361      	adds	r3, #97	; 0x61
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b05      	cmp	r3, #5
 80082ce:	d109      	bne.n	80082e4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	212c      	movs	r1, #44	; 0x2c
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	3360      	adds	r3, #96	; 0x60
 80082de:	2205      	movs	r2, #5
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e063      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	212c      	movs	r1, #44	; 0x2c
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	3361      	adds	r3, #97	; 0x61
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b06      	cmp	r3, #6
 80082f6:	d009      	beq.n	800830c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	212c      	movs	r1, #44	; 0x2c
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	4413      	add	r3, r2
 8008304:	3361      	adds	r3, #97	; 0x61
 8008306:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008308:	2b08      	cmp	r3, #8
 800830a:	d14f      	bne.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	212c      	movs	r1, #44	; 0x2c
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	335c      	adds	r3, #92	; 0x5c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	202c      	movs	r0, #44	; 0x2c
 8008324:	fb00 f303 	mul.w	r3, r0, r3
 8008328:	440b      	add	r3, r1
 800832a:	335c      	adds	r3, #92	; 0x5c
 800832c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	212c      	movs	r1, #44	; 0x2c
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	4413      	add	r3, r2
 800833a:	335c      	adds	r3, #92	; 0x5c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d912      	bls.n	8008368 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	212c      	movs	r1, #44	; 0x2c
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	335c      	adds	r3, #92	; 0x5c
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	212c      	movs	r1, #44	; 0x2c
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	3360      	adds	r3, #96	; 0x60
 8008362:	2204      	movs	r2, #4
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e021      	b.n	80083ac <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	212c      	movs	r1, #44	; 0x2c
 800836e:	fb01 f303 	mul.w	r3, r1, r3
 8008372:	4413      	add	r3, r2
 8008374:	3360      	adds	r3, #96	; 0x60
 8008376:	2202      	movs	r2, #2
 8008378:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008390:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008398:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	461a      	mov	r2, r3
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b8:	461a      	mov	r2, r3
 80083ba:	2302      	movs	r3, #2
 80083bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	b2d9      	uxtb	r1, r3
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	202c      	movs	r0, #44	; 0x2c
 80083c8:	fb00 f303 	mul.w	r3, r0, r3
 80083cc:	4413      	add	r3, r2
 80083ce:	3360      	adds	r3, #96	; 0x60
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f007 fb4f 	bl	800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80083da:	bf00      	nop
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b08a      	sub	sp, #40	; 0x28
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	0c5b      	lsrs	r3, r3, #17
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	091b      	lsrs	r3, r3, #4
 8008412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008416:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d004      	beq.n	8008428 <HCD_RXQLVL_IRQHandler+0x46>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b05      	cmp	r3, #5
 8008422:	f000 80a9 	beq.w	8008578 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008426:	e0aa      	b.n	800857e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 80a6 	beq.w	800857c <HCD_RXQLVL_IRQHandler+0x19a>
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	212c      	movs	r1, #44	; 0x2c
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	4413      	add	r3, r2
 800843c:	3344      	adds	r3, #68	; 0x44
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 809b 	beq.w	800857c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	212c      	movs	r1, #44	; 0x2c
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	3350      	adds	r3, #80	; 0x50
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	441a      	add	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	202c      	movs	r0, #44	; 0x2c
 8008460:	fb00 f303 	mul.w	r3, r0, r3
 8008464:	440b      	add	r3, r1
 8008466:	334c      	adds	r3, #76	; 0x4c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d87a      	bhi.n	8008564 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	212c      	movs	r1, #44	; 0x2c
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	4413      	add	r3, r2
 800847e:	3344      	adds	r3, #68	; 0x44
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	b292      	uxth	r2, r2
 8008486:	4619      	mov	r1, r3
 8008488:	f004 fcd7 	bl	800ce3a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	212c      	movs	r1, #44	; 0x2c
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	4413      	add	r3, r2
 8008498:	3344      	adds	r3, #68	; 0x44
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	441a      	add	r2, r3
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	202c      	movs	r0, #44	; 0x2c
 80084a6:	fb00 f303 	mul.w	r3, r0, r3
 80084aa:	440b      	add	r3, r1
 80084ac:	3344      	adds	r3, #68	; 0x44
 80084ae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	212c      	movs	r1, #44	; 0x2c
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	3350      	adds	r3, #80	; 0x50
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	441a      	add	r2, r3
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	202c      	movs	r0, #44	; 0x2c
 80084ca:	fb00 f303 	mul.w	r3, r0, r3
 80084ce:	440b      	add	r3, r1
 80084d0:	3350      	adds	r3, #80	; 0x50
 80084d2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	0cdb      	lsrs	r3, r3, #19
 80084e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084e8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	212c      	movs	r1, #44	; 0x2c
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	4413      	add	r3, r2
 80084f6:	3340      	adds	r3, #64	; 0x40
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4293      	cmp	r3, r2
 8008500:	d13c      	bne.n	800857c <HCD_RXQLVL_IRQHandler+0x19a>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d039      	beq.n	800857c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	4413      	add	r3, r2
 8008510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800851e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008526:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008534:	461a      	mov	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	212c      	movs	r1, #44	; 0x2c
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	3354      	adds	r3, #84	; 0x54
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f083 0301 	eor.w	r3, r3, #1
 800854e:	b2d8      	uxtb	r0, r3
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	212c      	movs	r1, #44	; 0x2c
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	3354      	adds	r3, #84	; 0x54
 800855e:	4602      	mov	r2, r0
 8008560:	701a      	strb	r2, [r3, #0]
      break;
 8008562:	e00b      	b.n	800857c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	212c      	movs	r1, #44	; 0x2c
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	4413      	add	r3, r2
 8008570:	3360      	adds	r3, #96	; 0x60
 8008572:	2204      	movs	r2, #4
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e001      	b.n	800857c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8008578:	bf00      	nop
 800857a:	e000      	b.n	800857e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800857c:	bf00      	nop
  }
}
 800857e:	bf00      	nop
 8008580:	3728      	adds	r7, #40	; 0x28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80085b2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d10b      	bne.n	80085d6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d102      	bne.n	80085ce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f007 fa39 	bl	800fa40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f043 0302 	orr.w	r3, r3, #2
 80085d4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d132      	bne.n	8008646 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f043 0308 	orr.w	r3, r3, #8
 80085e6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d126      	bne.n	8008640 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d113      	bne.n	8008622 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008604:	d106      	bne.n	8008614 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f004 fd4f 	bl	800d0b0 <USB_InitFSLSPClkSel>
 8008612:	e011      	b.n	8008638 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2101      	movs	r1, #1
 800861a:	4618      	mov	r0, r3
 800861c:	f004 fd48 	bl	800d0b0 <USB_InitFSLSPClkSel>
 8008620:	e00a      	b.n	8008638 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d106      	bne.n	8008638 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008630:	461a      	mov	r2, r3
 8008632:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008636:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f007 fa2b 	bl	800fa94 <HAL_HCD_PortEnabled_Callback>
 800863e:	e002      	b.n	8008646 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f007 fa35 	bl	800fab0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b20      	cmp	r3, #32
 800864e:	d103      	bne.n	8008658 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f043 0320 	orr.w	r3, r3, #32
 8008656:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800865e:	461a      	mov	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e12b      	b.n	80088d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7f9 faba 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2224      	movs	r2, #36	; 0x24
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80086d0:	f002 fcec 	bl	800b0ac <HAL_RCC_GetPCLK1Freq>
 80086d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	4a81      	ldr	r2, [pc, #516]	; (80088e0 <HAL_I2C_Init+0x274>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d807      	bhi.n	80086f0 <HAL_I2C_Init+0x84>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a80      	ldr	r2, [pc, #512]	; (80088e4 <HAL_I2C_Init+0x278>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	bf94      	ite	ls
 80086e8:	2301      	movls	r3, #1
 80086ea:	2300      	movhi	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	e006      	b.n	80086fe <HAL_I2C_Init+0x92>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a7d      	ldr	r2, [pc, #500]	; (80088e8 <HAL_I2C_Init+0x27c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	bf94      	ite	ls
 80086f8:	2301      	movls	r3, #1
 80086fa:	2300      	movhi	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e0e7      	b.n	80088d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a78      	ldr	r2, [pc, #480]	; (80088ec <HAL_I2C_Init+0x280>)
 800870a:	fba2 2303 	umull	r2, r3, r2, r3
 800870e:	0c9b      	lsrs	r3, r3, #18
 8008710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4a6a      	ldr	r2, [pc, #424]	; (80088e0 <HAL_I2C_Init+0x274>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d802      	bhi.n	8008740 <HAL_I2C_Init+0xd4>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	3301      	adds	r3, #1
 800873e:	e009      	b.n	8008754 <HAL_I2C_Init+0xe8>
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	4a69      	ldr	r2, [pc, #420]	; (80088f0 <HAL_I2C_Init+0x284>)
 800874c:	fba2 2303 	umull	r2, r3, r2, r3
 8008750:	099b      	lsrs	r3, r3, #6
 8008752:	3301      	adds	r3, #1
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	430b      	orrs	r3, r1
 800875a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	495c      	ldr	r1, [pc, #368]	; (80088e0 <HAL_I2C_Init+0x274>)
 8008770:	428b      	cmp	r3, r1
 8008772:	d819      	bhi.n	80087a8 <HAL_I2C_Init+0x13c>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	1e59      	subs	r1, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008782:	1c59      	adds	r1, r3, #1
 8008784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008788:	400b      	ands	r3, r1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <HAL_I2C_Init+0x138>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1e59      	subs	r1, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	fbb1 f3f3 	udiv	r3, r1, r3
 800879c:	3301      	adds	r3, #1
 800879e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087a2:	e051      	b.n	8008848 <HAL_I2C_Init+0x1dc>
 80087a4:	2304      	movs	r3, #4
 80087a6:	e04f      	b.n	8008848 <HAL_I2C_Init+0x1dc>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d111      	bne.n	80087d4 <HAL_I2C_Init+0x168>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	1e58      	subs	r0, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6859      	ldr	r1, [r3, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	440b      	add	r3, r1
 80087be:	fbb0 f3f3 	udiv	r3, r0, r3
 80087c2:	3301      	adds	r3, #1
 80087c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf0c      	ite	eq
 80087cc:	2301      	moveq	r3, #1
 80087ce:	2300      	movne	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	e012      	b.n	80087fa <HAL_I2C_Init+0x18e>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	1e58      	subs	r0, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	0099      	lsls	r1, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087ea:	3301      	adds	r3, #1
 80087ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf0c      	ite	eq
 80087f4:	2301      	moveq	r3, #1
 80087f6:	2300      	movne	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_I2C_Init+0x196>
 80087fe:	2301      	movs	r3, #1
 8008800:	e022      	b.n	8008848 <HAL_I2C_Init+0x1dc>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10e      	bne.n	8008828 <HAL_I2C_Init+0x1bc>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	1e58      	subs	r0, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6859      	ldr	r1, [r3, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	440b      	add	r3, r1
 8008818:	fbb0 f3f3 	udiv	r3, r0, r3
 800881c:	3301      	adds	r3, #1
 800881e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008826:	e00f      	b.n	8008848 <HAL_I2C_Init+0x1dc>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	1e58      	subs	r0, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6859      	ldr	r1, [r3, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	0099      	lsls	r1, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	fbb0 f3f3 	udiv	r3, r0, r3
 800883e:	3301      	adds	r3, #1
 8008840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	6809      	ldr	r1, [r1, #0]
 800884c:	4313      	orrs	r3, r2
 800884e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69da      	ldr	r2, [r3, #28]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6911      	ldr	r1, [r2, #16]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	68d2      	ldr	r2, [r2, #12]
 8008882:	4311      	orrs	r1, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	430b      	orrs	r3, r1
 800888a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	000186a0 	.word	0x000186a0
 80088e4:	001e847f 	.word	0x001e847f
 80088e8:	003d08ff 	.word	0x003d08ff
 80088ec:	431bde83 	.word	0x431bde83
 80088f0:	10624dd3 	.word	0x10624dd3

080088f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	607a      	str	r2, [r7, #4]
 80088fe:	461a      	mov	r2, r3
 8008900:	460b      	mov	r3, r1
 8008902:	817b      	strh	r3, [r7, #10]
 8008904:	4613      	mov	r3, r2
 8008906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008908:	f7fd fe0a 	bl	8006520 <HAL_GetTick>
 800890c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b20      	cmp	r3, #32
 8008918:	f040 80e0 	bne.w	8008adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	2319      	movs	r3, #25
 8008922:	2201      	movs	r2, #1
 8008924:	4970      	ldr	r1, [pc, #448]	; (8008ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f001 f8f6 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008932:	2302      	movs	r3, #2
 8008934:	e0d3      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_I2C_Master_Transmit+0x50>
 8008940:	2302      	movs	r3, #2
 8008942:	e0cc      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b01      	cmp	r3, #1
 8008958:	d007      	beq.n	800896a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0201 	orr.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2221      	movs	r2, #33	; 0x21
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2210      	movs	r2, #16
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	893a      	ldrh	r2, [r7, #8]
 800899a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4a50      	ldr	r2, [pc, #320]	; (8008aec <HAL_I2C_Master_Transmit+0x1f8>)
 80089aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089ac:	8979      	ldrh	r1, [r7, #10]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a3a      	ldr	r2, [r7, #32]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fde2 	bl	800957c <I2C_MasterRequestWrite>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e08d      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089d8:	e066      	b.n	8008aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	6a39      	ldr	r1, [r7, #32]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f001 f970 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d107      	bne.n	8008a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e06b      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d11b      	bne.n	8008a7c <HAL_I2C_Master_Transmit+0x188>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d017      	beq.n	8008a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	6a39      	ldr	r1, [r7, #32]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f001 f960 	bl	8009d46 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00d      	beq.n	8008aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d107      	bne.n	8008aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e01a      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d194      	bne.n	80089da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e000      	b.n	8008ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008adc:	2302      	movs	r3, #2
  }
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	00100002 	.word	0x00100002
 8008aec:	ffff0000 	.word	0xffff0000

08008af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08c      	sub	sp, #48	; 0x30
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	461a      	mov	r2, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	817b      	strh	r3, [r7, #10]
 8008b00:	4613      	mov	r3, r2
 8008b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b04:	f7fd fd0c 	bl	8006520 <HAL_GetTick>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	f040 820b 	bne.w	8008f2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	2319      	movs	r3, #25
 8008b1e:	2201      	movs	r2, #1
 8008b20:	497c      	ldr	r1, [pc, #496]	; (8008d14 <HAL_I2C_Master_Receive+0x224>)
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fff8 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e1fe      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_I2C_Master_Receive+0x50>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e1f7      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d007      	beq.n	8008b66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2222      	movs	r2, #34	; 0x22
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2210      	movs	r2, #16
 8008b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	893a      	ldrh	r2, [r7, #8]
 8008b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a5c      	ldr	r2, [pc, #368]	; (8008d18 <HAL_I2C_Master_Receive+0x228>)
 8008ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ba8:	8979      	ldrh	r1, [r7, #10]
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 fd66 	bl	8009680 <I2C_MasterRequestRead>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e1b8      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d113      	bne.n	8008bee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	623b      	str	r3, [r7, #32]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	623b      	str	r3, [r7, #32]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	623b      	str	r3, [r7, #32]
 8008bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e18c      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d11b      	bne.n	8008c2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	e16c      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d11b      	bne.n	8008c6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	e14c      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c94:	e138      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	f200 80f1 	bhi.w	8008e82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d123      	bne.n	8008cf0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f001 f88b 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e139      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691a      	ldr	r2, [r3, #16]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cee:	e10b      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d14e      	bne.n	8008d96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4906      	ldr	r1, [pc, #24]	; (8008d1c <HAL_I2C_Master_Receive+0x22c>)
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 ff08 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e10e      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
 8008d12:	bf00      	nop
 8008d14:	00100002 	.word	0x00100002
 8008d18:	ffff0000 	.word	0xffff0000
 8008d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d94:	e0b8      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4966      	ldr	r1, [pc, #408]	; (8008f38 <HAL_I2C_Master_Receive+0x448>)
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 feb9 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0bf      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	494f      	ldr	r1, [pc, #316]	; (8008f38 <HAL_I2C_Master_Receive+0x448>)
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fe8b 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e091      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e80:	e042      	b.n	8008f08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 ff9e 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e04c      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d118      	bne.n	8008f08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f47f aec2 	bne.w	8008c96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3728      	adds	r7, #40	; 0x28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	00010004 	.word	0x00010004

08008f3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	817b      	strh	r3, [r7, #10]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	813b      	strh	r3, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f56:	f7fd fae3 	bl	8006520 <HAL_GetTick>
 8008f5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	f040 80d9 	bne.w	800911c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2319      	movs	r3, #25
 8008f70:	2201      	movs	r2, #1
 8008f72:	496d      	ldr	r1, [pc, #436]	; (8009128 <HAL_I2C_Mem_Write+0x1ec>)
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fdcf 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008f80:	2302      	movs	r3, #2
 8008f82:	e0cc      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_I2C_Mem_Write+0x56>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e0c5      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d007      	beq.n	8008fb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0201 	orr.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2221      	movs	r2, #33	; 0x21
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2240      	movs	r2, #64	; 0x40
 8008fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a3a      	ldr	r2, [r7, #32]
 8008fe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4a4d      	ldr	r2, [pc, #308]	; (800912c <HAL_I2C_Mem_Write+0x1f0>)
 8008ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ffa:	88f8      	ldrh	r0, [r7, #6]
 8008ffc:	893a      	ldrh	r2, [r7, #8]
 8008ffe:	8979      	ldrh	r1, [r7, #10]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4603      	mov	r3, r0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fc06 	bl	800981c <I2C_RequestMemoryWrite>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d052      	beq.n	80090bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e081      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fe50 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	2b04      	cmp	r3, #4
 8009030:	d107      	bne.n	8009042 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e06b      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b04      	cmp	r3, #4
 8009082:	d11b      	bne.n	80090bc <HAL_I2C_Mem_Write+0x180>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009088:	2b00      	cmp	r3, #0
 800908a:	d017      	beq.n	80090bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	781a      	ldrb	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1aa      	bne.n	800901a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fe3c 	bl	8009d46 <I2C_WaitOnBTFFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00d      	beq.n	80090f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d107      	bne.n	80090ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e016      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e000      	b.n	800911e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800911c:	2302      	movs	r3, #2
  }
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	00100002 	.word	0x00100002
 800912c:	ffff0000 	.word	0xffff0000

08009130 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	4603      	mov	r3, r0
 8009140:	817b      	strh	r3, [r7, #10]
 8009142:	460b      	mov	r3, r1
 8009144:	813b      	strh	r3, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800914a:	f7fd f9e9 	bl	8006520 <HAL_GetTick>
 800914e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b20      	cmp	r3, #32
 800915a:	f040 8208 	bne.w	800956e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2319      	movs	r3, #25
 8009164:	2201      	movs	r2, #1
 8009166:	497b      	ldr	r1, [pc, #492]	; (8009354 <HAL_I2C_Mem_Read+0x224>)
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fcd5 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009174:	2302      	movs	r3, #2
 8009176:	e1fb      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_I2C_Mem_Read+0x56>
 8009182:	2302      	movs	r3, #2
 8009184:	e1f4      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b01      	cmp	r3, #1
 800919a:	d007      	beq.n	80091ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2222      	movs	r2, #34	; 0x22
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2240      	movs	r2, #64	; 0x40
 80091c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80091dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a5b      	ldr	r2, [pc, #364]	; (8009358 <HAL_I2C_Mem_Read+0x228>)
 80091ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091ee:	88f8      	ldrh	r0, [r7, #6]
 80091f0:	893a      	ldrh	r2, [r7, #8]
 80091f2:	8979      	ldrh	r1, [r7, #10]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4603      	mov	r3, r0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fba2 	bl	8009948 <I2C_RequestMemoryRead>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e1b0      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d113      	bne.n	800923e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009216:	2300      	movs	r3, #0
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	623b      	str	r3, [r7, #32]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	623b      	str	r3, [r7, #32]
 800922a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	e184      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009242:	2b01      	cmp	r3, #1
 8009244:	d11b      	bne.n	800927e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e164      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009282:	2b02      	cmp	r3, #2
 8009284:	d11b      	bne.n	80092be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009294:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092a6:	2300      	movs	r3, #0
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	e144      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80092d4:	e138      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	2b03      	cmp	r3, #3
 80092dc:	f200 80f1 	bhi.w	80094c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d123      	bne.n	8009330 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fd6b 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e139      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009318:	3b01      	subs	r3, #1
 800931a:	b29a      	uxth	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800932e:	e10b      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009334:	2b02      	cmp	r3, #2
 8009336:	d14e      	bne.n	80093d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2200      	movs	r2, #0
 8009340:	4906      	ldr	r1, [pc, #24]	; (800935c <HAL_I2C_Mem_Read+0x22c>)
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 fbe8 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e10e      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
 8009352:	bf00      	nop
 8009354:	00100002 	.word	0x00100002
 8009358:	ffff0000 	.word	0xffff0000
 800935c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800936e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093d4:	e0b8      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	2200      	movs	r2, #0
 80093de:	4966      	ldr	r1, [pc, #408]	; (8009578 <HAL_I2C_Mem_Read+0x448>)
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb99 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0bf      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	2200      	movs	r2, #0
 800943a:	494f      	ldr	r1, [pc, #316]	; (8009578 <HAL_I2C_Mem_Read+0x448>)
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fb6b 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e091      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800945a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691a      	ldr	r2, [r3, #16]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094c0:	e042      	b.n	8009548 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fc7e 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e04c      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691a      	ldr	r2, [r3, #16]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b04      	cmp	r3, #4
 8009514:	d118      	bne.n	8009548 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	f47f aec2 	bne.w	80092d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	e000      	b.n	8009570 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800956e:	2302      	movs	r3, #2
  }
}
 8009570:	4618      	mov	r0, r3
 8009572:	3728      	adds	r7, #40	; 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00010004 	.word	0x00010004

0800957c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	460b      	mov	r3, r1
 800958a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b08      	cmp	r3, #8
 8009596:	d006      	beq.n	80095a6 <I2C_MasterRequestWrite+0x2a>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d003      	beq.n	80095a6 <I2C_MasterRequestWrite+0x2a>
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095a4:	d108      	bne.n	80095b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	e00b      	b.n	80095d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	2b12      	cmp	r3, #18
 80095be:	d107      	bne.n	80095d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 fa9b 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f6:	d103      	bne.n	8009600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e035      	b.n	8009670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800960c:	d108      	bne.n	8009620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800960e:	897b      	ldrh	r3, [r7, #10]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800961c:	611a      	str	r2, [r3, #16]
 800961e:	e01b      	b.n	8009658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009620:	897b      	ldrh	r3, [r7, #10]
 8009622:	11db      	asrs	r3, r3, #7
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f063 030f 	orn	r3, r3, #15
 8009630:	b2da      	uxtb	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	490e      	ldr	r1, [pc, #56]	; (8009678 <I2C_MasterRequestWrite+0xfc>)
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fac1 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e010      	b.n	8009670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800964e:	897b      	ldrh	r3, [r7, #10]
 8009650:	b2da      	uxtb	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4907      	ldr	r1, [pc, #28]	; (800967c <I2C_MasterRequestWrite+0x100>)
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fab1 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	00010008 	.word	0x00010008
 800967c:	00010002 	.word	0x00010002

08009680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af02      	add	r7, sp, #8
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	607a      	str	r2, [r7, #4]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	460b      	mov	r3, r1
 800968e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d006      	beq.n	80096ba <I2C_MasterRequestRead+0x3a>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d003      	beq.n	80096ba <I2C_MasterRequestRead+0x3a>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096b8:	d108      	bne.n	80096cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e00b      	b.n	80096e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	2b11      	cmp	r3, #17
 80096d2:	d107      	bne.n	80096e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fa11 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00d      	beq.n	8009718 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800970a:	d103      	bne.n	8009714 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e079      	b.n	800980c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009720:	d108      	bne.n	8009734 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009722:	897b      	ldrh	r3, [r7, #10]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	611a      	str	r2, [r3, #16]
 8009732:	e05f      	b.n	80097f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009734:	897b      	ldrh	r3, [r7, #10]
 8009736:	11db      	asrs	r3, r3, #7
 8009738:	b2db      	uxtb	r3, r3
 800973a:	f003 0306 	and.w	r3, r3, #6
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f063 030f 	orn	r3, r3, #15
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	4930      	ldr	r1, [pc, #192]	; (8009814 <I2C_MasterRequestRead+0x194>)
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fa37 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e054      	b.n	800980c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009762:	897b      	ldrh	r3, [r7, #10]
 8009764:	b2da      	uxtb	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	4929      	ldr	r1, [pc, #164]	; (8009818 <I2C_MasterRequestRead+0x198>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 fa27 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e044      	b.n	800980c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	613b      	str	r3, [r7, #16]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	613b      	str	r3, [r7, #16]
 8009796:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f9af 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00d      	beq.n	80097dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ce:	d103      	bne.n	80097d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e017      	b.n	800980c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80097dc:	897b      	ldrh	r3, [r7, #10]
 80097de:	11db      	asrs	r3, r3, #7
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 0306 	and.w	r3, r3, #6
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f063 030e 	orn	r3, r3, #14
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	4907      	ldr	r1, [pc, #28]	; (8009818 <I2C_MasterRequestRead+0x198>)
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 f9e3 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	00010008 	.word	0x00010008
 8009818:	00010002 	.word	0x00010002

0800981c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4603      	mov	r3, r0
 800982c:	817b      	strh	r3, [r7, #10]
 800982e:	460b      	mov	r3, r1
 8009830:	813b      	strh	r3, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	2200      	movs	r2, #0
 800984e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f960 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00d      	beq.n	800987a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800986c:	d103      	bne.n	8009876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e05f      	b.n	800993a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800987a:	897b      	ldrh	r3, [r7, #10]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	492d      	ldr	r1, [pc, #180]	; (8009944 <I2C_RequestMemoryWrite+0x128>)
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f998 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e04c      	b.n	800993a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b8:	6a39      	ldr	r1, [r7, #32]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fa02 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d107      	bne.n	80098de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e02b      	b.n	800993a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d105      	bne.n	80098f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098e8:	893b      	ldrh	r3, [r7, #8]
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	611a      	str	r2, [r3, #16]
 80098f2:	e021      	b.n	8009938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80098f4:	893b      	ldrh	r3, [r7, #8]
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009904:	6a39      	ldr	r1, [r7, #32]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 f9dc 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00d      	beq.n	800992e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	2b04      	cmp	r3, #4
 8009918:	d107      	bne.n	800992a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e005      	b.n	800993a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800992e:	893b      	ldrh	r3, [r7, #8]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	00010002 	.word	0x00010002

08009948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	4603      	mov	r3, r0
 8009958:	817b      	strh	r3, [r7, #10]
 800995a:	460b      	mov	r3, r1
 800995c:	813b      	strh	r3, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	2200      	movs	r2, #0
 800998a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f8c2 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00d      	beq.n	80099b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a8:	d103      	bne.n	80099b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e0aa      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099b6:	897b      	ldrh	r3, [r7, #10]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	461a      	mov	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	6a3a      	ldr	r2, [r7, #32]
 80099ca:	4952      	ldr	r1, [pc, #328]	; (8009b14 <I2C_RequestMemoryRead+0x1cc>)
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f8fa 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e097      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f4:	6a39      	ldr	r1, [r7, #32]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f964 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00d      	beq.n	8009a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d107      	bne.n	8009a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e076      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a1e:	88fb      	ldrh	r3, [r7, #6]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d105      	bne.n	8009a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a24:	893b      	ldrh	r3, [r7, #8]
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	611a      	str	r2, [r3, #16]
 8009a2e:	e021      	b.n	8009a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a30:	893b      	ldrh	r3, [r7, #8]
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a40:	6a39      	ldr	r1, [r7, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f93e 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00d      	beq.n	8009a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d107      	bne.n	8009a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e050      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a6a:	893b      	ldrh	r3, [r7, #8]
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a76:	6a39      	ldr	r1, [r7, #32]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f923 	bl	8009cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00d      	beq.n	8009aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d107      	bne.n	8009a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e035      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 f82b 	bl	8009b18 <I2C_WaitOnFlagUntilTimeout>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00d      	beq.n	8009ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad6:	d103      	bne.n	8009ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e013      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ae4:	897b      	ldrh	r3, [r7, #10]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f043 0301 	orr.w	r3, r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	6a3a      	ldr	r2, [r7, #32]
 8009af8:	4906      	ldr	r1, [pc, #24]	; (8009b14 <I2C_RequestMemoryRead+0x1cc>)
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f863 	bl	8009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	00010002 	.word	0x00010002

08009b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	4613      	mov	r3, r2
 8009b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b28:	e025      	b.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b30:	d021      	beq.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b32:	f7fc fcf5 	bl	8006520 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d302      	bcc.n	8009b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d116      	bne.n	8009b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b62:	f043 0220 	orr.w	r2, r3, #32
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e023      	b.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	0c1b      	lsrs	r3, r3, #16
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10d      	bne.n	8009b9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	43da      	mvns	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bf0c      	ite	eq
 8009b92:	2301      	moveq	r3, #1
 8009b94:	2300      	movne	r3, #0
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	e00c      	b.n	8009bb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	43da      	mvns	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	bf0c      	ite	eq
 8009bae:	2301      	moveq	r3, #1
 8009bb0:	2300      	movne	r3, #0
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d0b6      	beq.n	8009b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bd4:	e051      	b.n	8009c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be4:	d123      	bne.n	8009c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f043 0204 	orr.w	r2, r3, #4
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e046      	b.n	8009cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c34:	d021      	beq.n	8009c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c36:	f7fc fc73 	bl	8006520 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d302      	bcc.n	8009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d116      	bne.n	8009c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e020      	b.n	8009cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d10c      	bne.n	8009c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	43da      	mvns	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf14      	ite	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	2300      	moveq	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	e00b      	b.n	8009cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	43da      	mvns	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bf14      	ite	ne
 8009cb0:	2301      	movne	r3, #1
 8009cb2:	2300      	moveq	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d18d      	bne.n	8009bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cd0:	e02d      	b.n	8009d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 f8ce 	bl	8009e74 <I2C_IsAcknowledgeFailed>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e02d      	b.n	8009d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ce8:	d021      	beq.n	8009d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cea:	f7fc fc19 	bl	8006520 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d302      	bcc.n	8009d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d116      	bne.n	8009d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2220      	movs	r2, #32
 8009d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f043 0220 	orr.w	r2, r3, #32
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e007      	b.n	8009d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d38:	2b80      	cmp	r3, #128	; 0x80
 8009d3a:	d1ca      	bne.n	8009cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d52:	e02d      	b.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f88d 	bl	8009e74 <I2C_IsAcknowledgeFailed>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e02d      	b.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6a:	d021      	beq.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d6c:	f7fc fbd8 	bl	8006520 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d302      	bcc.n	8009d82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d116      	bne.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	f043 0220 	orr.w	r2, r3, #32
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e007      	b.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d1ca      	bne.n	8009d54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dd4:	e042      	b.n	8009e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d119      	bne.n	8009e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f06f 0210 	mvn.w	r2, #16
 8009dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e029      	b.n	8009e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e18:	f7fc fb82 	bl	8006520 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d302      	bcc.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d116      	bne.n	8009e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	f043 0220 	orr.w	r2, r3, #32
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e007      	b.n	8009e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	d1b5      	bne.n	8009dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e8a:	d11b      	bne.n	8009ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	f043 0204 	orr.w	r2, r3, #4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e000      	b.n	8009ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
	...

08009ed4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e128      	b.n	800a138 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a90      	ldr	r2, [pc, #576]	; (800a140 <HAL_I2S_Init+0x26c>)
 8009efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7f7 ff23 	bl	8001d4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009f1c:	f023 030f 	bic.w	r3, r3, #15
 8009f20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2202      	movs	r2, #2
 8009f28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d060      	beq.n	8009ff4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009f3a:	2310      	movs	r3, #16
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e001      	b.n	8009f44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009f40:	2320      	movs	r3, #32
 8009f42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d802      	bhi.n	8009f52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8009f52:	2001      	movs	r0, #1
 8009f54:	f001 f9a0 	bl	800b298 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f58:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f62:	d125      	bne.n	8009fb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d010      	beq.n	8009f8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f88:	3305      	adds	r3, #5
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	e01f      	b.n	8009fce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009faa:	3305      	adds	r3, #5
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	e00e      	b.n	8009fce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fca:	3305      	adds	r3, #5
 8009fcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4a5c      	ldr	r2, [pc, #368]	; (800a144 <HAL_I2S_Init+0x270>)
 8009fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd6:	08db      	lsrs	r3, r3, #3
 8009fd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	085b      	lsrs	r3, r3, #1
 8009fea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	61bb      	str	r3, [r7, #24]
 8009ff2:	e003      	b.n	8009ffc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d902      	bls.n	800a008 <HAL_I2S_Init+0x134>
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	2bff      	cmp	r3, #255	; 0xff
 800a006:	d907      	bls.n	800a018 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00c:	f043 0210 	orr.w	r2, r3, #16
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e08f      	b.n	800a138 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691a      	ldr	r2, [r3, #16]
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	ea42 0103 	orr.w	r1, r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	430a      	orrs	r2, r1
 800a02a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a036:	f023 030f 	bic.w	r3, r3, #15
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6851      	ldr	r1, [r2, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6892      	ldr	r2, [r2, #8]
 800a042:	4311      	orrs	r1, r2
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68d2      	ldr	r2, [r2, #12]
 800a048:	4311      	orrs	r1, r2
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6992      	ldr	r2, [r2, #24]
 800a04e:	430a      	orrs	r2, r1
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a05a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d161      	bne.n	800a128 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a38      	ldr	r2, [pc, #224]	; (800a148 <HAL_I2S_Init+0x274>)
 800a068:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a37      	ldr	r2, [pc, #220]	; (800a14c <HAL_I2S_Init+0x278>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d101      	bne.n	800a078 <HAL_I2S_Init+0x1a4>
 800a074:	4b36      	ldr	r3, [pc, #216]	; (800a150 <HAL_I2S_Init+0x27c>)
 800a076:	e001      	b.n	800a07c <HAL_I2S_Init+0x1a8>
 800a078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	6812      	ldr	r2, [r2, #0]
 800a082:	4932      	ldr	r1, [pc, #200]	; (800a14c <HAL_I2S_Init+0x278>)
 800a084:	428a      	cmp	r2, r1
 800a086:	d101      	bne.n	800a08c <HAL_I2S_Init+0x1b8>
 800a088:	4a31      	ldr	r2, [pc, #196]	; (800a150 <HAL_I2S_Init+0x27c>)
 800a08a:	e001      	b.n	800a090 <HAL_I2S_Init+0x1bc>
 800a08c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800a090:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a094:	f023 030f 	bic.w	r3, r3, #15
 800a098:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a2b      	ldr	r2, [pc, #172]	; (800a14c <HAL_I2S_Init+0x278>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d101      	bne.n	800a0a8 <HAL_I2S_Init+0x1d4>
 800a0a4:	4b2a      	ldr	r3, [pc, #168]	; (800a150 <HAL_I2S_Init+0x27c>)
 800a0a6:	e001      	b.n	800a0ac <HAL_I2S_Init+0x1d8>
 800a0a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a25      	ldr	r2, [pc, #148]	; (800a14c <HAL_I2S_Init+0x278>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d101      	bne.n	800a0be <HAL_I2S_Init+0x1ea>
 800a0ba:	4b25      	ldr	r3, [pc, #148]	; (800a150 <HAL_I2S_Init+0x27c>)
 800a0bc:	e001      	b.n	800a0c2 <HAL_I2S_Init+0x1ee>
 800a0be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ce:	d003      	beq.n	800a0d8 <HAL_I2S_Init+0x204>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800a0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	e001      	b.n	800a0e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a102:	4313      	orrs	r3, r2
 800a104:	b29a      	uxth	r2, r3
 800a106:	897b      	ldrh	r3, [r7, #10]
 800a108:	4313      	orrs	r3, r2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a110:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a0d      	ldr	r2, [pc, #52]	; (800a14c <HAL_I2S_Init+0x278>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d101      	bne.n	800a120 <HAL_I2S_Init+0x24c>
 800a11c:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <HAL_I2S_Init+0x27c>)
 800a11e:	e001      	b.n	800a124 <HAL_I2S_Init+0x250>
 800a120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a124:	897a      	ldrh	r2, [r7, #10]
 800a126:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	0800a24b 	.word	0x0800a24b
 800a144:	cccccccd 	.word	0xcccccccd
 800a148:	0800a361 	.word	0x0800a361
 800a14c:	40003800 	.word	0x40003800
 800a150:	40003400 	.word	0x40003400

0800a154 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	881a      	ldrh	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	1c9a      	adds	r2, r3, #2
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10e      	bne.n	800a1e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a1d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff ffb8 	bl	800a154 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fe:	b292      	uxth	r2, r2
 800a200:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	1c9a      	adds	r2, r3, #2
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a210:	b29b      	uxth	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a21e:	b29b      	uxth	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10e      	bne.n	800a242 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a232:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff ff93 	bl	800a168 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b086      	sub	sp, #24
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b04      	cmp	r3, #4
 800a264:	d13a      	bne.n	800a2dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d109      	bne.n	800a284 <I2S_IRQHandler+0x3a>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b40      	cmp	r3, #64	; 0x40
 800a27c:	d102      	bne.n	800a284 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff ffb4 	bl	800a1ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	d126      	bne.n	800a2dc <I2S_IRQHandler+0x92>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f003 0320 	and.w	r3, r3, #32
 800a298:	2b20      	cmp	r3, #32
 800a29a:	d11f      	bne.n	800a2dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a2aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	613b      	str	r3, [r7, #16]
 800a2c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ce:	f043 0202 	orr.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7ff ff50 	bl	800a17c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d136      	bne.n	800a356 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d109      	bne.n	800a306 <I2S_IRQHandler+0xbc>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fc:	2b80      	cmp	r3, #128	; 0x80
 800a2fe:	d102      	bne.n	800a306 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff ff45 	bl	800a190 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d122      	bne.n	800a356 <I2S_IRQHandler+0x10c>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b20      	cmp	r3, #32
 800a31c:	d11b      	bne.n	800a356 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a32c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a348:	f043 0204 	orr.w	r2, r3, #4
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff ff13 	bl	800a17c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a356:	bf00      	nop
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4aa2      	ldr	r2, [pc, #648]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d101      	bne.n	800a37e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a37a:	4ba2      	ldr	r3, [pc, #648]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a37c:	e001      	b.n	800a382 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a37e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a9b      	ldr	r2, [pc, #620]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d101      	bne.n	800a39c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a398:	4b9a      	ldr	r3, [pc, #616]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a39a:	e001      	b.n	800a3a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a39c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3ac:	d004      	beq.n	800a3b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f040 8099 	bne.w	800a4ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d107      	bne.n	800a3d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f925 	bl	800a61c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d107      	bne.n	800a3ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f9c8 	bl	800a77c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f2:	2b40      	cmp	r3, #64	; 0x40
 800a3f4:	d13a      	bne.n	800a46c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f003 0320 	and.w	r3, r3, #32
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d035      	beq.n	800a46c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a7e      	ldr	r2, [pc, #504]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d101      	bne.n	800a40e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a40a:	4b7e      	ldr	r3, [pc, #504]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a40c:	e001      	b.n	800a412 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a40e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4979      	ldr	r1, [pc, #484]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a41a:	428b      	cmp	r3, r1
 800a41c:	d101      	bne.n	800a422 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a41e:	4b79      	ldr	r3, [pc, #484]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a420:	e001      	b.n	800a426 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a42a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a43a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45e:	f043 0202 	orr.w	r2, r3, #2
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff fe88 	bl	800a17c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0308 	and.w	r3, r3, #8
 800a472:	2b08      	cmp	r3, #8
 800a474:	f040 80be 	bne.w	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80b8 	beq.w	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a492:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a59      	ldr	r2, [pc, #356]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d101      	bne.n	800a4a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a49e:	4b59      	ldr	r3, [pc, #356]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a4a0:	e001      	b.n	800a4a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a4a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4954      	ldr	r1, [pc, #336]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a4ae:	428b      	cmp	r3, r1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a4b2:	4b54      	ldr	r3, [pc, #336]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a4b4:	e001      	b.n	800a4ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a4b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a4be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60bb      	str	r3, [r7, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	60bb      	str	r3, [r7, #8]
 800a4cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	f043 0204 	orr.w	r2, r3, #4
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fe4a 	bl	800a17c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a4e8:	e084      	b.n	800a5f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d107      	bne.n	800a504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f8be 	bl	800a680 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d107      	bne.n	800a51e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f8fd 	bl	800a718 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	d12f      	bne.n	800a588 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d02a      	beq.n	800a588 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a540:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a2e      	ldr	r2, [pc, #184]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d101      	bne.n	800a550 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a54c:	4b2d      	ldr	r3, [pc, #180]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a54e:	e001      	b.n	800a554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4929      	ldr	r1, [pc, #164]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a55c:	428b      	cmp	r3, r1
 800a55e:	d101      	bne.n	800a564 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a560:	4b28      	ldr	r3, [pc, #160]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a562:	e001      	b.n	800a568 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a56c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57a:	f043 0202 	orr.w	r2, r3, #2
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fdfa 	bl	800a17c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f003 0308 	and.w	r3, r3, #8
 800a58e:	2b08      	cmp	r3, #8
 800a590:	d131      	bne.n	800a5f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02c      	beq.n	800a5f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a17      	ldr	r2, [pc, #92]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d101      	bne.n	800a5aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800a5a6:	4b17      	ldr	r3, [pc, #92]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a5a8:	e001      	b.n	800a5ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800a5aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4912      	ldr	r1, [pc, #72]	; (800a600 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a5b6:	428b      	cmp	r3, r1
 800a5b8:	d101      	bne.n	800a5be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800a5ba:	4b12      	ldr	r3, [pc, #72]	; (800a604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a5bc:	e001      	b.n	800a5c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800a5be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a5c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a5c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5d6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e4:	f043 0204 	orr.w	r2, r3, #4
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fdc5 	bl	800a17c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a5f2:	e000      	b.n	800a5f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a5f4:	bf00      	nop
}
 800a5f6:	bf00      	nop
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	40003800 	.word	0x40003800
 800a604:	40003400 	.word	0x40003400

0800a608 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	1c99      	adds	r1, r3, #2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6251      	str	r1, [r2, #36]	; 0x24
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d113      	bne.n	800a676 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a65c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a662:	b29b      	uxth	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ffc9 	bl	800a608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	1c99      	adds	r1, r3, #2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	6251      	str	r1, [r2, #36]	; 0x24
 800a692:	8819      	ldrh	r1, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a1d      	ldr	r2, [pc, #116]	; (800a710 <I2SEx_TxISR_I2SExt+0x90>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d101      	bne.n	800a6a2 <I2SEx_TxISR_I2SExt+0x22>
 800a69e:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <I2SEx_TxISR_I2SExt+0x94>)
 800a6a0:	e001      	b.n	800a6a6 <I2SEx_TxISR_I2SExt+0x26>
 800a6a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6a6:	460a      	mov	r2, r1
 800a6a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d121      	bne.n	800a706 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a12      	ldr	r2, [pc, #72]	; (800a710 <I2SEx_TxISR_I2SExt+0x90>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d101      	bne.n	800a6d0 <I2SEx_TxISR_I2SExt+0x50>
 800a6cc:	4b11      	ldr	r3, [pc, #68]	; (800a714 <I2SEx_TxISR_I2SExt+0x94>)
 800a6ce:	e001      	b.n	800a6d4 <I2SEx_TxISR_I2SExt+0x54>
 800a6d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	490d      	ldr	r1, [pc, #52]	; (800a710 <I2SEx_TxISR_I2SExt+0x90>)
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	d101      	bne.n	800a6e4 <I2SEx_TxISR_I2SExt+0x64>
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <I2SEx_TxISR_I2SExt+0x94>)
 800a6e2:	e001      	b.n	800a6e8 <I2SEx_TxISR_I2SExt+0x68>
 800a6e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a6e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d106      	bne.n	800a706 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ff81 	bl	800a608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40003800 	.word	0x40003800
 800a714:	40003400 	.word	0x40003400

0800a718 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68d8      	ldr	r0, [r3, #12]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	1c99      	adds	r1, r3, #2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a730:	b282      	uxth	r2, r0
 800a732:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a738:	b29b      	uxth	r3, r3
 800a73a:	3b01      	subs	r3, #1
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a746:	b29b      	uxth	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d113      	bne.n	800a774 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a75a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a760:	b29b      	uxth	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff ff4a 	bl	800a608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a20      	ldr	r2, [pc, #128]	; (800a80c <I2SEx_RxISR_I2SExt+0x90>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d101      	bne.n	800a792 <I2SEx_RxISR_I2SExt+0x16>
 800a78e:	4b20      	ldr	r3, [pc, #128]	; (800a810 <I2SEx_RxISR_I2SExt+0x94>)
 800a790:	e001      	b.n	800a796 <I2SEx_RxISR_I2SExt+0x1a>
 800a792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a796:	68d8      	ldr	r0, [r3, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	1c99      	adds	r1, r3, #2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a7a2:	b282      	uxth	r2, r0
 800a7a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d121      	bne.n	800a802 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a12      	ldr	r2, [pc, #72]	; (800a80c <I2SEx_RxISR_I2SExt+0x90>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d101      	bne.n	800a7cc <I2SEx_RxISR_I2SExt+0x50>
 800a7c8:	4b11      	ldr	r3, [pc, #68]	; (800a810 <I2SEx_RxISR_I2SExt+0x94>)
 800a7ca:	e001      	b.n	800a7d0 <I2SEx_RxISR_I2SExt+0x54>
 800a7cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	490d      	ldr	r1, [pc, #52]	; (800a80c <I2SEx_RxISR_I2SExt+0x90>)
 800a7d8:	428b      	cmp	r3, r1
 800a7da:	d101      	bne.n	800a7e0 <I2SEx_RxISR_I2SExt+0x64>
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <I2SEx_RxISR_I2SExt+0x94>)
 800a7de:	e001      	b.n	800a7e4 <I2SEx_RxISR_I2SExt+0x68>
 800a7e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a7e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d106      	bne.n	800a802 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff ff03 	bl	800a608 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40003800 	.word	0x40003800
 800a810:	40003400 	.word	0x40003400

0800a814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e264      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d075      	beq.n	800a91e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a832:	4ba3      	ldr	r3, [pc, #652]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 030c 	and.w	r3, r3, #12
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d00c      	beq.n	800a858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a83e:	4ba0      	ldr	r3, [pc, #640]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a846:	2b08      	cmp	r3, #8
 800a848:	d112      	bne.n	800a870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a84a:	4b9d      	ldr	r3, [pc, #628]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a856:	d10b      	bne.n	800a870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a858:	4b99      	ldr	r3, [pc, #612]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d05b      	beq.n	800a91c <HAL_RCC_OscConfig+0x108>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d157      	bne.n	800a91c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e23f      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a878:	d106      	bne.n	800a888 <HAL_RCC_OscConfig+0x74>
 800a87a:	4b91      	ldr	r3, [pc, #580]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a90      	ldr	r2, [pc, #576]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	e01d      	b.n	800a8c4 <HAL_RCC_OscConfig+0xb0>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a890:	d10c      	bne.n	800a8ac <HAL_RCC_OscConfig+0x98>
 800a892:	4b8b      	ldr	r3, [pc, #556]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a8a      	ldr	r2, [pc, #552]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	4b88      	ldr	r3, [pc, #544]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a87      	ldr	r2, [pc, #540]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	e00b      	b.n	800a8c4 <HAL_RCC_OscConfig+0xb0>
 800a8ac:	4b84      	ldr	r3, [pc, #528]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a83      	ldr	r2, [pc, #524]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	4b81      	ldr	r3, [pc, #516]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a80      	ldr	r2, [pc, #512]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d013      	beq.n	800a8f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8cc:	f7fb fe28 	bl	8006520 <HAL_GetTick>
 800a8d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8d4:	f7fb fe24 	bl	8006520 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b64      	cmp	r3, #100	; 0x64
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e204      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8e6:	4b76      	ldr	r3, [pc, #472]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f0      	beq.n	800a8d4 <HAL_RCC_OscConfig+0xc0>
 800a8f2:	e014      	b.n	800a91e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8f4:	f7fb fe14 	bl	8006520 <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8fc:	f7fb fe10 	bl	8006520 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b64      	cmp	r3, #100	; 0x64
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e1f0      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a90e:	4b6c      	ldr	r3, [pc, #432]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f0      	bne.n	800a8fc <HAL_RCC_OscConfig+0xe8>
 800a91a:	e000      	b.n	800a91e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a91c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d063      	beq.n	800a9f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a92a:	4b65      	ldr	r3, [pc, #404]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f003 030c 	and.w	r3, r3, #12
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00b      	beq.n	800a94e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a936:	4b62      	ldr	r3, [pc, #392]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a93e:	2b08      	cmp	r3, #8
 800a940:	d11c      	bne.n	800a97c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a942:	4b5f      	ldr	r3, [pc, #380]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d116      	bne.n	800a97c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a94e:	4b5c      	ldr	r3, [pc, #368]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d005      	beq.n	800a966 <HAL_RCC_OscConfig+0x152>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d001      	beq.n	800a966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e1c4      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a966:	4b56      	ldr	r3, [pc, #344]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	4952      	ldr	r1, [pc, #328]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a976:	4313      	orrs	r3, r2
 800a978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a97a:	e03a      	b.n	800a9f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d020      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a984:	4b4f      	ldr	r3, [pc, #316]	; (800aac4 <HAL_RCC_OscConfig+0x2b0>)
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a98a:	f7fb fdc9 	bl	8006520 <HAL_GetTick>
 800a98e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a990:	e008      	b.n	800a9a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a992:	f7fb fdc5 	bl	8006520 <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d901      	bls.n	800a9a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e1a5      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9a4:	4b46      	ldr	r3, [pc, #280]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0f0      	beq.n	800a992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9b0:	4b43      	ldr	r3, [pc, #268]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4940      	ldr	r1, [pc, #256]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	600b      	str	r3, [r1, #0]
 800a9c4:	e015      	b.n	800a9f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9c6:	4b3f      	ldr	r3, [pc, #252]	; (800aac4 <HAL_RCC_OscConfig+0x2b0>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9cc:	f7fb fda8 	bl	8006520 <HAL_GetTick>
 800a9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9d2:	e008      	b.n	800a9e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9d4:	f7fb fda4 	bl	8006520 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e184      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9e6:	4b36      	ldr	r3, [pc, #216]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0302 	and.w	r3, r3, #2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1f0      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d030      	beq.n	800aa60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa06:	4b30      	ldr	r3, [pc, #192]	; (800aac8 <HAL_RCC_OscConfig+0x2b4>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa0c:	f7fb fd88 	bl	8006520 <HAL_GetTick>
 800aa10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa12:	e008      	b.n	800aa26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa14:	f7fb fd84 	bl	8006520 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d901      	bls.n	800aa26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e164      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa26:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0f0      	beq.n	800aa14 <HAL_RCC_OscConfig+0x200>
 800aa32:	e015      	b.n	800aa60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <HAL_RCC_OscConfig+0x2b4>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa3a:	f7fb fd71 	bl	8006520 <HAL_GetTick>
 800aa3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa40:	e008      	b.n	800aa54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa42:	f7fb fd6d 	bl	8006520 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d901      	bls.n	800aa54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e14d      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa54:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f0      	bne.n	800aa42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 80a0 	beq.w	800abae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10f      	bne.n	800aa9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	4b0f      	ldr	r3, [pc, #60]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	4a0e      	ldr	r2, [pc, #56]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa8e:	4b0c      	ldr	r3, [pc, #48]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa96:	60bb      	str	r3, [r7, #8]
 800aa98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9e:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <HAL_RCC_OscConfig+0x2b8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d121      	bne.n	800aaee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaaa:	4b08      	ldr	r3, [pc, #32]	; (800aacc <HAL_RCC_OscConfig+0x2b8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a07      	ldr	r2, [pc, #28]	; (800aacc <HAL_RCC_OscConfig+0x2b8>)
 800aab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab6:	f7fb fd33 	bl	8006520 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabc:	e011      	b.n	800aae2 <HAL_RCC_OscConfig+0x2ce>
 800aabe:	bf00      	nop
 800aac0:	40023800 	.word	0x40023800
 800aac4:	42470000 	.word	0x42470000
 800aac8:	42470e80 	.word	0x42470e80
 800aacc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad0:	f7fb fd26 	bl	8006520 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d901      	bls.n	800aae2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e106      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae2:	4b85      	ldr	r3, [pc, #532]	; (800acf8 <HAL_RCC_OscConfig+0x4e4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0f0      	beq.n	800aad0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d106      	bne.n	800ab04 <HAL_RCC_OscConfig+0x2f0>
 800aaf6:	4b81      	ldr	r3, [pc, #516]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800aaf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafa:	4a80      	ldr	r2, [pc, #512]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800aafc:	f043 0301 	orr.w	r3, r3, #1
 800ab00:	6713      	str	r3, [r2, #112]	; 0x70
 800ab02:	e01c      	b.n	800ab3e <HAL_RCC_OscConfig+0x32a>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	d10c      	bne.n	800ab26 <HAL_RCC_OscConfig+0x312>
 800ab0c:	4b7b      	ldr	r3, [pc, #492]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab10:	4a7a      	ldr	r2, [pc, #488]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab12:	f043 0304 	orr.w	r3, r3, #4
 800ab16:	6713      	str	r3, [r2, #112]	; 0x70
 800ab18:	4b78      	ldr	r3, [pc, #480]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1c:	4a77      	ldr	r2, [pc, #476]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab1e:	f043 0301 	orr.w	r3, r3, #1
 800ab22:	6713      	str	r3, [r2, #112]	; 0x70
 800ab24:	e00b      	b.n	800ab3e <HAL_RCC_OscConfig+0x32a>
 800ab26:	4b75      	ldr	r3, [pc, #468]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	4a74      	ldr	r2, [pc, #464]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab2c:	f023 0301 	bic.w	r3, r3, #1
 800ab30:	6713      	str	r3, [r2, #112]	; 0x70
 800ab32:	4b72      	ldr	r3, [pc, #456]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab36:	4a71      	ldr	r2, [pc, #452]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab38:	f023 0304 	bic.w	r3, r3, #4
 800ab3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d015      	beq.n	800ab72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7fb fceb 	bl	8006520 <HAL_GetTick>
 800ab4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab4c:	e00a      	b.n	800ab64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab4e:	f7fb fce7 	bl	8006520 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e0c5      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab64:	4b65      	ldr	r3, [pc, #404]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0ee      	beq.n	800ab4e <HAL_RCC_OscConfig+0x33a>
 800ab70:	e014      	b.n	800ab9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab72:	f7fb fcd5 	bl	8006520 <HAL_GetTick>
 800ab76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab78:	e00a      	b.n	800ab90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab7a:	f7fb fcd1 	bl	8006520 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e0af      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab90:	4b5a      	ldr	r3, [pc, #360]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ab92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ee      	bne.n	800ab7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d105      	bne.n	800abae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aba2:	4b56      	ldr	r3, [pc, #344]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	4a55      	ldr	r2, [pc, #340]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800aba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 809b 	beq.w	800acee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abb8:	4b50      	ldr	r3, [pc, #320]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f003 030c 	and.w	r3, r3, #12
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d05c      	beq.n	800ac7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d141      	bne.n	800ac50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abcc:	4b4c      	ldr	r3, [pc, #304]	; (800ad00 <HAL_RCC_OscConfig+0x4ec>)
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abd2:	f7fb fca5 	bl	8006520 <HAL_GetTick>
 800abd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abd8:	e008      	b.n	800abec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abda:	f7fb fca1 	bl	8006520 <HAL_GetTick>
 800abde:	4602      	mov	r2, r0
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e081      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abec:	4b43      	ldr	r3, [pc, #268]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1f0      	bne.n	800abda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	019b      	lsls	r3, r3, #6
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0e:	085b      	lsrs	r3, r3, #1
 800ac10:	3b01      	subs	r3, #1
 800ac12:	041b      	lsls	r3, r3, #16
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	061b      	lsls	r3, r3, #24
 800ac1c:	4937      	ldr	r1, [pc, #220]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac22:	4b37      	ldr	r3, [pc, #220]	; (800ad00 <HAL_RCC_OscConfig+0x4ec>)
 800ac24:	2201      	movs	r2, #1
 800ac26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac28:	f7fb fc7a 	bl	8006520 <HAL_GetTick>
 800ac2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac2e:	e008      	b.n	800ac42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac30:	f7fb fc76 	bl	8006520 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d901      	bls.n	800ac42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e056      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac42:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0f0      	beq.n	800ac30 <HAL_RCC_OscConfig+0x41c>
 800ac4e:	e04e      	b.n	800acee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac50:	4b2b      	ldr	r3, [pc, #172]	; (800ad00 <HAL_RCC_OscConfig+0x4ec>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac56:	f7fb fc63 	bl	8006520 <HAL_GetTick>
 800ac5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac5c:	e008      	b.n	800ac70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac5e:	f7fb fc5f 	bl	8006520 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e03f      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac70:	4b22      	ldr	r3, [pc, #136]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f0      	bne.n	800ac5e <HAL_RCC_OscConfig+0x44a>
 800ac7c:	e037      	b.n	800acee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e032      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac8a:	4b1c      	ldr	r3, [pc, #112]	; (800acfc <HAL_RCC_OscConfig+0x4e8>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d028      	beq.n	800acea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d121      	bne.n	800acea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d11a      	bne.n	800acea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800acba:	4013      	ands	r3, r2
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d111      	bne.n	800acea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	3b01      	subs	r3, #1
 800acd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d107      	bne.n	800acea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d001      	beq.n	800acee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40007000 	.word	0x40007000
 800acfc:	40023800 	.word	0x40023800
 800ad00:	42470060 	.word	0x42470060

0800ad04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0cc      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad18:	4b68      	ldr	r3, [pc, #416]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d90c      	bls.n	800ad40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b65      	ldr	r3, [pc, #404]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad2e:	4b63      	ldr	r3, [pc, #396]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d001      	beq.n	800ad40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0b8      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d020      	beq.n	800ad8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad58:	4b59      	ldr	r3, [pc, #356]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	4a58      	ldr	r2, [pc, #352]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0308 	and.w	r3, r3, #8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad70:	4b53      	ldr	r3, [pc, #332]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	4a52      	ldr	r2, [pc, #328]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad7c:	4b50      	ldr	r3, [pc, #320]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	494d      	ldr	r1, [pc, #308]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d044      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d107      	bne.n	800adb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ada2:	4b47      	ldr	r3, [pc, #284]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d119      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e07f      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d003      	beq.n	800adc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d107      	bne.n	800add2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adc2:	4b3f      	ldr	r3, [pc, #252]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e06f      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800add2:	4b3b      	ldr	r3, [pc, #236]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e067      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ade2:	4b37      	ldr	r3, [pc, #220]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f023 0203 	bic.w	r2, r3, #3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4934      	ldr	r1, [pc, #208]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adf4:	f7fb fb94 	bl	8006520 <HAL_GetTick>
 800adf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adfa:	e00a      	b.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adfc:	f7fb fb90 	bl	8006520 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e04f      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae12:	4b2b      	ldr	r3, [pc, #172]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f003 020c 	and.w	r2, r3, #12
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d1eb      	bne.n	800adfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae24:	4b25      	ldr	r3, [pc, #148]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d20c      	bcs.n	800ae4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae32:	4b22      	ldr	r3, [pc, #136]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3a:	4b20      	ldr	r3, [pc, #128]	; (800aebc <HAL_RCC_ClockConfig+0x1b8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d001      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e032      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae58:	4b19      	ldr	r3, [pc, #100]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4916      	ldr	r1, [pc, #88]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	490e      	ldr	r1, [pc, #56]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae8a:	f000 f821 	bl	800aed0 <HAL_RCC_GetSysClockFreq>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	091b      	lsrs	r3, r3, #4
 800ae96:	f003 030f 	and.w	r3, r3, #15
 800ae9a:	490a      	ldr	r1, [pc, #40]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae9c:	5ccb      	ldrb	r3, [r1, r3]
 800ae9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aea2:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800aea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aea6:	4b09      	ldr	r3, [pc, #36]	; (800aecc <HAL_RCC_ClockConfig+0x1c8>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fb faf4 	bl	8006498 <HAL_InitTick>

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40023c00 	.word	0x40023c00
 800aec0:	40023800 	.word	0x40023800
 800aec4:	08010904 	.word	0x08010904
 800aec8:	20000004 	.word	0x20000004
 800aecc:	200001e4 	.word	0x200001e4

0800aed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	607b      	str	r3, [r7, #4]
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	2300      	movs	r3, #0
 800aee2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aee8:	4b67      	ldr	r3, [pc, #412]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f003 030c 	and.w	r3, r3, #12
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d00d      	beq.n	800af10 <HAL_RCC_GetSysClockFreq+0x40>
 800aef4:	2b08      	cmp	r3, #8
 800aef6:	f200 80bd 	bhi.w	800b074 <HAL_RCC_GetSysClockFreq+0x1a4>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <HAL_RCC_GetSysClockFreq+0x34>
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d003      	beq.n	800af0a <HAL_RCC_GetSysClockFreq+0x3a>
 800af02:	e0b7      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af04:	4b61      	ldr	r3, [pc, #388]	; (800b08c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800af06:	60bb      	str	r3, [r7, #8]
       break;
 800af08:	e0b7      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af0a:	4b61      	ldr	r3, [pc, #388]	; (800b090 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800af0c:	60bb      	str	r3, [r7, #8]
      break;
 800af0e:	e0b4      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af10:	4b5d      	ldr	r3, [pc, #372]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af1a:	4b5b      	ldr	r3, [pc, #364]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d04d      	beq.n	800afc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af26:	4b58      	ldr	r3, [pc, #352]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	099b      	lsrs	r3, r3, #6
 800af2c:	461a      	mov	r2, r3
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	f240 10ff 	movw	r0, #511	; 0x1ff
 800af36:	f04f 0100 	mov.w	r1, #0
 800af3a:	ea02 0800 	and.w	r8, r2, r0
 800af3e:	ea03 0901 	and.w	r9, r3, r1
 800af42:	4640      	mov	r0, r8
 800af44:	4649      	mov	r1, r9
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	014b      	lsls	r3, r1, #5
 800af50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800af54:	0142      	lsls	r2, r0, #5
 800af56:	4610      	mov	r0, r2
 800af58:	4619      	mov	r1, r3
 800af5a:	ebb0 0008 	subs.w	r0, r0, r8
 800af5e:	eb61 0109 	sbc.w	r1, r1, r9
 800af62:	f04f 0200 	mov.w	r2, #0
 800af66:	f04f 0300 	mov.w	r3, #0
 800af6a:	018b      	lsls	r3, r1, #6
 800af6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800af70:	0182      	lsls	r2, r0, #6
 800af72:	1a12      	subs	r2, r2, r0
 800af74:	eb63 0301 	sbc.w	r3, r3, r1
 800af78:	f04f 0000 	mov.w	r0, #0
 800af7c:	f04f 0100 	mov.w	r1, #0
 800af80:	00d9      	lsls	r1, r3, #3
 800af82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af86:	00d0      	lsls	r0, r2, #3
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	eb12 0208 	adds.w	r2, r2, r8
 800af90:	eb43 0309 	adc.w	r3, r3, r9
 800af94:	f04f 0000 	mov.w	r0, #0
 800af98:	f04f 0100 	mov.w	r1, #0
 800af9c:	0259      	lsls	r1, r3, #9
 800af9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800afa2:	0250      	lsls	r0, r2, #9
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4610      	mov	r0, r2
 800afaa:	4619      	mov	r1, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	461a      	mov	r2, r3
 800afb0:	f04f 0300 	mov.w	r3, #0
 800afb4:	f7f5 fdec 	bl	8000b90 <__aeabi_uldivmod>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4613      	mov	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	e04a      	b.n	800b058 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afc2:	4b31      	ldr	r3, [pc, #196]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	099b      	lsrs	r3, r3, #6
 800afc8:	461a      	mov	r2, r3
 800afca:	f04f 0300 	mov.w	r3, #0
 800afce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	ea02 0400 	and.w	r4, r2, r0
 800afda:	ea03 0501 	and.w	r5, r3, r1
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f04f 0200 	mov.w	r2, #0
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	014b      	lsls	r3, r1, #5
 800afec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aff0:	0142      	lsls	r2, r0, #5
 800aff2:	4610      	mov	r0, r2
 800aff4:	4619      	mov	r1, r3
 800aff6:	1b00      	subs	r0, r0, r4
 800aff8:	eb61 0105 	sbc.w	r1, r1, r5
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	018b      	lsls	r3, r1, #6
 800b006:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b00a:	0182      	lsls	r2, r0, #6
 800b00c:	1a12      	subs	r2, r2, r0
 800b00e:	eb63 0301 	sbc.w	r3, r3, r1
 800b012:	f04f 0000 	mov.w	r0, #0
 800b016:	f04f 0100 	mov.w	r1, #0
 800b01a:	00d9      	lsls	r1, r3, #3
 800b01c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b020:	00d0      	lsls	r0, r2, #3
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	1912      	adds	r2, r2, r4
 800b028:	eb45 0303 	adc.w	r3, r5, r3
 800b02c:	f04f 0000 	mov.w	r0, #0
 800b030:	f04f 0100 	mov.w	r1, #0
 800b034:	0299      	lsls	r1, r3, #10
 800b036:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b03a:	0290      	lsls	r0, r2, #10
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4610      	mov	r0, r2
 800b042:	4619      	mov	r1, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	461a      	mov	r2, r3
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	f7f5 fda0 	bl	8000b90 <__aeabi_uldivmod>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4613      	mov	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b058:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	0c1b      	lsrs	r3, r3, #16
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	3301      	adds	r3, #1
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b070:	60bb      	str	r3, [r7, #8]
      break;
 800b072:	e002      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b076:	60bb      	str	r3, [r7, #8]
      break;
 800b078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b07a:	68bb      	ldr	r3, [r7, #8]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b086:	bf00      	nop
 800b088:	40023800 	.word	0x40023800
 800b08c:	00f42400 	.word	0x00f42400
 800b090:	007a1200 	.word	0x007a1200

0800b094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b094:	b480      	push	{r7}
 800b096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b098:	4b03      	ldr	r3, [pc, #12]	; (800b0a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b09a:	681b      	ldr	r3, [r3, #0]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000004 	.word	0x20000004

0800b0ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b0b0:	f7ff fff0 	bl	800b094 <HAL_RCC_GetHCLKFreq>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	0a9b      	lsrs	r3, r3, #10
 800b0bc:	f003 0307 	and.w	r3, r3, #7
 800b0c0:	4903      	ldr	r1, [pc, #12]	; (800b0d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0c2:	5ccb      	ldrb	r3, [r1, r3]
 800b0c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	08010914 	.word	0x08010914

0800b0d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d105      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d035      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0fc:	4b62      	ldr	r3, [pc, #392]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b102:	f7fb fa0d 	bl	8006520 <HAL_GetTick>
 800b106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b108:	e008      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b10a:	f7fb fa09 	bl	8006520 <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	2b02      	cmp	r3, #2
 800b116:	d901      	bls.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e0b0      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b11c:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1f0      	bne.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	019a      	lsls	r2, r3, #6
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	071b      	lsls	r3, r3, #28
 800b134:	4955      	ldr	r1, [pc, #340]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b13c:	4b52      	ldr	r3, [pc, #328]	; (800b288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b13e:	2201      	movs	r2, #1
 800b140:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b142:	f7fb f9ed 	bl	8006520 <HAL_GetTick>
 800b146:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b148:	e008      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b14a:	f7fb f9e9 	bl	8006520 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	2b02      	cmp	r3, #2
 800b156:	d901      	bls.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e090      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b15c:	4b4b      	ldr	r3, [pc, #300]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0f0      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0302 	and.w	r3, r3, #2
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 8083 	beq.w	800b27c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b176:	2300      	movs	r3, #0
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	4b44      	ldr	r3, [pc, #272]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	4a43      	ldr	r2, [pc, #268]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b184:	6413      	str	r3, [r2, #64]	; 0x40
 800b186:	4b41      	ldr	r3, [pc, #260]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b192:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a3e      	ldr	r2, [pc, #248]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b19c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b19e:	f7fb f9bf 	bl	8006520 <HAL_GetTick>
 800b1a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b1a4:	e008      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b1a6:	f7fb f9bb 	bl	8006520 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d901      	bls.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e062      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b1b8:	4b35      	ldr	r3, [pc, #212]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f0      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b1c4:	4b31      	ldr	r3, [pc, #196]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02f      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d028      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1e2:	4b2a      	ldr	r3, [pc, #168]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b1f2:	4b28      	ldr	r3, [pc, #160]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b1f8:	4a24      	ldr	r2, [pc, #144]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b1fe:	4b23      	ldr	r3, [pc, #140]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b01      	cmp	r3, #1
 800b208:	d114      	bne.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b20a:	f7fb f989 	bl	8006520 <HAL_GetTick>
 800b20e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b210:	e00a      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b212:	f7fb f985 	bl	8006520 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b220:	4293      	cmp	r3, r2
 800b222:	d901      	bls.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e02a      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b228:	4b18      	ldr	r3, [pc, #96]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0ee      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b23c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b240:	d10d      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b242:	4b12      	ldr	r3, [pc, #72]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b256:	490d      	ldr	r1, [pc, #52]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	608b      	str	r3, [r1, #8]
 800b25c:	e005      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b264:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b268:	6093      	str	r3, [r2, #8]
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b26c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b276:	4905      	ldr	r1, [pc, #20]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	42470068 	.word	0x42470068
 800b28c:	40023800 	.word	0x40023800
 800b290:	40007000 	.word	0x40007000
 800b294:	42470e40 	.word	0x42470e40

0800b298 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b298:	b480      	push	{r7}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d13e      	bne.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b2b6:	4b23      	ldr	r3, [pc, #140]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d12f      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b2cc:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b2ce:	617b      	str	r3, [r7, #20]
          break;
 800b2d0:	e02f      	b.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b2d2:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2de:	d108      	bne.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2e0:	4b18      	ldr	r3, [pc, #96]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e8:	4a18      	ldr	r2, [pc, #96]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ee:	613b      	str	r3, [r7, #16]
 800b2f0:	e007      	b.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2f2:	4b14      	ldr	r3, [pc, #80]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b300:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b302:	4b10      	ldr	r3, [pc, #64]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b308:	099b      	lsrs	r3, r3, #6
 800b30a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	fb02 f303 	mul.w	r3, r2, r3
 800b314:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b316:	4b0b      	ldr	r3, [pc, #44]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b31c:	0f1b      	lsrs	r3, r3, #28
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	fbb2 f3f3 	udiv	r3, r2, r3
 800b328:	617b      	str	r3, [r7, #20]
          break;
 800b32a:	e002      	b.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
          break;
 800b330:	bf00      	nop
        }
      }
      break;
 800b332:	bf00      	nop
    }
  }
  return frequency;
 800b334:	697b      	ldr	r3, [r7, #20]
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	40023800 	.word	0x40023800
 800b348:	00bb8000 	.word	0x00bb8000
 800b34c:	007a1200 	.word	0x007a1200
 800b350:	00f42400 	.word	0x00f42400

0800b354 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e01c      	b.n	800b3a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	795b      	ldrb	r3, [r3, #5]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7f6 fd70 	bl	8001e5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f042 0204 	orr.w	r2, r2, #4
 800b390:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	791b      	ldrb	r3, [r3, #4]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d101      	bne.n	800b3c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b3be:	2302      	movs	r3, #2
 800b3c0:	e03d      	b.n	800b43e <HAL_RNG_GenerateRandomNumber+0x96>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	795b      	ldrb	r3, [r3, #5]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d12c      	bne.n	800b42c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3d8:	f7fb f8a2 	bl	8006520 <HAL_GetTick>
 800b3dc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b3de:	e011      	b.n	800b404 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b3e0:	f7fb f89e 	bl	8006520 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d90a      	bls.n	800b404 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e01c      	b.n	800b43e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d1e6      	bne.n	800b3e0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	715a      	strb	r2, [r3, #5]
 800b42a:	e004      	b.n	800b436 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2204      	movs	r2, #4
 800b430:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	711a      	strb	r2, [r3, #4]

  return status;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	330c      	adds	r3, #12
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff ffa7 	bl	800b3a8 <HAL_RNG_GenerateRandomNumber>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	e000      	b.n	800b468 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800b466:	2300      	movs	r3, #0
  }
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e07b      	b.n	800b57a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b00      	cmp	r3, #0
 800b488:	d108      	bne.n	800b49c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b492:	d009      	beq.n	800b4a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	61da      	str	r2, [r3, #28]
 800b49a:	e005      	b.n	800b4a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7f6 fcec 	bl	8001ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	431a      	orrs	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b522:	431a      	orrs	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52c:	ea42 0103 	orr.w	r1, r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b534:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	f003 0104 	and.w	r1, r3, #4
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	f003 0210 	and.w	r2, r3, #16
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69da      	ldr	r2, [r3, #28]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b088      	sub	sp, #32
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	603b      	str	r3, [r7, #0]
 800b58e:	4613      	mov	r3, r2
 800b590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d101      	bne.n	800b5a4 <HAL_SPI_Transmit+0x22>
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e126      	b.n	800b7f2 <HAL_SPI_Transmit+0x270>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5ac:	f7fa ffb8 	bl	8006520 <HAL_GetTick>
 800b5b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d002      	beq.n	800b5c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5c6:	e10b      	b.n	800b7e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_SPI_Transmit+0x52>
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5d8:	e102      	b.n	800b7e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2203      	movs	r2, #3
 800b5de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	88fa      	ldrh	r2, [r7, #6]
 800b5f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b620:	d10f      	bne.n	800b642 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d007      	beq.n	800b660 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b65e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b668:	d14b      	bne.n	800b702 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <HAL_SPI_Transmit+0xf6>
 800b672:	8afb      	ldrh	r3, [r7, #22]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d13e      	bne.n	800b6f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67c:	881a      	ldrh	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b688:	1c9a      	adds	r2, r3, #2
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b692:	b29b      	uxth	r3, r3
 800b694:	3b01      	subs	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b69c:	e02b      	b.n	800b6f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f003 0302 	and.w	r3, r3, #2
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d112      	bne.n	800b6d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	881a      	ldrh	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	1c9a      	adds	r2, r3, #2
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6d0:	e011      	b.n	800b6f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6d2:	f7fa ff25 	bl	8006520 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d803      	bhi.n	800b6ea <HAL_SPI_Transmit+0x168>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6e8:	d102      	bne.n	800b6f0 <HAL_SPI_Transmit+0x16e>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6f4:	e074      	b.n	800b7e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1ce      	bne.n	800b69e <HAL_SPI_Transmit+0x11c>
 800b700:	e04c      	b.n	800b79c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <HAL_SPI_Transmit+0x18e>
 800b70a:	8afb      	ldrh	r3, [r7, #22]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d140      	bne.n	800b792 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	330c      	adds	r3, #12
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	3b01      	subs	r3, #1
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b736:	e02c      	b.n	800b792 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f003 0302 	and.w	r3, r3, #2
 800b742:	2b02      	cmp	r3, #2
 800b744:	d113      	bne.n	800b76e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	330c      	adds	r3, #12
 800b750:	7812      	ldrb	r2, [r2, #0]
 800b752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b762:	b29b      	uxth	r3, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b76c:	e011      	b.n	800b792 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b76e:	f7fa fed7 	bl	8006520 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d803      	bhi.n	800b786 <HAL_SPI_Transmit+0x204>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b784:	d102      	bne.n	800b78c <HAL_SPI_Transmit+0x20a>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b790:	e026      	b.n	800b7e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1cd      	bne.n	800b738 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f8b3 	bl	800b90c <SPI_EndRxTxTransaction>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	613b      	str	r3, [r7, #16]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	613b      	str	r3, [r7, #16]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	613b      	str	r3, [r7, #16]
 800b7ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	77fb      	strb	r3, [r7, #31]
 800b7dc:	e000      	b.n	800b7e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b7de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b80c:	f7fa fe88 	bl	8006520 <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	4413      	add	r3, r2
 800b81a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b81c:	f7fa fe80 	bl	8006520 <HAL_GetTick>
 800b820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b822:	4b39      	ldr	r3, [pc, #228]	; (800b908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	015b      	lsls	r3, r3, #5
 800b828:	0d1b      	lsrs	r3, r3, #20
 800b82a:	69fa      	ldr	r2, [r7, #28]
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
 800b830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b832:	e054      	b.n	800b8de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b83a:	d050      	beq.n	800b8de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b83c:	f7fa fe70 	bl	8006520 <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	69fa      	ldr	r2, [r7, #28]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d902      	bls.n	800b852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d13d      	bne.n	800b8ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b86a:	d111      	bne.n	800b890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b874:	d004      	beq.n	800b880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b87e:	d107      	bne.n	800b890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b88e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b898:	d10f      	bne.n	800b8ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e017      	b.n	800b8fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	bf0c      	ite	eq
 800b8ee:	2301      	moveq	r3, #1
 800b8f0:	2300      	movne	r3, #0
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d19b      	bne.n	800b834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20000004 	.word	0x20000004

0800b90c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af02      	add	r7, sp, #8
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b918:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <SPI_EndRxTxTransaction+0x7c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a1b      	ldr	r2, [pc, #108]	; (800b98c <SPI_EndRxTxTransaction+0x80>)
 800b91e:	fba2 2303 	umull	r2, r3, r2, r3
 800b922:	0d5b      	lsrs	r3, r3, #21
 800b924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b928:	fb02 f303 	mul.w	r3, r2, r3
 800b92c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b936:	d112      	bne.n	800b95e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2200      	movs	r2, #0
 800b940:	2180      	movs	r1, #128	; 0x80
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff ff5a 	bl	800b7fc <SPI_WaitFlagStateUntilTimeout>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d016      	beq.n	800b97c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b952:	f043 0220 	orr.w	r2, r3, #32
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e00f      	b.n	800b97e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	3b01      	subs	r3, #1
 800b968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b974:	2b80      	cmp	r3, #128	; 0x80
 800b976:	d0f2      	beq.n	800b95e <SPI_EndRxTxTransaction+0x52>
 800b978:	e000      	b.n	800b97c <SPI_EndRxTxTransaction+0x70>
        break;
 800b97a:	bf00      	nop
  }

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20000004 	.word	0x20000004
 800b98c:	165e9f81 	.word	0x165e9f81

0800b990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e041      	b.n	800ba26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d106      	bne.n	800b9bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7f6 fb58 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f000 fd68 	bl	800c4a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d001      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e04e      	b.n	800bae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a23      	ldr	r2, [pc, #140]	; (800baf4 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d022      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba72:	d01d      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a1f      	ldr	r2, [pc, #124]	; (800baf8 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d018      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a1e      	ldr	r2, [pc, #120]	; (800bafc <HAL_TIM_Base_Start_IT+0xcc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d013      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a1c      	ldr	r2, [pc, #112]	; (800bb00 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d00e      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a1b      	ldr	r2, [pc, #108]	; (800bb04 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d009      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a19      	ldr	r2, [pc, #100]	; (800bb08 <HAL_TIM_Base_Start_IT+0xd8>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d004      	beq.n	800bab0 <HAL_TIM_Base_Start_IT+0x80>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a18      	ldr	r2, [pc, #96]	; (800bb0c <HAL_TIM_Base_Start_IT+0xdc>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d111      	bne.n	800bad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 0307 	and.w	r3, r3, #7
 800baba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b06      	cmp	r3, #6
 800bac0:	d010      	beq.n	800bae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0201 	orr.w	r2, r2, #1
 800bad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bad2:	e007      	b.n	800bae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f042 0201 	orr.w	r2, r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	40010000 	.word	0x40010000
 800baf8:	40000400 	.word	0x40000400
 800bafc:	40000800 	.word	0x40000800
 800bb00:	40000c00 	.word	0x40000c00
 800bb04:	40010400 	.word	0x40010400
 800bb08:	40014000 	.word	0x40014000
 800bb0c:	40001800 	.word	0x40001800

0800bb10 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <HAL_TIM_OC_Start_IT+0x24>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	bf14      	ite	ne
 800bb2c:	2301      	movne	r3, #1
 800bb2e:	2300      	moveq	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	e022      	b.n	800bb7a <HAL_TIM_OC_Start_IT+0x6a>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	d109      	bne.n	800bb4e <HAL_TIM_OC_Start_IT+0x3e>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	bf14      	ite	ne
 800bb46:	2301      	movne	r3, #1
 800bb48:	2300      	moveq	r3, #0
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	e015      	b.n	800bb7a <HAL_TIM_OC_Start_IT+0x6a>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b08      	cmp	r3, #8
 800bb52:	d109      	bne.n	800bb68 <HAL_TIM_OC_Start_IT+0x58>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	bf14      	ite	ne
 800bb60:	2301      	movne	r3, #1
 800bb62:	2300      	moveq	r3, #0
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	e008      	b.n	800bb7a <HAL_TIM_OC_Start_IT+0x6a>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	bf14      	ite	ne
 800bb74:	2301      	movne	r3, #1
 800bb76:	2300      	moveq	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e0c2      	b.n	800bd08 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d104      	bne.n	800bb92 <HAL_TIM_OC_Start_IT+0x82>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb90:	e013      	b.n	800bbba <HAL_TIM_OC_Start_IT+0xaa>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b04      	cmp	r3, #4
 800bb96:	d104      	bne.n	800bba2 <HAL_TIM_OC_Start_IT+0x92>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bba0:	e00b      	b.n	800bbba <HAL_TIM_OC_Start_IT+0xaa>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b08      	cmp	r3, #8
 800bba6:	d104      	bne.n	800bbb2 <HAL_TIM_OC_Start_IT+0xa2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbb0:	e003      	b.n	800bbba <HAL_TIM_OC_Start_IT+0xaa>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b0c      	cmp	r3, #12
 800bbbe:	d841      	bhi.n	800bc44 <HAL_TIM_OC_Start_IT+0x134>
 800bbc0:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <HAL_TIM_OC_Start_IT+0xb8>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bbfd 	.word	0x0800bbfd
 800bbcc:	0800bc45 	.word	0x0800bc45
 800bbd0:	0800bc45 	.word	0x0800bc45
 800bbd4:	0800bc45 	.word	0x0800bc45
 800bbd8:	0800bc0f 	.word	0x0800bc0f
 800bbdc:	0800bc45 	.word	0x0800bc45
 800bbe0:	0800bc45 	.word	0x0800bc45
 800bbe4:	0800bc45 	.word	0x0800bc45
 800bbe8:	0800bc21 	.word	0x0800bc21
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc45 	.word	0x0800bc45
 800bbf4:	0800bc45 	.word	0x0800bc45
 800bbf8:	0800bc33 	.word	0x0800bc33
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0202 	orr.w	r2, r2, #2
 800bc0a:	60da      	str	r2, [r3, #12]
      break;
 800bc0c:	e01b      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68da      	ldr	r2, [r3, #12]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f042 0204 	orr.w	r2, r2, #4
 800bc1c:	60da      	str	r2, [r3, #12]
      break;
 800bc1e:	e012      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f042 0208 	orr.w	r2, r2, #8
 800bc2e:	60da      	str	r2, [r3, #12]
      break;
 800bc30:	e009      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f042 0210 	orr.w	r2, r2, #16
 800bc40:	60da      	str	r2, [r3, #12]
      break;
 800bc42:	e000      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800bc44:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 ff12 	bl	800ca78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a2d      	ldr	r2, [pc, #180]	; (800bd10 <HAL_TIM_OC_Start_IT+0x200>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d004      	beq.n	800bc68 <HAL_TIM_OC_Start_IT+0x158>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a2c      	ldr	r2, [pc, #176]	; (800bd14 <HAL_TIM_OC_Start_IT+0x204>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d101      	bne.n	800bc6c <HAL_TIM_OC_Start_IT+0x15c>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <HAL_TIM_OC_Start_IT+0x15e>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d007      	beq.n	800bc82 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a22      	ldr	r2, [pc, #136]	; (800bd10 <HAL_TIM_OC_Start_IT+0x200>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d022      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc94:	d01d      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a1f      	ldr	r2, [pc, #124]	; (800bd18 <HAL_TIM_OC_Start_IT+0x208>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d018      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a1d      	ldr	r2, [pc, #116]	; (800bd1c <HAL_TIM_OC_Start_IT+0x20c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d013      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a1c      	ldr	r2, [pc, #112]	; (800bd20 <HAL_TIM_OC_Start_IT+0x210>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00e      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a16      	ldr	r2, [pc, #88]	; (800bd14 <HAL_TIM_OC_Start_IT+0x204>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d009      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a18      	ldr	r2, [pc, #96]	; (800bd24 <HAL_TIM_OC_Start_IT+0x214>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d004      	beq.n	800bcd2 <HAL_TIM_OC_Start_IT+0x1c2>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a16      	ldr	r2, [pc, #88]	; (800bd28 <HAL_TIM_OC_Start_IT+0x218>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d111      	bne.n	800bcf6 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f003 0307 	and.w	r3, r3, #7
 800bcdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b06      	cmp	r3, #6
 800bce2:	d010      	beq.n	800bd06 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f042 0201 	orr.w	r2, r2, #1
 800bcf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf4:	e007      	b.n	800bd06 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f042 0201 	orr.w	r2, r2, #1
 800bd04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	40010000 	.word	0x40010000
 800bd14:	40010400 	.word	0x40010400
 800bd18:	40000400 	.word	0x40000400
 800bd1c:	40000800 	.word	0x40000800
 800bd20:	40000c00 	.word	0x40000c00
 800bd24:	40014000 	.word	0x40014000
 800bd28:	40001800 	.word	0x40001800

0800bd2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e041      	b.n	800bdc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f839 	bl	800bdca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f000 fb9a 	bl	800c4a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bdd2:	bf00      	nop
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b086      	sub	sp, #24
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e097      	b.n	800bf22 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7f6 f8e8 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2202      	movs	r2, #2
 800be10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be22:	f023 0307 	bic.w	r3, r3, #7
 800be26:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f000 fb36 	bl	800c4a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	4313      	orrs	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be60:	f023 0303 	bic.w	r3, r3, #3
 800be64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	021b      	lsls	r3, r3, #8
 800be70:	4313      	orrs	r3, r2
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800be7e:	f023 030c 	bic.w	r3, r3, #12
 800be82:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	68da      	ldr	r2, [r3, #12]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	4313      	orrs	r3, r2
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	011a      	lsls	r2, r3, #4
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	031b      	lsls	r3, r3, #12
 800beae:	4313      	orrs	r3, r2
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bebc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bec4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	4313      	orrs	r3, r2
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d122      	bne.n	800bf86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d11b      	bne.n	800bf86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f06f 0202 	mvn.w	r2, #2
 800bf56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	f003 0303 	and.w	r3, r3, #3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa7b 	bl	800c468 <HAL_TIM_IC_CaptureCallback>
 800bf72:	e005      	b.n	800bf80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fa6d 	bl	800c454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa7e 	bl	800c47c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d122      	bne.n	800bfda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f003 0304 	and.w	r3, r3, #4
 800bf9e:	2b04      	cmp	r3, #4
 800bfa0:	d11b      	bne.n	800bfda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f06f 0204 	mvn.w	r2, #4
 800bfaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fa51 	bl	800c468 <HAL_TIM_IC_CaptureCallback>
 800bfc6:	e005      	b.n	800bfd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fa43 	bl	800c454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa54 	bl	800c47c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d122      	bne.n	800c02e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	f003 0308 	and.w	r3, r3, #8
 800bff2:	2b08      	cmp	r3, #8
 800bff4:	d11b      	bne.n	800c02e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f06f 0208 	mvn.w	r2, #8
 800bffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2204      	movs	r2, #4
 800c004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	f003 0303 	and.w	r3, r3, #3
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fa27 	bl	800c468 <HAL_TIM_IC_CaptureCallback>
 800c01a:	e005      	b.n	800c028 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa19 	bl	800c454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fa2a 	bl	800c47c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f003 0310 	and.w	r3, r3, #16
 800c038:	2b10      	cmp	r3, #16
 800c03a:	d122      	bne.n	800c082 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f003 0310 	and.w	r3, r3, #16
 800c046:	2b10      	cmp	r3, #16
 800c048:	d11b      	bne.n	800c082 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f06f 0210 	mvn.w	r2, #16
 800c052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2208      	movs	r2, #8
 800c058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f9fd 	bl	800c468 <HAL_TIM_IC_CaptureCallback>
 800c06e:	e005      	b.n	800c07c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f9ef 	bl	800c454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa00 	bl	800c47c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d10e      	bne.n	800c0ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d107      	bne.n	800c0ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f06f 0201 	mvn.w	r2, #1
 800c0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f9c9 	bl	800c440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b8:	2b80      	cmp	r3, #128	; 0x80
 800c0ba:	d10e      	bne.n	800c0da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c6:	2b80      	cmp	r3, #128	; 0x80
 800c0c8:	d107      	bne.n	800c0da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fd7b 	bl	800cbd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e4:	2b40      	cmp	r3, #64	; 0x40
 800c0e6:	d10e      	bne.n	800c106 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d107      	bne.n	800c106 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f9c5 	bl	800c490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	2b20      	cmp	r3, #32
 800c112:	d10e      	bne.n	800c132 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f003 0320 	and.w	r3, r3, #32
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d107      	bne.n	800c132 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f06f 0220 	mvn.w	r2, #32
 800c12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fd45 	bl	800cbbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d101      	bne.n	800c156 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c152:	2302      	movs	r3, #2
 800c154:	e0ac      	b.n	800c2b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b0c      	cmp	r3, #12
 800c162:	f200 809f 	bhi.w	800c2a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 800c166:	a201      	add	r2, pc, #4	; (adr r2, 800c16c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c1a1 	.word	0x0800c1a1
 800c170:	0800c2a5 	.word	0x0800c2a5
 800c174:	0800c2a5 	.word	0x0800c2a5
 800c178:	0800c2a5 	.word	0x0800c2a5
 800c17c:	0800c1e1 	.word	0x0800c1e1
 800c180:	0800c2a5 	.word	0x0800c2a5
 800c184:	0800c2a5 	.word	0x0800c2a5
 800c188:	0800c2a5 	.word	0x0800c2a5
 800c18c:	0800c223 	.word	0x0800c223
 800c190:	0800c2a5 	.word	0x0800c2a5
 800c194:	0800c2a5 	.word	0x0800c2a5
 800c198:	0800c2a5 	.word	0x0800c2a5
 800c19c:	0800c263 	.word	0x0800c263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fa1c 	bl	800c5e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	699a      	ldr	r2, [r3, #24]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f042 0208 	orr.w	r2, r2, #8
 800c1ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	699a      	ldr	r2, [r3, #24]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0204 	bic.w	r2, r2, #4
 800c1ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6999      	ldr	r1, [r3, #24]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	691a      	ldr	r2, [r3, #16]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	619a      	str	r2, [r3, #24]
      break;
 800c1de:	e062      	b.n	800c2a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fa6c 	bl	800c6c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c20a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6999      	ldr	r1, [r3, #24]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	021a      	lsls	r2, r3, #8
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	430a      	orrs	r2, r1
 800c21e:	619a      	str	r2, [r3, #24]
      break;
 800c220:	e041      	b.n	800c2a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fac1 	bl	800c7b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	69da      	ldr	r2, [r3, #28]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0208 	orr.w	r2, r2, #8
 800c23c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	69da      	ldr	r2, [r3, #28]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f022 0204 	bic.w	r2, r2, #4
 800c24c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	69d9      	ldr	r1, [r3, #28]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	691a      	ldr	r2, [r3, #16]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	430a      	orrs	r2, r1
 800c25e:	61da      	str	r2, [r3, #28]
      break;
 800c260:	e021      	b.n	800c2a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68b9      	ldr	r1, [r7, #8]
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 fb15 	bl	800c898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	69da      	ldr	r2, [r3, #28]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c27c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	69da      	ldr	r2, [r3, #28]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c28c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	69d9      	ldr	r1, [r3, #28]
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	021a      	lsls	r2, r3, #8
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	61da      	str	r2, [r3, #28]
      break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800c2a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d101      	bne.n	800c2d0 <HAL_TIM_ConfigClockSource+0x18>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e0b3      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x180>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c2ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c308:	d03e      	beq.n	800c388 <HAL_TIM_ConfigClockSource+0xd0>
 800c30a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c30e:	f200 8087 	bhi.w	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c316:	f000 8085 	beq.w	800c424 <HAL_TIM_ConfigClockSource+0x16c>
 800c31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c31e:	d87f      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c320:	2b70      	cmp	r3, #112	; 0x70
 800c322:	d01a      	beq.n	800c35a <HAL_TIM_ConfigClockSource+0xa2>
 800c324:	2b70      	cmp	r3, #112	; 0x70
 800c326:	d87b      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c328:	2b60      	cmp	r3, #96	; 0x60
 800c32a:	d050      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x116>
 800c32c:	2b60      	cmp	r3, #96	; 0x60
 800c32e:	d877      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c330:	2b50      	cmp	r3, #80	; 0x50
 800c332:	d03c      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0xf6>
 800c334:	2b50      	cmp	r3, #80	; 0x50
 800c336:	d873      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	d058      	beq.n	800c3ee <HAL_TIM_ConfigClockSource+0x136>
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d86f      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c340:	2b30      	cmp	r3, #48	; 0x30
 800c342:	d064      	beq.n	800c40e <HAL_TIM_ConfigClockSource+0x156>
 800c344:	2b30      	cmp	r3, #48	; 0x30
 800c346:	d86b      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c348:	2b20      	cmp	r3, #32
 800c34a:	d060      	beq.n	800c40e <HAL_TIM_ConfigClockSource+0x156>
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	d867      	bhi.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
 800c350:	2b00      	cmp	r3, #0
 800c352:	d05c      	beq.n	800c40e <HAL_TIM_ConfigClockSource+0x156>
 800c354:	2b10      	cmp	r3, #16
 800c356:	d05a      	beq.n	800c40e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c358:	e062      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6899      	ldr	r1, [r3, #8]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	f000 fb65 	bl	800ca38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c37c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	609a      	str	r2, [r3, #8]
      break;
 800c386:	e04e      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	6899      	ldr	r1, [r3, #8]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f000 fb4e 	bl	800ca38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3aa:	609a      	str	r2, [r3, #8]
      break;
 800c3ac:	e03b      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6818      	ldr	r0, [r3, #0]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	6859      	ldr	r1, [r3, #4]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	f000 fac2 	bl	800c944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2150      	movs	r1, #80	; 0x50
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 fb1b 	bl	800ca02 <TIM_ITRx_SetConfig>
      break;
 800c3cc:	e02b      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	6859      	ldr	r1, [r3, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f000 fae1 	bl	800c9a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2160      	movs	r1, #96	; 0x60
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fb0b 	bl	800ca02 <TIM_ITRx_SetConfig>
      break;
 800c3ec:	e01b      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	6859      	ldr	r1, [r3, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f000 faa2 	bl	800c944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2140      	movs	r1, #64	; 0x40
 800c406:	4618      	mov	r0, r3
 800c408:	f000 fafb 	bl	800ca02 <TIM_ITRx_SetConfig>
      break;
 800c40c:	e00b      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4619      	mov	r1, r3
 800c418:	4610      	mov	r0, r2
 800c41a:	f000 faf2 	bl	800ca02 <TIM_ITRx_SetConfig>
        break;
 800c41e:	e002      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c420:	bf00      	nop
 800c422:	e000      	b.n	800c426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c424:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a40      	ldr	r2, [pc, #256]	; (800c5b8 <TIM_Base_SetConfig+0x114>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d013      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4c2:	d00f      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a3d      	ldr	r2, [pc, #244]	; (800c5bc <TIM_Base_SetConfig+0x118>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d00b      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a3c      	ldr	r2, [pc, #240]	; (800c5c0 <TIM_Base_SetConfig+0x11c>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d007      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a3b      	ldr	r2, [pc, #236]	; (800c5c4 <TIM_Base_SetConfig+0x120>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a3a      	ldr	r2, [pc, #232]	; (800c5c8 <TIM_Base_SetConfig+0x124>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d108      	bne.n	800c4f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a2f      	ldr	r2, [pc, #188]	; (800c5b8 <TIM_Base_SetConfig+0x114>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d02b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c504:	d027      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a2c      	ldr	r2, [pc, #176]	; (800c5bc <TIM_Base_SetConfig+0x118>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d023      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a2b      	ldr	r2, [pc, #172]	; (800c5c0 <TIM_Base_SetConfig+0x11c>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d01f      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a2a      	ldr	r2, [pc, #168]	; (800c5c4 <TIM_Base_SetConfig+0x120>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d01b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a29      	ldr	r2, [pc, #164]	; (800c5c8 <TIM_Base_SetConfig+0x124>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d017      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a28      	ldr	r2, [pc, #160]	; (800c5cc <TIM_Base_SetConfig+0x128>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d013      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a27      	ldr	r2, [pc, #156]	; (800c5d0 <TIM_Base_SetConfig+0x12c>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d00f      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a26      	ldr	r2, [pc, #152]	; (800c5d4 <TIM_Base_SetConfig+0x130>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d00b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a25      	ldr	r2, [pc, #148]	; (800c5d8 <TIM_Base_SetConfig+0x134>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d007      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a24      	ldr	r2, [pc, #144]	; (800c5dc <TIM_Base_SetConfig+0x138>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d003      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a23      	ldr	r2, [pc, #140]	; (800c5e0 <TIM_Base_SetConfig+0x13c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d108      	bne.n	800c568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a0a      	ldr	r2, [pc, #40]	; (800c5b8 <TIM_Base_SetConfig+0x114>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d003      	beq.n	800c59c <TIM_Base_SetConfig+0xf8>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a0c      	ldr	r2, [pc, #48]	; (800c5c8 <TIM_Base_SetConfig+0x124>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d103      	bne.n	800c5a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	691a      	ldr	r2, [r3, #16]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	615a      	str	r2, [r3, #20]
}
 800c5aa:	bf00      	nop
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	40010000 	.word	0x40010000
 800c5bc:	40000400 	.word	0x40000400
 800c5c0:	40000800 	.word	0x40000800
 800c5c4:	40000c00 	.word	0x40000c00
 800c5c8:	40010400 	.word	0x40010400
 800c5cc:	40014000 	.word	0x40014000
 800c5d0:	40014400 	.word	0x40014400
 800c5d4:	40014800 	.word	0x40014800
 800c5d8:	40001800 	.word	0x40001800
 800c5dc:	40001c00 	.word	0x40001c00
 800c5e0:	40002000 	.word	0x40002000

0800c5e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	f023 0201 	bic.w	r2, r3, #1
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 0303 	bic.w	r3, r3, #3
 800c61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4313      	orrs	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f023 0302 	bic.w	r3, r3, #2
 800c62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	4313      	orrs	r3, r2
 800c636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a20      	ldr	r2, [pc, #128]	; (800c6bc <TIM_OC1_SetConfig+0xd8>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d003      	beq.n	800c648 <TIM_OC1_SetConfig+0x64>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a1f      	ldr	r2, [pc, #124]	; (800c6c0 <TIM_OC1_SetConfig+0xdc>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d10c      	bne.n	800c662 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f023 0308 	bic.w	r3, r3, #8
 800c64e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	4313      	orrs	r3, r2
 800c658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f023 0304 	bic.w	r3, r3, #4
 800c660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a15      	ldr	r2, [pc, #84]	; (800c6bc <TIM_OC1_SetConfig+0xd8>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d003      	beq.n	800c672 <TIM_OC1_SetConfig+0x8e>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a14      	ldr	r2, [pc, #80]	; (800c6c0 <TIM_OC1_SetConfig+0xdc>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d111      	bne.n	800c696 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	4313      	orrs	r3, r2
 800c68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	699b      	ldr	r3, [r3, #24]
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	4313      	orrs	r3, r2
 800c694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	621a      	str	r2, [r3, #32]
}
 800c6b0:	bf00      	nop
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	40010000 	.word	0x40010000
 800c6c0:	40010400 	.word	0x40010400

0800c6c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	f023 0210 	bic.w	r2, r3, #16
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	021b      	lsls	r3, r3, #8
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f023 0320 	bic.w	r3, r3, #32
 800c70e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	011b      	lsls	r3, r3, #4
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	4313      	orrs	r3, r2
 800c71a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a22      	ldr	r2, [pc, #136]	; (800c7a8 <TIM_OC2_SetConfig+0xe4>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d003      	beq.n	800c72c <TIM_OC2_SetConfig+0x68>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a21      	ldr	r2, [pc, #132]	; (800c7ac <TIM_OC2_SetConfig+0xe8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d10d      	bne.n	800c748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	011b      	lsls	r3, r3, #4
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a17      	ldr	r2, [pc, #92]	; (800c7a8 <TIM_OC2_SetConfig+0xe4>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d003      	beq.n	800c758 <TIM_OC2_SetConfig+0x94>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a16      	ldr	r2, [pc, #88]	; (800c7ac <TIM_OC2_SetConfig+0xe8>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d113      	bne.n	800c780 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c75e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	4313      	orrs	r3, r2
 800c772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	621a      	str	r2, [r3, #32]
}
 800c79a:	bf00      	nop
 800c79c:	371c      	adds	r7, #28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	40010000 	.word	0x40010000
 800c7ac:	40010400 	.word	0x40010400

0800c7b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0303 	bic.w	r3, r3, #3
 800c7e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	4313      	orrs	r3, r2
 800c804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a21      	ldr	r2, [pc, #132]	; (800c890 <TIM_OC3_SetConfig+0xe0>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d003      	beq.n	800c816 <TIM_OC3_SetConfig+0x66>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a20      	ldr	r2, [pc, #128]	; (800c894 <TIM_OC3_SetConfig+0xe4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d10d      	bne.n	800c832 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c81c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4313      	orrs	r3, r2
 800c828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a16      	ldr	r2, [pc, #88]	; (800c890 <TIM_OC3_SetConfig+0xe0>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d003      	beq.n	800c842 <TIM_OC3_SetConfig+0x92>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a15      	ldr	r2, [pc, #84]	; (800c894 <TIM_OC3_SetConfig+0xe4>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d113      	bne.n	800c86a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	4313      	orrs	r3, r2
 800c868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	621a      	str	r2, [r3, #32]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	40010000 	.word	0x40010000
 800c894:	40010400 	.word	0x40010400

0800c898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	031b      	lsls	r3, r3, #12
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a12      	ldr	r2, [pc, #72]	; (800c93c <TIM_OC4_SetConfig+0xa4>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC4_SetConfig+0x68>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a11      	ldr	r2, [pc, #68]	; (800c940 <TIM_OC4_SetConfig+0xa8>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d109      	bne.n	800c914 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	019b      	lsls	r3, r3, #6
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400

0800c944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	f023 0201 	bic.w	r2, r3, #1
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c96e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	011b      	lsls	r3, r3, #4
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	4313      	orrs	r3, r2
 800c978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f023 030a 	bic.w	r3, r3, #10
 800c980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c982:	697a      	ldr	r2, [r7, #20]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	4313      	orrs	r3, r2
 800c988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	697a      	ldr	r2, [r7, #20]
 800c994:	621a      	str	r2, [r3, #32]
}
 800c996:	bf00      	nop
 800c998:	371c      	adds	r7, #28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b087      	sub	sp, #28
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	f023 0210 	bic.w	r2, r3, #16
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	031b      	lsls	r3, r3, #12
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	011b      	lsls	r3, r3, #4
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	621a      	str	r2, [r3, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b085      	sub	sp, #20
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	f043 0307 	orr.w	r3, r3, #7
 800ca24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	609a      	str	r2, [r3, #8]
}
 800ca2c:	bf00      	nop
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	021a      	lsls	r2, r3, #8
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	609a      	str	r2, [r3, #8]
}
 800ca6c:	bf00      	nop
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f003 031f 	and.w	r3, r3, #31
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6a1a      	ldr	r2, [r3, #32]
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	401a      	ands	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6a1a      	ldr	r2, [r3, #32]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f003 031f 	and.w	r3, r3, #31
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	fa01 f303 	lsl.w	r3, r1, r3
 800cab0:	431a      	orrs	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	621a      	str	r2, [r3, #32]
}
 800cab6:	bf00      	nop
 800cab8:	371c      	adds	r7, #28
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
	...

0800cac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cad8:	2302      	movs	r3, #2
 800cada:	e05a      	b.n	800cb92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2202      	movs	r2, #2
 800cae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a21      	ldr	r2, [pc, #132]	; (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d022      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb28:	d01d      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a1d      	ldr	r2, [pc, #116]	; (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d018      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1b      	ldr	r2, [pc, #108]	; (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d013      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a1a      	ldr	r2, [pc, #104]	; (800cbac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d00e      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a18      	ldr	r2, [pc, #96]	; (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d009      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a17      	ldr	r2, [pc, #92]	; (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d004      	beq.n	800cb66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a15      	ldr	r2, [pc, #84]	; (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d10c      	bne.n	800cb80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	40010000 	.word	0x40010000
 800cba4:	40000400 	.word	0x40000400
 800cba8:	40000800 	.word	0x40000800
 800cbac:	40000c00 	.word	0x40000c00
 800cbb0:	40010400 	.word	0x40010400
 800cbb4:	40014000 	.word	0x40014000
 800cbb8:	40001800 	.word	0x40001800

0800cbbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	f107 001c 	add.w	r0, r7, #28
 800cbf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d122      	bne.n	800cc42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d105      	bne.n	800cc36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f94a 	bl	800ced0 <USB_CoreReset>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
 800cc40:	e01a      	b.n	800cc78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f93e 	bl	800ced0 <USB_CoreReset>
 800cc54:	4603      	mov	r3, r0
 800cc56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
 800cc6a:	e005      	b.n	800cc78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d10b      	bne.n	800cc96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f043 0206 	orr.w	r2, r3, #6
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f043 0220 	orr.w	r2, r3, #32
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cca2:	b004      	add	sp, #16
 800cca4:	4770      	bx	lr

0800cca6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f043 0201 	orr.w	r2, r3, #1
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f023 0201 	bic.w	r2, r3, #1
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b082      	sub	sp, #8
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d106      	bne.n	800cd16 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]
 800cd14:	e00b      	b.n	800cd2e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd16:	78fb      	ldrb	r3, [r7, #3]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60da      	str	r2, [r3, #12]
 800cd28:	e001      	b.n	800cd2e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e003      	b.n	800cd36 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cd2e:	2032      	movs	r0, #50	; 0x32
 800cd30:	f7f9 fc02 	bl	8006538 <HAL_Delay>

  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	019b      	lsls	r3, r3, #6
 800cd52:	f043 0220 	orr.w	r2, r3, #32
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4a09      	ldr	r2, [pc, #36]	; (800cd88 <USB_FlushTxFifo+0x48>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d901      	bls.n	800cd6c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e006      	b.n	800cd7a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	f003 0320 	and.w	r3, r3, #32
 800cd74:	2b20      	cmp	r3, #32
 800cd76:	d0f0      	beq.n	800cd5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	00030d40 	.word	0x00030d40

0800cd8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2210      	movs	r2, #16
 800cd9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3301      	adds	r3, #1
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	4a09      	ldr	r2, [pc, #36]	; (800cdcc <USB_FlushRxFifo+0x40>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d901      	bls.n	800cdb0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e006      	b.n	800cdbe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f003 0310 	and.w	r3, r3, #16
 800cdb8:	2b10      	cmp	r3, #16
 800cdba:	d0f0      	beq.n	800cd9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	00030d40 	.word	0x00030d40

0800cdd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b089      	sub	sp, #36	; 0x24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4611      	mov	r1, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	460b      	mov	r3, r1
 800cde0:	71fb      	strb	r3, [r7, #7]
 800cde2:	4613      	mov	r3, r2
 800cde4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cdee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d11a      	bne.n	800ce2c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cdf6:	88bb      	ldrh	r3, [r7, #4]
 800cdf8:	3303      	adds	r3, #3
 800cdfa:	089b      	lsrs	r3, r3, #2
 800cdfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	e00f      	b.n	800ce24 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ce04:	79fb      	ldrb	r3, [r7, #7]
 800ce06:	031a      	lsls	r2, r3, #12
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce10:	461a      	mov	r2, r3
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	3301      	adds	r3, #1
 800ce22:	61bb      	str	r3, [r7, #24]
 800ce24:	69ba      	ldr	r2, [r7, #24]
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d3eb      	bcc.n	800ce04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3724      	adds	r7, #36	; 0x24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b089      	sub	sp, #36	; 0x24
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	4613      	mov	r3, r2
 800ce46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	3303      	adds	r3, #3
 800ce54:	089b      	lsrs	r3, r3, #2
 800ce56:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	61bb      	str	r3, [r7, #24]
 800ce5c:	e00b      	b.n	800ce76 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	3301      	adds	r3, #1
 800ce74:	61bb      	str	r3, [r7, #24]
 800ce76:	69ba      	ldr	r2, [r7, #24]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d3ef      	bcc.n	800ce5e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ce7e:	69fb      	ldr	r3, [r7, #28]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3724      	adds	r7, #36	; 0x24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	4013      	ands	r3, r2
 800cea2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cea4:	68fb      	ldr	r3, [r7, #12]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	f003 0301 	and.w	r3, r3, #1
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
	...

0800ced0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3301      	adds	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4a13      	ldr	r2, [pc, #76]	; (800cf34 <USB_CoreReset+0x64>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d901      	bls.n	800ceee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e01b      	b.n	800cf26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	daf2      	bge.n	800cedc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cef6:	2300      	movs	r3, #0
 800cef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f043 0201 	orr.w	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4a09      	ldr	r2, [pc, #36]	; (800cf34 <USB_CoreReset+0x64>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d901      	bls.n	800cf18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e006      	b.n	800cf26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d0f0      	beq.n	800cf06 <USB_CoreReset+0x36>

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	00030d40 	.word	0x00030d40

0800cf38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf38:	b084      	sub	sp, #16
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	f107 001c 	add.w	r0, r7, #28
 800cf46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf54:	461a      	mov	r2, r3
 800cf56:	2300      	movs	r3, #0
 800cf58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d018      	beq.n	800cfbc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d10a      	bne.n	800cfa6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf9e:	f043 0304 	orr.w	r3, r3, #4
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	e014      	b.n	800cfd0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfb4:	f023 0304 	bic.w	r3, r3, #4
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	e009      	b.n	800cfd0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cfca:	f023 0304 	bic.w	r3, r3, #4
 800cfce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cfd0:	2110      	movs	r1, #16
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7ff feb4 	bl	800cd40 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff fed7 	bl	800cd8c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	e015      	b.n	800d010 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff0:	461a      	mov	r2, r3
 800cff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cff6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	015a      	lsls	r2, r3, #5
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	4413      	add	r3, r2
 800d000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d004:	461a      	mov	r2, r3
 800d006:	2300      	movs	r3, #0
 800d008:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	429a      	cmp	r2, r3
 800d016:	d3e5      	bcc.n	800cfe4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d018:	2101      	movs	r1, #1
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f8ac 	bl	800d178 <USB_DriveVbus>

  HAL_Delay(200U);
 800d020:	20c8      	movs	r0, #200	; 0xc8
 800d022:	f7f9 fa89 	bl	8006538 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d032:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d046:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a14      	ldr	r2, [pc, #80]	; (800d09c <USB_HostInit+0x164>)
 800d04c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <USB_HostInit+0x168>)
 800d052:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d056:	e009      	b.n	800d06c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2280      	movs	r2, #128	; 0x80
 800d05c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a10      	ldr	r2, [pc, #64]	; (800d0a4 <USB_HostInit+0x16c>)
 800d062:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a10      	ldr	r2, [pc, #64]	; (800d0a8 <USB_HostInit+0x170>)
 800d068:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d105      	bne.n	800d07e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	f043 0210 	orr.w	r2, r3, #16
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	699a      	ldr	r2, [r3, #24]
 800d082:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <USB_HostInit+0x174>)
 800d084:	4313      	orrs	r3, r2
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d096:	b004      	add	sp, #16
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	01000200 	.word	0x01000200
 800d0a0:	00e00300 	.word	0x00e00300
 800d0a4:	00600080 	.word	0x00600080
 800d0a8:	004000e0 	.word	0x004000e0
 800d0ac:	a3200008 	.word	0xa3200008

0800d0b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0ce:	f023 0303 	bic.w	r3, r3, #3
 800d0d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	f003 0303 	and.w	r3, r3, #3
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d107      	bne.n	800d102 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d0fe:	6053      	str	r3, [r2, #4]
 800d100:	e009      	b.n	800d116 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d102:	78fb      	ldrb	r3, [r7, #3]
 800d104:	2b02      	cmp	r3, #2
 800d106:	d106      	bne.n	800d116 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d10e:	461a      	mov	r2, r3
 800d110:	f241 7370 	movw	r3, #6000	; 0x1770
 800d114:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d130:	2300      	movs	r3, #0
 800d132:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d144:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d14e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d152:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d154:	2064      	movs	r0, #100	; 0x64
 800d156:	f7f9 f9ef 	bl	8006538 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d166:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d168:	200a      	movs	r0, #10
 800d16a:	f7f9 f9e5 	bl	8006538 <HAL_Delay>

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d19c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d109      	bne.n	800d1bc <USB_DriveVbus+0x44>
 800d1a8:	78fb      	ldrb	r3, [r7, #3]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d106      	bne.n	800d1bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d1b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d1ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1c6:	d109      	bne.n	800d1dc <USB_DriveVbus+0x64>
 800d1c8:	78fb      	ldrb	r3, [r7, #3]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d1d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	0c5b      	lsrs	r3, r3, #17
 800d208:	f003 0303 	and.w	r3, r3, #3
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	b29b      	uxth	r3, r3
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	4608      	mov	r0, r1
 800d246:	4611      	mov	r1, r2
 800d248:	461a      	mov	r2, r3
 800d24a:	4603      	mov	r3, r0
 800d24c:	70fb      	strb	r3, [r7, #3]
 800d24e:	460b      	mov	r3, r1
 800d250:	70bb      	strb	r3, [r7, #2]
 800d252:	4613      	mov	r3, r2
 800d254:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	4413      	add	r3, r2
 800d266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d26a:	461a      	mov	r2, r3
 800d26c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d270:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d272:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d276:	2b03      	cmp	r3, #3
 800d278:	d87e      	bhi.n	800d378 <USB_HC_Init+0x13c>
 800d27a:	a201      	add	r2, pc, #4	; (adr r2, 800d280 <USB_HC_Init+0x44>)
 800d27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d280:	0800d291 	.word	0x0800d291
 800d284:	0800d33b 	.word	0x0800d33b
 800d288:	0800d291 	.word	0x0800d291
 800d28c:	0800d2fd 	.word	0x0800d2fd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	015a      	lsls	r2, r3, #5
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	4413      	add	r3, r2
 800d298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d29c:	461a      	mov	r2, r3
 800d29e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d2a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d2a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	da10      	bge.n	800d2ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	78fa      	ldrb	r2, [r7, #3]
 800d2bc:	0151      	lsls	r1, r2, #5
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	440a      	add	r2, r1
 800d2c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2ca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d2cc:	e057      	b.n	800d37e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d051      	beq.n	800d37e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d2da:	78fb      	ldrb	r3, [r7, #3]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	78fa      	ldrb	r2, [r7, #3]
 800d2ea:	0151      	lsls	r1, r2, #5
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	440a      	add	r2, r1
 800d2f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d2f8:	60d3      	str	r3, [r2, #12]
      break;
 800d2fa:	e040      	b.n	800d37e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	4413      	add	r3, r2
 800d304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d308:	461a      	mov	r2, r3
 800d30a:	f240 639d 	movw	r3, #1693	; 0x69d
 800d30e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d314:	2b00      	cmp	r3, #0
 800d316:	da34      	bge.n	800d382 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	0151      	lsls	r1, r2, #5
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	440a      	add	r2, r1
 800d32e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d336:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d338:	e023      	b.n	800d382 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d33a:	78fb      	ldrb	r3, [r7, #3]
 800d33c:	015a      	lsls	r2, r3, #5
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	4413      	add	r3, r2
 800d342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d346:	461a      	mov	r2, r3
 800d348:	f240 2325 	movw	r3, #549	; 0x225
 800d34c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d34e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d352:	2b00      	cmp	r3, #0
 800d354:	da17      	bge.n	800d386 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d356:	78fb      	ldrb	r3, [r7, #3]
 800d358:	015a      	lsls	r2, r3, #5
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	4413      	add	r3, r2
 800d35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	0151      	lsls	r1, r2, #5
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	440a      	add	r2, r1
 800d36c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d370:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d374:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d376:	e006      	b.n	800d386 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	77fb      	strb	r3, [r7, #31]
      break;
 800d37c:	e004      	b.n	800d388 <USB_HC_Init+0x14c>
      break;
 800d37e:	bf00      	nop
 800d380:	e002      	b.n	800d388 <USB_HC_Init+0x14c>
      break;
 800d382:	bf00      	nop
 800d384:	e000      	b.n	800d388 <USB_HC_Init+0x14c>
      break;
 800d386:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d38e:	699a      	ldr	r2, [r3, #24]
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	f003 030f 	and.w	r3, r3, #15
 800d396:	2101      	movs	r1, #1
 800d398:	fa01 f303 	lsl.w	r3, r1, r3
 800d39c:	6939      	ldr	r1, [r7, #16]
 800d39e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d3b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da03      	bge.n	800d3c2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d3ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3be:	61bb      	str	r3, [r7, #24]
 800d3c0:	e001      	b.n	800d3c6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff ff0f 	bl	800d1ea <USB_GetHostSpeed>
 800d3cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d3ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d106      	bne.n	800d3e4 <USB_HC_Init+0x1a8>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d003      	beq.n	800d3e4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d3dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	e001      	b.n	800d3e8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3e8:	787b      	ldrb	r3, [r7, #1]
 800d3ea:	059b      	lsls	r3, r3, #22
 800d3ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d3f0:	78bb      	ldrb	r3, [r7, #2]
 800d3f2:	02db      	lsls	r3, r3, #11
 800d3f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d3fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3fe:	049b      	lsls	r3, r3, #18
 800d400:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d404:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d406:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d408:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d40c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d412:	78fb      	ldrb	r3, [r7, #3]
 800d414:	0159      	lsls	r1, r3, #5
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	440b      	add	r3, r1
 800d41a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d41e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d424:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d426:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d10f      	bne.n	800d44e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	4413      	add	r3, r2
 800d436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	78fa      	ldrb	r2, [r7, #3]
 800d43e:	0151      	lsls	r1, r2, #5
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	440a      	add	r2, r1
 800d444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d44c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d44e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08c      	sub	sp, #48	; 0x30
 800d45c:	af02      	add	r7, sp, #8
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	4613      	mov	r3, r2
 800d464:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	785b      	ldrb	r3, [r3, #1]
 800d46e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d470:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d474:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d02d      	beq.n	800d4de <USB_HC_StartXfer+0x86>
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	791b      	ldrb	r3, [r3, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d129      	bne.n	800d4de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d117      	bne.n	800d4c0 <USB_HC_StartXfer+0x68>
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	79db      	ldrb	r3, [r3, #7]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d003      	beq.n	800d4a0 <USB_HC_StartXfer+0x48>
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	79db      	ldrb	r3, [r3, #7]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d10f      	bne.n	800d4c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	0151      	lsls	r1, r2, #5
 800d4b2:	6a3a      	ldr	r2, [r7, #32]
 800d4b4:	440a      	add	r2, r1
 800d4b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10b      	bne.n	800d4de <USB_HC_StartXfer+0x86>
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	795b      	ldrb	r3, [r3, #5]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d107      	bne.n	800d4de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	785b      	ldrb	r3, [r3, #1]
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 fa2f 	bl	800d938 <USB_DoPing>
      return HAL_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e0f8      	b.n	800d6d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d018      	beq.n	800d518 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	8912      	ldrh	r2, [r2, #8]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	8912      	ldrh	r2, [r2, #8]
 800d4f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d4fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4fe:	8b7b      	ldrh	r3, [r7, #26]
 800d500:	429a      	cmp	r2, r3
 800d502:	d90b      	bls.n	800d51c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d504:	8b7b      	ldrh	r3, [r7, #26]
 800d506:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d508:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	8912      	ldrh	r2, [r2, #8]
 800d50e:	fb02 f203 	mul.w	r2, r2, r3
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	611a      	str	r2, [r3, #16]
 800d516:	e001      	b.n	800d51c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d518:	2301      	movs	r3, #1
 800d51a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	78db      	ldrb	r3, [r3, #3]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d007      	beq.n	800d534 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	8912      	ldrh	r2, [r2, #8]
 800d52a:	fb02 f203 	mul.w	r2, r2, r3
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	611a      	str	r2, [r3, #16]
 800d532:	e003      	b.n	800d53c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	695a      	ldr	r2, [r3, #20]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d544:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d546:	04d9      	lsls	r1, r3, #19
 800d548:	4b63      	ldr	r3, [pc, #396]	; (800d6d8 <USB_HC_StartXfer+0x280>)
 800d54a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d54c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	7a9b      	ldrb	r3, [r3, #10]
 800d552:	075b      	lsls	r3, r3, #29
 800d554:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d558:	69f9      	ldr	r1, [r7, #28]
 800d55a:	0148      	lsls	r0, r1, #5
 800d55c:	6a39      	ldr	r1, [r7, #32]
 800d55e:	4401      	add	r1, r0
 800d560:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d564:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d566:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d568:	79fb      	ldrb	r3, [r7, #7]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d009      	beq.n	800d582 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	68d9      	ldr	r1, [r3, #12]
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	015a      	lsls	r2, r3, #5
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	4413      	add	r3, r2
 800d57a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d57e:	460a      	mov	r2, r1
 800d580:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b00      	cmp	r3, #0
 800d590:	bf0c      	ite	eq
 800d592:	2301      	moveq	r3, #1
 800d594:	2300      	movne	r3, #0
 800d596:	b2db      	uxtb	r3, r3
 800d598:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	0151      	lsls	r1, r2, #5
 800d5ac:	6a3a      	ldr	r2, [r7, #32]
 800d5ae:	440a      	add	r2, r1
 800d5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	7e7b      	ldrb	r3, [r7, #25]
 800d5ca:	075b      	lsls	r3, r3, #29
 800d5cc:	69f9      	ldr	r1, [r7, #28]
 800d5ce:	0148      	lsls	r0, r1, #5
 800d5d0:	6a39      	ldr	r1, [r7, #32]
 800d5d2:	4401      	add	r1, r0
 800d5d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	015a      	lsls	r2, r3, #5
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	78db      	ldrb	r3, [r3, #3]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	e003      	b.n	800d60e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d60c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d614:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	015a      	lsls	r2, r3, #5
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	4413      	add	r3, r2
 800d61e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d622:	461a      	mov	r2, r3
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d62e:	2300      	movs	r3, #0
 800d630:	e04e      	b.n	800d6d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	78db      	ldrb	r3, [r3, #3]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d149      	bne.n	800d6ce <USB_HC_StartXfer+0x276>
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d045      	beq.n	800d6ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	79db      	ldrb	r3, [r3, #7]
 800d646:	2b03      	cmp	r3, #3
 800d648:	d830      	bhi.n	800d6ac <USB_HC_StartXfer+0x254>
 800d64a:	a201      	add	r2, pc, #4	; (adr r2, 800d650 <USB_HC_StartXfer+0x1f8>)
 800d64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d650:	0800d661 	.word	0x0800d661
 800d654:	0800d685 	.word	0x0800d685
 800d658:	0800d661 	.word	0x0800d661
 800d65c:	0800d685 	.word	0x0800d685
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	3303      	adds	r3, #3
 800d666:	089b      	lsrs	r3, r3, #2
 800d668:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d66a:	8afa      	ldrh	r2, [r7, #22]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d670:	b29b      	uxth	r3, r3
 800d672:	429a      	cmp	r2, r3
 800d674:	d91c      	bls.n	800d6b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	f043 0220 	orr.w	r2, r3, #32
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	619a      	str	r2, [r3, #24]
        }
        break;
 800d682:	e015      	b.n	800d6b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	3303      	adds	r3, #3
 800d68a:	089b      	lsrs	r3, r3, #2
 800d68c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d68e:	8afa      	ldrh	r2, [r7, #22]
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d90a      	bls.n	800d6b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800d6aa:	e003      	b.n	800d6b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d6ac:	bf00      	nop
 800d6ae:	e002      	b.n	800d6b6 <USB_HC_StartXfer+0x25e>
        break;
 800d6b0:	bf00      	nop
 800d6b2:	e000      	b.n	800d6b6 <USB_HC_StartXfer+0x25e>
        break;
 800d6b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	68d9      	ldr	r1, [r3, #12]
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	785a      	ldrb	r2, [r3, #1]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	9000      	str	r0, [sp, #0]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff fb81 	bl	800cdd0 <USB_WritePacket>
  }

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3728      	adds	r7, #40	; 0x28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	1ff80000 	.word	0x1ff80000

0800d6dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	b29b      	uxth	r3, r3
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b089      	sub	sp, #36	; 0x24
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	460b      	mov	r3, r1
 800d708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d70e:	78fb      	ldrb	r3, [r7, #3]
 800d710:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	015a      	lsls	r2, r3, #5
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	4413      	add	r3, r2
 800d71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	0c9b      	lsrs	r3, r3, #18
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	4413      	add	r3, r2
 800d734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	0fdb      	lsrs	r3, r3, #31
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	f003 0320 	and.w	r3, r3, #32
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	d104      	bne.n	800d758 <USB_HC_Halt+0x5a>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	e0e8      	b.n	800d92a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <USB_HC_Halt+0x66>
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	2b02      	cmp	r3, #2
 800d762:	d173      	bne.n	800d84c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d77e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d782:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f003 0320 	and.w	r3, r3, #32
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 80cb 	bne.w	800d928 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d796:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d143      	bne.n	800d826 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	0151      	lsls	r1, r2, #5
 800d7b0:	69ba      	ldr	r2, [r7, #24]
 800d7b2:	440a      	add	r2, r1
 800d7b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	015a      	lsls	r2, r3, #5
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	0151      	lsls	r1, r2, #5
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	440a      	add	r2, r1
 800d7d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	0151      	lsls	r1, r2, #5
 800d7f0:	69ba      	ldr	r2, [r7, #24]
 800d7f2:	440a      	add	r2, r1
 800d7f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7fc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	3301      	adds	r3, #1
 800d802:	61fb      	str	r3, [r7, #28]
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d80a:	d81d      	bhi.n	800d848 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	4413      	add	r3, r2
 800d814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d81e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d822:	d0ec      	beq.n	800d7fe <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d824:	e080      	b.n	800d928 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	015a      	lsls	r2, r3, #5
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	4413      	add	r3, r2
 800d82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	0151      	lsls	r1, r2, #5
 800d838:	69ba      	ldr	r2, [r7, #24]
 800d83a:	440a      	add	r2, r1
 800d83c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d844:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d846:	e06f      	b.n	800d928 <USB_HC_Halt+0x22a>
            break;
 800d848:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d84a:	e06d      	b.n	800d928 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	015a      	lsls	r2, r3, #5
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	4413      	add	r3, r2
 800d854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	0151      	lsls	r1, r2, #5
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	440a      	add	r2, r1
 800d862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d86a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d143      	bne.n	800d904 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	4413      	add	r3, r2
 800d884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	0151      	lsls	r1, r2, #5
 800d88e:	69ba      	ldr	r2, [r7, #24]
 800d890:	440a      	add	r2, r1
 800d892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d89a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	015a      	lsls	r2, r3, #5
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	0151      	lsls	r1, r2, #5
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	440a      	add	r2, r1
 800d8b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	0151      	lsls	r1, r2, #5
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	440a      	add	r2, r1
 800d8d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d8da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	61fb      	str	r3, [r7, #28]
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8e8:	d81d      	bhi.n	800d926 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d900:	d0ec      	beq.n	800d8dc <USB_HC_Halt+0x1de>
 800d902:	e011      	b.n	800d928 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	0151      	lsls	r1, r2, #5
 800d916:	69ba      	ldr	r2, [r7, #24]
 800d918:	440a      	add	r2, r1
 800d91a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d91e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	e000      	b.n	800d928 <USB_HC_Halt+0x22a>
          break;
 800d926:	bf00      	nop
    }
  }

  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3724      	adds	r7, #36	; 0x24
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
	...

0800d938 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d948:	78fb      	ldrb	r3, [r7, #3]
 800d94a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d94c:	2301      	movs	r3, #1
 800d94e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	04da      	lsls	r2, r3, #19
 800d954:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <USB_DoPing+0x74>)
 800d956:	4013      	ands	r3, r2
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	0151      	lsls	r1, r2, #5
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	440a      	add	r2, r1
 800d960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d968:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	015a      	lsls	r2, r3, #5
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	4413      	add	r3, r2
 800d972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d980:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d988:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	015a      	lsls	r2, r3, #5
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	4413      	add	r3, r2
 800d992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d996:	461a      	mov	r2, r3
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	371c      	adds	r7, #28
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	1ff80000 	.word	0x1ff80000

0800d9b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff f981 	bl	800ccc8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d9c6:	2110      	movs	r1, #16
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff f9b9 	bl	800cd40 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7ff f9dc 	bl	800cd8c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	613b      	str	r3, [r7, #16]
 800d9d8:	e01f      	b.n	800da1a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800da00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	015a      	lsls	r2, r3, #5
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4413      	add	r3, r2
 800da0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da0e:	461a      	mov	r2, r3
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3301      	adds	r3, #1
 800da18:	613b      	str	r3, [r7, #16]
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b0f      	cmp	r3, #15
 800da1e:	d9dc      	bls.n	800d9da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800da20:	2300      	movs	r3, #0
 800da22:	613b      	str	r3, [r7, #16]
 800da24:	e034      	b.n	800da90 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	015a      	lsls	r2, r3, #5
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	4413      	add	r3, r2
 800da2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da3c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800da4c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	015a      	lsls	r2, r3, #5
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	4413      	add	r3, r2
 800da56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da5a:	461a      	mov	r2, r3
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	3301      	adds	r3, #1
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da6c:	d80c      	bhi.n	800da88 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4413      	add	r3, r2
 800da76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da84:	d0ec      	beq.n	800da60 <USB_StopHost+0xb0>
 800da86:	e000      	b.n	800da8a <USB_StopHost+0xda>
        break;
 800da88:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	3301      	adds	r3, #1
 800da8e:	613b      	str	r3, [r7, #16]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	2b0f      	cmp	r3, #15
 800da94:	d9c7      	bls.n	800da26 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da9c:	461a      	mov	r2, r3
 800da9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daa2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daaa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff f8fa 	bl	800cca6 <USB_EnableGlobalInt>

  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dabc:	b590      	push	{r4, r7, lr}
 800dabe:	b089      	sub	sp, #36	; 0x24
 800dac0:	af04      	add	r7, sp, #16
 800dac2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800dac4:	2301      	movs	r3, #1
 800dac6:	2202      	movs	r2, #2
 800dac8:	2102      	movs	r1, #2
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fc66 	bl	800e39c <USBH_FindInterface>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
 800dad6:	2bff      	cmp	r3, #255	; 0xff
 800dad8:	d002      	beq.n	800dae0 <USBH_CDC_InterfaceInit+0x24>
 800dada:	7bfb      	ldrb	r3, [r7, #15]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d901      	bls.n	800dae4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dae0:	2302      	movs	r3, #2
 800dae2:	e13d      	b.n	800dd60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fc3b 	bl	800e364 <USBH_SelectInterface>
 800daee:	4603      	mov	r3, r0
 800daf0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d001      	beq.n	800dafc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800daf8:	2302      	movs	r3, #2
 800dafa:	e131      	b.n	800dd60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800db02:	2050      	movs	r0, #80	; 0x50
 800db04:	f002 fa00 	bl	800ff08 <malloc>
 800db08:	4603      	mov	r3, r0
 800db0a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db12:	69db      	ldr	r3, [r3, #28]
 800db14:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800db1c:	2302      	movs	r3, #2
 800db1e:	e11f      	b.n	800dd60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800db20:	2250      	movs	r2, #80	; 0x50
 800db22:	2100      	movs	r1, #0
 800db24:	68b8      	ldr	r0, [r7, #8]
 800db26:	f002 fa0d 	bl	800ff44 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	211a      	movs	r1, #26
 800db30:	fb01 f303 	mul.w	r3, r1, r3
 800db34:	4413      	add	r3, r2
 800db36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	da15      	bge.n	800db6e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800db42:	7bfb      	ldrb	r3, [r7, #15]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	211a      	movs	r1, #26
 800db48:	fb01 f303 	mul.w	r3, r1, r3
 800db4c:	4413      	add	r3, r2
 800db4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	211a      	movs	r1, #26
 800db5e:	fb01 f303 	mul.w	r3, r1, r3
 800db62:	4413      	add	r3, r2
 800db64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800db68:	881a      	ldrh	r2, [r3, #0]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	785b      	ldrb	r3, [r3, #1]
 800db72:	4619      	mov	r1, r3
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f001 fe32 	bl	800f7de <USBH_AllocPipe>
 800db7a:	4603      	mov	r3, r0
 800db7c:	461a      	mov	r2, r3
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	7819      	ldrb	r1, [r3, #0]
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	7858      	ldrb	r0, [r3, #1]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	8952      	ldrh	r2, [r2, #10]
 800db9a:	9202      	str	r2, [sp, #8]
 800db9c:	2203      	movs	r2, #3
 800db9e:	9201      	str	r2, [sp, #4]
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	4623      	mov	r3, r4
 800dba4:	4602      	mov	r2, r0
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 fdea 	bl	800f780 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f002 f8f9 	bl	800fdac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dbba:	2300      	movs	r3, #0
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	210a      	movs	r1, #10
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fbeb 	bl	800e39c <USBH_FindInterface>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	2bff      	cmp	r3, #255	; 0xff
 800dbce:	d002      	beq.n	800dbd6 <USBH_CDC_InterfaceInit+0x11a>
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d901      	bls.n	800dbda <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dbd6:	2302      	movs	r3, #2
 800dbd8:	e0c2      	b.n	800dd60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dbda:	7bfb      	ldrb	r3, [r7, #15]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	211a      	movs	r1, #26
 800dbe0:	fb01 f303 	mul.w	r3, r1, r3
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b25b      	sxtb	r3, r3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	da16      	bge.n	800dc20 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	211a      	movs	r1, #26
 800dbf8:	fb01 f303 	mul.w	r3, r1, r3
 800dbfc:	4413      	add	r3, r2
 800dbfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc02:	781a      	ldrb	r2, [r3, #0]
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	211a      	movs	r1, #26
 800dc0e:	fb01 f303 	mul.w	r3, r1, r3
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	835a      	strh	r2, [r3, #26]
 800dc1e:	e015      	b.n	800dc4c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	211a      	movs	r1, #26
 800dc26:	fb01 f303 	mul.w	r3, r1, r3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc30:	781a      	ldrb	r2, [r3, #0]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	211a      	movs	r1, #26
 800dc3c:	fb01 f303 	mul.w	r3, r1, r3
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc46:	881a      	ldrh	r2, [r3, #0]
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	211a      	movs	r1, #26
 800dc52:	fb01 f303 	mul.w	r3, r1, r3
 800dc56:	4413      	add	r3, r2
 800dc58:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	b25b      	sxtb	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	da16      	bge.n	800dc92 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	211a      	movs	r1, #26
 800dc6a:	fb01 f303 	mul.w	r3, r1, r3
 800dc6e:	4413      	add	r3, r2
 800dc70:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	211a      	movs	r1, #26
 800dc80:	fb01 f303 	mul.w	r3, r1, r3
 800dc84:	4413      	add	r3, r2
 800dc86:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dc8a:	881a      	ldrh	r2, [r3, #0]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	835a      	strh	r2, [r3, #26]
 800dc90:	e015      	b.n	800dcbe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	211a      	movs	r1, #26
 800dc98:	fb01 f303 	mul.w	r3, r1, r3
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dca2:	781a      	ldrb	r2, [r3, #0]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	211a      	movs	r1, #26
 800dcae:	fb01 f303 	mul.w	r3, r1, r3
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dcb8:	881a      	ldrh	r2, [r3, #0]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	7b9b      	ldrb	r3, [r3, #14]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f001 fd8a 	bl	800f7de <USBH_AllocPipe>
 800dcca:	4603      	mov	r3, r0
 800dccc:	461a      	mov	r2, r3
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	7bdb      	ldrb	r3, [r3, #15]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f001 fd80 	bl	800f7de <USBH_AllocPipe>
 800dcde:	4603      	mov	r3, r0
 800dce0:	461a      	mov	r2, r3
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	7b59      	ldrb	r1, [r3, #13]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	7b98      	ldrb	r0, [r3, #14]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	8b12      	ldrh	r2, [r2, #24]
 800dcfe:	9202      	str	r2, [sp, #8]
 800dd00:	2202      	movs	r2, #2
 800dd02:	9201      	str	r2, [sp, #4]
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	4623      	mov	r3, r4
 800dd08:	4602      	mov	r2, r0
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f001 fd38 	bl	800f780 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	7b19      	ldrb	r1, [r3, #12]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	7bd8      	ldrb	r0, [r3, #15]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	8b52      	ldrh	r2, [r2, #26]
 800dd28:	9202      	str	r2, [sp, #8]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	9201      	str	r2, [sp, #4]
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	4623      	mov	r3, r4
 800dd32:	4602      	mov	r2, r0
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f001 fd23 	bl	800f780 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	7b5b      	ldrb	r3, [r3, #13]
 800dd46:	2200      	movs	r2, #0
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f002 f82e 	bl	800fdac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	7b1b      	ldrb	r3, [r3, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f002 f827 	bl	800fdac <USBH_LL_SetToggle>

  return USBH_OK;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd90      	pop	{r4, r7, pc}

0800dd68 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd76:	69db      	ldr	r3, [r3, #28]
 800dd78:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00e      	beq.n	800dda0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f001 fd18 	bl	800f7be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f001 fd43 	bl	800f820 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	7b1b      	ldrb	r3, [r3, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00e      	beq.n	800ddc6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	7b1b      	ldrb	r3, [r3, #12]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f001 fd05 	bl	800f7be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	7b1b      	ldrb	r3, [r3, #12]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f001 fd30 	bl	800f820 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	7b5b      	ldrb	r3, [r3, #13]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	7b5b      	ldrb	r3, [r3, #13]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 fcf2 	bl	800f7be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	7b5b      	ldrb	r3, [r3, #13]
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f001 fd1d 	bl	800f820 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddf2:	69db      	ldr	r3, [r3, #28]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00b      	beq.n	800de10 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddfe:	69db      	ldr	r3, [r3, #28]
 800de00:	4618      	mov	r0, r3
 800de02:	f002 f889 	bl	800ff18 <free>
    phost->pActiveClass->pData = 0U;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de0c:	2200      	movs	r2, #0
 800de0e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de28:	69db      	ldr	r3, [r3, #28]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	3340      	adds	r3, #64	; 0x40
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f8b1 	bl	800df9a <GetLineCoding>
 800de38:	4603      	mov	r3, r0
 800de3a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800de3c:	7afb      	ldrb	r3, [r7, #11]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d105      	bne.n	800de4e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de48:	2102      	movs	r1, #2
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800de4e:	7afb      	ldrb	r3, [r7, #11]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800de60:	2301      	movs	r3, #1
 800de62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de6e:	69db      	ldr	r3, [r3, #28]
 800de70:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800de78:	2b04      	cmp	r3, #4
 800de7a:	d877      	bhi.n	800df6c <USBH_CDC_Process+0x114>
 800de7c:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <USBH_CDC_Process+0x2c>)
 800de7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de82:	bf00      	nop
 800de84:	0800de99 	.word	0x0800de99
 800de88:	0800de9f 	.word	0x0800de9f
 800de8c:	0800decf 	.word	0x0800decf
 800de90:	0800df43 	.word	0x0800df43
 800de94:	0800df51 	.word	0x0800df51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
      break;
 800de9c:	e06d      	b.n	800df7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f897 	bl	800dfd8 <SetLineCoding>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800deae:	7bbb      	ldrb	r3, [r7, #14]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d104      	bne.n	800debe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2202      	movs	r2, #2
 800deb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800debc:	e058      	b.n	800df70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800debe:	7bbb      	ldrb	r3, [r7, #14]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d055      	beq.n	800df70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2204      	movs	r2, #4
 800dec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800decc:	e050      	b.n	800df70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	3340      	adds	r3, #64	; 0x40
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f860 	bl	800df9a <GetLineCoding>
 800deda:	4603      	mov	r3, r0
 800dedc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dede:	7bbb      	ldrb	r3, [r7, #14]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d126      	bne.n	800df32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800def6:	791b      	ldrb	r3, [r3, #4]
 800def8:	429a      	cmp	r2, r3
 800defa:	d13b      	bne.n	800df74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df08:	429a      	cmp	r2, r3
 800df0a:	d133      	bne.n	800df74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df18:	429a      	cmp	r2, r3
 800df1a:	d12b      	bne.n	800df74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df26:	429a      	cmp	r2, r3
 800df28:	d124      	bne.n	800df74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f958 	bl	800e1e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df30:	e020      	b.n	800df74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800df32:	7bbb      	ldrb	r3, [r7, #14]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d01d      	beq.n	800df74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2204      	movs	r2, #4
 800df3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800df40:	e018      	b.n	800df74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f867 	bl	800e016 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f8da 	bl	800e102 <CDC_ProcessReception>
      break;
 800df4e:	e014      	b.n	800df7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800df50:	2100      	movs	r1, #0
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 ffe3 	bl	800ef1e <USBH_ClrFeature>
 800df58:	4603      	mov	r3, r0
 800df5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800df6a:	e005      	b.n	800df78 <USBH_CDC_Process+0x120>

    default:
      break;
 800df6c:	bf00      	nop
 800df6e:	e004      	b.n	800df7a <USBH_CDC_Process+0x122>
      break;
 800df70:	bf00      	nop
 800df72:	e002      	b.n	800df7a <USBH_CDC_Process+0x122>
      break;
 800df74:	bf00      	nop
 800df76:	e000      	b.n	800df7a <USBH_CDC_Process+0x122>
      break;
 800df78:	bf00      	nop

  }

  return status;
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b082      	sub	sp, #8
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	22a1      	movs	r2, #161	; 0xa1
 800dfa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2221      	movs	r2, #33	; 0x21
 800dfae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2207      	movs	r2, #7
 800dfc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2207      	movs	r2, #7
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f001 f988 	bl	800f2de <USBH_CtlReq>
 800dfce:	4603      	mov	r3, r0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2221      	movs	r2, #33	; 0x21
 800dfe6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2220      	movs	r2, #32
 800dfec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2207      	movs	r2, #7
 800dffe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	2207      	movs	r2, #7
 800e004:	4619      	mov	r1, r3
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f001 f969 	bl	800f2de <USBH_CtlReq>
 800e00c:	4603      	mov	r3, r0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af02      	add	r7, sp, #8
 800e01c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e028:	2300      	movs	r3, #0
 800e02a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e032:	2b01      	cmp	r3, #1
 800e034:	d002      	beq.n	800e03c <CDC_ProcessTransmission+0x26>
 800e036:	2b02      	cmp	r3, #2
 800e038:	d023      	beq.n	800e082 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e03a:	e05e      	b.n	800e0fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	8b12      	ldrh	r2, [r2, #24]
 800e044:	4293      	cmp	r3, r2
 800e046:	d90b      	bls.n	800e060 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	69d9      	ldr	r1, [r3, #28]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	8b1a      	ldrh	r2, [r3, #24]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	7b5b      	ldrb	r3, [r3, #13]
 800e054:	2001      	movs	r0, #1
 800e056:	9000      	str	r0, [sp, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f001 fb4e 	bl	800f6fa <USBH_BulkSendData>
 800e05e:	e00b      	b.n	800e078 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e068:	b29a      	uxth	r2, r3
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	7b5b      	ldrb	r3, [r3, #13]
 800e06e:	2001      	movs	r0, #1
 800e070:	9000      	str	r0, [sp, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f001 fb41 	bl	800f6fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2202      	movs	r2, #2
 800e07c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e080:	e03b      	b.n	800e0fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	7b5b      	ldrb	r3, [r3, #13]
 800e086:	4619      	mov	r1, r3
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f001 fe65 	bl	800fd58 <USBH_LL_GetURBState>
 800e08e:	4603      	mov	r3, r0
 800e090:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d128      	bne.n	800e0ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	8b12      	ldrh	r2, [r2, #24]
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d90e      	bls.n	800e0c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	8b12      	ldrh	r2, [r2, #24]
 800e0ac:	1a9a      	subs	r2, r3, r2
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	8b12      	ldrh	r2, [r2, #24]
 800e0ba:	441a      	add	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	61da      	str	r2, [r3, #28]
 800e0c0:	e002      	b.n	800e0c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d004      	beq.n	800e0da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e0d8:	e00e      	b.n	800e0f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f868 	bl	800e1b8 <USBH_CDC_TransmitCallback>
      break;
 800e0e8:	e006      	b.n	800e0f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e0ea:	7afb      	ldrb	r3, [r7, #11]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d103      	bne.n	800e0f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e0f8:	bf00      	nop
  }
}
 800e0fa:	bf00      	nop
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b086      	sub	sp, #24
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e110:	69db      	ldr	r3, [r3, #28]
 800e112:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e114:	2300      	movs	r3, #0
 800e116:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d002      	beq.n	800e128 <CDC_ProcessReception+0x26>
 800e122:	2b04      	cmp	r3, #4
 800e124:	d00e      	beq.n	800e144 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e126:	e043      	b.n	800e1b0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	6a19      	ldr	r1, [r3, #32]
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	8b5a      	ldrh	r2, [r3, #26]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	7b1b      	ldrb	r3, [r3, #12]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 fb05 	bl	800f744 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2204      	movs	r2, #4
 800e13e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e142:	e035      	b.n	800e1b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	7b1b      	ldrb	r3, [r3, #12]
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f001 fe04 	bl	800fd58 <USBH_LL_GetURBState>
 800e150:	4603      	mov	r3, r0
 800e152:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e154:	7cfb      	ldrb	r3, [r7, #19]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d129      	bne.n	800e1ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	7b1b      	ldrb	r3, [r3, #12]
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f001 fd67 	bl	800fc34 <USBH_LL_GetLastXferSize>
 800e166:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d016      	beq.n	800e1a0 <CDC_ProcessReception+0x9e>
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	8b5b      	ldrh	r3, [r3, #26]
 800e176:	461a      	mov	r2, r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d910      	bls.n	800e1a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	1ad2      	subs	r2, r2, r3
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	6a1a      	ldr	r2, [r3, #32]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	441a      	add	r2, r3
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	2203      	movs	r2, #3
 800e19a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e19e:	e006      	b.n	800e1ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f80f 	bl	800e1cc <USBH_CDC_ReceiveCallback>
      break;
 800e1ae:	bf00      	nop
  }
}
 800e1b0:	bf00      	nop
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e208:	2302      	movs	r3, #2
 800e20a:	e029      	b.n	800e260 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	79fa      	ldrb	r2, [r7, #7]
 800e210:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2200      	movs	r2, #0
 800e220:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f000 f81f 	bl	800e268 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d003      	beq.n	800e258 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f001 fc37 	bl	800facc <USBH_LL_Init>

  return USBH_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e270:	2300      	movs	r3, #0
 800e272:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e274:	2300      	movs	r3, #0
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e009      	b.n	800e28e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	33e0      	adds	r3, #224	; 0xe0
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	2200      	movs	r2, #0
 800e286:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3301      	adds	r3, #1
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b0e      	cmp	r3, #14
 800e292:	d9f2      	bls.n	800e27a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e294:	2300      	movs	r3, #0
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	e009      	b.n	800e2ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4413      	add	r3, r2
 800e2a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2b4:	d3f1      	bcc.n	800e29a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2240      	movs	r2, #64	; 0x40
 800e2da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d016      	beq.n	800e352 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10e      	bne.n	800e34c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e334:	1c59      	adds	r1, r3, #1
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	33de      	adds	r3, #222	; 0xde
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e346:	2300      	movs	r3, #0
 800e348:	73fb      	strb	r3, [r7, #15]
 800e34a:	e004      	b.n	800e356 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e34c:	2302      	movs	r3, #2
 800e34e:	73fb      	strb	r3, [r7, #15]
 800e350:	e001      	b.n	800e356 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e352:	2302      	movs	r3, #2
 800e354:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e356:	7bfb      	ldrb	r3, [r7, #15]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e370:	2300      	movs	r3, #0
 800e372:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e37a:	78fa      	ldrb	r2, [r7, #3]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d204      	bcs.n	800e38a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	78fa      	ldrb	r2, [r7, #3]
 800e384:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e388:	e001      	b.n	800e38e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e38a:	2302      	movs	r3, #2
 800e38c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b087      	sub	sp, #28
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	70fb      	strb	r3, [r7, #3]
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	70bb      	strb	r3, [r7, #2]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e3c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e3c6:	e025      	b.n	800e414 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ca:	221a      	movs	r2, #26
 800e3cc:	fb02 f303 	mul.w	r3, r2, r3
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3302      	adds	r3, #2
 800e3d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	795b      	ldrb	r3, [r3, #5]
 800e3de:	78fa      	ldrb	r2, [r7, #3]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d002      	beq.n	800e3ea <USBH_FindInterface+0x4e>
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	2bff      	cmp	r3, #255	; 0xff
 800e3e8:	d111      	bne.n	800e40e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e3ee:	78ba      	ldrb	r2, [r7, #2]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d002      	beq.n	800e3fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e3f4:	78bb      	ldrb	r3, [r7, #2]
 800e3f6:	2bff      	cmp	r3, #255	; 0xff
 800e3f8:	d109      	bne.n	800e40e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e3fe:	787a      	ldrb	r2, [r7, #1]
 800e400:	429a      	cmp	r2, r3
 800e402:	d002      	beq.n	800e40a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e404:	787b      	ldrb	r3, [r7, #1]
 800e406:	2bff      	cmp	r3, #255	; 0xff
 800e408:	d101      	bne.n	800e40e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e40a:	7dfb      	ldrb	r3, [r7, #23]
 800e40c:	e006      	b.n	800e41c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	3301      	adds	r3, #1
 800e412:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e414:	7dfb      	ldrb	r3, [r7, #23]
 800e416:	2b01      	cmp	r3, #1
 800e418:	d9d6      	bls.n	800e3c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e41a:	23ff      	movs	r3, #255	; 0xff
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	371c      	adds	r7, #28
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f001 fb87 	bl	800fb44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e436:	2101      	movs	r1, #1
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f001 fca0 	bl	800fd7e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af04      	add	r7, sp, #16
 800e44e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e450:	2302      	movs	r3, #2
 800e452:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e454:	2300      	movs	r3, #0
 800e456:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b01      	cmp	r3, #1
 800e462:	d102      	bne.n	800e46a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2203      	movs	r2, #3
 800e468:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b0b      	cmp	r3, #11
 800e472:	f200 81b3 	bhi.w	800e7dc <USBH_Process+0x394>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <USBH_Process+0x34>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e4ad 	.word	0x0800e4ad
 800e480:	0800e4df 	.word	0x0800e4df
 800e484:	0800e547 	.word	0x0800e547
 800e488:	0800e777 	.word	0x0800e777
 800e48c:	0800e7dd 	.word	0x0800e7dd
 800e490:	0800e5eb 	.word	0x0800e5eb
 800e494:	0800e71d 	.word	0x0800e71d
 800e498:	0800e621 	.word	0x0800e621
 800e49c:	0800e641 	.word	0x0800e641
 800e4a0:	0800e661 	.word	0x0800e661
 800e4a4:	0800e68f 	.word	0x0800e68f
 800e4a8:	0800e75f 	.word	0x0800e75f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8193 	beq.w	800e7e0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e4c0:	20c8      	movs	r0, #200	; 0xc8
 800e4c2:	f001 fca3 	bl	800fe0c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f001 fb99 	bl	800fbfe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e4dc:	e180      	b.n	800e7e0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d107      	bne.n	800e4f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4f6:	e182      	b.n	800e7fe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e4fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e502:	d914      	bls.n	800e52e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e50a:	3301      	adds	r3, #1
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	d903      	bls.n	800e526 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	220d      	movs	r2, #13
 800e522:	701a      	strb	r2, [r3, #0]
      break;
 800e524:	e16b      	b.n	800e7fe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	701a      	strb	r2, [r3, #0]
      break;
 800e52c:	e167      	b.n	800e7fe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e534:	f103 020a 	add.w	r2, r3, #10
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e53e:	200a      	movs	r0, #10
 800e540:	f001 fc64 	bl	800fe0c <USBH_Delay>
      break;
 800e544:	e15b      	b.n	800e7fe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d005      	beq.n	800e55c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e556:	2104      	movs	r1, #4
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e55c:	2064      	movs	r0, #100	; 0x64
 800e55e:	f001 fc55 	bl	800fe0c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 fb24 	bl	800fbb0 <USBH_LL_GetSpeed>
 800e568:	4603      	mov	r3, r0
 800e56a:	461a      	mov	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2205      	movs	r2, #5
 800e576:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e578:	2100      	movs	r1, #0
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f001 f92f 	bl	800f7de <USBH_AllocPipe>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e588:	2180      	movs	r1, #128	; 0x80
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f927 	bl	800f7de <USBH_AllocPipe>
 800e590:	4603      	mov	r3, r0
 800e592:	461a      	mov	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7919      	ldrb	r1, [r3, #4]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e5ac:	b292      	uxth	r2, r2
 800e5ae:	9202      	str	r2, [sp, #8]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	9201      	str	r2, [sp, #4]
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2280      	movs	r2, #128	; 0x80
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 f8e0 	bl	800f780 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	7959      	ldrb	r1, [r3, #5]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e5d4:	b292      	uxth	r2, r2
 800e5d6:	9202      	str	r2, [sp, #8]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	9201      	str	r2, [sp, #4]
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 f8cc 	bl	800f780 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e5e8:	e109      	b.n	800e7fe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f90c 	bl	800e808 <USBH_HandleEnum>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e5f4:	7bbb      	ldrb	r3, [r7, #14]
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f040 80f3 	bne.w	800e7e4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d103      	bne.n	800e618 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2208      	movs	r2, #8
 800e614:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e616:	e0e5      	b.n	800e7e4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2207      	movs	r2, #7
 800e61c:	701a      	strb	r2, [r3, #0]
      break;
 800e61e:	e0e1      	b.n	800e7e4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 80de 	beq.w	800e7e8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e632:	2101      	movs	r1, #1
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2208      	movs	r2, #8
 800e63c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e63e:	e0d3      	b.n	800e7e8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e646:	b29b      	uxth	r3, r3
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fc20 	bl	800ee90 <USBH_SetCfg>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	f040 80ca 	bne.w	800e7ec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2209      	movs	r2, #9
 800e65c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e65e:	e0c5      	b.n	800e7ec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00b      	beq.n	800e686 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e66e:	2101      	movs	r1, #1
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fc30 	bl	800eed6 <USBH_SetFeature>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f040 80b9 	bne.w	800e7f0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	220a      	movs	r2, #10
 800e682:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e684:	e0b4      	b.n	800e7f0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	220a      	movs	r2, #10
 800e68a:	701a      	strb	r2, [r3, #0]
      break;
 800e68c:	e0b0      	b.n	800e7f0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80ad 	beq.w	800e7f4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	73fb      	strb	r3, [r7, #15]
 800e6a6:	e016      	b.n	800e6d6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e6a8:	7bfa      	ldrb	r2, [r7, #15]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	32de      	adds	r2, #222	; 0xde
 800e6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b2:	791a      	ldrb	r2, [r3, #4]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d108      	bne.n	800e6d0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e6be:	7bfa      	ldrb	r2, [r7, #15]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	32de      	adds	r2, #222	; 0xde
 800e6c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e6ce:	e005      	b.n	800e6dc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	73fb      	strb	r3, [r7, #15]
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0e5      	beq.n	800e6a8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d016      	beq.n	800e714 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	4798      	blx	r3
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d109      	bne.n	800e70c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2206      	movs	r2, #6
 800e6fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e704:	2103      	movs	r1, #3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e70a:	e073      	b.n	800e7f4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	220d      	movs	r2, #13
 800e710:	701a      	strb	r2, [r3, #0]
      break;
 800e712:	e06f      	b.n	800e7f4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	220d      	movs	r2, #13
 800e718:	701a      	strb	r2, [r3, #0]
      break;
 800e71a:	e06b      	b.n	800e7f4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e722:	2b00      	cmp	r3, #0
 800e724:	d017      	beq.n	800e756 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4798      	blx	r3
 800e732:	4603      	mov	r3, r0
 800e734:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e736:	7bbb      	ldrb	r3, [r7, #14]
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d103      	bne.n	800e746 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	220b      	movs	r2, #11
 800e742:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e744:	e058      	b.n	800e7f8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d154      	bne.n	800e7f8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	220d      	movs	r2, #13
 800e752:	701a      	strb	r2, [r3, #0]
      break;
 800e754:	e050      	b.n	800e7f8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	220d      	movs	r2, #13
 800e75a:	701a      	strb	r2, [r3, #0]
      break;
 800e75c:	e04c      	b.n	800e7f8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d049      	beq.n	800e7fc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	4798      	blx	r3
      }
      break;
 800e774:	e042      	b.n	800e7fc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff fd72 	bl	800e268 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d009      	beq.n	800e7a2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7b2:	2105      	movs	r1, #5
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d107      	bne.n	800e7d4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7ff fe2b 	bl	800e428 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e7d2:	e014      	b.n	800e7fe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f001 f9b5 	bl	800fb44 <USBH_LL_Start>
      break;
 800e7da:	e010      	b.n	800e7fe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e7dc:	bf00      	nop
 800e7de:	e00e      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7e0:	bf00      	nop
 800e7e2:	e00c      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7e4:	bf00      	nop
 800e7e6:	e00a      	b.n	800e7fe <USBH_Process+0x3b6>
    break;
 800e7e8:	bf00      	nop
 800e7ea:	e008      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7ec:	bf00      	nop
 800e7ee:	e006      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7f0:	bf00      	nop
 800e7f2:	e004      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7f4:	bf00      	nop
 800e7f6:	e002      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7f8:	bf00      	nop
 800e7fa:	e000      	b.n	800e7fe <USBH_Process+0x3b6>
      break;
 800e7fc:	bf00      	nop
  }
  return USBH_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b088      	sub	sp, #32
 800e80c:	af04      	add	r7, sp, #16
 800e80e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e810:	2301      	movs	r3, #1
 800e812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e814:	2301      	movs	r3, #1
 800e816:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	785b      	ldrb	r3, [r3, #1]
 800e81c:	2b07      	cmp	r3, #7
 800e81e:	f200 81c1 	bhi.w	800eba4 <USBH_HandleEnum+0x39c>
 800e822:	a201      	add	r2, pc, #4	; (adr r2, 800e828 <USBH_HandleEnum+0x20>)
 800e824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e828:	0800e849 	.word	0x0800e849
 800e82c:	0800e907 	.word	0x0800e907
 800e830:	0800e971 	.word	0x0800e971
 800e834:	0800e9ff 	.word	0x0800e9ff
 800e838:	0800ea69 	.word	0x0800ea69
 800e83c:	0800ead9 	.word	0x0800ead9
 800e840:	0800eb1f 	.word	0x0800eb1f
 800e844:	0800eb65 	.word	0x0800eb65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e848:	2108      	movs	r1, #8
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fa50 	bl	800ecf0 <USBH_Get_DevDesc>
 800e850:	4603      	mov	r3, r0
 800e852:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e854:	7bbb      	ldrb	r3, [r7, #14]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d130      	bne.n	800e8bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	7919      	ldrb	r1, [r3, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e87e:	b292      	uxth	r2, r2
 800e880:	9202      	str	r2, [sp, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	9201      	str	r2, [sp, #4]
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	4603      	mov	r3, r0
 800e88a:	2280      	movs	r2, #128	; 0x80
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 ff77 	bl	800f780 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	7959      	ldrb	r1, [r3, #5]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8a6:	b292      	uxth	r2, r2
 800e8a8:	9202      	str	r2, [sp, #8]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	9201      	str	r2, [sp, #4]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 ff63 	bl	800f780 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e8ba:	e175      	b.n	800eba8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	f040 8172 	bne.w	800eba8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d903      	bls.n	800e8e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	220d      	movs	r2, #13
 800e8e2:	701a      	strb	r2, [r3, #0]
      break;
 800e8e4:	e160      	b.n	800eba8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	795b      	ldrb	r3, [r3, #5]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 ff97 	bl	800f820 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	791b      	ldrb	r3, [r3, #4]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 ff91 	bl	800f820 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
      break;
 800e904:	e150      	b.n	800eba8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e906:	2112      	movs	r1, #18
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 f9f1 	bl	800ecf0 <USBH_Get_DevDesc>
 800e90e:	4603      	mov	r3, r0
 800e910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e912:	7bbb      	ldrb	r3, [r7, #14]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d103      	bne.n	800e920 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2202      	movs	r2, #2
 800e91c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e91e:	e145      	b.n	800ebac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e920:	7bbb      	ldrb	r3, [r7, #14]
 800e922:	2b03      	cmp	r3, #3
 800e924:	f040 8142 	bne.w	800ebac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e92e:	3301      	adds	r3, #1
 800e930:	b2da      	uxtb	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d903      	bls.n	800e94a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	220d      	movs	r2, #13
 800e946:	701a      	strb	r2, [r3, #0]
      break;
 800e948:	e130      	b.n	800ebac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	795b      	ldrb	r3, [r3, #5]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 ff65 	bl	800f820 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	791b      	ldrb	r3, [r3, #4]
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 ff5f 	bl	800f820 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	701a      	strb	r2, [r3, #0]
      break;
 800e96e:	e11d      	b.n	800ebac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e970:	2101      	movs	r1, #1
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fa68 	bl	800ee48 <USBH_SetAddress>
 800e978:	4603      	mov	r3, r0
 800e97a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d132      	bne.n	800e9e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e982:	2002      	movs	r0, #2
 800e984:	f001 fa42 	bl	800fe0c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2203      	movs	r2, #3
 800e994:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	7919      	ldrb	r1, [r3, #4]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e9aa:	b292      	uxth	r2, r2
 800e9ac:	9202      	str	r2, [sp, #8]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	9201      	str	r2, [sp, #4]
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2280      	movs	r2, #128	; 0x80
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 fee1 	bl	800f780 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7959      	ldrb	r1, [r3, #5]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e9d2:	b292      	uxth	r2, r2
 800e9d4:	9202      	str	r2, [sp, #8]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	9201      	str	r2, [sp, #4]
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2200      	movs	r2, #0
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 fecd 	bl	800f780 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e9e6:	e0e3      	b.n	800ebb0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9e8:	7bbb      	ldrb	r3, [r7, #14]
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	f040 80e0 	bne.w	800ebb0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	220d      	movs	r2, #13
 800e9f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	705a      	strb	r2, [r3, #1]
      break;
 800e9fc:	e0d8      	b.n	800ebb0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e9fe:	2109      	movs	r1, #9
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f99d 	bl	800ed40 <USBH_Get_CfgDesc>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea0a:	7bbb      	ldrb	r3, [r7, #14]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d103      	bne.n	800ea18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2204      	movs	r2, #4
 800ea14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ea16:	e0cd      	b.n	800ebb4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea18:	7bbb      	ldrb	r3, [r7, #14]
 800ea1a:	2b03      	cmp	r3, #3
 800ea1c:	f040 80ca 	bne.w	800ebb4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea26:	3301      	adds	r3, #1
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d903      	bls.n	800ea42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	220d      	movs	r2, #13
 800ea3e:	701a      	strb	r2, [r3, #0]
      break;
 800ea40:	e0b8      	b.n	800ebb4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	795b      	ldrb	r3, [r3, #5]
 800ea46:	4619      	mov	r1, r3
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fee9 	bl	800f820 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	791b      	ldrb	r3, [r3, #4]
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 fee3 	bl	800f820 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	701a      	strb	r2, [r3, #0]
      break;
 800ea66:	e0a5      	b.n	800ebb4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f965 	bl	800ed40 <USBH_Get_CfgDesc>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea7a:	7bbb      	ldrb	r3, [r7, #14]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2205      	movs	r2, #5
 800ea84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ea86:	e097      	b.n	800ebb8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea88:	7bbb      	ldrb	r3, [r7, #14]
 800ea8a:	2b03      	cmp	r3, #3
 800ea8c:	f040 8094 	bne.w	800ebb8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea96:	3301      	adds	r3, #1
 800ea98:	b2da      	uxtb	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d903      	bls.n	800eab2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	220d      	movs	r2, #13
 800eaae:	701a      	strb	r2, [r3, #0]
      break;
 800eab0:	e082      	b.n	800ebb8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	795b      	ldrb	r3, [r3, #5]
 800eab6:	4619      	mov	r1, r3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 feb1 	bl	800f820 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	791b      	ldrb	r3, [r3, #4]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 feab 	bl	800f820 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	701a      	strb	r2, [r3, #0]
      break;
 800ead6:	e06f      	b.n	800ebb8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d019      	beq.n	800eb16 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800eaee:	23ff      	movs	r3, #255	; 0xff
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 f949 	bl	800ed88 <USBH_Get_StringDesc>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eafa:	7bbb      	ldrb	r3, [r7, #14]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d103      	bne.n	800eb08 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2206      	movs	r2, #6
 800eb04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb06:	e059      	b.n	800ebbc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d156      	bne.n	800ebbc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2206      	movs	r2, #6
 800eb12:	705a      	strb	r2, [r3, #1]
      break;
 800eb14:	e052      	b.n	800ebbc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2206      	movs	r2, #6
 800eb1a:	705a      	strb	r2, [r3, #1]
      break;
 800eb1c:	e04e      	b.n	800ebbc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d019      	beq.n	800eb5c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eb34:	23ff      	movs	r3, #255	; 0xff
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 f926 	bl	800ed88 <USBH_Get_StringDesc>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d103      	bne.n	800eb4e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2207      	movs	r2, #7
 800eb4a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb4c:	e038      	b.n	800ebc0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb4e:	7bbb      	ldrb	r3, [r7, #14]
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d135      	bne.n	800ebc0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2207      	movs	r2, #7
 800eb58:	705a      	strb	r2, [r3, #1]
      break;
 800eb5a:	e031      	b.n	800ebc0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2207      	movs	r2, #7
 800eb60:	705a      	strb	r2, [r3, #1]
      break;
 800eb62:	e02d      	b.n	800ebc0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d017      	beq.n	800eb9e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800eb7a:	23ff      	movs	r3, #255	; 0xff
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f903 	bl	800ed88 <USBH_Get_StringDesc>
 800eb82:	4603      	mov	r3, r0
 800eb84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eb86:	7bbb      	ldrb	r3, [r7, #14]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d102      	bne.n	800eb92 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800eb90:	e018      	b.n	800ebc4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
 800eb94:	2b03      	cmp	r3, #3
 800eb96:	d115      	bne.n	800ebc4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb9c:	e012      	b.n	800ebc4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	73fb      	strb	r3, [r7, #15]
      break;
 800eba2:	e00f      	b.n	800ebc4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800eba4:	bf00      	nop
 800eba6:	e00e      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800eba8:	bf00      	nop
 800ebaa:	e00c      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebac:	bf00      	nop
 800ebae:	e00a      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebb0:	bf00      	nop
 800ebb2:	e008      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebb4:	bf00      	nop
 800ebb6:	e006      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebb8:	bf00      	nop
 800ebba:	e004      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebbc:	bf00      	nop
 800ebbe:	e002      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebc0:	bf00      	nop
 800ebc2:	e000      	b.n	800ebc6 <USBH_HandleEnum+0x3be>
      break;
 800ebc4:	bf00      	nop
  }
  return Status;
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	683a      	ldr	r2, [r7, #0]
 800ebde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f804 	bl	800ec12 <USBH_HandleSof>
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b082      	sub	sp, #8
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b0b      	cmp	r3, #11
 800ec22:	d10a      	bne.n	800ec3a <USBH_HandleSof+0x28>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	4798      	blx	r3
  }
}
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ec42:	b480      	push	{r7}
 800ec44:	b083      	sub	sp, #12
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ec52:	bf00      	nop
}
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ec6e:	bf00      	nop
}
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b083      	sub	sp, #12
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 ff56 	bl	800fb7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	791b      	ldrb	r3, [r3, #4]
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fda3 	bl	800f820 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	795b      	ldrb	r3, [r3, #5]
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fd9d 	bl	800f820 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af02      	add	r7, sp, #8
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ed02:	78fb      	ldrb	r3, [r7, #3]
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f864 	bl	800edde <USBH_GetDescriptor>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73fb      	strb	r3, [r7, #15]
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ed2c:	78fa      	ldrb	r2, [r7, #3]
 800ed2e:	b292      	uxth	r2, r2
 800ed30:	4619      	mov	r1, r3
 800ed32:	f000 f918 	bl	800ef66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	331c      	adds	r3, #28
 800ed50:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ed52:	887b      	ldrh	r3, [r7, #2]
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f83d 	bl	800edde <USBH_GetDescriptor>
 800ed64:	4603      	mov	r3, r0
 800ed66:	72fb      	strb	r3, [r7, #11]
 800ed68:	7afb      	ldrb	r3, [r7, #11]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d107      	bne.n	800ed7e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ed74:	887a      	ldrh	r2, [r7, #2]
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 f964 	bl	800f046 <USBH_ParseCfgDesc>
  }

  return status;
 800ed7e:	7afb      	ldrb	r3, [r7, #11]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af02      	add	r7, sp, #8
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	607a      	str	r2, [r7, #4]
 800ed92:	461a      	mov	r2, r3
 800ed94:	460b      	mov	r3, r1
 800ed96:	72fb      	strb	r3, [r7, #11]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ed9c:	7afb      	ldrb	r3, [r7, #11]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800eda4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800edac:	893b      	ldrh	r3, [r7, #8]
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	460b      	mov	r3, r1
 800edb2:	2100      	movs	r1, #0
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f812 	bl	800edde <USBH_GetDescriptor>
 800edba:	4603      	mov	r3, r0
 800edbc:	75fb      	strb	r3, [r7, #23]
 800edbe:	7dfb      	ldrb	r3, [r7, #23]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d107      	bne.n	800edd4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800edca:	893a      	ldrh	r2, [r7, #8]
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fa37 	bl	800f242 <USBH_ParseStringDesc>
  }

  return status;
 800edd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	60f8      	str	r0, [r7, #12]
 800ede6:	607b      	str	r3, [r7, #4]
 800ede8:	460b      	mov	r3, r1
 800edea:	72fb      	strb	r3, [r7, #11]
 800edec:	4613      	mov	r3, r2
 800edee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	789b      	ldrb	r3, [r3, #2]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d11c      	bne.n	800ee32 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800edf8:	7afb      	ldrb	r3, [r7, #11]
 800edfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2206      	movs	r2, #6
 800ee08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	893a      	ldrh	r2, [r7, #8]
 800ee0e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ee10:	893b      	ldrh	r3, [r7, #8]
 800ee12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee1a:	d104      	bne.n	800ee26 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f240 4209 	movw	r2, #1033	; 0x409
 800ee22:	829a      	strh	r2, [r3, #20]
 800ee24:	e002      	b.n	800ee2c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	8b3a      	ldrh	r2, [r7, #24]
 800ee30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ee32:	8b3b      	ldrh	r3, [r7, #24]
 800ee34:	461a      	mov	r2, r3
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f000 fa50 	bl	800f2de <USBH_CtlReq>
 800ee3e:	4603      	mov	r3, r0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	789b      	ldrb	r3, [r3, #2]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d10f      	bne.n	800ee7c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2205      	movs	r2, #5
 800ee66:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	2100      	movs	r1, #0
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fa2c 	bl	800f2de <USBH_CtlReq>
 800ee86:	4603      	mov	r3, r0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	789b      	ldrb	r3, [r3, #2]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d10e      	bne.n	800eec2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2209      	movs	r2, #9
 800eeae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	887a      	ldrh	r2, [r7, #2]
 800eeb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eec2:	2200      	movs	r2, #0
 800eec4:	2100      	movs	r1, #0
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fa09 	bl	800f2de <USBH_CtlReq>
 800eecc:	4603      	mov	r3, r0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	460b      	mov	r3, r1
 800eee0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	789b      	ldrb	r3, [r3, #2]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d10f      	bne.n	800ef0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2203      	movs	r2, #3
 800eef4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800eef6:	78fb      	ldrb	r3, [r7, #3]
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f9e5 	bl	800f2de <USBH_CtlReq>
 800ef14:	4603      	mov	r3, r0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b082      	sub	sp, #8
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	460b      	mov	r3, r1
 800ef28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	789b      	ldrb	r3, [r3, #2]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d10f      	bne.n	800ef52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2202      	movs	r2, #2
 800ef36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ef52:	2200      	movs	r2, #0
 800ef54:	2100      	movs	r1, #0
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f9c1 	bl	800f2de <USBH_CtlReq>
 800ef5c:	4603      	mov	r3, r0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b085      	sub	sp, #20
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	60b9      	str	r1, [r7, #8]
 800ef70:	4613      	mov	r3, r2
 800ef72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	781a      	ldrb	r2, [r3, #0]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	785a      	ldrb	r2, [r3, #1]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	3302      	adds	r3, #2
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	3303      	adds	r3, #3
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	021b      	lsls	r3, r3, #8
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	791a      	ldrb	r2, [r3, #4]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	795a      	ldrb	r2, [r3, #5]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	799a      	ldrb	r2, [r3, #6]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	79da      	ldrb	r2, [r3, #7]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800efc0:	88fb      	ldrh	r3, [r7, #6]
 800efc2:	2b08      	cmp	r3, #8
 800efc4:	d939      	bls.n	800f03a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	3308      	adds	r3, #8
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	b29a      	uxth	r2, r3
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	3309      	adds	r3, #9
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	021b      	lsls	r3, r3, #8
 800efd8:	b29b      	uxth	r3, r3
 800efda:	4313      	orrs	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	330a      	adds	r3, #10
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	b29a      	uxth	r2, r3
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	330b      	adds	r3, #11
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	021b      	lsls	r3, r3, #8
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	4313      	orrs	r3, r2
 800eff8:	b29a      	uxth	r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	330c      	adds	r3, #12
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	b29a      	uxth	r2, r3
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	330d      	adds	r3, #13
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	021b      	lsls	r3, r3, #8
 800f010:	b29b      	uxth	r3, r3
 800f012:	4313      	orrs	r3, r2
 800f014:	b29a      	uxth	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	7b9a      	ldrb	r2, [r3, #14]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	7bda      	ldrb	r2, [r3, #15]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	7c1a      	ldrb	r2, [r3, #16]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	7c5a      	ldrb	r2, [r3, #17]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	745a      	strb	r2, [r3, #17]
  }
}
 800f03a:	bf00      	nop
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b08a      	sub	sp, #40	; 0x28
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	60f8      	str	r0, [r7, #12]
 800f04e:	60b9      	str	r1, [r7, #8]
 800f050:	4613      	mov	r3, r2
 800f052:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f058:	2300      	movs	r3, #0
 800f05a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f05e:	2300      	movs	r3, #0
 800f060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	781a      	ldrb	r2, [r3, #0]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	785a      	ldrb	r2, [r3, #1]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	3302      	adds	r3, #2
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	3303      	adds	r3, #3
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b29b      	uxth	r3, r3
 800f088:	021b      	lsls	r3, r3, #8
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	4313      	orrs	r3, r2
 800f08e:	b29a      	uxth	r2, r3
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	791a      	ldrb	r2, [r3, #4]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	795a      	ldrb	r2, [r3, #5]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	799a      	ldrb	r2, [r3, #6]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	79da      	ldrb	r2, [r3, #7]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	7a1a      	ldrb	r2, [r3, #8]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f0bc:	88fb      	ldrh	r3, [r7, #6]
 800f0be:	2b09      	cmp	r3, #9
 800f0c0:	d95f      	bls.n	800f182 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f0c2:	2309      	movs	r3, #9
 800f0c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f0ca:	e051      	b.n	800f170 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f0cc:	f107 0316 	add.w	r3, r7, #22
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0d4:	f000 f8e8 	bl	800f2a8 <USBH_GetNextDesc>
 800f0d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d146      	bne.n	800f170 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f0e6:	221a      	movs	r2, #26
 800f0e8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	3302      	adds	r3, #2
 800f0f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0f8:	69f8      	ldr	r0, [r7, #28]
 800f0fa:	f000 f846 	bl	800f18a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f0fe:	2300      	movs	r3, #0
 800f100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f104:	2300      	movs	r3, #0
 800f106:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f108:	e022      	b.n	800f150 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f10a:	f107 0316 	add.w	r3, r7, #22
 800f10e:	4619      	mov	r1, r3
 800f110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f112:	f000 f8c9 	bl	800f2a8 <USBH_GetNextDesc>
 800f116:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	785b      	ldrb	r3, [r3, #1]
 800f11c:	2b05      	cmp	r3, #5
 800f11e:	d117      	bne.n	800f150 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f124:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f128:	3201      	adds	r2, #1
 800f12a:	00d2      	lsls	r2, r2, #3
 800f12c:	211a      	movs	r1, #26
 800f12e:	fb01 f303 	mul.w	r3, r1, r3
 800f132:	4413      	add	r3, r2
 800f134:	3308      	adds	r3, #8
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	4413      	add	r3, r2
 800f13a:	3304      	adds	r3, #4
 800f13c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f13e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f140:	69b8      	ldr	r0, [r7, #24]
 800f142:	f000 f851 	bl	800f1e8 <USBH_ParseEPDesc>
            ep_ix++;
 800f146:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f14a:	3301      	adds	r3, #1
 800f14c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	791b      	ldrb	r3, [r3, #4]
 800f154:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f158:	429a      	cmp	r2, r3
 800f15a:	d204      	bcs.n	800f166 <USBH_ParseCfgDesc+0x120>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	885a      	ldrh	r2, [r3, #2]
 800f160:	8afb      	ldrh	r3, [r7, #22]
 800f162:	429a      	cmp	r2, r3
 800f164:	d8d1      	bhi.n	800f10a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f16a:	3301      	adds	r3, #1
 800f16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f174:	2b01      	cmp	r3, #1
 800f176:	d804      	bhi.n	800f182 <USBH_ParseCfgDesc+0x13c>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	885a      	ldrh	r2, [r3, #2]
 800f17c:	8afb      	ldrh	r3, [r7, #22]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d8a4      	bhi.n	800f0cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f182:	bf00      	nop
 800f184:	3728      	adds	r7, #40	; 0x28
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b083      	sub	sp, #12
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781a      	ldrb	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	785a      	ldrb	r2, [r3, #1]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	789a      	ldrb	r2, [r3, #2]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	78da      	ldrb	r2, [r3, #3]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	791a      	ldrb	r2, [r3, #4]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	795a      	ldrb	r2, [r3, #5]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	799a      	ldrb	r2, [r3, #6]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	79da      	ldrb	r2, [r3, #7]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	7a1a      	ldrb	r2, [r3, #8]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	721a      	strb	r2, [r3, #8]
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	781a      	ldrb	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	785a      	ldrb	r2, [r3, #1]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	789a      	ldrb	r2, [r3, #2]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	78da      	ldrb	r2, [r3, #3]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	3304      	adds	r3, #4
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	b29a      	uxth	r2, r3
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	3305      	adds	r3, #5
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	b29b      	uxth	r3, r3
 800f222:	021b      	lsls	r3, r3, #8
 800f224:	b29b      	uxth	r3, r3
 800f226:	4313      	orrs	r3, r2
 800f228:	b29a      	uxth	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	799a      	ldrb	r2, [r3, #6]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	719a      	strb	r2, [r3, #6]
}
 800f236:	bf00      	nop
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr

0800f242 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f242:	b480      	push	{r7}
 800f244:	b087      	sub	sp, #28
 800f246:	af00      	add	r7, sp, #0
 800f248:	60f8      	str	r0, [r7, #12]
 800f24a:	60b9      	str	r1, [r7, #8]
 800f24c:	4613      	mov	r3, r2
 800f24e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	3301      	adds	r3, #1
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b03      	cmp	r3, #3
 800f258:	d120      	bne.n	800f29c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	1e9a      	subs	r2, r3, #2
 800f260:	88fb      	ldrh	r3, [r7, #6]
 800f262:	4293      	cmp	r3, r2
 800f264:	bf28      	it	cs
 800f266:	4613      	movcs	r3, r2
 800f268:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	3302      	adds	r3, #2
 800f26e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f270:	2300      	movs	r3, #0
 800f272:	82fb      	strh	r3, [r7, #22]
 800f274:	e00b      	b.n	800f28e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f276:	8afb      	ldrh	r3, [r7, #22]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	4413      	add	r3, r2
 800f27c:	781a      	ldrb	r2, [r3, #0]
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	3301      	adds	r3, #1
 800f286:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f288:	8afb      	ldrh	r3, [r7, #22]
 800f28a:	3302      	adds	r3, #2
 800f28c:	82fb      	strh	r3, [r7, #22]
 800f28e:	8afa      	ldrh	r2, [r7, #22]
 800f290:	8abb      	ldrh	r3, [r7, #20]
 800f292:	429a      	cmp	r2, r3
 800f294:	d3ef      	bcc.n	800f276 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2200      	movs	r2, #0
 800f29a:	701a      	strb	r2, [r3, #0]
  }
}
 800f29c:	bf00      	nop
 800f29e:	371c      	adds	r7, #28
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	881a      	ldrh	r2, [r3, #0]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	4413      	add	r3, r2
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b086      	sub	sp, #24
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	789b      	ldrb	r3, [r3, #2]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d002      	beq.n	800f2fe <USBH_CtlReq+0x20>
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d00f      	beq.n	800f31c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f2fc:	e027      	b.n	800f34e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	88fa      	ldrh	r2, [r7, #6]
 800f308:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2201      	movs	r2, #1
 800f30e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2202      	movs	r2, #2
 800f314:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f316:	2301      	movs	r3, #1
 800f318:	75fb      	strb	r3, [r7, #23]
      break;
 800f31a:	e018      	b.n	800f34e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f000 f81b 	bl	800f358 <USBH_HandleControl>
 800f322:	4603      	mov	r3, r0
 800f324:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f326:	7dfb      	ldrb	r3, [r7, #23]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <USBH_CtlReq+0x54>
 800f32c:	7dfb      	ldrb	r3, [r7, #23]
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d106      	bne.n	800f340 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2201      	movs	r2, #1
 800f336:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	761a      	strb	r2, [r3, #24]
      break;
 800f33e:	e005      	b.n	800f34c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f340:	7dfb      	ldrb	r3, [r7, #23]
 800f342:	2b02      	cmp	r3, #2
 800f344:	d102      	bne.n	800f34c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	709a      	strb	r2, [r3, #2]
      break;
 800f34c:	bf00      	nop
  }
  return status;
 800f34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3718      	adds	r7, #24
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f360:	2301      	movs	r3, #1
 800f362:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f364:	2300      	movs	r3, #0
 800f366:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	7e1b      	ldrb	r3, [r3, #24]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	2b0a      	cmp	r3, #10
 800f370:	f200 8156 	bhi.w	800f620 <USBH_HandleControl+0x2c8>
 800f374:	a201      	add	r2, pc, #4	; (adr r2, 800f37c <USBH_HandleControl+0x24>)
 800f376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37a:	bf00      	nop
 800f37c:	0800f3a9 	.word	0x0800f3a9
 800f380:	0800f3c3 	.word	0x0800f3c3
 800f384:	0800f42d 	.word	0x0800f42d
 800f388:	0800f453 	.word	0x0800f453
 800f38c:	0800f48b 	.word	0x0800f48b
 800f390:	0800f4b5 	.word	0x0800f4b5
 800f394:	0800f507 	.word	0x0800f507
 800f398:	0800f529 	.word	0x0800f529
 800f39c:	0800f565 	.word	0x0800f565
 800f3a0:	0800f58b 	.word	0x0800f58b
 800f3a4:	0800f5c9 	.word	0x0800f5c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f103 0110 	add.w	r1, r3, #16
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	795b      	ldrb	r3, [r3, #5]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 f943 	bl	800f640 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	761a      	strb	r2, [r3, #24]
      break;
 800f3c0:	e139      	b.n	800f636 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	795b      	ldrb	r3, [r3, #5]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 fcc5 	bl	800fd58 <USBH_LL_GetURBState>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f3d2:	7bbb      	ldrb	r3, [r7, #14]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d11e      	bne.n	800f416 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	7c1b      	ldrb	r3, [r3, #16]
 800f3dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f3e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8adb      	ldrh	r3, [r3, #22]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00a      	beq.n	800f400 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f3ea:	7b7b      	ldrb	r3, [r7, #13]
 800f3ec:	2b80      	cmp	r3, #128	; 0x80
 800f3ee:	d103      	bne.n	800f3f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2203      	movs	r2, #3
 800f3f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3f6:	e115      	b.n	800f624 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2205      	movs	r2, #5
 800f3fc:	761a      	strb	r2, [r3, #24]
      break;
 800f3fe:	e111      	b.n	800f624 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f400:	7b7b      	ldrb	r3, [r7, #13]
 800f402:	2b80      	cmp	r3, #128	; 0x80
 800f404:	d103      	bne.n	800f40e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2209      	movs	r2, #9
 800f40a:	761a      	strb	r2, [r3, #24]
      break;
 800f40c:	e10a      	b.n	800f624 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2207      	movs	r2, #7
 800f412:	761a      	strb	r2, [r3, #24]
      break;
 800f414:	e106      	b.n	800f624 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f416:	7bbb      	ldrb	r3, [r7, #14]
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d003      	beq.n	800f424 <USBH_HandleControl+0xcc>
 800f41c:	7bbb      	ldrb	r3, [r7, #14]
 800f41e:	2b02      	cmp	r3, #2
 800f420:	f040 8100 	bne.w	800f624 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	220b      	movs	r2, #11
 800f428:	761a      	strb	r2, [r3, #24]
      break;
 800f42a:	e0fb      	b.n	800f624 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f432:	b29a      	uxth	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6899      	ldr	r1, [r3, #8]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	899a      	ldrh	r2, [r3, #12]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	791b      	ldrb	r3, [r3, #4]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f93a 	bl	800f6be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2204      	movs	r2, #4
 800f44e:	761a      	strb	r2, [r3, #24]
      break;
 800f450:	e0f1      	b.n	800f636 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	791b      	ldrb	r3, [r3, #4]
 800f456:	4619      	mov	r1, r3
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fc7d 	bl	800fd58 <USBH_LL_GetURBState>
 800f45e:	4603      	mov	r3, r0
 800f460:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d102      	bne.n	800f46e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2209      	movs	r2, #9
 800f46c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	2b05      	cmp	r3, #5
 800f472:	d102      	bne.n	800f47a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f474:	2303      	movs	r3, #3
 800f476:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f478:	e0d6      	b.n	800f628 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f47a:	7bbb      	ldrb	r3, [r7, #14]
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	f040 80d3 	bne.w	800f628 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	220b      	movs	r2, #11
 800f486:	761a      	strb	r2, [r3, #24]
      break;
 800f488:	e0ce      	b.n	800f628 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6899      	ldr	r1, [r3, #8]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	899a      	ldrh	r2, [r3, #12]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	795b      	ldrb	r3, [r3, #5]
 800f496:	2001      	movs	r0, #1
 800f498:	9000      	str	r0, [sp, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 f8ea 	bl	800f674 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2206      	movs	r2, #6
 800f4b0:	761a      	strb	r2, [r3, #24]
      break;
 800f4b2:	e0c0      	b.n	800f636 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	795b      	ldrb	r3, [r3, #5]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fc4c 	bl	800fd58 <USBH_LL_GetURBState>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f4c4:	7bbb      	ldrb	r3, [r7, #14]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d103      	bne.n	800f4d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2207      	movs	r2, #7
 800f4ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f4d0:	e0ac      	b.n	800f62c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f4d2:	7bbb      	ldrb	r3, [r7, #14]
 800f4d4:	2b05      	cmp	r3, #5
 800f4d6:	d105      	bne.n	800f4e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	220c      	movs	r2, #12
 800f4dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f4de:	2303      	movs	r3, #3
 800f4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e2:	e0a3      	b.n	800f62c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d103      	bne.n	800f4f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2205      	movs	r2, #5
 800f4ee:	761a      	strb	r2, [r3, #24]
      break;
 800f4f0:	e09c      	b.n	800f62c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f4f2:	7bbb      	ldrb	r3, [r7, #14]
 800f4f4:	2b04      	cmp	r3, #4
 800f4f6:	f040 8099 	bne.w	800f62c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	220b      	movs	r2, #11
 800f4fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f500:	2302      	movs	r3, #2
 800f502:	73fb      	strb	r3, [r7, #15]
      break;
 800f504:	e092      	b.n	800f62c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	791b      	ldrb	r3, [r3, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	2100      	movs	r1, #0
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f8d5 	bl	800f6be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2208      	movs	r2, #8
 800f524:	761a      	strb	r2, [r3, #24]

      break;
 800f526:	e086      	b.n	800f636 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	791b      	ldrb	r3, [r3, #4]
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fc12 	bl	800fd58 <USBH_LL_GetURBState>
 800f534:	4603      	mov	r3, r0
 800f536:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d105      	bne.n	800f54a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	220d      	movs	r2, #13
 800f542:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f544:	2300      	movs	r3, #0
 800f546:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f548:	e072      	b.n	800f630 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
 800f54c:	2b04      	cmp	r3, #4
 800f54e:	d103      	bne.n	800f558 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	220b      	movs	r2, #11
 800f554:	761a      	strb	r2, [r3, #24]
      break;
 800f556:	e06b      	b.n	800f630 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f558:	7bbb      	ldrb	r3, [r7, #14]
 800f55a:	2b05      	cmp	r3, #5
 800f55c:	d168      	bne.n	800f630 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f55e:	2303      	movs	r3, #3
 800f560:	73fb      	strb	r3, [r7, #15]
      break;
 800f562:	e065      	b.n	800f630 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	795b      	ldrb	r3, [r3, #5]
 800f568:	2201      	movs	r2, #1
 800f56a:	9200      	str	r2, [sp, #0]
 800f56c:	2200      	movs	r2, #0
 800f56e:	2100      	movs	r1, #0
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f87f 	bl	800f674 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	220a      	movs	r2, #10
 800f586:	761a      	strb	r2, [r3, #24]
      break;
 800f588:	e055      	b.n	800f636 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	795b      	ldrb	r3, [r3, #5]
 800f58e:	4619      	mov	r1, r3
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fbe1 	bl	800fd58 <USBH_LL_GetURBState>
 800f596:	4603      	mov	r3, r0
 800f598:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d105      	bne.n	800f5ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	220d      	movs	r2, #13
 800f5a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f5aa:	e043      	b.n	800f634 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d103      	bne.n	800f5ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2209      	movs	r2, #9
 800f5b6:	761a      	strb	r2, [r3, #24]
      break;
 800f5b8:	e03c      	b.n	800f634 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	d139      	bne.n	800f634 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	220b      	movs	r2, #11
 800f5c4:	761a      	strb	r2, [r3, #24]
      break;
 800f5c6:	e035      	b.n	800f634 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	7e5b      	ldrb	r3, [r3, #25]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	765a      	strb	r2, [r3, #25]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	7e5b      	ldrb	r3, [r3, #25]
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d806      	bhi.n	800f5ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f5e8:	e025      	b.n	800f636 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5f0:	2106      	movs	r1, #6
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	795b      	ldrb	r3, [r3, #5]
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 f90c 	bl	800f820 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	791b      	ldrb	r3, [r3, #4]
 800f60c:	4619      	mov	r1, r3
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 f906 	bl	800f820 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f61a:	2302      	movs	r3, #2
 800f61c:	73fb      	strb	r3, [r7, #15]
      break;
 800f61e:	e00a      	b.n	800f636 <USBH_HandleControl+0x2de>

    default:
      break;
 800f620:	bf00      	nop
 800f622:	e008      	b.n	800f636 <USBH_HandleControl+0x2de>
      break;
 800f624:	bf00      	nop
 800f626:	e006      	b.n	800f636 <USBH_HandleControl+0x2de>
      break;
 800f628:	bf00      	nop
 800f62a:	e004      	b.n	800f636 <USBH_HandleControl+0x2de>
      break;
 800f62c:	bf00      	nop
 800f62e:	e002      	b.n	800f636 <USBH_HandleControl+0x2de>
      break;
 800f630:	bf00      	nop
 800f632:	e000      	b.n	800f636 <USBH_HandleControl+0x2de>
      break;
 800f634:	bf00      	nop
  }

  return status;
 800f636:	7bfb      	ldrb	r3, [r7, #15]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af04      	add	r7, sp, #16
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	4613      	mov	r3, r2
 800f64c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f64e:	79f9      	ldrb	r1, [r7, #7]
 800f650:	2300      	movs	r3, #0
 800f652:	9303      	str	r3, [sp, #12]
 800f654:	2308      	movs	r3, #8
 800f656:	9302      	str	r3, [sp, #8]
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	9301      	str	r3, [sp, #4]
 800f65c:	2300      	movs	r3, #0
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	2300      	movs	r3, #0
 800f662:	2200      	movs	r2, #0
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f000 fb46 	bl	800fcf6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af04      	add	r7, sp, #16
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	4611      	mov	r1, r2
 800f680:	461a      	mov	r2, r3
 800f682:	460b      	mov	r3, r1
 800f684:	80fb      	strh	r3, [r7, #6]
 800f686:	4613      	mov	r3, r2
 800f688:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f698:	7979      	ldrb	r1, [r7, #5]
 800f69a:	7e3b      	ldrb	r3, [r7, #24]
 800f69c:	9303      	str	r3, [sp, #12]
 800f69e:	88fb      	ldrh	r3, [r7, #6]
 800f6a0:	9302      	str	r3, [sp, #8]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	9300      	str	r3, [sp, #0]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f000 fb21 	bl	800fcf6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b088      	sub	sp, #32
 800f6c2:	af04      	add	r7, sp, #16
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	80fb      	strh	r3, [r7, #6]
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6d4:	7979      	ldrb	r1, [r7, #5]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9303      	str	r3, [sp, #12]
 800f6da:	88fb      	ldrh	r3, [r7, #6]
 800f6dc:	9302      	str	r3, [sp, #8]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f000 fb03 	bl	800fcf6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f6f0:	2300      	movs	r3, #0

}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b088      	sub	sp, #32
 800f6fe:	af04      	add	r7, sp, #16
 800f700:	60f8      	str	r0, [r7, #12]
 800f702:	60b9      	str	r1, [r7, #8]
 800f704:	4611      	mov	r1, r2
 800f706:	461a      	mov	r2, r3
 800f708:	460b      	mov	r3, r1
 800f70a:	80fb      	strh	r3, [r7, #6]
 800f70c:	4613      	mov	r3, r2
 800f70e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f71a:	2300      	movs	r3, #0
 800f71c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f71e:	7979      	ldrb	r1, [r7, #5]
 800f720:	7e3b      	ldrb	r3, [r7, #24]
 800f722:	9303      	str	r3, [sp, #12]
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	9302      	str	r3, [sp, #8]
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	2301      	movs	r3, #1
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	2302      	movs	r3, #2
 800f732:	2200      	movs	r2, #0
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f000 fade 	bl	800fcf6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af04      	add	r7, sp, #16
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	4611      	mov	r1, r2
 800f750:	461a      	mov	r2, r3
 800f752:	460b      	mov	r3, r1
 800f754:	80fb      	strh	r3, [r7, #6]
 800f756:	4613      	mov	r3, r2
 800f758:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f75a:	7979      	ldrb	r1, [r7, #5]
 800f75c:	2300      	movs	r3, #0
 800f75e:	9303      	str	r3, [sp, #12]
 800f760:	88fb      	ldrh	r3, [r7, #6]
 800f762:	9302      	str	r3, [sp, #8]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	2301      	movs	r3, #1
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	2302      	movs	r3, #2
 800f76e:	2201      	movs	r2, #1
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f000 fac0 	bl	800fcf6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af04      	add	r7, sp, #16
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	4608      	mov	r0, r1
 800f78a:	4611      	mov	r1, r2
 800f78c:	461a      	mov	r2, r3
 800f78e:	4603      	mov	r3, r0
 800f790:	70fb      	strb	r3, [r7, #3]
 800f792:	460b      	mov	r3, r1
 800f794:	70bb      	strb	r3, [r7, #2]
 800f796:	4613      	mov	r3, r2
 800f798:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f79a:	7878      	ldrb	r0, [r7, #1]
 800f79c:	78ba      	ldrb	r2, [r7, #2]
 800f79e:	78f9      	ldrb	r1, [r7, #3]
 800f7a0:	8b3b      	ldrh	r3, [r7, #24]
 800f7a2:	9302      	str	r3, [sp, #8]
 800f7a4:	7d3b      	ldrb	r3, [r7, #20]
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	7c3b      	ldrb	r3, [r7, #16]
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fa53 	bl	800fc5a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b082      	sub	sp, #8
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fa72 	bl	800fcb8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b084      	sub	sp, #16
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f836 	bl	800f85c <USBH_GetFreePipe>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f7f4:	89fb      	ldrh	r3, [r7, #14]
 800f7f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d00a      	beq.n	800f814 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f7fe:	78fa      	ldrb	r2, [r7, #3]
 800f800:	89fb      	ldrh	r3, [r7, #14]
 800f802:	f003 030f 	and.w	r3, r3, #15
 800f806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	33e0      	adds	r3, #224	; 0xe0
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	440b      	add	r3, r1
 800f812:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f814:	89fb      	ldrh	r3, [r7, #14]
 800f816:	b2db      	uxtb	r3, r3
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	2b0a      	cmp	r3, #10
 800f830:	d80d      	bhi.n	800f84e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f832:	78fb      	ldrb	r3, [r7, #3]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	33e0      	adds	r3, #224	; 0xe0
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4413      	add	r3, r2
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f844:	6879      	ldr	r1, [r7, #4]
 800f846:	33e0      	adds	r3, #224	; 0xe0
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	440b      	add	r3, r1
 800f84c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f84e:	2300      	movs	r3, #0
}
 800f850:	4618      	mov	r0, r3
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f864:	2300      	movs	r3, #0
 800f866:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f868:	2300      	movs	r3, #0
 800f86a:	73fb      	strb	r3, [r7, #15]
 800f86c:	e00f      	b.n	800f88e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	33e0      	adds	r3, #224	; 0xe0
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	4413      	add	r3, r2
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f882:	7bfb      	ldrb	r3, [r7, #15]
 800f884:	b29b      	uxth	r3, r3
 800f886:	e007      	b.n	800f898 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	3301      	adds	r3, #1
 800f88c:	73fb      	strb	r3, [r7, #15]
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	2b0a      	cmp	r3, #10
 800f892:	d9ec      	bls.n	800f86e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f894:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3714      	adds	r7, #20
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	490e      	ldr	r1, [pc, #56]	; (800f8e4 <MX_USB_HOST_Init+0x40>)
 800f8ac:	480e      	ldr	r0, [pc, #56]	; (800f8e8 <MX_USB_HOST_Init+0x44>)
 800f8ae:	f7fe fca1 	bl	800e1f4 <USBH_Init>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f8b8:	f7f2 f972 	bl	8001ba0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f8bc:	490b      	ldr	r1, [pc, #44]	; (800f8ec <MX_USB_HOST_Init+0x48>)
 800f8be:	480a      	ldr	r0, [pc, #40]	; (800f8e8 <MX_USB_HOST_Init+0x44>)
 800f8c0:	f7fe fd26 	bl	800e310 <USBH_RegisterClass>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f8ca:	f7f2 f969 	bl	8001ba0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f8ce:	4806      	ldr	r0, [pc, #24]	; (800f8e8 <MX_USB_HOST_Init+0x44>)
 800f8d0:	f7fe fdaa 	bl	800e428 <USBH_Start>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f8da:	f7f2 f961 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f8de:	bf00      	nop
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	0800f905 	.word	0x0800f905
 800f8e8:	200006a8 	.word	0x200006a8
 800f8ec:	200001ec 	.word	0x200001ec

0800f8f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f8f4:	4802      	ldr	r0, [pc, #8]	; (800f900 <MX_USB_HOST_Process+0x10>)
 800f8f6:	f7fe fda7 	bl	800e448 <USBH_Process>
}
 800f8fa:	bf00      	nop
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	200006a8 	.word	0x200006a8

0800f904 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	460b      	mov	r3, r1
 800f90e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f910:	78fb      	ldrb	r3, [r7, #3]
 800f912:	3b01      	subs	r3, #1
 800f914:	2b04      	cmp	r3, #4
 800f916:	d819      	bhi.n	800f94c <USBH_UserProcess+0x48>
 800f918:	a201      	add	r2, pc, #4	; (adr r2, 800f920 <USBH_UserProcess+0x1c>)
 800f91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f91e:	bf00      	nop
 800f920:	0800f94d 	.word	0x0800f94d
 800f924:	0800f93d 	.word	0x0800f93d
 800f928:	0800f94d 	.word	0x0800f94d
 800f92c:	0800f945 	.word	0x0800f945
 800f930:	0800f935 	.word	0x0800f935
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f934:	4b09      	ldr	r3, [pc, #36]	; (800f95c <USBH_UserProcess+0x58>)
 800f936:	2203      	movs	r2, #3
 800f938:	701a      	strb	r2, [r3, #0]
  break;
 800f93a:	e008      	b.n	800f94e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f93c:	4b07      	ldr	r3, [pc, #28]	; (800f95c <USBH_UserProcess+0x58>)
 800f93e:	2202      	movs	r2, #2
 800f940:	701a      	strb	r2, [r3, #0]
  break;
 800f942:	e004      	b.n	800f94e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f944:	4b05      	ldr	r3, [pc, #20]	; (800f95c <USBH_UserProcess+0x58>)
 800f946:	2201      	movs	r2, #1
 800f948:	701a      	strb	r2, [r3, #0]
  break;
 800f94a:	e000      	b.n	800f94e <USBH_UserProcess+0x4a>

  default:
  break;
 800f94c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	200002a1 	.word	0x200002a1

0800f960 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08a      	sub	sp, #40	; 0x28
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f968:	f107 0314 	add.w	r3, r7, #20
 800f96c:	2200      	movs	r2, #0
 800f96e:	601a      	str	r2, [r3, #0]
 800f970:	605a      	str	r2, [r3, #4]
 800f972:	609a      	str	r2, [r3, #8]
 800f974:	60da      	str	r2, [r3, #12]
 800f976:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f980:	d147      	bne.n	800fa12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
 800f986:	4b25      	ldr	r3, [pc, #148]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98a:	4a24      	ldr	r2, [pc, #144]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f98c:	f043 0301 	orr.w	r3, r3, #1
 800f990:	6313      	str	r3, [r2, #48]	; 0x30
 800f992:	4b22      	ldr	r3, [pc, #136]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f996:	f003 0301 	and.w	r3, r3, #1
 800f99a:	613b      	str	r3, [r7, #16]
 800f99c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f99e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f9ac:	f107 0314 	add.w	r3, r7, #20
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	481b      	ldr	r0, [pc, #108]	; (800fa20 <HAL_HCD_MspInit+0xc0>)
 800f9b4:	f7f6 fef6 	bl	80067a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f9b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f9bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9be:	2302      	movs	r3, #2
 800f9c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f9ca:	230a      	movs	r3, #10
 800f9cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9ce:	f107 0314 	add.w	r3, r7, #20
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4812      	ldr	r0, [pc, #72]	; (800fa20 <HAL_HCD_MspInit+0xc0>)
 800f9d6:	f7f6 fee5 	bl	80067a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f9da:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9de:	4a0f      	ldr	r2, [pc, #60]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9e4:	6353      	str	r3, [r2, #52]	; 0x34
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60fb      	str	r3, [r7, #12]
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ee:	4a0b      	ldr	r2, [pc, #44]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f9f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9f4:	6453      	str	r3, [r2, #68]	; 0x44
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <HAL_HCD_MspInit+0xbc>)
 800f9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fa02:	2200      	movs	r2, #0
 800fa04:	2100      	movs	r1, #0
 800fa06:	2043      	movs	r0, #67	; 0x43
 800fa08:	f7f6 fe95 	bl	8006736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fa0c:	2043      	movs	r0, #67	; 0x43
 800fa0e:	f7f6 feae 	bl	800676e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fa12:	bf00      	nop
 800fa14:	3728      	adds	r7, #40	; 0x28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	40023800 	.word	0x40023800
 800fa20:	40020000 	.word	0x40020000

0800fa24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7ff f8db 	bl	800ebee <USBH_LL_IncTimer>
}
 800fa38:	bf00      	nop
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff f913 	bl	800ec7a <USBH_LL_Connect>
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff f91c 	bl	800eca8 <USBH_LL_Disconnect>
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	460b      	mov	r3, r1
 800fa82:	70fb      	strb	r3, [r7, #3]
 800fa84:	4613      	mov	r3, r2
 800fa86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fa88:	bf00      	nop
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff f8cd 	bl	800ec42 <USBH_LL_PortEnabled>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7ff f8cd 	bl	800ec5e <USBH_LL_PortDisabled>
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d12a      	bne.n	800fb34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fade:	4a18      	ldr	r2, [pc, #96]	; (800fb40 <USBH_LL_Init+0x74>)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a15      	ldr	r2, [pc, #84]	; (800fb40 <USBH_LL_Init+0x74>)
 800faea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800faee:	4b14      	ldr	r3, [pc, #80]	; (800fb40 <USBH_LL_Init+0x74>)
 800faf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800faf4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800faf6:	4b12      	ldr	r3, [pc, #72]	; (800fb40 <USBH_LL_Init+0x74>)
 800faf8:	2208      	movs	r2, #8
 800fafa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fafc:	4b10      	ldr	r3, [pc, #64]	; (800fb40 <USBH_LL_Init+0x74>)
 800fafe:	2201      	movs	r2, #1
 800fb00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb02:	4b0f      	ldr	r3, [pc, #60]	; (800fb40 <USBH_LL_Init+0x74>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fb08:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <USBH_LL_Init+0x74>)
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb0e:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <USBH_LL_Init+0x74>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fb14:	480a      	ldr	r0, [pc, #40]	; (800fb40 <USBH_LL_Init+0x74>)
 800fb16:	f7f7 f845 	bl	8006ba4 <HAL_HCD_Init>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fb20:	f7f2 f83e 	bl	8001ba0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fb24:	4806      	ldr	r0, [pc, #24]	; (800fb40 <USBH_LL_Init+0x74>)
 800fb26:	f7f7 fc21 	bl	800736c <HAL_HCD_GetCurrentFrame>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7ff f84e 	bl	800ebd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	20000a80 	.word	0x20000a80

0800fb44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f7 fb90 	bl	8007280 <HAL_HCD_Start>
 800fb60:	4603      	mov	r3, r0
 800fb62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 f95c 	bl	800fe24 <USBH_Get_USB_Status>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f7 fb98 	bl	80072c6 <HAL_HCD_Stop>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f000 f941 	bl	800fe24 <USBH_Get_USB_Status>
 800fba2:	4603      	mov	r3, r0
 800fba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f7 fbe0 	bl	8007388 <HAL_HCD_GetCurrentSpeed>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b02      	cmp	r3, #2
 800fbcc:	d00c      	beq.n	800fbe8 <USBH_LL_GetSpeed+0x38>
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d80d      	bhi.n	800fbee <USBH_LL_GetSpeed+0x3e>
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <USBH_LL_GetSpeed+0x2c>
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d003      	beq.n	800fbe2 <USBH_LL_GetSpeed+0x32>
 800fbda:	e008      	b.n	800fbee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe0:	e008      	b.n	800fbf4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe6:	e005      	b.n	800fbf4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fbe8:	2302      	movs	r3, #2
 800fbea:	73fb      	strb	r3, [r7, #15]
    break;
 800fbec:	e002      	b.n	800fbf4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf2:	bf00      	nop
  }
  return  speed;
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f7 fb73 	bl	8007300 <HAL_HCD_ResetPort>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f000 f8ff 	bl	800fe24 <USBH_Get_USB_Status>
 800fc26:	4603      	mov	r3, r0
 800fc28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc46:	78fa      	ldrb	r2, [r7, #3]
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7f7 fb7a 	bl	8007344 <HAL_HCD_HC_GetXferCount>
 800fc50:	4603      	mov	r3, r0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc5a:	b590      	push	{r4, r7, lr}
 800fc5c:	b089      	sub	sp, #36	; 0x24
 800fc5e:	af04      	add	r7, sp, #16
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	4608      	mov	r0, r1
 800fc64:	4611      	mov	r1, r2
 800fc66:	461a      	mov	r2, r3
 800fc68:	4603      	mov	r3, r0
 800fc6a:	70fb      	strb	r3, [r7, #3]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	70bb      	strb	r3, [r7, #2]
 800fc70:	4613      	mov	r3, r2
 800fc72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc74:	2300      	movs	r3, #0
 800fc76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fc82:	787c      	ldrb	r4, [r7, #1]
 800fc84:	78ba      	ldrb	r2, [r7, #2]
 800fc86:	78f9      	ldrb	r1, [r7, #3]
 800fc88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc8a:	9302      	str	r3, [sp, #8]
 800fc8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	4623      	mov	r3, r4
 800fc9a:	f7f6 ffe5 	bl	8006c68 <HAL_HCD_HC_Init>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fca2:	7bfb      	ldrb	r3, [r7, #15]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f000 f8bd 	bl	800fe24 <USBH_Get_USB_Status>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcae:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3714      	adds	r7, #20
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd90      	pop	{r4, r7, pc}

0800fcb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fcd2:	78fa      	ldrb	r2, [r7, #3]
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f7 f855 	bl	8006d86 <HAL_HCD_HC_Halt>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fce0:	7bfb      	ldrb	r3, [r7, #15]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f000 f89e 	bl	800fe24 <USBH_Get_USB_Status>
 800fce8:	4603      	mov	r3, r0
 800fcea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcec:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fcf6:	b590      	push	{r4, r7, lr}
 800fcf8:	b089      	sub	sp, #36	; 0x24
 800fcfa:	af04      	add	r7, sp, #16
 800fcfc:	6078      	str	r0, [r7, #4]
 800fcfe:	4608      	mov	r0, r1
 800fd00:	4611      	mov	r1, r2
 800fd02:	461a      	mov	r2, r3
 800fd04:	4603      	mov	r3, r0
 800fd06:	70fb      	strb	r3, [r7, #3]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70bb      	strb	r3, [r7, #2]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd14:	2300      	movs	r3, #0
 800fd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fd1e:	787c      	ldrb	r4, [r7, #1]
 800fd20:	78ba      	ldrb	r2, [r7, #2]
 800fd22:	78f9      	ldrb	r1, [r7, #3]
 800fd24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd28:	9303      	str	r3, [sp, #12]
 800fd2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd2c:	9302      	str	r3, [sp, #8]
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	4623      	mov	r3, r4
 800fd3a:	f7f7 f847 	bl	8006dcc <HAL_HCD_HC_SubmitRequest>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f000 f86d 	bl	800fe24 <USBH_Get_USB_Status>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3714      	adds	r7, #20
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd90      	pop	{r4, r7, pc}

0800fd58 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	460b      	mov	r3, r1
 800fd62:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd6a:	78fa      	ldrb	r2, [r7, #3]
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f7 fad4 	bl	800731c <HAL_HCD_HC_GetURBState>
 800fd74:	4603      	mov	r3, r0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b082      	sub	sp, #8
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	460b      	mov	r3, r1
 800fd88:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d103      	bne.n	800fd9c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fd94:	78fb      	ldrb	r3, [r7, #3]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f000 f870 	bl	800fe7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fd9c:	20c8      	movs	r0, #200	; 0xc8
 800fd9e:	f7f6 fbcb 	bl	8006538 <HAL_Delay>
  return USBH_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	70fb      	strb	r3, [r7, #3]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fdc2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fdc4:	78fb      	ldrb	r3, [r7, #3]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	212c      	movs	r1, #44	; 0x2c
 800fdca:	fb01 f303 	mul.w	r3, r1, r3
 800fdce:	4413      	add	r3, r2
 800fdd0:	333b      	adds	r3, #59	; 0x3b
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d009      	beq.n	800fdec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fdd8:	78fb      	ldrb	r3, [r7, #3]
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	212c      	movs	r1, #44	; 0x2c
 800fdde:	fb01 f303 	mul.w	r3, r1, r3
 800fde2:	4413      	add	r3, r2
 800fde4:	3354      	adds	r3, #84	; 0x54
 800fde6:	78ba      	ldrb	r2, [r7, #2]
 800fde8:	701a      	strb	r2, [r3, #0]
 800fdea:	e008      	b.n	800fdfe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fdec:	78fb      	ldrb	r3, [r7, #3]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	212c      	movs	r1, #44	; 0x2c
 800fdf2:	fb01 f303 	mul.w	r3, r1, r3
 800fdf6:	4413      	add	r3, r2
 800fdf8:	3355      	adds	r3, #85	; 0x55
 800fdfa:	78ba      	ldrb	r2, [r7, #2]
 800fdfc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3714      	adds	r7, #20
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7f6 fb8f 	bl	8006538 <HAL_Delay>
}
 800fe1a:	bf00      	nop
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
	...

0800fe24 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d817      	bhi.n	800fe68 <USBH_Get_USB_Status+0x44>
 800fe38:	a201      	add	r2, pc, #4	; (adr r2, 800fe40 <USBH_Get_USB_Status+0x1c>)
 800fe3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3e:	bf00      	nop
 800fe40:	0800fe51 	.word	0x0800fe51
 800fe44:	0800fe57 	.word	0x0800fe57
 800fe48:	0800fe5d 	.word	0x0800fe5d
 800fe4c:	0800fe63 	.word	0x0800fe63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	73fb      	strb	r3, [r7, #15]
    break;
 800fe54:	e00b      	b.n	800fe6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fe56:	2302      	movs	r3, #2
 800fe58:	73fb      	strb	r3, [r7, #15]
    break;
 800fe5a:	e008      	b.n	800fe6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe60:	e005      	b.n	800fe6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fe62:	2302      	movs	r3, #2
 800fe64:	73fb      	strb	r3, [r7, #15]
    break;
 800fe66:	e002      	b.n	800fe6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fe68:	2302      	movs	r3, #2
 800fe6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe6c:	bf00      	nop
  }
  return usb_status;
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3714      	adds	r7, #20
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	4603      	mov	r3, r0
 800fe84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fe8a:	79fb      	ldrb	r3, [r7, #7]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d102      	bne.n	800fe96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fe90:	2301      	movs	r3, #1
 800fe92:	73fb      	strb	r3, [r7, #15]
 800fe94:	e001      	b.n	800fe9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fe96:	2300      	movs	r3, #0
 800fe98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fe9a:	7bfb      	ldrb	r3, [r7, #15]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	2101      	movs	r1, #1
 800fea0:	4803      	ldr	r0, [pc, #12]	; (800feb0 <MX_DriverVbusFS+0x34>)
 800fea2:	f7f6 fe33 	bl	8006b0c <HAL_GPIO_WritePin>
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	40020800 	.word	0x40020800

0800feb4 <__errno>:
 800feb4:	4b01      	ldr	r3, [pc, #4]	; (800febc <__errno+0x8>)
 800feb6:	6818      	ldr	r0, [r3, #0]
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	2000020c 	.word	0x2000020c

0800fec0 <__libc_init_array>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	4d0d      	ldr	r5, [pc, #52]	; (800fef8 <__libc_init_array+0x38>)
 800fec4:	4c0d      	ldr	r4, [pc, #52]	; (800fefc <__libc_init_array+0x3c>)
 800fec6:	1b64      	subs	r4, r4, r5
 800fec8:	10a4      	asrs	r4, r4, #2
 800feca:	2600      	movs	r6, #0
 800fecc:	42a6      	cmp	r6, r4
 800fece:	d109      	bne.n	800fee4 <__libc_init_array+0x24>
 800fed0:	4d0b      	ldr	r5, [pc, #44]	; (800ff00 <__libc_init_array+0x40>)
 800fed2:	4c0c      	ldr	r4, [pc, #48]	; (800ff04 <__libc_init_array+0x44>)
 800fed4:	f000 fc7a 	bl	80107cc <_init>
 800fed8:	1b64      	subs	r4, r4, r5
 800feda:	10a4      	asrs	r4, r4, #2
 800fedc:	2600      	movs	r6, #0
 800fede:	42a6      	cmp	r6, r4
 800fee0:	d105      	bne.n	800feee <__libc_init_array+0x2e>
 800fee2:	bd70      	pop	{r4, r5, r6, pc}
 800fee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fee8:	4798      	blx	r3
 800feea:	3601      	adds	r6, #1
 800feec:	e7ee      	b.n	800fecc <__libc_init_array+0xc>
 800feee:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef2:	4798      	blx	r3
 800fef4:	3601      	adds	r6, #1
 800fef6:	e7f2      	b.n	800fede <__libc_init_array+0x1e>
 800fef8:	08010dc8 	.word	0x08010dc8
 800fefc:	08010dc8 	.word	0x08010dc8
 800ff00:	08010dc8 	.word	0x08010dc8
 800ff04:	08010dcc 	.word	0x08010dcc

0800ff08 <malloc>:
 800ff08:	4b02      	ldr	r3, [pc, #8]	; (800ff14 <malloc+0xc>)
 800ff0a:	4601      	mov	r1, r0
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	f000 b871 	b.w	800fff4 <_malloc_r>
 800ff12:	bf00      	nop
 800ff14:	2000020c 	.word	0x2000020c

0800ff18 <free>:
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <free+0xc>)
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	6818      	ldr	r0, [r3, #0]
 800ff1e:	f000 b819 	b.w	800ff54 <_free_r>
 800ff22:	bf00      	nop
 800ff24:	2000020c 	.word	0x2000020c

0800ff28 <memcpy>:
 800ff28:	440a      	add	r2, r1
 800ff2a:	4291      	cmp	r1, r2
 800ff2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff30:	d100      	bne.n	800ff34 <memcpy+0xc>
 800ff32:	4770      	bx	lr
 800ff34:	b510      	push	{r4, lr}
 800ff36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff3e:	4291      	cmp	r1, r2
 800ff40:	d1f9      	bne.n	800ff36 <memcpy+0xe>
 800ff42:	bd10      	pop	{r4, pc}

0800ff44 <memset>:
 800ff44:	4402      	add	r2, r0
 800ff46:	4603      	mov	r3, r0
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d100      	bne.n	800ff4e <memset+0xa>
 800ff4c:	4770      	bx	lr
 800ff4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ff52:	e7f9      	b.n	800ff48 <memset+0x4>

0800ff54 <_free_r>:
 800ff54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff56:	2900      	cmp	r1, #0
 800ff58:	d048      	beq.n	800ffec <_free_r+0x98>
 800ff5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff5e:	9001      	str	r0, [sp, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f1a1 0404 	sub.w	r4, r1, #4
 800ff66:	bfb8      	it	lt
 800ff68:	18e4      	addlt	r4, r4, r3
 800ff6a:	f000 f8c1 	bl	80100f0 <__malloc_lock>
 800ff6e:	4a20      	ldr	r2, [pc, #128]	; (800fff0 <_free_r+0x9c>)
 800ff70:	9801      	ldr	r0, [sp, #4]
 800ff72:	6813      	ldr	r3, [r2, #0]
 800ff74:	4615      	mov	r5, r2
 800ff76:	b933      	cbnz	r3, 800ff86 <_free_r+0x32>
 800ff78:	6063      	str	r3, [r4, #4]
 800ff7a:	6014      	str	r4, [r2, #0]
 800ff7c:	b003      	add	sp, #12
 800ff7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff82:	f000 b8bb 	b.w	80100fc <__malloc_unlock>
 800ff86:	42a3      	cmp	r3, r4
 800ff88:	d90b      	bls.n	800ffa2 <_free_r+0x4e>
 800ff8a:	6821      	ldr	r1, [r4, #0]
 800ff8c:	1862      	adds	r2, r4, r1
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	bf04      	itt	eq
 800ff92:	681a      	ldreq	r2, [r3, #0]
 800ff94:	685b      	ldreq	r3, [r3, #4]
 800ff96:	6063      	str	r3, [r4, #4]
 800ff98:	bf04      	itt	eq
 800ff9a:	1852      	addeq	r2, r2, r1
 800ff9c:	6022      	streq	r2, [r4, #0]
 800ff9e:	602c      	str	r4, [r5, #0]
 800ffa0:	e7ec      	b.n	800ff7c <_free_r+0x28>
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	b10b      	cbz	r3, 800ffac <_free_r+0x58>
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	d9fa      	bls.n	800ffa2 <_free_r+0x4e>
 800ffac:	6811      	ldr	r1, [r2, #0]
 800ffae:	1855      	adds	r5, r2, r1
 800ffb0:	42a5      	cmp	r5, r4
 800ffb2:	d10b      	bne.n	800ffcc <_free_r+0x78>
 800ffb4:	6824      	ldr	r4, [r4, #0]
 800ffb6:	4421      	add	r1, r4
 800ffb8:	1854      	adds	r4, r2, r1
 800ffba:	42a3      	cmp	r3, r4
 800ffbc:	6011      	str	r1, [r2, #0]
 800ffbe:	d1dd      	bne.n	800ff7c <_free_r+0x28>
 800ffc0:	681c      	ldr	r4, [r3, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	6053      	str	r3, [r2, #4]
 800ffc6:	4421      	add	r1, r4
 800ffc8:	6011      	str	r1, [r2, #0]
 800ffca:	e7d7      	b.n	800ff7c <_free_r+0x28>
 800ffcc:	d902      	bls.n	800ffd4 <_free_r+0x80>
 800ffce:	230c      	movs	r3, #12
 800ffd0:	6003      	str	r3, [r0, #0]
 800ffd2:	e7d3      	b.n	800ff7c <_free_r+0x28>
 800ffd4:	6825      	ldr	r5, [r4, #0]
 800ffd6:	1961      	adds	r1, r4, r5
 800ffd8:	428b      	cmp	r3, r1
 800ffda:	bf04      	itt	eq
 800ffdc:	6819      	ldreq	r1, [r3, #0]
 800ffde:	685b      	ldreq	r3, [r3, #4]
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	bf04      	itt	eq
 800ffe4:	1949      	addeq	r1, r1, r5
 800ffe6:	6021      	streq	r1, [r4, #0]
 800ffe8:	6054      	str	r4, [r2, #4]
 800ffea:	e7c7      	b.n	800ff7c <_free_r+0x28>
 800ffec:	b003      	add	sp, #12
 800ffee:	bd30      	pop	{r4, r5, pc}
 800fff0:	200002a4 	.word	0x200002a4

0800fff4 <_malloc_r>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	1ccd      	adds	r5, r1, #3
 800fff8:	f025 0503 	bic.w	r5, r5, #3
 800fffc:	3508      	adds	r5, #8
 800fffe:	2d0c      	cmp	r5, #12
 8010000:	bf38      	it	cc
 8010002:	250c      	movcc	r5, #12
 8010004:	2d00      	cmp	r5, #0
 8010006:	4606      	mov	r6, r0
 8010008:	db01      	blt.n	801000e <_malloc_r+0x1a>
 801000a:	42a9      	cmp	r1, r5
 801000c:	d903      	bls.n	8010016 <_malloc_r+0x22>
 801000e:	230c      	movs	r3, #12
 8010010:	6033      	str	r3, [r6, #0]
 8010012:	2000      	movs	r0, #0
 8010014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010016:	f000 f86b 	bl	80100f0 <__malloc_lock>
 801001a:	4921      	ldr	r1, [pc, #132]	; (80100a0 <_malloc_r+0xac>)
 801001c:	680a      	ldr	r2, [r1, #0]
 801001e:	4614      	mov	r4, r2
 8010020:	b99c      	cbnz	r4, 801004a <_malloc_r+0x56>
 8010022:	4f20      	ldr	r7, [pc, #128]	; (80100a4 <_malloc_r+0xb0>)
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	b923      	cbnz	r3, 8010032 <_malloc_r+0x3e>
 8010028:	4621      	mov	r1, r4
 801002a:	4630      	mov	r0, r6
 801002c:	f000 f83c 	bl	80100a8 <_sbrk_r>
 8010030:	6038      	str	r0, [r7, #0]
 8010032:	4629      	mov	r1, r5
 8010034:	4630      	mov	r0, r6
 8010036:	f000 f837 	bl	80100a8 <_sbrk_r>
 801003a:	1c43      	adds	r3, r0, #1
 801003c:	d123      	bne.n	8010086 <_malloc_r+0x92>
 801003e:	230c      	movs	r3, #12
 8010040:	6033      	str	r3, [r6, #0]
 8010042:	4630      	mov	r0, r6
 8010044:	f000 f85a 	bl	80100fc <__malloc_unlock>
 8010048:	e7e3      	b.n	8010012 <_malloc_r+0x1e>
 801004a:	6823      	ldr	r3, [r4, #0]
 801004c:	1b5b      	subs	r3, r3, r5
 801004e:	d417      	bmi.n	8010080 <_malloc_r+0x8c>
 8010050:	2b0b      	cmp	r3, #11
 8010052:	d903      	bls.n	801005c <_malloc_r+0x68>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	441c      	add	r4, r3
 8010058:	6025      	str	r5, [r4, #0]
 801005a:	e004      	b.n	8010066 <_malloc_r+0x72>
 801005c:	6863      	ldr	r3, [r4, #4]
 801005e:	42a2      	cmp	r2, r4
 8010060:	bf0c      	ite	eq
 8010062:	600b      	streq	r3, [r1, #0]
 8010064:	6053      	strne	r3, [r2, #4]
 8010066:	4630      	mov	r0, r6
 8010068:	f000 f848 	bl	80100fc <__malloc_unlock>
 801006c:	f104 000b 	add.w	r0, r4, #11
 8010070:	1d23      	adds	r3, r4, #4
 8010072:	f020 0007 	bic.w	r0, r0, #7
 8010076:	1ac2      	subs	r2, r0, r3
 8010078:	d0cc      	beq.n	8010014 <_malloc_r+0x20>
 801007a:	1a1b      	subs	r3, r3, r0
 801007c:	50a3      	str	r3, [r4, r2]
 801007e:	e7c9      	b.n	8010014 <_malloc_r+0x20>
 8010080:	4622      	mov	r2, r4
 8010082:	6864      	ldr	r4, [r4, #4]
 8010084:	e7cc      	b.n	8010020 <_malloc_r+0x2c>
 8010086:	1cc4      	adds	r4, r0, #3
 8010088:	f024 0403 	bic.w	r4, r4, #3
 801008c:	42a0      	cmp	r0, r4
 801008e:	d0e3      	beq.n	8010058 <_malloc_r+0x64>
 8010090:	1a21      	subs	r1, r4, r0
 8010092:	4630      	mov	r0, r6
 8010094:	f000 f808 	bl	80100a8 <_sbrk_r>
 8010098:	3001      	adds	r0, #1
 801009a:	d1dd      	bne.n	8010058 <_malloc_r+0x64>
 801009c:	e7cf      	b.n	801003e <_malloc_r+0x4a>
 801009e:	bf00      	nop
 80100a0:	200002a4 	.word	0x200002a4
 80100a4:	200002a8 	.word	0x200002a8

080100a8 <_sbrk_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d06      	ldr	r5, [pc, #24]	; (80100c4 <_sbrk_r+0x1c>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	602b      	str	r3, [r5, #0]
 80100b4:	f7f2 f8b0 	bl	8002218 <_sbrk>
 80100b8:	1c43      	adds	r3, r0, #1
 80100ba:	d102      	bne.n	80100c2 <_sbrk_r+0x1a>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	b103      	cbz	r3, 80100c2 <_sbrk_r+0x1a>
 80100c0:	6023      	str	r3, [r4, #0]
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	20000d84 	.word	0x20000d84

080100c8 <strncat>:
 80100c8:	b530      	push	{r4, r5, lr}
 80100ca:	4604      	mov	r4, r0
 80100cc:	7825      	ldrb	r5, [r4, #0]
 80100ce:	4623      	mov	r3, r4
 80100d0:	3401      	adds	r4, #1
 80100d2:	2d00      	cmp	r5, #0
 80100d4:	d1fa      	bne.n	80100cc <strncat+0x4>
 80100d6:	3a01      	subs	r2, #1
 80100d8:	d304      	bcc.n	80100e4 <strncat+0x1c>
 80100da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100de:	f803 4b01 	strb.w	r4, [r3], #1
 80100e2:	b904      	cbnz	r4, 80100e6 <strncat+0x1e>
 80100e4:	bd30      	pop	{r4, r5, pc}
 80100e6:	2a00      	cmp	r2, #0
 80100e8:	d1f5      	bne.n	80100d6 <strncat+0xe>
 80100ea:	701a      	strb	r2, [r3, #0]
 80100ec:	e7f3      	b.n	80100d6 <strncat+0xe>
	...

080100f0 <__malloc_lock>:
 80100f0:	4801      	ldr	r0, [pc, #4]	; (80100f8 <__malloc_lock+0x8>)
 80100f2:	f000 b809 	b.w	8010108 <__retarget_lock_acquire_recursive>
 80100f6:	bf00      	nop
 80100f8:	20000d8c 	.word	0x20000d8c

080100fc <__malloc_unlock>:
 80100fc:	4801      	ldr	r0, [pc, #4]	; (8010104 <__malloc_unlock+0x8>)
 80100fe:	f000 b804 	b.w	801010a <__retarget_lock_release_recursive>
 8010102:	bf00      	nop
 8010104:	20000d8c 	.word	0x20000d8c

08010108 <__retarget_lock_acquire_recursive>:
 8010108:	4770      	bx	lr

0801010a <__retarget_lock_release_recursive>:
 801010a:	4770      	bx	lr
 801010c:	0000      	movs	r0, r0
	...

08010110 <atan>:
 8010110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	ec55 4b10 	vmov	r4, r5, d0
 8010118:	4bc3      	ldr	r3, [pc, #780]	; (8010428 <atan+0x318>)
 801011a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801011e:	429e      	cmp	r6, r3
 8010120:	46ab      	mov	fp, r5
 8010122:	dd18      	ble.n	8010156 <atan+0x46>
 8010124:	4bc1      	ldr	r3, [pc, #772]	; (801042c <atan+0x31c>)
 8010126:	429e      	cmp	r6, r3
 8010128:	dc01      	bgt.n	801012e <atan+0x1e>
 801012a:	d109      	bne.n	8010140 <atan+0x30>
 801012c:	b144      	cbz	r4, 8010140 <atan+0x30>
 801012e:	4622      	mov	r2, r4
 8010130:	462b      	mov	r3, r5
 8010132:	4620      	mov	r0, r4
 8010134:	4629      	mov	r1, r5
 8010136:	f7f0 f84d 	bl	80001d4 <__adddf3>
 801013a:	4604      	mov	r4, r0
 801013c:	460d      	mov	r5, r1
 801013e:	e006      	b.n	801014e <atan+0x3e>
 8010140:	f1bb 0f00 	cmp.w	fp, #0
 8010144:	f300 8131 	bgt.w	80103aa <atan+0x29a>
 8010148:	a59b      	add	r5, pc, #620	; (adr r5, 80103b8 <atan+0x2a8>)
 801014a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801014e:	ec45 4b10 	vmov	d0, r4, r5
 8010152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010156:	4bb6      	ldr	r3, [pc, #728]	; (8010430 <atan+0x320>)
 8010158:	429e      	cmp	r6, r3
 801015a:	dc14      	bgt.n	8010186 <atan+0x76>
 801015c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010160:	429e      	cmp	r6, r3
 8010162:	dc0d      	bgt.n	8010180 <atan+0x70>
 8010164:	a396      	add	r3, pc, #600	; (adr r3, 80103c0 <atan+0x2b0>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	ee10 0a10 	vmov	r0, s0
 801016e:	4629      	mov	r1, r5
 8010170:	f7f0 f830 	bl	80001d4 <__adddf3>
 8010174:	4baf      	ldr	r3, [pc, #700]	; (8010434 <atan+0x324>)
 8010176:	2200      	movs	r2, #0
 8010178:	f7f0 fc72 	bl	8000a60 <__aeabi_dcmpgt>
 801017c:	2800      	cmp	r0, #0
 801017e:	d1e6      	bne.n	801014e <atan+0x3e>
 8010180:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010184:	e02b      	b.n	80101de <atan+0xce>
 8010186:	f000 f963 	bl	8010450 <fabs>
 801018a:	4bab      	ldr	r3, [pc, #684]	; (8010438 <atan+0x328>)
 801018c:	429e      	cmp	r6, r3
 801018e:	ec55 4b10 	vmov	r4, r5, d0
 8010192:	f300 80bf 	bgt.w	8010314 <atan+0x204>
 8010196:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801019a:	429e      	cmp	r6, r3
 801019c:	f300 80a0 	bgt.w	80102e0 <atan+0x1d0>
 80101a0:	ee10 2a10 	vmov	r2, s0
 80101a4:	ee10 0a10 	vmov	r0, s0
 80101a8:	462b      	mov	r3, r5
 80101aa:	4629      	mov	r1, r5
 80101ac:	f7f0 f812 	bl	80001d4 <__adddf3>
 80101b0:	4ba0      	ldr	r3, [pc, #640]	; (8010434 <atan+0x324>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f7f0 f80c 	bl	80001d0 <__aeabi_dsub>
 80101b8:	2200      	movs	r2, #0
 80101ba:	4606      	mov	r6, r0
 80101bc:	460f      	mov	r7, r1
 80101be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101c2:	4620      	mov	r0, r4
 80101c4:	4629      	mov	r1, r5
 80101c6:	f7f0 f805 	bl	80001d4 <__adddf3>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4630      	mov	r0, r6
 80101d0:	4639      	mov	r1, r7
 80101d2:	f7f0 fadf 	bl	8000794 <__aeabi_ddiv>
 80101d6:	f04f 0a00 	mov.w	sl, #0
 80101da:	4604      	mov	r4, r0
 80101dc:	460d      	mov	r5, r1
 80101de:	4622      	mov	r2, r4
 80101e0:	462b      	mov	r3, r5
 80101e2:	4620      	mov	r0, r4
 80101e4:	4629      	mov	r1, r5
 80101e6:	f7f0 f9ab 	bl	8000540 <__aeabi_dmul>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4680      	mov	r8, r0
 80101f0:	4689      	mov	r9, r1
 80101f2:	f7f0 f9a5 	bl	8000540 <__aeabi_dmul>
 80101f6:	a374      	add	r3, pc, #464	; (adr r3, 80103c8 <atan+0x2b8>)
 80101f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fc:	4606      	mov	r6, r0
 80101fe:	460f      	mov	r7, r1
 8010200:	f7f0 f99e 	bl	8000540 <__aeabi_dmul>
 8010204:	a372      	add	r3, pc, #456	; (adr r3, 80103d0 <atan+0x2c0>)
 8010206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020a:	f7ef ffe3 	bl	80001d4 <__adddf3>
 801020e:	4632      	mov	r2, r6
 8010210:	463b      	mov	r3, r7
 8010212:	f7f0 f995 	bl	8000540 <__aeabi_dmul>
 8010216:	a370      	add	r3, pc, #448	; (adr r3, 80103d8 <atan+0x2c8>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7ef ffda 	bl	80001d4 <__adddf3>
 8010220:	4632      	mov	r2, r6
 8010222:	463b      	mov	r3, r7
 8010224:	f7f0 f98c 	bl	8000540 <__aeabi_dmul>
 8010228:	a36d      	add	r3, pc, #436	; (adr r3, 80103e0 <atan+0x2d0>)
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	f7ef ffd1 	bl	80001d4 <__adddf3>
 8010232:	4632      	mov	r2, r6
 8010234:	463b      	mov	r3, r7
 8010236:	f7f0 f983 	bl	8000540 <__aeabi_dmul>
 801023a:	a36b      	add	r3, pc, #428	; (adr r3, 80103e8 <atan+0x2d8>)
 801023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010240:	f7ef ffc8 	bl	80001d4 <__adddf3>
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	f7f0 f97a 	bl	8000540 <__aeabi_dmul>
 801024c:	a368      	add	r3, pc, #416	; (adr r3, 80103f0 <atan+0x2e0>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	f7ef ffbf 	bl	80001d4 <__adddf3>
 8010256:	4642      	mov	r2, r8
 8010258:	464b      	mov	r3, r9
 801025a:	f7f0 f971 	bl	8000540 <__aeabi_dmul>
 801025e:	a366      	add	r3, pc, #408	; (adr r3, 80103f8 <atan+0x2e8>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	4680      	mov	r8, r0
 8010266:	4689      	mov	r9, r1
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 f968 	bl	8000540 <__aeabi_dmul>
 8010270:	a363      	add	r3, pc, #396	; (adr r3, 8010400 <atan+0x2f0>)
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	f7ef ffab 	bl	80001d0 <__aeabi_dsub>
 801027a:	4632      	mov	r2, r6
 801027c:	463b      	mov	r3, r7
 801027e:	f7f0 f95f 	bl	8000540 <__aeabi_dmul>
 8010282:	a361      	add	r3, pc, #388	; (adr r3, 8010408 <atan+0x2f8>)
 8010284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010288:	f7ef ffa2 	bl	80001d0 <__aeabi_dsub>
 801028c:	4632      	mov	r2, r6
 801028e:	463b      	mov	r3, r7
 8010290:	f7f0 f956 	bl	8000540 <__aeabi_dmul>
 8010294:	a35e      	add	r3, pc, #376	; (adr r3, 8010410 <atan+0x300>)
 8010296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029a:	f7ef ff99 	bl	80001d0 <__aeabi_dsub>
 801029e:	4632      	mov	r2, r6
 80102a0:	463b      	mov	r3, r7
 80102a2:	f7f0 f94d 	bl	8000540 <__aeabi_dmul>
 80102a6:	a35c      	add	r3, pc, #368	; (adr r3, 8010418 <atan+0x308>)
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	f7ef ff90 	bl	80001d0 <__aeabi_dsub>
 80102b0:	4632      	mov	r2, r6
 80102b2:	463b      	mov	r3, r7
 80102b4:	f7f0 f944 	bl	8000540 <__aeabi_dmul>
 80102b8:	4602      	mov	r2, r0
 80102ba:	460b      	mov	r3, r1
 80102bc:	4640      	mov	r0, r8
 80102be:	4649      	mov	r1, r9
 80102c0:	f7ef ff88 	bl	80001d4 <__adddf3>
 80102c4:	4622      	mov	r2, r4
 80102c6:	462b      	mov	r3, r5
 80102c8:	f7f0 f93a 	bl	8000540 <__aeabi_dmul>
 80102cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	d14b      	bne.n	801036e <atan+0x25e>
 80102d6:	4620      	mov	r0, r4
 80102d8:	4629      	mov	r1, r5
 80102da:	f7ef ff79 	bl	80001d0 <__aeabi_dsub>
 80102de:	e72c      	b.n	801013a <atan+0x2a>
 80102e0:	ee10 0a10 	vmov	r0, s0
 80102e4:	4b53      	ldr	r3, [pc, #332]	; (8010434 <atan+0x324>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7ef ff71 	bl	80001d0 <__aeabi_dsub>
 80102ee:	4b51      	ldr	r3, [pc, #324]	; (8010434 <atan+0x324>)
 80102f0:	4606      	mov	r6, r0
 80102f2:	460f      	mov	r7, r1
 80102f4:	2200      	movs	r2, #0
 80102f6:	4620      	mov	r0, r4
 80102f8:	4629      	mov	r1, r5
 80102fa:	f7ef ff6b 	bl	80001d4 <__adddf3>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	4630      	mov	r0, r6
 8010304:	4639      	mov	r1, r7
 8010306:	f7f0 fa45 	bl	8000794 <__aeabi_ddiv>
 801030a:	f04f 0a01 	mov.w	sl, #1
 801030e:	4604      	mov	r4, r0
 8010310:	460d      	mov	r5, r1
 8010312:	e764      	b.n	80101de <atan+0xce>
 8010314:	4b49      	ldr	r3, [pc, #292]	; (801043c <atan+0x32c>)
 8010316:	429e      	cmp	r6, r3
 8010318:	da1d      	bge.n	8010356 <atan+0x246>
 801031a:	ee10 0a10 	vmov	r0, s0
 801031e:	4b48      	ldr	r3, [pc, #288]	; (8010440 <atan+0x330>)
 8010320:	2200      	movs	r2, #0
 8010322:	4629      	mov	r1, r5
 8010324:	f7ef ff54 	bl	80001d0 <__aeabi_dsub>
 8010328:	4b45      	ldr	r3, [pc, #276]	; (8010440 <atan+0x330>)
 801032a:	4606      	mov	r6, r0
 801032c:	460f      	mov	r7, r1
 801032e:	2200      	movs	r2, #0
 8010330:	4620      	mov	r0, r4
 8010332:	4629      	mov	r1, r5
 8010334:	f7f0 f904 	bl	8000540 <__aeabi_dmul>
 8010338:	4b3e      	ldr	r3, [pc, #248]	; (8010434 <atan+0x324>)
 801033a:	2200      	movs	r2, #0
 801033c:	f7ef ff4a 	bl	80001d4 <__adddf3>
 8010340:	4602      	mov	r2, r0
 8010342:	460b      	mov	r3, r1
 8010344:	4630      	mov	r0, r6
 8010346:	4639      	mov	r1, r7
 8010348:	f7f0 fa24 	bl	8000794 <__aeabi_ddiv>
 801034c:	f04f 0a02 	mov.w	sl, #2
 8010350:	4604      	mov	r4, r0
 8010352:	460d      	mov	r5, r1
 8010354:	e743      	b.n	80101de <atan+0xce>
 8010356:	462b      	mov	r3, r5
 8010358:	ee10 2a10 	vmov	r2, s0
 801035c:	4939      	ldr	r1, [pc, #228]	; (8010444 <atan+0x334>)
 801035e:	2000      	movs	r0, #0
 8010360:	f7f0 fa18 	bl	8000794 <__aeabi_ddiv>
 8010364:	f04f 0a03 	mov.w	sl, #3
 8010368:	4604      	mov	r4, r0
 801036a:	460d      	mov	r5, r1
 801036c:	e737      	b.n	80101de <atan+0xce>
 801036e:	4b36      	ldr	r3, [pc, #216]	; (8010448 <atan+0x338>)
 8010370:	4e36      	ldr	r6, [pc, #216]	; (801044c <atan+0x33c>)
 8010372:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010376:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801037a:	e9da 2300 	ldrd	r2, r3, [sl]
 801037e:	f7ef ff27 	bl	80001d0 <__aeabi_dsub>
 8010382:	4622      	mov	r2, r4
 8010384:	462b      	mov	r3, r5
 8010386:	f7ef ff23 	bl	80001d0 <__aeabi_dsub>
 801038a:	4602      	mov	r2, r0
 801038c:	460b      	mov	r3, r1
 801038e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010392:	f7ef ff1d 	bl	80001d0 <__aeabi_dsub>
 8010396:	f1bb 0f00 	cmp.w	fp, #0
 801039a:	4604      	mov	r4, r0
 801039c:	460d      	mov	r5, r1
 801039e:	f6bf aed6 	bge.w	801014e <atan+0x3e>
 80103a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103a6:	461d      	mov	r5, r3
 80103a8:	e6d1      	b.n	801014e <atan+0x3e>
 80103aa:	a51d      	add	r5, pc, #116	; (adr r5, 8010420 <atan+0x310>)
 80103ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80103b0:	e6cd      	b.n	801014e <atan+0x3e>
 80103b2:	bf00      	nop
 80103b4:	f3af 8000 	nop.w
 80103b8:	54442d18 	.word	0x54442d18
 80103bc:	bff921fb 	.word	0xbff921fb
 80103c0:	8800759c 	.word	0x8800759c
 80103c4:	7e37e43c 	.word	0x7e37e43c
 80103c8:	e322da11 	.word	0xe322da11
 80103cc:	3f90ad3a 	.word	0x3f90ad3a
 80103d0:	24760deb 	.word	0x24760deb
 80103d4:	3fa97b4b 	.word	0x3fa97b4b
 80103d8:	a0d03d51 	.word	0xa0d03d51
 80103dc:	3fb10d66 	.word	0x3fb10d66
 80103e0:	c54c206e 	.word	0xc54c206e
 80103e4:	3fb745cd 	.word	0x3fb745cd
 80103e8:	920083ff 	.word	0x920083ff
 80103ec:	3fc24924 	.word	0x3fc24924
 80103f0:	5555550d 	.word	0x5555550d
 80103f4:	3fd55555 	.word	0x3fd55555
 80103f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80103fc:	bfa2b444 	.word	0xbfa2b444
 8010400:	52defd9a 	.word	0x52defd9a
 8010404:	3fadde2d 	.word	0x3fadde2d
 8010408:	af749a6d 	.word	0xaf749a6d
 801040c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010410:	fe231671 	.word	0xfe231671
 8010414:	3fbc71c6 	.word	0x3fbc71c6
 8010418:	9998ebc4 	.word	0x9998ebc4
 801041c:	3fc99999 	.word	0x3fc99999
 8010420:	54442d18 	.word	0x54442d18
 8010424:	3ff921fb 	.word	0x3ff921fb
 8010428:	440fffff 	.word	0x440fffff
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	3fdbffff 	.word	0x3fdbffff
 8010434:	3ff00000 	.word	0x3ff00000
 8010438:	3ff2ffff 	.word	0x3ff2ffff
 801043c:	40038000 	.word	0x40038000
 8010440:	3ff80000 	.word	0x3ff80000
 8010444:	bff00000 	.word	0xbff00000
 8010448:	08010d70 	.word	0x08010d70
 801044c:	08010d50 	.word	0x08010d50

08010450 <fabs>:
 8010450:	ec51 0b10 	vmov	r0, r1, d0
 8010454:	ee10 2a10 	vmov	r2, s0
 8010458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801045c:	ec43 2b10 	vmov	d0, r2, r3
 8010460:	4770      	bx	lr

08010462 <atan2>:
 8010462:	f000 b835 	b.w	80104d0 <__ieee754_atan2>
	...

08010468 <sqrt>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	ed2d 8b02 	vpush	{d8}
 801046e:	ec55 4b10 	vmov	r4, r5, d0
 8010472:	f000 f8f7 	bl	8010664 <__ieee754_sqrt>
 8010476:	4b15      	ldr	r3, [pc, #84]	; (80104cc <sqrt+0x64>)
 8010478:	eeb0 8a40 	vmov.f32	s16, s0
 801047c:	eef0 8a60 	vmov.f32	s17, s1
 8010480:	f993 3000 	ldrsb.w	r3, [r3]
 8010484:	3301      	adds	r3, #1
 8010486:	d019      	beq.n	80104bc <sqrt+0x54>
 8010488:	4622      	mov	r2, r4
 801048a:	462b      	mov	r3, r5
 801048c:	4620      	mov	r0, r4
 801048e:	4629      	mov	r1, r5
 8010490:	f7f0 faf0 	bl	8000a74 <__aeabi_dcmpun>
 8010494:	b990      	cbnz	r0, 80104bc <sqrt+0x54>
 8010496:	2200      	movs	r2, #0
 8010498:	2300      	movs	r3, #0
 801049a:	4620      	mov	r0, r4
 801049c:	4629      	mov	r1, r5
 801049e:	f7f0 fac1 	bl	8000a24 <__aeabi_dcmplt>
 80104a2:	b158      	cbz	r0, 80104bc <sqrt+0x54>
 80104a4:	f7ff fd06 	bl	800feb4 <__errno>
 80104a8:	2321      	movs	r3, #33	; 0x21
 80104aa:	6003      	str	r3, [r0, #0]
 80104ac:	2200      	movs	r2, #0
 80104ae:	2300      	movs	r3, #0
 80104b0:	4610      	mov	r0, r2
 80104b2:	4619      	mov	r1, r3
 80104b4:	f7f0 f96e 	bl	8000794 <__aeabi_ddiv>
 80104b8:	ec41 0b18 	vmov	d8, r0, r1
 80104bc:	eeb0 0a48 	vmov.f32	s0, s16
 80104c0:	eef0 0a68 	vmov.f32	s1, s17
 80104c4:	ecbd 8b02 	vpop	{d8}
 80104c8:	bd38      	pop	{r3, r4, r5, pc}
 80104ca:	bf00      	nop
 80104cc:	20000270 	.word	0x20000270

080104d0 <__ieee754_atan2>:
 80104d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d4:	ec57 6b11 	vmov	r6, r7, d1
 80104d8:	4273      	negs	r3, r6
 80104da:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010660 <__ieee754_atan2+0x190>
 80104de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80104e2:	4333      	orrs	r3, r6
 80104e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80104e8:	4573      	cmp	r3, lr
 80104ea:	ec51 0b10 	vmov	r0, r1, d0
 80104ee:	ee11 8a10 	vmov	r8, s2
 80104f2:	d80a      	bhi.n	801050a <__ieee754_atan2+0x3a>
 80104f4:	4244      	negs	r4, r0
 80104f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104fa:	4304      	orrs	r4, r0
 80104fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010500:	4574      	cmp	r4, lr
 8010502:	ee10 9a10 	vmov	r9, s0
 8010506:	468c      	mov	ip, r1
 8010508:	d907      	bls.n	801051a <__ieee754_atan2+0x4a>
 801050a:	4632      	mov	r2, r6
 801050c:	463b      	mov	r3, r7
 801050e:	f7ef fe61 	bl	80001d4 <__adddf3>
 8010512:	ec41 0b10 	vmov	d0, r0, r1
 8010516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801051a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801051e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010522:	4334      	orrs	r4, r6
 8010524:	d103      	bne.n	801052e <__ieee754_atan2+0x5e>
 8010526:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801052a:	f7ff bdf1 	b.w	8010110 <atan>
 801052e:	17bc      	asrs	r4, r7, #30
 8010530:	f004 0402 	and.w	r4, r4, #2
 8010534:	ea53 0909 	orrs.w	r9, r3, r9
 8010538:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801053c:	d107      	bne.n	801054e <__ieee754_atan2+0x7e>
 801053e:	2c02      	cmp	r4, #2
 8010540:	d060      	beq.n	8010604 <__ieee754_atan2+0x134>
 8010542:	2c03      	cmp	r4, #3
 8010544:	d1e5      	bne.n	8010512 <__ieee754_atan2+0x42>
 8010546:	a142      	add	r1, pc, #264	; (adr r1, 8010650 <__ieee754_atan2+0x180>)
 8010548:	e9d1 0100 	ldrd	r0, r1, [r1]
 801054c:	e7e1      	b.n	8010512 <__ieee754_atan2+0x42>
 801054e:	ea52 0808 	orrs.w	r8, r2, r8
 8010552:	d106      	bne.n	8010562 <__ieee754_atan2+0x92>
 8010554:	f1bc 0f00 	cmp.w	ip, #0
 8010558:	da5f      	bge.n	801061a <__ieee754_atan2+0x14a>
 801055a:	a13f      	add	r1, pc, #252	; (adr r1, 8010658 <__ieee754_atan2+0x188>)
 801055c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010560:	e7d7      	b.n	8010512 <__ieee754_atan2+0x42>
 8010562:	4572      	cmp	r2, lr
 8010564:	d10f      	bne.n	8010586 <__ieee754_atan2+0xb6>
 8010566:	4293      	cmp	r3, r2
 8010568:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801056c:	d107      	bne.n	801057e <__ieee754_atan2+0xae>
 801056e:	2c02      	cmp	r4, #2
 8010570:	d84c      	bhi.n	801060c <__ieee754_atan2+0x13c>
 8010572:	4b35      	ldr	r3, [pc, #212]	; (8010648 <__ieee754_atan2+0x178>)
 8010574:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010578:	e9d4 0100 	ldrd	r0, r1, [r4]
 801057c:	e7c9      	b.n	8010512 <__ieee754_atan2+0x42>
 801057e:	2c02      	cmp	r4, #2
 8010580:	d848      	bhi.n	8010614 <__ieee754_atan2+0x144>
 8010582:	4b32      	ldr	r3, [pc, #200]	; (801064c <__ieee754_atan2+0x17c>)
 8010584:	e7f6      	b.n	8010574 <__ieee754_atan2+0xa4>
 8010586:	4573      	cmp	r3, lr
 8010588:	d0e4      	beq.n	8010554 <__ieee754_atan2+0x84>
 801058a:	1a9b      	subs	r3, r3, r2
 801058c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010590:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010594:	da1e      	bge.n	80105d4 <__ieee754_atan2+0x104>
 8010596:	2f00      	cmp	r7, #0
 8010598:	da01      	bge.n	801059e <__ieee754_atan2+0xce>
 801059a:	323c      	adds	r2, #60	; 0x3c
 801059c:	db1e      	blt.n	80105dc <__ieee754_atan2+0x10c>
 801059e:	4632      	mov	r2, r6
 80105a0:	463b      	mov	r3, r7
 80105a2:	f7f0 f8f7 	bl	8000794 <__aeabi_ddiv>
 80105a6:	ec41 0b10 	vmov	d0, r0, r1
 80105aa:	f7ff ff51 	bl	8010450 <fabs>
 80105ae:	f7ff fdaf 	bl	8010110 <atan>
 80105b2:	ec51 0b10 	vmov	r0, r1, d0
 80105b6:	2c01      	cmp	r4, #1
 80105b8:	d013      	beq.n	80105e2 <__ieee754_atan2+0x112>
 80105ba:	2c02      	cmp	r4, #2
 80105bc:	d015      	beq.n	80105ea <__ieee754_atan2+0x11a>
 80105be:	2c00      	cmp	r4, #0
 80105c0:	d0a7      	beq.n	8010512 <__ieee754_atan2+0x42>
 80105c2:	a319      	add	r3, pc, #100	; (adr r3, 8010628 <__ieee754_atan2+0x158>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	f7ef fe02 	bl	80001d0 <__aeabi_dsub>
 80105cc:	a318      	add	r3, pc, #96	; (adr r3, 8010630 <__ieee754_atan2+0x160>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	e014      	b.n	80105fe <__ieee754_atan2+0x12e>
 80105d4:	a118      	add	r1, pc, #96	; (adr r1, 8010638 <__ieee754_atan2+0x168>)
 80105d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105da:	e7ec      	b.n	80105b6 <__ieee754_atan2+0xe6>
 80105dc:	2000      	movs	r0, #0
 80105de:	2100      	movs	r1, #0
 80105e0:	e7e9      	b.n	80105b6 <__ieee754_atan2+0xe6>
 80105e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105e6:	4619      	mov	r1, r3
 80105e8:	e793      	b.n	8010512 <__ieee754_atan2+0x42>
 80105ea:	a30f      	add	r3, pc, #60	; (adr r3, 8010628 <__ieee754_atan2+0x158>)
 80105ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f0:	f7ef fdee 	bl	80001d0 <__aeabi_dsub>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	a10d      	add	r1, pc, #52	; (adr r1, 8010630 <__ieee754_atan2+0x160>)
 80105fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105fe:	f7ef fde7 	bl	80001d0 <__aeabi_dsub>
 8010602:	e786      	b.n	8010512 <__ieee754_atan2+0x42>
 8010604:	a10a      	add	r1, pc, #40	; (adr r1, 8010630 <__ieee754_atan2+0x160>)
 8010606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060a:	e782      	b.n	8010512 <__ieee754_atan2+0x42>
 801060c:	a10c      	add	r1, pc, #48	; (adr r1, 8010640 <__ieee754_atan2+0x170>)
 801060e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010612:	e77e      	b.n	8010512 <__ieee754_atan2+0x42>
 8010614:	2000      	movs	r0, #0
 8010616:	2100      	movs	r1, #0
 8010618:	e77b      	b.n	8010512 <__ieee754_atan2+0x42>
 801061a:	a107      	add	r1, pc, #28	; (adr r1, 8010638 <__ieee754_atan2+0x168>)
 801061c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010620:	e777      	b.n	8010512 <__ieee754_atan2+0x42>
 8010622:	bf00      	nop
 8010624:	f3af 8000 	nop.w
 8010628:	33145c07 	.word	0x33145c07
 801062c:	3ca1a626 	.word	0x3ca1a626
 8010630:	54442d18 	.word	0x54442d18
 8010634:	400921fb 	.word	0x400921fb
 8010638:	54442d18 	.word	0x54442d18
 801063c:	3ff921fb 	.word	0x3ff921fb
 8010640:	54442d18 	.word	0x54442d18
 8010644:	3fe921fb 	.word	0x3fe921fb
 8010648:	08010d90 	.word	0x08010d90
 801064c:	08010da8 	.word	0x08010da8
 8010650:	54442d18 	.word	0x54442d18
 8010654:	c00921fb 	.word	0xc00921fb
 8010658:	54442d18 	.word	0x54442d18
 801065c:	bff921fb 	.word	0xbff921fb
 8010660:	7ff00000 	.word	0x7ff00000

08010664 <__ieee754_sqrt>:
 8010664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010668:	ec55 4b10 	vmov	r4, r5, d0
 801066c:	4e56      	ldr	r6, [pc, #344]	; (80107c8 <__ieee754_sqrt+0x164>)
 801066e:	43ae      	bics	r6, r5
 8010670:	ee10 0a10 	vmov	r0, s0
 8010674:	ee10 3a10 	vmov	r3, s0
 8010678:	4629      	mov	r1, r5
 801067a:	462a      	mov	r2, r5
 801067c:	d110      	bne.n	80106a0 <__ieee754_sqrt+0x3c>
 801067e:	ee10 2a10 	vmov	r2, s0
 8010682:	462b      	mov	r3, r5
 8010684:	f7ef ff5c 	bl	8000540 <__aeabi_dmul>
 8010688:	4602      	mov	r2, r0
 801068a:	460b      	mov	r3, r1
 801068c:	4620      	mov	r0, r4
 801068e:	4629      	mov	r1, r5
 8010690:	f7ef fda0 	bl	80001d4 <__adddf3>
 8010694:	4604      	mov	r4, r0
 8010696:	460d      	mov	r5, r1
 8010698:	ec45 4b10 	vmov	d0, r4, r5
 801069c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	dc10      	bgt.n	80106c6 <__ieee754_sqrt+0x62>
 80106a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80106a8:	4330      	orrs	r0, r6
 80106aa:	d0f5      	beq.n	8010698 <__ieee754_sqrt+0x34>
 80106ac:	b15d      	cbz	r5, 80106c6 <__ieee754_sqrt+0x62>
 80106ae:	ee10 2a10 	vmov	r2, s0
 80106b2:	462b      	mov	r3, r5
 80106b4:	ee10 0a10 	vmov	r0, s0
 80106b8:	f7ef fd8a 	bl	80001d0 <__aeabi_dsub>
 80106bc:	4602      	mov	r2, r0
 80106be:	460b      	mov	r3, r1
 80106c0:	f7f0 f868 	bl	8000794 <__aeabi_ddiv>
 80106c4:	e7e6      	b.n	8010694 <__ieee754_sqrt+0x30>
 80106c6:	1509      	asrs	r1, r1, #20
 80106c8:	d076      	beq.n	80107b8 <__ieee754_sqrt+0x154>
 80106ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80106ce:	07ce      	lsls	r6, r1, #31
 80106d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80106d4:	bf5e      	ittt	pl
 80106d6:	0fda      	lsrpl	r2, r3, #31
 80106d8:	005b      	lslpl	r3, r3, #1
 80106da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80106de:	0fda      	lsrs	r2, r3, #31
 80106e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80106e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80106e8:	2000      	movs	r0, #0
 80106ea:	106d      	asrs	r5, r5, #1
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	f04f 0e16 	mov.w	lr, #22
 80106f2:	4684      	mov	ip, r0
 80106f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106f8:	eb0c 0401 	add.w	r4, ip, r1
 80106fc:	4294      	cmp	r4, r2
 80106fe:	bfde      	ittt	le
 8010700:	1b12      	suble	r2, r2, r4
 8010702:	eb04 0c01 	addle.w	ip, r4, r1
 8010706:	1840      	addle	r0, r0, r1
 8010708:	0052      	lsls	r2, r2, #1
 801070a:	f1be 0e01 	subs.w	lr, lr, #1
 801070e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010712:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010716:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801071a:	d1ed      	bne.n	80106f8 <__ieee754_sqrt+0x94>
 801071c:	4671      	mov	r1, lr
 801071e:	2720      	movs	r7, #32
 8010720:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010724:	4562      	cmp	r2, ip
 8010726:	eb04 060e 	add.w	r6, r4, lr
 801072a:	dc02      	bgt.n	8010732 <__ieee754_sqrt+0xce>
 801072c:	d113      	bne.n	8010756 <__ieee754_sqrt+0xf2>
 801072e:	429e      	cmp	r6, r3
 8010730:	d811      	bhi.n	8010756 <__ieee754_sqrt+0xf2>
 8010732:	2e00      	cmp	r6, #0
 8010734:	eb06 0e04 	add.w	lr, r6, r4
 8010738:	da43      	bge.n	80107c2 <__ieee754_sqrt+0x15e>
 801073a:	f1be 0f00 	cmp.w	lr, #0
 801073e:	db40      	blt.n	80107c2 <__ieee754_sqrt+0x15e>
 8010740:	f10c 0801 	add.w	r8, ip, #1
 8010744:	eba2 020c 	sub.w	r2, r2, ip
 8010748:	429e      	cmp	r6, r3
 801074a:	bf88      	it	hi
 801074c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010750:	1b9b      	subs	r3, r3, r6
 8010752:	4421      	add	r1, r4
 8010754:	46c4      	mov	ip, r8
 8010756:	0052      	lsls	r2, r2, #1
 8010758:	3f01      	subs	r7, #1
 801075a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801075e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010762:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010766:	d1dd      	bne.n	8010724 <__ieee754_sqrt+0xc0>
 8010768:	4313      	orrs	r3, r2
 801076a:	d006      	beq.n	801077a <__ieee754_sqrt+0x116>
 801076c:	1c4c      	adds	r4, r1, #1
 801076e:	bf13      	iteet	ne
 8010770:	3101      	addne	r1, #1
 8010772:	3001      	addeq	r0, #1
 8010774:	4639      	moveq	r1, r7
 8010776:	f021 0101 	bicne.w	r1, r1, #1
 801077a:	1043      	asrs	r3, r0, #1
 801077c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010780:	0849      	lsrs	r1, r1, #1
 8010782:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010786:	07c2      	lsls	r2, r0, #31
 8010788:	bf48      	it	mi
 801078a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801078e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010792:	460c      	mov	r4, r1
 8010794:	463d      	mov	r5, r7
 8010796:	e77f      	b.n	8010698 <__ieee754_sqrt+0x34>
 8010798:	0ada      	lsrs	r2, r3, #11
 801079a:	3815      	subs	r0, #21
 801079c:	055b      	lsls	r3, r3, #21
 801079e:	2a00      	cmp	r2, #0
 80107a0:	d0fa      	beq.n	8010798 <__ieee754_sqrt+0x134>
 80107a2:	02d7      	lsls	r7, r2, #11
 80107a4:	d50a      	bpl.n	80107bc <__ieee754_sqrt+0x158>
 80107a6:	f1c1 0420 	rsb	r4, r1, #32
 80107aa:	fa23 f404 	lsr.w	r4, r3, r4
 80107ae:	1e4d      	subs	r5, r1, #1
 80107b0:	408b      	lsls	r3, r1
 80107b2:	4322      	orrs	r2, r4
 80107b4:	1b41      	subs	r1, r0, r5
 80107b6:	e788      	b.n	80106ca <__ieee754_sqrt+0x66>
 80107b8:	4608      	mov	r0, r1
 80107ba:	e7f0      	b.n	801079e <__ieee754_sqrt+0x13a>
 80107bc:	0052      	lsls	r2, r2, #1
 80107be:	3101      	adds	r1, #1
 80107c0:	e7ef      	b.n	80107a2 <__ieee754_sqrt+0x13e>
 80107c2:	46e0      	mov	r8, ip
 80107c4:	e7be      	b.n	8010744 <__ieee754_sqrt+0xe0>
 80107c6:	bf00      	nop
 80107c8:	7ff00000 	.word	0x7ff00000

080107cc <_init>:
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ce:	bf00      	nop
 80107d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107d2:	bc08      	pop	{r3}
 80107d4:	469e      	mov	lr, r3
 80107d6:	4770      	bx	lr

080107d8 <_fini>:
 80107d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107da:	bf00      	nop
 80107dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107de:	bc08      	pop	{r3}
 80107e0:	469e      	mov	lr, r3
 80107e2:	4770      	bx	lr
