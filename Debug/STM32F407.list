
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a754  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f8  0800a8f8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a900  0800a900  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000098  0800a9a0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800a9a0  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023619  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a11  00000000  00000000  000436e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  000480f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00049968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256ba  00000000  00000000  0004b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022282  00000000  00000000  000706d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4da1  00000000  00000000  00092954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001676f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e0  00000000  00000000  00167748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a8c4 	.word	0x0800a8c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800a8c4 	.word	0x0800a8c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00a f921 	bl	800a724 <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000c8 	.word	0x200000c8

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f002 f9d5 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f002 f9cf 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f002 f9c9 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f002 f9c3 	bl	8002934 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f002 f9a6 	bl	8002904 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f002 f9b5 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f002 f9af 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f002 f9a9 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f002 f9a3 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f002 f986 	bl	8002904 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f002 f993 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f002 f98d 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f002 f970 	bl	8002904 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f002 f97d 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f002 f977 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f002 f95a 	bl	8002904 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f002 f967 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f002 f961 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f002 f944 	bl	8002904 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f002 f951 	bl	8002934 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f002 f94b 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f002 f945 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f002 f93f 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f002 f939 	bl	8002934 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f002 f91c 	bl	8002904 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f002 f92b 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f002 f925 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f002 f91f 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f002 f919 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f002 f8fc 	bl	8002904 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f002 f909 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f002 f903 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f002 f8e6 	bl	8002904 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f002 f8f3 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f002 f8ed 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f002 f8d0 	bl	8002904 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f002 f8dd 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f002 f8d7 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f002 f8ba 	bl	8002904 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f002 f8c7 	bl	8002934 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f002 f8c1 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f002 f8bb 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f002 f8b5 	bl	8002934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f002 f8af 	bl	8002934 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f002 f892 	bl	8002904 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f002 f8a1 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f002 f89b 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f002 f895 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f002 f88f 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f002 f872 	bl	8002904 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f002 f87f 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f002 f879 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f002 f85c 	bl	8002904 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f002 f869 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f002 f863 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f002 f846 	bl	8002904 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f002 f853 	bl	8002934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f002 f84d 	bl	8002934 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f002 f830 	bl	8002904 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f002 f83d 	bl	8002934 <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f001 fcd1 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f83d 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 faed 	bl	8000ebc <MX_GPIO_Init>
  MX_SPI1_Init();
 80008e2:	f000 f965 	bl	8000bb0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008e6:	f009 fc01 	bl	800a0ec <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ea:	f000 fa25 	bl	8000d38 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008ee:	f000 f995 	bl	8000c1c <MX_SPI2_Init>
  MX_RNG_Init();
 80008f2:	f000 f949 	bl	8000b88 <MX_RNG_Init>
  MX_TIM3_Init();
 80008f6:	f000 fa6d 	bl	8000dd4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fa:	f000 f9c5 	bl	8000c88 <MX_TIM1_Init>
  MX_I2C3_Init();
 80008fe:	f000 f8e7 	bl	8000ad0 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000902:	f000 f8b7 	bl	8000a74 <MX_I2C2_Init>
  MX_I2S3_Init();
 8000906:	f000 f911 	bl	8000b2c <MX_I2S3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8a7 	bl	8000a5c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 f9ad 	bl	8001c6c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fb50 	bl	8001fb8 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f949 	bl	8001bb0 <ILI9341_Set_Rotation>

  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fb4a 	bl	8001fb8 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f001 fc33 	bl	8002194 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fb42 	bl	8001fb8 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <main+0x80>)
 8000936:	f005 fc9f 	bl	8006278 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <main+0x80>)
 800093e:	f005 fd0b 	bl	8006358 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <main+0x84>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000948:	f009 fbf6 	bl	800a138 <MX_USB_HOST_Process>
 800094c:	e7fc      	b.n	8000948 <main+0x78>
 800094e:	bf00      	nop
 8000950:	200001f0 	.word	0x200001f0
 8000954:	200000c8 	.word	0x200000c8

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b098      	sub	sp, #96	; 0x60
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f009 fedc 	bl	800a724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <SystemClock_Config+0xfc>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <SystemClock_Config+0xfc>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <SystemClock_Config+0xfc>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <SystemClock_Config+0x100>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <SystemClock_Config+0x100>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0x100>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d6:	2308      	movs	r3, #8
 80009d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fb35 	bl	800505c <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80009f8:	f000 fc0c 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	2105      	movs	r1, #5
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fd96 	bl	800554c <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a26:	f000 fbf5 	bl	8001214 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 ff6e 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a46:	f000 fbe5 	bl	8001214 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3760      	adds	r7, #96	; 0x60
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	201c      	movs	r0, #28
 8000a66:	f001 fd7a 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6a:	201c      	movs	r0, #28
 8000a6c:	f001 fd93 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_I2C2_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_I2C2_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_I2C2_Init+0x50>)
 8000ab2:	f003 fcef 	bl	8004494 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 fbaa 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000019c 	.word	0x2000019c
 8000ac8:	40005800 	.word	0x40005800
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_I2C3_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_I2C3_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C3_Init+0x50>)
 8000b0e:	f003 fcc1 	bl	8004494 <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 fb7c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000f0 	.word	0x200000f0
 8000b24:	40005c00 	.word	0x40005c00
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <MX_I2S3_Init+0x58>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b56:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b6c:	f003 fdd6 	bl	800471c <HAL_I2S_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b76:	f000 fb4d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000330 	.word	0x20000330
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_RNG_Init+0x20>)
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <MX_RNG_Init+0x24>)
 8000b90:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_RNG_Init+0x20>)
 8000b94:	f005 f802 	bl	8005b9c <HAL_RNG_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b9e:	f000 fb39 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000280 	.word	0x20000280
 8000bac:	50060800 	.word	0x50060800

08000bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <MX_SPI1_Init+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000be4:	2228      	movs	r2, #40	; 0x28
 8000be6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000c02:	f005 f859 	bl	8005cb8 <HAL_SPI_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c0c:	f000 fb02 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000290 	.word	0x20000290
 8000c18:	40013000 	.word	0x40013000

08000c1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c22:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <MX_SPI2_Init+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c68:	220a      	movs	r2, #10
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_SPI2_Init+0x64>)
 8000c6e:	f005 f823 	bl	8005cb8 <HAL_SPI_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c78:	f000 facc 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000144 	.word	0x20000144
 8000c84:	40003800 	.word	0x40003800

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2224      	movs	r2, #36	; 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f009 fd44 	bl	800a724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <MX_TIM1_Init+0xac>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000cfc:	f005 fc93 	bl	8006626 <HAL_TIM_Encoder_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d06:	f000 fa85 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM1_Init+0xa8>)
 8000d18:	f006 faf8 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d22:	f000 fa77 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000238 	.word	0x20000238
 8000d34:	40010000 	.word	0x40010000

08000d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d5e:	f240 3247 	movw	r2, #839	; 0x347
 8000d62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d80:	f005 fa2a 	bl	80061d8 <HAL_TIM_Base_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d8a:	f000 fa43 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d9c:	f005 feb0 	bl	8006b00 <HAL_TIM_ConfigClockSource>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000da6:	f000 fa35 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000daa:	2310      	movs	r3, #16
 8000dac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000db8:	f006 faa8 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dc2:	f000 fa27 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002e8 	.word	0x200002e8

08000dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e06:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <MX_TIM3_Init+0xe4>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e0c:	f640 0233 	movw	r2, #2099	; 0x833
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2c:	4821      	ldr	r0, [pc, #132]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e2e:	f005 f9d3 	bl	80061d8 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e38:	f000 f9ec 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	4619      	mov	r1, r3
 8000e48:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e4a:	f005 fe59 	bl	8006b00 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e54:	f000 f9de 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e5a:	f005 fb8b 	bl	8006574 <HAL_TIM_PWM_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e64:	f000 f9d6 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4619      	mov	r1, r3
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e78:	f006 fa48 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e82:	f000 f9c7 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	; 0x60
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM3_Init+0xe0>)
 8000e9e:	f005 fd71 	bl	8006984 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ea8:	f000 f9b4 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	40000400 	.word	0x40000400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	4bb6      	ldr	r3, [pc, #728]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4ab5      	ldr	r2, [pc, #724]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4bb3      	ldr	r3, [pc, #716]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	4baf      	ldr	r3, [pc, #700]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4aae      	ldr	r2, [pc, #696]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4bac      	ldr	r3, [pc, #688]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4ba8      	ldr	r3, [pc, #672]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4aa7      	ldr	r2, [pc, #668]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4ba5      	ldr	r3, [pc, #660]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4ba1      	ldr	r3, [pc, #644]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4aa0      	ldr	r2, [pc, #640]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b9e      	ldr	r3, [pc, #632]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a99      	ldr	r2, [pc, #612]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b97      	ldr	r3, [pc, #604]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a92      	ldr	r2, [pc, #584]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b90      	ldr	r3, [pc, #576]	; (80011b0 <MX_GPIO_Init+0x2f4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	217c      	movs	r1, #124	; 0x7c
 8000f7e:	488d      	ldr	r0, [pc, #564]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 8000f80:	f001 fcd8 	bl	8002934 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|CSN_nrf_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2111      	movs	r1, #17
 8000f88:	488b      	ldr	r0, [pc, #556]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 8000f8a:	f001 fcd3 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_nrf_GPIO_Port, CE_nrf_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	488a      	ldr	r0, [pc, #552]	; (80011bc <MX_GPIO_Init+0x300>)
 8000f94:	f001 fcce 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000f9e:	4888      	ldr	r0, [pc, #544]	; (80011c0 <MX_GPIO_Init+0x304>)
 8000fa0:	f001 fcc8 	bl	8002934 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000faa:	4883      	ldr	r0, [pc, #524]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 8000fac:	f001 fcc2 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000fb6:	4883      	ldr	r0, [pc, #524]	; (80011c4 <MX_GPIO_Init+0x308>)
 8000fb8:	f001 fcbc 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000fbc:	2374      	movs	r3, #116	; 0x74
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4878      	ldr	r0, [pc, #480]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 8000fd4:	f001 fafa 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4871      	ldr	r0, [pc, #452]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 8000ff0:	f001 faec 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin IRQ_nrf_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin|IRQ_nrf_Pin;
 8000ff4:	f242 0322 	movw	r3, #8226	; 0x2022
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	486b      	ldr	r0, [pc, #428]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 800100a:	f001 fadf 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 800100e:	f640 0341 	movw	r3, #2113	; 0x841
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4864      	ldr	r0, [pc, #400]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 8001028:	f001 fad0 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800102c:	2308      	movs	r3, #8
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103c:	2305      	movs	r3, #5
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	485c      	ldr	r0, [pc, #368]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 8001048:	f001 fac0 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_nrf_Pin */
  GPIO_InitStruct.Pin = CE_nrf_Pin;
 800104c:	2308      	movs	r3, #8
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_nrf_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4856      	ldr	r0, [pc, #344]	; (80011bc <MX_GPIO_Init+0x300>)
 8001064:	f001 fab2 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_nrf_Pin */
  GPIO_InitStruct.Pin = CSN_nrf_Pin;
 8001068:	2310      	movs	r3, #16
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_nrf_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	484e      	ldr	r0, [pc, #312]	; (80011b8 <MX_GPIO_Init+0x2fc>)
 8001080:	f001 faa4 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001084:	2304      	movs	r3, #4
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	484b      	ldr	r0, [pc, #300]	; (80011c4 <MX_GPIO_Init+0x308>)
 8001098:	f001 fa98 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a2:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <MX_GPIO_Init+0x30c>)
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4840      	ldr	r0, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 80010b2:	f001 fa8b 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 80010b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	483a      	ldr	r0, [pc, #232]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 80010cc:	f001 fa7e 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 80010d0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x308>)
 80010e6:	f001 fa71 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80010ea:	f64f 7310 	movw	r3, #65296	; 0xff10
 80010ee:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	482f      	ldr	r0, [pc, #188]	; (80011c0 <MX_GPIO_Init+0x304>)
 8001104:	f001 fa62 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001108:	2320      	movs	r3, #32
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <MX_GPIO_Init+0x304>)
 800111c:	f001 fa56 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4823      	ldr	r0, [pc, #140]	; (80011c4 <MX_GPIO_Init+0x308>)
 8001138:	f001 fa48 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800113c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <MX_GPIO_Init+0x308>)
 8001156:	f001 fa39 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 800115a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <MX_GPIO_Init+0x308>)
 8001178:	f001 fa28 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 8001190:	f001 fa1c 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_GPIO_Init+0x310>)
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_GPIO_Init+0x2f8>)
 80011a8:	f001 fa10 	bl	80025cc <HAL_GPIO_Init>
 80011ac:	e010      	b.n	80011d0 <MX_GPIO_Init+0x314>
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40020400 	.word	0x40020400
 80011c8:	10110000 	.word	0x10110000
 80011cc:	10120000 	.word	0x10120000

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f001 f9c2 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f001 f9db 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d105      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <HAL_GPIO_EXTI_Callback+0x28>)
 8001202:	f001 fb97 	bl	8002934 <HAL_GPIO_WritePin>
	}
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_MspInit+0x5c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_MspInit+0x5c>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_MspInit+0x5c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_MspInit+0x5c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_MspInit+0x5c>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MspInit+0x5c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125e:	2007      	movs	r0, #7
 8001260:	f001 f972 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2005      	movs	r0, #5
 800126a:	f001 f978 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800126e:	2005      	movs	r0, #5
 8001270:	f001 f991 	bl	8002596 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <HAL_I2C_MspInit+0x128>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12d      	bne.n	80012fe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012d0:	2304      	movs	r3, #4
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4835      	ldr	r0, [pc, #212]	; (80013b0 <HAL_I2C_MspInit+0x130>)
 80012dc:	f001 f976 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a30      	ldr	r2, [pc, #192]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012fc:	e050      	b.n	80013a0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <HAL_I2C_MspInit+0x134>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d14b      	bne.n	80013a0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001352:	2304      	movs	r3, #4
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <HAL_I2C_MspInit+0x138>)
 800135e:	f001 f935 	bl	80025cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001374:	2304      	movs	r3, #4
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_I2C_MspInit+0x13c>)
 8001380:	f001 f924 	bl	80025cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 800138e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_I2C_MspInit+0x12c>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	; 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005800 	.word	0x40005800
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a37      	ldr	r2, [pc, #220]	; (80014bc <HAL_I2S_MspInit+0xfc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d168      	bne.n	80014b4 <HAL_I2S_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 80013ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_I2S_MspInit+0x100>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    PB4     ------> I2S3_ext_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001452:	2310      	movs	r3, #16
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001462:	2306      	movs	r3, #6
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <HAL_I2S_MspInit+0x104>)
 800146e:	f001 f8ad 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001472:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001484:	2306      	movs	r3, #6
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	480e      	ldr	r0, [pc, #56]	; (80014c8 <HAL_I2S_MspInit+0x108>)
 8001490:	f001 f89c 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001494:	2310      	movs	r3, #16
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 80014a4:	2307      	movs	r3, #7
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_I2S_MspInit+0x10c>)
 80014b0:	f001 f88c 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40003c00 	.word	0x40003c00
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_RNG_MspInit+0x3c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10d      	bne.n	80014fe <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_RNG_MspInit+0x40>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_RNG_MspInit+0x40>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f0:	6353      	str	r3, [r2, #52]	; 0x34
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_RNG_MspInit+0x40>)
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	50060800 	.word	0x50060800
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a41      	ldr	r2, [pc, #260]	; (8001638 <HAL_SPI_MspInit+0x124>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12c      	bne.n	8001590 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_SPI_MspInit+0x128>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a3f      	ldr	r2, [pc, #252]	; (800163c <HAL_SPI_MspInit+0x128>)
 8001540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_SPI_MspInit+0x128>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_SPI_MspInit+0x128>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_SPI_MspInit+0x128>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_SPI_MspInit+0x128>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800156e:	23e0      	movs	r3, #224	; 0xe0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157e:	2305      	movs	r3, #5
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	482d      	ldr	r0, [pc, #180]	; (8001640 <HAL_SPI_MspInit+0x12c>)
 800158a:	f001 f81f 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800158e:	e04f      	b.n	8001630 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <HAL_SPI_MspInit+0x130>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d14a      	bne.n	8001630 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a26      	ldr	r2, [pc, #152]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_SPI_MspInit+0x128>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ee:	2304      	movs	r3, #4
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015fe:	2305      	movs	r3, #5
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_SPI_MspInit+0x134>)
 800160a:	f000 ffdf 	bl	80025cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800160e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_SPI_MspInit+0x138>)
 800162c:	f000 ffce 	bl	80025cc <HAL_GPIO_Init>
}
 8001630:	bf00      	nop
 8001632:	3730      	adds	r7, #48	; 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40013000 	.word	0x40013000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40003800 	.word	0x40003800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_Encoder_MspInit+0x8c>)
 80016c8:	f000 ff80 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170e:	e01a      	b.n	8001746 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_Base_MspInit+0x74>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d115      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_TIM_Base_MspInit+0x70>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201d      	movs	r0, #29
 800173c:	f000 ff0f 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001740:	201d      	movs	r0, #29
 8001742:	f000 ff28 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40000400 	.word	0x40000400

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 fdbc 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80017c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c4:	481b      	ldr	r0, [pc, #108]	; (8001834 <TIM2_IRQHandler+0x78>)
 80017c6:	f001 f8ce 	bl	8002966 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <TIM2_IRQHandler+0x7c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d111      	bne.n	80017f6 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <TIM2_IRQHandler+0x80>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2bc8      	cmp	r3, #200	; 0xc8
 80017d8:	dc0a      	bgt.n	80017f0 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <TIM2_IRQHandler+0x80>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <TIM2_IRQHandler+0x84>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <TIM2_IRQHandler+0x80>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <TIM2_IRQHandler+0x80>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e002      	b.n	80017f6 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <TIM2_IRQHandler+0x7c>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <TIM2_IRQHandler+0x7c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d114      	bne.n	8001828 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <TIM2_IRQHandler+0x80>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b63      	cmp	r3, #99	; 0x63
 8001804:	dd0a      	ble.n	800181c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <TIM2_IRQHandler+0x80>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <TIM2_IRQHandler+0x84>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <TIM2_IRQHandler+0x80>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <TIM2_IRQHandler+0x80>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e005      	b.n	8001828 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <TIM2_IRQHandler+0x7c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <TIM2_IRQHandler+0x80>)
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <TIM2_IRQHandler+0x84>)
 800182a:	f004 ffa2 	bl	8006772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40020c00 	.word	0x40020c00
 8001838:	200000b4 	.word	0x200000b4
 800183c:	20000000 	.word	0x20000000
 8001840:	200002e8 	.word	0x200002e8

08001844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <TIM3_IRQHandler+0x1c>)
 800184e:	f001 f88a 	bl	8002966 <HAL_GPIO_TogglePin>
  read_digits();
 8001852:	f7fe fe35 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <TIM3_IRQHandler+0x20>)
 8001858:	f004 ff8b 	bl	8006772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020c00 	.word	0x40020c00
 8001864:	200001f0 	.word	0x200001f0

08001868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800186c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001870:	f001 f894 	bl	800299c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <OTG_FS_IRQHandler+0x10>)
 800187e:	f001 fb0f 	bl	8002ea0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000754 	.word	0x20000754

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f008 fef8 	bl	800a6b0 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	200000b8 	.word	0x200000b8
 80018f4:	20000a68 	.word	0x20000a68

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08b      	sub	sp, #44	; 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	f1c3 0301 	rsb	r3, r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001954:	e061      	b.n	8001a1a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e018      	b.n	8001992 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b298      	uxth	r0, r3
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	b29a      	uxth	r2, r3
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	883a      	ldrh	r2, [r7, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f000 fb47 	bl	8002004 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	b298      	uxth	r0, r3
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	b29b      	uxth	r3, r3
 800197e:	88ba      	ldrh	r2, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	883a      	ldrh	r2, [r7, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	f000 fb3c 	bl	8002004 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	4413      	add	r3, r2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	429a      	cmp	r2, r3
 800199c:	dde0      	ble.n	8001960 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800199e:	88fa      	ldrh	r2, [r7, #6]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e018      	b.n	80019da <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	b298      	uxth	r0, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	883a      	ldrh	r2, [r7, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f000 fb23 	bl	8002004 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	b298      	uxth	r0, r3
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	88ba      	ldrh	r2, [r7, #4]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	883a      	ldrh	r2, [r7, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f000 fb18 	bl	8002004 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	4413      	add	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	dde0      	ble.n	80019a8 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	3301      	adds	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3302      	adds	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005a      	lsls	r2, r3, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd09      	ble.n	8001a1a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3302      	adds	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	da99      	bge.n	8001956 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	372c      	adds	r7, #44	; 0x2c
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001a30:	2200      	movs	r2, #0
 8001a32:	2110      	movs	r1, #16
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <ILI9341_SPI_Init+0x14>)
 8001a36:	f000 ff7d 	bl	8002934 <HAL_GPIO_WritePin>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001a4e:	1df9      	adds	r1, r7, #7
 8001a50:	2301      	movs	r3, #1
 8001a52:	2201      	movs	r2, #1
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <ILI9341_SPI_Send+0x20>)
 8001a56:	f004 f9b8 	bl	8005dca <HAL_SPI_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000144 	.word	0x20000144

08001a68 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <ILI9341_Write_Command+0x38>)
 8001a78:	f000 ff5c 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <ILI9341_Write_Command+0x38>)
 8001a82:	f000 ff57 	bl	8002934 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffdb 	bl	8001a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2110      	movs	r1, #16
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <ILI9341_Write_Command+0x38>)
 8001a94:	f000 ff4e 	bl	8002934 <HAL_GPIO_WritePin>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <ILI9341_Write_Data+0x38>)
 8001ab4:	f000 ff3e 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2110      	movs	r1, #16
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <ILI9341_Write_Data+0x38>)
 8001abe:	f000 ff39 	bl	8002934 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ffbd 	bl	8001a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2110      	movs	r1, #16
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <ILI9341_Write_Data+0x38>)
 8001ad0:	f000 ff30 	bl	8002934 <HAL_GPIO_WritePin>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	80fb      	strh	r3, [r7, #6]
 8001af2:	4603      	mov	r3, r0
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001afe:	202a      	movs	r0, #42	; 0x2a
 8001b00:	f7ff ffb2 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ffc9 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ffc4 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ffbd 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb8 	bl	8001aa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001b34:	202b      	movs	r0, #43	; 0x2b
 8001b36:	f7ff ff97 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffae 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffa9 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffa2 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001b60:	883b      	ldrh	r3, [r7, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff9d 	bl	8001aa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001b6a:	202c      	movs	r0, #44	; 0x2c
 8001b6c:	f7ff ff7c 	bl	8001a68 <ILI9341_Write_Command>
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2120      	movs	r1, #32
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <ILI9341_Reset+0x34>)
 8001b82:	f000 fed7 	bl	8002934 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b86:	20c8      	movs	r0, #200	; 0xc8
 8001b88:	f000 fbea 	bl	8002360 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <ILI9341_Reset+0x34>)
 8001b92:	f000 fecf 	bl	8002934 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b96:	20c8      	movs	r0, #200	; 0xc8
 8001b98:	f000 fbe2 	bl	8002360 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <ILI9341_Reset+0x34>)
 8001ba2:	f000 fec7 	bl	8002934 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001bbe:	2036      	movs	r0, #54	; 0x36
 8001bc0:	f7ff ff52 	bl	8001a68 <ILI9341_Write_Command>
HAL_Delay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f000 fbcb 	bl	8002360 <HAL_Delay>
	
switch(screen_rotation) 
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d837      	bhi.n	8001c40 <ILI9341_Set_Rotation+0x90>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <ILI9341_Set_Rotation+0x28>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bff 	.word	0x08001bff
 8001be0:	08001c15 	.word	0x08001c15
 8001be4:	08001c2b 	.word	0x08001c2b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001be8:	2048      	movs	r0, #72	; 0x48
 8001bea:	f7ff ff5b 	bl	8001aa4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <ILI9341_Set_Rotation+0x9c>)
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <ILI9341_Set_Rotation+0xa0>)
 8001bf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bfa:	801a      	strh	r2, [r3, #0]
			break;
 8001bfc:	e021      	b.n	8001c42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001bfe:	2028      	movs	r0, #40	; 0x28
 8001c00:	f7ff ff50 	bl	8001aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <ILI9341_Set_Rotation+0x9c>)
 8001c06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <ILI9341_Set_Rotation+0xa0>)
 8001c0e:	22f0      	movs	r2, #240	; 0xf0
 8001c10:	801a      	strh	r2, [r3, #0]
			break;
 8001c12:	e016      	b.n	8001c42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001c14:	2088      	movs	r0, #136	; 0x88
 8001c16:	f7ff ff45 	bl	8001aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <ILI9341_Set_Rotation+0x9c>)
 8001c1c:	22f0      	movs	r2, #240	; 0xf0
 8001c1e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <ILI9341_Set_Rotation+0xa0>)
 8001c22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c26:	801a      	strh	r2, [r3, #0]
			break;
 8001c28:	e00b      	b.n	8001c42 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001c2a:	20e8      	movs	r0, #232	; 0xe8
 8001c2c:	f7ff ff3a 	bl	8001aa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <ILI9341_Set_Rotation+0x9c>)
 8001c32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <ILI9341_Set_Rotation+0xa0>)
 8001c3a:	22f0      	movs	r2, #240	; 0xf0
 8001c3c:	801a      	strh	r2, [r3, #0]
			break;
 8001c3e:	e000      	b.n	8001c42 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001c40:	bf00      	nop
	}
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000000a 	.word	0x2000000a
 8001c50:	20000008 	.word	0x20000008

08001c54 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <ILI9341_Enable+0x14>)
 8001c5e:	f000 fe69 	bl	8002934 <HAL_GPIO_WritePin>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001c70:	f7ff fff0 	bl	8001c54 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001c74:	f7ff feda 	bl	8001a2c <ILI9341_SPI_Init>
ILI9341_Reset();
 8001c78:	f7ff ff7e 	bl	8001b78 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7ff fef3 	bl	8001a68 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	f000 fb6b 	bl	8002360 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001c8a:	20cb      	movs	r0, #203	; 0xcb
 8001c8c:	f7ff feec 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001c90:	2039      	movs	r0, #57	; 0x39
 8001c92:	f7ff ff07 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001c96:	202c      	movs	r0, #44	; 0x2c
 8001c98:	f7ff ff04 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff01 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001ca2:	2034      	movs	r0, #52	; 0x34
 8001ca4:	f7ff fefe 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff fefb 	bl	8001aa4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001cae:	20cf      	movs	r0, #207	; 0xcf
 8001cb0:	f7ff feda 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fef5 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001cba:	20c1      	movs	r0, #193	; 0xc1
 8001cbc:	f7ff fef2 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001cc0:	2030      	movs	r0, #48	; 0x30
 8001cc2:	f7ff feef 	bl	8001aa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001cc6:	20e8      	movs	r0, #232	; 0xe8
 8001cc8:	f7ff fece 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001ccc:	2085      	movs	r0, #133	; 0x85
 8001cce:	f7ff fee9 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff fee6 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001cd8:	2078      	movs	r0, #120	; 0x78
 8001cda:	f7ff fee3 	bl	8001aa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001cde:	20ea      	movs	r0, #234	; 0xea
 8001ce0:	f7ff fec2 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fedd 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff feda 	bl	8001aa4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001cf0:	20ed      	movs	r0, #237	; 0xed
 8001cf2:	f7ff feb9 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001cf6:	2064      	movs	r0, #100	; 0x64
 8001cf8:	f7ff fed4 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f7ff fed1 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001d02:	2012      	movs	r0, #18
 8001d04:	f7ff fece 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001d08:	2081      	movs	r0, #129	; 0x81
 8001d0a:	f7ff fecb 	bl	8001aa4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001d0e:	20f7      	movs	r0, #247	; 0xf7
 8001d10:	f7ff feaa 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001d14:	2020      	movs	r0, #32
 8001d16:	f7ff fec5 	bl	8001aa4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001d1a:	20c0      	movs	r0, #192	; 0xc0
 8001d1c:	f7ff fea4 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001d20:	2023      	movs	r0, #35	; 0x23
 8001d22:	f7ff febf 	bl	8001aa4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001d26:	20c1      	movs	r0, #193	; 0xc1
 8001d28:	f7ff fe9e 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001d2c:	2010      	movs	r0, #16
 8001d2e:	f7ff feb9 	bl	8001aa4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001d32:	20c5      	movs	r0, #197	; 0xc5
 8001d34:	f7ff fe98 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001d38:	203e      	movs	r0, #62	; 0x3e
 8001d3a:	f7ff feb3 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001d3e:	2028      	movs	r0, #40	; 0x28
 8001d40:	f7ff feb0 	bl	8001aa4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001d44:	20c7      	movs	r0, #199	; 0xc7
 8001d46:	f7ff fe8f 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001d4a:	2086      	movs	r0, #134	; 0x86
 8001d4c:	f7ff feaa 	bl	8001aa4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001d50:	2036      	movs	r0, #54	; 0x36
 8001d52:	f7ff fe89 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001d56:	2048      	movs	r0, #72	; 0x48
 8001d58:	f7ff fea4 	bl	8001aa4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001d5c:	203a      	movs	r0, #58	; 0x3a
 8001d5e:	f7ff fe83 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001d62:	2055      	movs	r0, #85	; 0x55
 8001d64:	f7ff fe9e 	bl	8001aa4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001d68:	20b1      	movs	r0, #177	; 0xb1
 8001d6a:	f7ff fe7d 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fe98 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001d74:	2018      	movs	r0, #24
 8001d76:	f7ff fe95 	bl	8001aa4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001d7a:	20b6      	movs	r0, #182	; 0xb6
 8001d7c:	f7ff fe74 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff fe8f 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001d86:	2082      	movs	r0, #130	; 0x82
 8001d88:	f7ff fe8c 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001d8c:	2027      	movs	r0, #39	; 0x27
 8001d8e:	f7ff fe89 	bl	8001aa4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001d92:	20f2      	movs	r0, #242	; 0xf2
 8001d94:	f7ff fe68 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fe83 	bl	8001aa4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001d9e:	2026      	movs	r0, #38	; 0x26
 8001da0:	f7ff fe62 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fe7d 	bl	8001aa4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001daa:	20e0      	movs	r0, #224	; 0xe0
 8001dac:	f7ff fe5c 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001db0:	200f      	movs	r0, #15
 8001db2:	f7ff fe77 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001db6:	2031      	movs	r0, #49	; 0x31
 8001db8:	f7ff fe74 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001dbc:	202b      	movs	r0, #43	; 0x2b
 8001dbe:	f7ff fe71 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001dc2:	200c      	movs	r0, #12
 8001dc4:	f7ff fe6e 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001dc8:	200e      	movs	r0, #14
 8001dca:	f7ff fe6b 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f7ff fe68 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001dd4:	204e      	movs	r0, #78	; 0x4e
 8001dd6:	f7ff fe65 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001dda:	20f1      	movs	r0, #241	; 0xf1
 8001ddc:	f7ff fe62 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001de0:	2037      	movs	r0, #55	; 0x37
 8001de2:	f7ff fe5f 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001de6:	2007      	movs	r0, #7
 8001de8:	f7ff fe5c 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001dec:	2010      	movs	r0, #16
 8001dee:	f7ff fe59 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7ff fe56 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001df8:	200e      	movs	r0, #14
 8001dfa:	f7ff fe53 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f7ff fe50 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fe4d 	bl	8001aa4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001e0a:	20e1      	movs	r0, #225	; 0xe1
 8001e0c:	f7ff fe2c 	bl	8001a68 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fe47 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e16:	200e      	movs	r0, #14
 8001e18:	f7ff fe44 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001e1c:	2014      	movs	r0, #20
 8001e1e:	f7ff fe41 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f7ff fe3e 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001e28:	2011      	movs	r0, #17
 8001e2a:	f7ff fe3b 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f7ff fe38 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e34:	2031      	movs	r0, #49	; 0x31
 8001e36:	f7ff fe35 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001e3a:	20c1      	movs	r0, #193	; 0xc1
 8001e3c:	f7ff fe32 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001e40:	2048      	movs	r0, #72	; 0x48
 8001e42:	f7ff fe2f 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e46:	2008      	movs	r0, #8
 8001e48:	f7ff fe2c 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f7ff fe29 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff fe26 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e58:	2031      	movs	r0, #49	; 0x31
 8001e5a:	f7ff fe23 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001e5e:	2036      	movs	r0, #54	; 0x36
 8001e60:	f7ff fe20 	bl	8001aa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001e64:	200f      	movs	r0, #15
 8001e66:	f7ff fe1d 	bl	8001aa4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001e6a:	2011      	movs	r0, #17
 8001e6c:	f7ff fdfc 	bl	8001a68 <ILI9341_Write_Command>
HAL_Delay(120);
 8001e70:	2078      	movs	r0, #120	; 0x78
 8001e72:	f000 fa75 	bl	8002360 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001e76:	2029      	movs	r0, #41	; 0x29
 8001e78:	f7ff fdf6 	bl	8001a68 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f7ff fe97 	bl	8001bb0 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001e82:	200a      	movs	r0, #10
 8001e84:	f000 fa6c 	bl	8002360 <HAL_Delay>
//
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	80fb      	strh	r3, [r7, #6]
 8001e98:	466b      	mov	r3, sp
 8001e9a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ea8:	d202      	bcs.n	8001eb0 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	e002      	b.n	8001eb6 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001eb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	483d      	ldr	r0, [pc, #244]	; (8001fb0 <ILI9341_Draw_Colour_Burst+0x124>)
 8001ebc:	f000 fd3a 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <ILI9341_Draw_Colour_Burst+0x124>)
 8001ec6:	f000 fd35 	bl	8002934 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001ed4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	4620      	mov	r0, r4
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	00cb      	lsls	r3, r1, #3
 8001eec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ef0:	00c2      	lsls	r2, r0, #3
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	00cb      	lsls	r3, r1, #3
 8001f02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f06:	00c2      	lsls	r2, r0, #3
 8001f08:	1de3      	adds	r3, r4, #7
 8001f0a:	08db      	lsrs	r3, r3, #3
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f12:	466b      	mov	r3, sp
 8001f14:	3300      	adds	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1c:	e00e      	b.n	8001f3c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	4413      	add	r3, r2
 8001f24:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f28:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	b2d1      	uxtb	r1, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	3302      	adds	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3ec      	bcc.n	8001f1e <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5e:	fb01 f202 	mul.w	r2, r1, r2
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f70:	e009      	b.n	8001f86 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	230a      	movs	r3, #10
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f7c:	f003 ff25 	bl	8005dca <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	3301      	adds	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3f1      	bcc.n	8001f72 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	230a      	movs	r3, #10
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f98:	f003 ff17 	bl	8005dca <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <ILI9341_Draw_Colour_Burst+0x124>)
 8001fa2:	f000 fcc7 	bl	8002934 <HAL_GPIO_WritePin>
 8001fa6:	46ad      	mov	sp, r5
}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	; 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	20000144 	.word	0x20000144

08001fb8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <ILI9341_Fill_Screen+0x44>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <ILI9341_Fill_Screen+0x48>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fd85 	bl	8001ae0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <ILI9341_Fill_Screen+0x44>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <ILI9341_Fill_Screen+0x48>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	fb03 f302 	mul.w	r3, r3, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff4c 	bl	8001e8c <ILI9341_Draw_Colour_Burst>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000000a 	.word	0x2000000a
 8002000:	20000008 	.word	0x20000008

08002004 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
 800200e:	460b      	mov	r3, r1
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <ILI9341_Draw_Pixel+0x180>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	429a      	cmp	r2, r3
 8002020:	f080 80ac 	bcs.w	800217c <ILI9341_Draw_Pixel+0x178>
 8002024:	4b58      	ldr	r3, [pc, #352]	; (8002188 <ILI9341_Draw_Pixel+0x184>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	88ba      	ldrh	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	f080 80a5 	bcs.w	800217c <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002032:	2200      	movs	r2, #0
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	4855      	ldr	r0, [pc, #340]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002038:	f000 fc7c 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2110      	movs	r1, #16
 8002040:	4852      	ldr	r0, [pc, #328]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002042:	f000 fc77 	bl	8002934 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002046:	202a      	movs	r0, #42	; 0x2a
 8002048:	f7ff fcfc 	bl	8001a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800204c:	2201      	movs	r2, #1
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	484e      	ldr	r0, [pc, #312]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002052:	f000 fc6f 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	484c      	ldr	r0, [pc, #304]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 800205c:	f000 fc6a 	bl	8002934 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4849      	ldr	r0, [pc, #292]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002066:	f000 fc65 	bl	8002934 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	753b      	strb	r3, [r7, #20]
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	757b      	strb	r3, [r7, #21]
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	3301      	adds	r3, #1
 800207e:	121b      	asrs	r3, r3, #8
 8002080:	b2db      	uxtb	r3, r3
 8002082:	75bb      	strb	r3, [r7, #22]
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3301      	adds	r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800208e:	f107 0114 	add.w	r1, r7, #20
 8002092:	2301      	movs	r3, #1
 8002094:	2204      	movs	r2, #4
 8002096:	483e      	ldr	r0, [pc, #248]	; (8002190 <ILI9341_Draw_Pixel+0x18c>)
 8002098:	f003 fe97 	bl	8005dca <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	2110      	movs	r1, #16
 80020a0:	483a      	ldr	r0, [pc, #232]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020a2:	f000 fc47 	bl	8002934 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020a6:	2200      	movs	r2, #0
 80020a8:	2140      	movs	r1, #64	; 0x40
 80020aa:	4838      	ldr	r0, [pc, #224]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020ac:	f000 fc42 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80020b0:	2200      	movs	r2, #0
 80020b2:	2110      	movs	r1, #16
 80020b4:	4835      	ldr	r0, [pc, #212]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020b6:	f000 fc3d 	bl	8002934 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80020ba:	202b      	movs	r0, #43	; 0x2b
 80020bc:	f7ff fcc2 	bl	8001a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80020c0:	2201      	movs	r2, #1
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	4831      	ldr	r0, [pc, #196]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020c6:	f000 fc35 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80020ca:	2201      	movs	r2, #1
 80020cc:	2110      	movs	r1, #16
 80020ce:	482f      	ldr	r0, [pc, #188]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020d0:	f000 fc30 	bl	8002934 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2110      	movs	r1, #16
 80020d8:	482c      	ldr	r0, [pc, #176]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 80020da:	f000 fc2b 	bl	8002934 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80020de:	88bb      	ldrh	r3, [r7, #4]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	743b      	strb	r3, [r7, #16]
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	747b      	strb	r3, [r7, #17]
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	121b      	asrs	r3, r3, #8
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002102:	f107 0110 	add.w	r1, r7, #16
 8002106:	2301      	movs	r3, #1
 8002108:	2204      	movs	r2, #4
 800210a:	4821      	ldr	r0, [pc, #132]	; (8002190 <ILI9341_Draw_Pixel+0x18c>)
 800210c:	f003 fe5d 	bl	8005dca <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2110      	movs	r1, #16
 8002114:	481d      	ldr	r0, [pc, #116]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002116:	f000 fc0d 	bl	8002934 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800211a:	2200      	movs	r2, #0
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	481b      	ldr	r0, [pc, #108]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002120:	f000 fc08 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002124:	2200      	movs	r2, #0
 8002126:	2110      	movs	r1, #16
 8002128:	4818      	ldr	r0, [pc, #96]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 800212a:	f000 fc03 	bl	8002934 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800212e:	202c      	movs	r0, #44	; 0x2c
 8002130:	f7ff fc88 	bl	8001a44 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002134:	2201      	movs	r2, #1
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	4814      	ldr	r0, [pc, #80]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 800213a:	f000 fbfb 	bl	8002934 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800213e:	2201      	movs	r2, #1
 8002140:	2110      	movs	r1, #16
 8002142:	4812      	ldr	r0, [pc, #72]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002144:	f000 fbf6 	bl	8002934 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	2110      	movs	r1, #16
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 800214e:	f000 fbf1 	bl	8002934 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	733b      	strb	r3, [r7, #12]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002162:	f107 010c 	add.w	r1, r7, #12
 8002166:	2301      	movs	r3, #1
 8002168:	2202      	movs	r2, #2
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <ILI9341_Draw_Pixel+0x18c>)
 800216c:	f003 fe2d 	bl	8005dca <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2110      	movs	r1, #16
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <ILI9341_Draw_Pixel+0x188>)
 8002176:	f000 fbdd 	bl	8002934 <HAL_GPIO_WritePin>
 800217a:	e000      	b.n	800217e <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800217c:	bf00      	nop
	
}
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000000a 	.word	0x2000000a
 8002188:	20000008 	.word	0x20000008
 800218c:	40021000 	.word	0x40021000
 8002190:	20000144 	.word	0x20000144

08002194 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	int i =0;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80021a0:	e036      	b.n	8002210 <speed_test_LCD+0x7c>
	{
		i ++;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021bc:	4819      	ldr	r0, [pc, #100]	; (8002224 <speed_test_LCD+0x90>)
 80021be:	f003 fd66 	bl	8005c8e <HAL_RNG_GetRandomNumber>
 80021c2:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021c8:	4816      	ldr	r0, [pc, #88]	; (8002224 <speed_test_LCD+0x90>)
 80021ca:	f003 fd60 	bl	8005c8e <HAL_RNG_GetRandomNumber>
 80021ce:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021d4:	4813      	ldr	r0, [pc, #76]	; (8002224 <speed_test_LCD+0x90>)
 80021d6:	f003 fd5a 	bl	8005c8e <HAL_RNG_GetRandomNumber>
 80021da:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021e0:	4810      	ldr	r0, [pc, #64]	; (8002224 <speed_test_LCD+0x90>)
 80021e2:	f003 fd54 	bl	8005c8e <HAL_RNG_GetRandomNumber>
 80021e6:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f2:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 80021f4:	89bb      	ldrh	r3, [r7, #12]
 80021f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fa:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	897a      	ldrh	r2, [r7, #10]
 8002208:	89b9      	ldrh	r1, [r7, #12]
 800220a:	89f8      	ldrh	r0, [r7, #14]
 800220c:	f7ff fb86 	bl	800191c <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	ddc4      	ble.n	80021a2 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000280 	.word	0x20000280

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002252:	f7ff fb51 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f008 fa31 	bl	800a6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7fe fb39 	bl	80008d0 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800226c:	0800a908 	.word	0x0800a908
  ldr r2, =_sbss
 8002270:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002274:	20000a68 	.word	0x20000a68

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f94f 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7fe ffb6 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f967 	bl	80025b2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022fc:	f000 f92f 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000004 	.word	0x20000004
 8002318:	20000010 	.word	0x20000010
 800231c:	2000000c 	.word	0x2000000c

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000010 	.word	0x20000010
 8002344:	20000378 	.word	0x20000378

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000378 	.word	0x20000378

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000010 	.word	0x20000010

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e16b      	b.n	80028c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 815a 	bne.w	80028ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	2b02      	cmp	r3, #2
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b03      	cmp	r3, #3
 800268a:	d017      	beq.n	80026bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80b4 	beq.w	80028ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a5f      	ldr	r2, [pc, #380]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002760:	6453      	str	r3, [r2, #68]	; 0x44
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_GPIO_Init+0x30c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276e:	4a5b      	ldr	r2, [pc, #364]	; (80028dc <HAL_GPIO_Init+0x310>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_GPIO_Init+0x314>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a51      	ldr	r2, [pc, #324]	; (80028e4 <HAL_GPIO_Init+0x318>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x222>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_GPIO_Init+0x31c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x21e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	; (80028ec <HAL_GPIO_Init+0x320>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x21a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4e      	ldr	r2, [pc, #312]	; (80028f0 <HAL_GPIO_Init+0x324>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x216>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <HAL_GPIO_Init+0x328>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x212>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_GPIO_Init+0x32c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x20e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4b      	ldr	r2, [pc, #300]	; (80028fc <HAL_GPIO_Init+0x330>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x20a>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e00e      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027d6:	2308      	movs	r3, #8
 80027d8:	e00c      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027da:	2306      	movs	r3, #6
 80027dc:	e00a      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027de:	2305      	movs	r3, #5
 80027e0:	e008      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027e6:	2303      	movs	r3, #3
 80027e8:	e004      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x228>
 80027f2:	2300      	movs	r3, #0
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4093      	lsls	r3, r2
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002804:	4935      	ldr	r1, [pc, #212]	; (80028dc <HAL_GPIO_Init+0x310>)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002836:	4a32      	ldr	r2, [pc, #200]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_GPIO_Init+0x334>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_GPIO_Init+0x334>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	f67f ae90 	bls.w	80025e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e001      	b.n	8002926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002950:	e003      	b.n	800295a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	041a      	lsls	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	619a      	str	r2, [r3, #24]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	460b      	mov	r3, r1
 8002970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	041a      	lsls	r2, r3, #16
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43d9      	mvns	r1, r3
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	400b      	ands	r3, r1
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fc14 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b08f      	sub	sp, #60	; 0x3c
 80029d0:	af0a      	add	r7, sp, #40	; 0x28
 80029d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e054      	b.n	8002a88 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f007 fbd5 	bl	800a1a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fd77 	bl	8007510 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	687e      	ldr	r6, [r7, #4]
 8002a2a:	466d      	mov	r5, sp
 8002a2c:	f106 0410 	add.w	r4, r6, #16
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a40:	1d33      	adds	r3, r6, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f004 fcf1 	bl	800742c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fd6e 	bl	8007532 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	687e      	ldr	r6, [r7, #4]
 8002a5e:	466d      	mov	r5, sp
 8002a60:	f106 0410 	add.w	r4, r6, #16
 8002a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a74:	1d33      	adds	r3, r6, #4
 8002a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f004 fe81 	bl	8007780 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a90 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af04      	add	r7, sp, #16
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70bb      	strb	r3, [r7, #2]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_HCD_HC_Init+0x28>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e076      	b.n	8002ba6 <HAL_HCD_HC_Init+0x116>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	333d      	adds	r3, #61	; 0x3d
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3338      	adds	r3, #56	; 0x38
 8002ae0:	787a      	ldrb	r2, [r7, #1]
 8002ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3340      	adds	r3, #64	; 0x40
 8002af2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002af4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3339      	adds	r3, #57	; 0x39
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	333f      	adds	r3, #63	; 0x3f
 8002b16:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	78ba      	ldrb	r2, [r7, #2]
 8002b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b24:	b2d0      	uxtb	r0, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	333a      	adds	r3, #58	; 0x3a
 8002b32:	4602      	mov	r2, r0
 8002b34:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da09      	bge.n	8002b52 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	333b      	adds	r3, #59	; 0x3b
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e008      	b.n	8002b64 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	333b      	adds	r3, #59	; 0x3b
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	333c      	adds	r3, #60	; 0x3c
 8002b72:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b76:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	787c      	ldrb	r4, [r7, #1]
 8002b7e:	78ba      	ldrb	r2, [r7, #2]
 8002b80:	78f9      	ldrb	r1, [r7, #3]
 8002b82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b84:	9302      	str	r3, [sp, #8]
 8002b86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4623      	mov	r3, r4
 8002b94:	f004 ff76 	bl	8007a84 <USB_HC_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}

08002bae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_HCD_HC_Halt+0x1e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e00f      	b.n	8002bec <HAL_HCD_HC_Halt+0x3e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 f9b2 	bl	8007f46 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	70fb      	strb	r3, [r7, #3]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70bb      	strb	r3, [r7, #2]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333b      	adds	r3, #59	; 0x3b
 8002c1c:	78ba      	ldrb	r2, [r7, #2]
 8002c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	787a      	ldrb	r2, [r7, #1]
 8002c30:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c32:	7c3b      	ldrb	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d112      	bne.n	8002c5e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3342      	adds	r3, #66	; 0x42
 8002c46:	2203      	movs	r2, #3
 8002c48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333d      	adds	r3, #61	; 0x3d
 8002c58:	7f3a      	ldrb	r2, [r7, #28]
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e008      	b.n	8002c70 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3342      	adds	r3, #66	; 0x42
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f200 80c6 	bhi.w	8002e04 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002df1 	.word	0x08002df1
 8002c88:	08002cf5 	.word	0x08002cf5
 8002c8c:	08002d73 	.word	0x08002d73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c90:	7c3b      	ldrb	r3, [r7, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 80b8 	bne.w	8002e08 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c98:	78bb      	ldrb	r3, [r7, #2]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80b4 	bne.w	8002e08 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ca0:	8b3b      	ldrh	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3355      	adds	r3, #85	; 0x55
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3355      	adds	r3, #85	; 0x55
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3342      	adds	r3, #66	; 0x42
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cde:	e093      	b.n	8002e08 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3342      	adds	r3, #66	; 0x42
 8002cee:	2202      	movs	r2, #2
 8002cf0:	701a      	strb	r2, [r3, #0]
      break;
 8002cf2:	e089      	b.n	8002e08 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002cf4:	78bb      	ldrb	r3, [r7, #2]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3355      	adds	r3, #85	; 0x55
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3342      	adds	r3, #66	; 0x42
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d20:	e073      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3342      	adds	r3, #66	; 0x42
 8002d30:	2202      	movs	r2, #2
 8002d32:	701a      	strb	r2, [r3, #0]
      break;
 8002d34:	e069      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3354      	adds	r3, #84	; 0x54
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3342      	adds	r3, #66	; 0x42
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
      break;
 8002d5c:	e055      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3342      	adds	r3, #66	; 0x42
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
      break;
 8002d70:	e04b      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d72:	78bb      	ldrb	r3, [r7, #2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11d      	bne.n	8002db4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3355      	adds	r3, #85	; 0x55
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3342      	adds	r3, #66	; 0x42
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d9e:	e034      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3342      	adds	r3, #66	; 0x42
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
      break;
 8002db2:	e02a      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3354      	adds	r3, #84	; 0x54
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3342      	adds	r3, #66	; 0x42
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e016      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3342      	adds	r3, #66	; 0x42
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
      break;
 8002dee:	e00c      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3342      	adds	r3, #66	; 0x42
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e08:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3344      	adds	r3, #68	; 0x44
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	8b3a      	ldrh	r2, [r7, #24]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	; 0x4c
 8002e2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3350      	adds	r3, #80	; 0x50
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3339      	adds	r3, #57	; 0x39
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	222c      	movs	r2, #44	; 0x2c
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	3338      	adds	r3, #56	; 0x38
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	18d1      	adds	r1, r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f004 ff06 	bl	8007ca0 <USB_HC_StartXfer>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 fc1f 	bl	80076fa <USB_GetMode>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 80ef 	bne.w	80030a2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 fc03 	bl	80076d4 <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80e5 	beq.w	80030a0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 fbfa 	bl	80076d4 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eea:	d104      	bne.n	8002ef6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ef4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 fbea 	bl	80076d4 <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0a:	d104      	bne.n	8002f16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fbda 	bl	80076d4 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2a:	d104      	bne.n	8002f36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 fbca 	bl	80076d4 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fbbc 	bl	80076d4 <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f66:	d115      	bne.n	8002f94 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f007 f98e 	bl	800a2a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fcb2 	bl	80078f8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fb9b 	bl	80076d4 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d102      	bne.n	8002fb0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 f9ff 	bl	80043ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fb8d 	bl	80076d4 <USB_ReadInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d106      	bne.n	8002fd2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f007 f951 	bl	800a26c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fb7c 	bl	80076d4 <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d101      	bne.n	8002fea <HAL_HCD_IRQHandler+0x14a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_HCD_IRQHandler+0x14c>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0210 	bic.w	r2, r2, #16
 8002ffe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f001 f902 	bl	800420a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0210 	orr.w	r2, r2, #16
 8003014:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f004 fb5a 	bl	80076d4 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800302a:	d13a      	bne.n	80030a2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 ff77 	bl	8007f24 <USB_HC_ReadInterrupt>
 8003036:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e025      	b.n	800308a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d018      	beq.n	8003084 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d106      	bne.n	8003078 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8ab 	bl	80031cc <HCD_HC_IN_IRQHandler>
 8003076:	e005      	b.n	8003084 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fcc6 	bl	8003a10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3d4      	bcc.n	800303e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309c:	615a      	str	r2, [r3, #20]
 800309e:	e000      	b.n	80030a2 <HAL_HCD_IRQHandler+0x202>
      return;
 80030a0:	bf00      	nop
    }
  }
}
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_HCD_Start+0x16>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e013      	b.n	80030e6 <HAL_HCD_Start+0x3e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fa0f 	bl	80074ee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 fc72 	bl	80079c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_HCD_Stop+0x16>
 8003100:	2302      	movs	r3, #2
 8003102:	e00d      	b.n	8003120 <HAL_HCD_Stop+0x32>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f005 f871 	bl	80081f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f004 fc19 	bl	800796c <USB_ResetPort>
 800313a:	4603      	mov	r3, r0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3360      	adds	r3, #96	; 0x60
 800315e:	781b      	ldrb	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3350      	adds	r3, #80	; 0x50
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 fc5d 	bl	8007a60 <USB_GetCurrentFrame>
 80031a6:	4603      	mov	r3, r0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fc38 	bl	8007a32 <USB_GetHostSpeed>
 80031c2:	4603      	mov	r3, r0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d119      	bne.n	8003230 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2304      	movs	r3, #4
 800320c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	440a      	add	r2, r1
 8003224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	60d3      	str	r3, [r2, #12]
 800322e:	e101      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d12b      	bne.n	80032a0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	2207      	movs	r2, #7
 800326c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	0151      	lsls	r1, r2, #5
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	440a      	add	r2, r1
 8003284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f004 fe54 	bl	8007f46 <USB_HC_Halt>
 800329e:	e0c9      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d109      	bne.n	80032ca <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2320      	movs	r3, #32
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e0b4      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d133      	bne.n	8003348 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	2205      	movs	r2, #5
 8003310:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2310      	movs	r3, #16
 8003322:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	2308      	movs	r3, #8
 8003334:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fe00 	bl	8007f46 <USB_HC_Halt>
 8003346:	e075      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	d134      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	440a      	add	r2, r1
 8003376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3361      	adds	r3, #97	; 0x61
 800338e:	2208      	movs	r2, #8
 8003390:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	461a      	mov	r2, r3
 80033a0:	2310      	movs	r3, #16
 80033a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fdbf 	bl	8007f46 <USB_HC_Halt>
 80033c8:	e034      	b.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d129      	bne.n	8003434 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	2206      	movs	r2, #6
 8003410:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fd92 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d122      	bne.n	8003492 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f004 fd65 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003490:	e2ba      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 811b 	bne.w	80036e0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d019      	beq.n	80034e6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3348      	adds	r3, #72	; 0x48
 80034c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0159      	lsls	r1, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034d4:	1ad2      	subs	r2, r2, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	202c      	movs	r0, #44	; 0x2c
 80034dc:	fb00 f303 	mul.w	r3, r0, r3
 80034e0:	440b      	add	r3, r1
 80034e2:	3350      	adds	r3, #80	; 0x50
 80034e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3361      	adds	r3, #97	; 0x61
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	335c      	adds	r3, #92	; 0x5c
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	2301      	movs	r3, #1
 800351a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	333f      	adds	r3, #63	; 0x3f
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	333f      	adds	r3, #63	; 0x3f
 800353e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003540:	2b02      	cmp	r3, #2
 8003542:	d121      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	440a      	add	r2, r1
 800355a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fce9 	bl	8007f46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	2310      	movs	r3, #16
 8003584:	6093      	str	r3, [r2, #8]
 8003586:	e066      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	333f      	adds	r3, #63	; 0x3f
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d127      	bne.n	80035ec <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	3360      	adds	r3, #96	; 0x60
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	202c      	movs	r0, #44	; 0x2c
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3360      	adds	r3, #96	; 0x60
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f006 fe6b 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035ea:	e034      	b.n	8003656 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	333f      	adds	r3, #63	; 0x3f
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d12a      	bne.n	8003656 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3360      	adds	r3, #96	; 0x60
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3354      	adds	r3, #84	; 0x54
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f083 0301 	eor.w	r3, r3, #1
 8003626:	b2d8      	uxtb	r0, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3354      	adds	r3, #84	; 0x54
 8003636:	4602      	mov	r2, r0
 8003638:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b2d9      	uxtb	r1, r3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	202c      	movs	r0, #44	; 0x2c
 8003644:	fb00 f303 	mul.w	r3, r0, r3
 8003648:	4413      	add	r3, r2
 800364a:	3360      	adds	r3, #96	; 0x60
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f006 fe35 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d12b      	bne.n	80036b6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	202c      	movs	r0, #44	; 0x2c
 8003674:	fb00 f202 	mul.w	r2, r0, r2
 8003678:	440a      	add	r2, r1
 800367a:	3240      	adds	r2, #64	; 0x40
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 81be 	beq.w	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3354      	adds	r3, #84	; 0x54
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2d8      	uxtb	r0, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3354      	adds	r3, #84	; 0x54
 80036b0:	4602      	mov	r2, r0
 80036b2:	701a      	strb	r2, [r3, #0]
}
 80036b4:	e1a8      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3354      	adds	r3, #84	; 0x54
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2d8      	uxtb	r0, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3354      	adds	r3, #84	; 0x54
 80036da:	4602      	mov	r2, r0
 80036dc:	701a      	strb	r2, [r3, #0]
}
 80036de:	e193      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	f040 8106 	bne.w	8003904 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	0151      	lsls	r1, r2, #5
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	440a      	add	r2, r1
 800370e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003712:	f023 0302 	bic.w	r3, r3, #2
 8003716:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3361      	adds	r3, #97	; 0x61
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d109      	bne.n	8003740 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3360      	adds	r3, #96	; 0x60
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e0c9      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d109      	bne.n	8003768 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e0b5      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d009      	beq.n	8003790 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800378c:	2b08      	cmp	r3, #8
 800378e:	d150      	bne.n	8003832 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	335c      	adds	r3, #92	; 0x5c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	202c      	movs	r0, #44	; 0x2c
 80037a8:	fb00 f303 	mul.w	r3, r0, r3
 80037ac:	440b      	add	r3, r1
 80037ae:	335c      	adds	r3, #92	; 0x5c
 80037b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	335c      	adds	r3, #92	; 0x5c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d912      	bls.n	80037ec <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	335c      	adds	r3, #92	; 0x5c
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3360      	adds	r3, #96	; 0x60
 80037e6:	2204      	movs	r2, #4
 80037e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037ea:	e073      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3360      	adds	r3, #96	; 0x60
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003814:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800381c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003830:	e050      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3361      	adds	r3, #97	; 0x61
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d122      	bne.n	800388c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3360      	adds	r3, #96	; 0x60
 8003854:	2202      	movs	r2, #2
 8003856:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800386e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003876:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e023      	b.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3361      	adds	r3, #97	; 0x61
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d119      	bne.n	80038d4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	335c      	adds	r3, #92	; 0x5c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	202c      	movs	r0, #44	; 0x2c
 80038b8:	fb00 f303 	mul.w	r3, r0, r3
 80038bc:	440b      	add	r3, r1
 80038be:	335c      	adds	r3, #92	; 0x5c
 80038c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3360      	adds	r3, #96	; 0x60
 80038d0:	2204      	movs	r2, #4
 80038d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2302      	movs	r3, #2
 80038e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	b2d9      	uxtb	r1, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	202c      	movs	r0, #44	; 0x2c
 80038f0:	fb00 f303 	mul.w	r3, r0, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3360      	adds	r3, #96	; 0x60
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f006 fcdf 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003902:	e081      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d176      	bne.n	8003a08 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	333f      	adds	r3, #63	; 0x3f
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d121      	bne.n	8003972 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	335c      	adds	r3, #92	; 0x5c
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	440a      	add	r2, r1
 8003956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f004 faeb 	bl	8007f46 <USB_HC_Halt>
 8003970:	e041      	b.n	80039f6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333f      	adds	r3, #63	; 0x3f
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	333f      	adds	r3, #63	; 0x3f
 8003994:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003996:	2b02      	cmp	r3, #2
 8003998:	d12d      	bne.n	80039f6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	335c      	adds	r3, #92	; 0x5c
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d120      	bne.n	80039f6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3361      	adds	r3, #97	; 0x61
 80039c2:	2203      	movs	r2, #3
 80039c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 faa8 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	2310      	movs	r3, #16
 8003a06:	6093      	str	r3, [r2, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d119      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2304      	movs	r3, #4
 8003a50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a72:	e3c6      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d13e      	bne.n	8003b08 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a96:	461a      	mov	r2, r3
 8003a98:	2320      	movs	r3, #32
 8003a9a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	333d      	adds	r3, #61	; 0x3d
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 83a8 	bne.w	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	333d      	adds	r3, #61	; 0x3d
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3360      	adds	r3, #96	; 0x60
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 fa20 	bl	8007f46 <USB_HC_Halt>
}
 8003b06:	e37c      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1e:	d122      	bne.n	8003b66 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 f9fb 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b62:	6093      	str	r3, [r2, #8]
}
 8003b64:	e34d      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d150      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d111      	bne.n	8003bc8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	333d      	adds	r3, #61	; 0x3d
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2340      	movs	r3, #64	; 0x40
 8003bc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 f9a7 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	461a      	mov	r2, r3
 8003c06:	2301      	movs	r3, #1
 8003c08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3361      	adds	r3, #97	; 0x61
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
}
 8003c1c:	e2f1      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d13c      	bne.n	8003cae <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	2204      	movs	r2, #4
 8003c44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	333d      	adds	r3, #61	; 0x3d
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	335c      	adds	r3, #92	; 0x5c
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f004 f956 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	6093      	str	r3, [r2, #8]
}
 8003cac:	e2a9      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d12a      	bne.n	8003d1a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 f920 	bl	8007f46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3361      	adds	r3, #97	; 0x61
 8003d14:	2205      	movs	r2, #5
 8003d16:	701a      	strb	r2, [r3, #0]
}
 8003d18:	e273      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d150      	bne.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	212c      	movs	r1, #44	; 0x2c
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	335c      	adds	r3, #92	; 0x5c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3361      	adds	r3, #97	; 0x61
 8003d50:	2203      	movs	r2, #3
 8003d52:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	333d      	adds	r3, #61	; 0x3d
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d112      	bne.n	8003d8e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	333c      	adds	r3, #60	; 0x3c
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	333d      	adds	r3, #61	; 0x3d
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 f8c4 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2310      	movs	r3, #16
 8003dce:	6093      	str	r3, [r2, #8]
}
 8003dd0:	e217      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d174      	bne.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d121      	bne.n	8003e34 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3361      	adds	r3, #97	; 0x61
 8003dfe:	2206      	movs	r2, #6
 8003e00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 f88a 	bl	8007f46 <USB_HC_Halt>
 8003e32:	e044      	b.n	8003ebe <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	335c      	adds	r3, #92	; 0x5c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	202c      	movs	r0, #44	; 0x2c
 8003e4c:	fb00 f303 	mul.w	r3, r0, r3
 8003e50:	440b      	add	r3, r1
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	335c      	adds	r3, #92	; 0x5c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d920      	bls.n	8003eac <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	335c      	adds	r3, #92	; 0x5c
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	b2d9      	uxtb	r1, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	202c      	movs	r0, #44	; 0x2c
 8003e98:	fb00 f303 	mul.w	r3, r0, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3360      	adds	r3, #96	; 0x60
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f006 fa0b 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003eaa:	e008      	b.n	8003ebe <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3360      	adds	r3, #96	; 0x60
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	6093      	str	r3, [r2, #8]
}
 8003ed0:	e197      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d134      	bne.n	8003f54 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 f816 	bl	8007f46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3361      	adds	r3, #97	; 0x61
 8003f4e:	2208      	movs	r2, #8
 8003f50:	701a      	strb	r2, [r3, #0]
}
 8003f52:	e156      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	f040 814b 	bne.w	8004202 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f86:	f023 0302 	bic.w	r3, r3, #2
 8003f8a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3361      	adds	r3, #97	; 0x61
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d179      	bne.n	8004094 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3360      	adds	r3, #96	; 0x60
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	333f      	adds	r3, #63	; 0x3f
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d00a      	beq.n	8003fdc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	333f      	adds	r3, #63	; 0x3f
 8003fd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	f040 80fc 	bne.w	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d142      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	334c      	adds	r3, #76	; 0x4c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80ed 	beq.w	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	334c      	adds	r3, #76	; 0x4c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	202c      	movs	r0, #44	; 0x2c
 8004010:	fb00 f202 	mul.w	r2, r0, r2
 8004014:	440a      	add	r2, r1
 8004016:	3240      	adds	r2, #64	; 0x40
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	4413      	add	r3, r2
 800401c:	3b01      	subs	r3, #1
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	202c      	movs	r0, #44	; 0x2c
 8004024:	fb00 f202 	mul.w	r2, r0, r2
 8004028:	440a      	add	r2, r1
 800402a:	3240      	adds	r2, #64	; 0x40
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80ca 	beq.w	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3355      	adds	r3, #85	; 0x55
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2d8      	uxtb	r0, r3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	3355      	adds	r3, #85	; 0x55
 8004064:	4602      	mov	r2, r0
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e0b4      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	3355      	adds	r3, #85	; 0x55
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2d8      	uxtb	r0, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	3355      	adds	r3, #85	; 0x55
 800408e:	4602      	mov	r2, r0
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e09f      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3361      	adds	r3, #97	; 0x61
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d109      	bne.n	80040bc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3360      	adds	r3, #96	; 0x60
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e08b      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3361      	adds	r3, #97	; 0x61
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d109      	bne.n	80040e4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3360      	adds	r3, #96	; 0x60
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e077      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3361      	adds	r3, #97	; 0x61
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d109      	bne.n	800410c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	2205      	movs	r2, #5
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e063      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3361      	adds	r3, #97	; 0x61
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b06      	cmp	r3, #6
 800411e:	d009      	beq.n	8004134 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3361      	adds	r3, #97	; 0x61
 800412e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004130:	2b08      	cmp	r3, #8
 8004132:	d14f      	bne.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	335c      	adds	r3, #92	; 0x5c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	202c      	movs	r0, #44	; 0x2c
 800414c:	fb00 f303 	mul.w	r3, r0, r3
 8004150:	440b      	add	r3, r1
 8004152:	335c      	adds	r3, #92	; 0x5c
 8004154:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	335c      	adds	r3, #92	; 0x5c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d912      	bls.n	8004190 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	335c      	adds	r3, #92	; 0x5c
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3360      	adds	r3, #96	; 0x60
 800418a:	2204      	movs	r2, #4
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e021      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3360      	adds	r3, #96	; 0x60
 800419e:	2202      	movs	r2, #2
 80041a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	461a      	mov	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	461a      	mov	r2, r3
 80041e2:	2302      	movs	r3, #2
 80041e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	b2d9      	uxtb	r1, r3
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	202c      	movs	r0, #44	; 0x2c
 80041f0:	fb00 f303 	mul.w	r3, r0, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	3360      	adds	r3, #96	; 0x60
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f006 f85f 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004202:	bf00      	nop
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b08a      	sub	sp, #40	; 0x28
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	0c5b      	lsrs	r3, r3, #17
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d004      	beq.n	8004250 <HCD_RXQLVL_IRQHandler+0x46>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b05      	cmp	r3, #5
 800424a:	f000 80a9 	beq.w	80043a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800424e:	e0aa      	b.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80a6 	beq.w	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3344      	adds	r3, #68	; 0x44
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 809b 	beq.w	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3350      	adds	r3, #80	; 0x50
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	441a      	add	r2, r3
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	202c      	movs	r0, #44	; 0x2c
 8004288:	fb00 f303 	mul.w	r3, r0, r3
 800428c:	440b      	add	r3, r1
 800428e:	334c      	adds	r3, #76	; 0x4c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d87a      	bhi.n	800438c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3344      	adds	r3, #68	; 0x44
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	b292      	uxth	r2, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f003 f9e7 	bl	8007682 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	212c      	movs	r1, #44	; 0x2c
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	4413      	add	r3, r2
 80042c0:	3344      	adds	r3, #68	; 0x44
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	441a      	add	r2, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	202c      	movs	r0, #44	; 0x2c
 80042ce:	fb00 f303 	mul.w	r3, r0, r3
 80042d2:	440b      	add	r3, r1
 80042d4:	3344      	adds	r3, #68	; 0x44
 80042d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3350      	adds	r3, #80	; 0x50
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	441a      	add	r2, r3
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	202c      	movs	r0, #44	; 0x2c
 80042f2:	fb00 f303 	mul.w	r3, r0, r3
 80042f6:	440b      	add	r3, r1
 80042f8:	3350      	adds	r3, #80	; 0x50
 80042fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	0cdb      	lsrs	r3, r3, #19
 800430c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004310:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3340      	adds	r3, #64	; 0x40
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4293      	cmp	r3, r2
 8004328:	d13c      	bne.n	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d039      	beq.n	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004346:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800434e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	3354      	adds	r3, #84	; 0x54
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2d8      	uxtb	r0, r3
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3354      	adds	r3, #84	; 0x54
 8004386:	4602      	mov	r2, r0
 8004388:	701a      	strb	r2, [r3, #0]
      break;
 800438a:	e00b      	b.n	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3360      	adds	r3, #96	; 0x60
 800439a:	2204      	movs	r2, #4
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	e001      	b.n	80043a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80043a4:	bf00      	nop
  }
}
 80043a6:	bf00      	nop
 80043a8:	3728      	adds	r7, #40	; 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d10b      	bne.n	80043fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f005 ff49 	bl	800a288 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d132      	bne.n	800446e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f043 0308 	orr.w	r3, r3, #8
 800440e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b04      	cmp	r3, #4
 8004418:	d126      	bne.n	8004468 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d113      	bne.n	800444a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442c:	d106      	bne.n	800443c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f003 fa5f 	bl	80078f8 <USB_InitFSLSPClkSel>
 800443a:	e011      	b.n	8004460 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f003 fa58 	bl	80078f8 <USB_InitFSLSPClkSel>
 8004448:	e00a      	b.n	8004460 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d106      	bne.n	8004460 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004458:	461a      	mov	r2, r3
 800445a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800445e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f005 ff3b 	bl	800a2dc <HAL_HCD_PortEnabled_Callback>
 8004466:	e002      	b.n	800446e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f005 ff45 	bl	800a2f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d103      	bne.n	8004480 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f043 0320 	orr.w	r3, r3, #32
 800447e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e12b      	b.n	80046fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fee0 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044f8:	f001 f9fc 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 80044fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4a81      	ldr	r2, [pc, #516]	; (8004708 <HAL_I2C_Init+0x274>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d807      	bhi.n	8004518 <HAL_I2C_Init+0x84>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a80      	ldr	r2, [pc, #512]	; (800470c <HAL_I2C_Init+0x278>)
 800450c:	4293      	cmp	r3, r2
 800450e:	bf94      	ite	ls
 8004510:	2301      	movls	r3, #1
 8004512:	2300      	movhi	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e006      	b.n	8004526 <HAL_I2C_Init+0x92>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a7d      	ldr	r2, [pc, #500]	; (8004710 <HAL_I2C_Init+0x27c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	bf94      	ite	ls
 8004520:	2301      	movls	r3, #1
 8004522:	2300      	movhi	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0e7      	b.n	80046fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a78      	ldr	r2, [pc, #480]	; (8004714 <HAL_I2C_Init+0x280>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0c9b      	lsrs	r3, r3, #18
 8004538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a6a      	ldr	r2, [pc, #424]	; (8004708 <HAL_I2C_Init+0x274>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d802      	bhi.n	8004568 <HAL_I2C_Init+0xd4>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3301      	adds	r3, #1
 8004566:	e009      	b.n	800457c <HAL_I2C_Init+0xe8>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	4a69      	ldr	r2, [pc, #420]	; (8004718 <HAL_I2C_Init+0x284>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	3301      	adds	r3, #1
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800458e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	495c      	ldr	r1, [pc, #368]	; (8004708 <HAL_I2C_Init+0x274>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d819      	bhi.n	80045d0 <HAL_I2C_Init+0x13c>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1e59      	subs	r1, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045aa:	1c59      	adds	r1, r3, #1
 80045ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045b0:	400b      	ands	r3, r1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_I2C_Init+0x138>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1e59      	subs	r1, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c4:	3301      	adds	r3, #1
 80045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ca:	e051      	b.n	8004670 <HAL_I2C_Init+0x1dc>
 80045cc:	2304      	movs	r3, #4
 80045ce:	e04f      	b.n	8004670 <HAL_I2C_Init+0x1dc>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d111      	bne.n	80045fc <HAL_I2C_Init+0x168>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e58      	subs	r0, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	440b      	add	r3, r1
 80045e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ea:	3301      	adds	r3, #1
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e012      	b.n	8004622 <HAL_I2C_Init+0x18e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e58      	subs	r0, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	0099      	lsls	r1, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Init+0x196>
 8004626:	2301      	movs	r3, #1
 8004628:	e022      	b.n	8004670 <HAL_I2C_Init+0x1dc>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10e      	bne.n	8004650 <HAL_I2C_Init+0x1bc>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1e58      	subs	r0, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	440b      	add	r3, r1
 8004640:	fbb0 f3f3 	udiv	r3, r0, r3
 8004644:	3301      	adds	r3, #1
 8004646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	e00f      	b.n	8004670 <HAL_I2C_Init+0x1dc>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	0099      	lsls	r1, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	6809      	ldr	r1, [r1, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800469e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6911      	ldr	r1, [r2, #16]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68d2      	ldr	r2, [r2, #12]
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	000186a0 	.word	0x000186a0
 800470c:	001e847f 	.word	0x001e847f
 8004710:	003d08ff 	.word	0x003d08ff
 8004714:	431bde83 	.word	0x431bde83
 8004718:	10624dd3 	.word	0x10624dd3

0800471c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e128      	b.n	8004980 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a90      	ldr	r2, [pc, #576]	; (8004988 <HAL_I2S_Init+0x26c>)
 8004746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fe39 	bl	80013c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004764:	f023 030f 	bic.w	r3, r3, #15
 8004768:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2202      	movs	r2, #2
 8004770:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d060      	beq.n	800483c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004782:	2310      	movs	r3, #16
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e001      	b.n	800478c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004788:	2320      	movs	r3, #32
 800478a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d802      	bhi.n	800479a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800479a:	2001      	movs	r0, #1
 800479c:	f001 f9a0 	bl	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047aa:	d125      	bne.n	80047f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	461a      	mov	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	3305      	adds	r3, #5
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e01f      	b.n	8004816 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	461a      	mov	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	3305      	adds	r3, #5
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e00e      	b.n	8004816 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	3305      	adds	r3, #5
 8004814:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_I2S_Init+0x270>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e003      	b.n	8004844 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800483c:	2302      	movs	r3, #2
 800483e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d902      	bls.n	8004850 <HAL_I2S_Init+0x134>
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2bff      	cmp	r3, #255	; 0xff
 800484e:	d907      	bls.n	8004860 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f043 0210 	orr.w	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e08f      	b.n	8004980 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	ea42 0103 	orr.w	r1, r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	430a      	orrs	r2, r1
 8004872:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800487e:	f023 030f 	bic.w	r3, r3, #15
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6851      	ldr	r1, [r2, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68d2      	ldr	r2, [r2, #12]
 8004890:	4311      	orrs	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6992      	ldr	r2, [r2, #24]
 8004896:	430a      	orrs	r2, r1
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d161      	bne.n	8004970 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a38      	ldr	r2, [pc, #224]	; (8004990 <HAL_I2S_Init+0x274>)
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a37      	ldr	r2, [pc, #220]	; (8004994 <HAL_I2S_Init+0x278>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_I2S_Init+0x1a4>
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_I2S_Init+0x27c>)
 80048be:	e001      	b.n	80048c4 <HAL_I2S_Init+0x1a8>
 80048c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	4932      	ldr	r1, [pc, #200]	; (8004994 <HAL_I2S_Init+0x278>)
 80048cc:	428a      	cmp	r2, r1
 80048ce:	d101      	bne.n	80048d4 <HAL_I2S_Init+0x1b8>
 80048d0:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_I2S_Init+0x27c>)
 80048d2:	e001      	b.n	80048d8 <HAL_I2S_Init+0x1bc>
 80048d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80048d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048dc:	f023 030f 	bic.w	r3, r3, #15
 80048e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <HAL_I2S_Init+0x278>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_I2S_Init+0x1d4>
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_I2S_Init+0x27c>)
 80048ee:	e001      	b.n	80048f4 <HAL_I2S_Init+0x1d8>
 80048f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f4:	2202      	movs	r2, #2
 80048f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a25      	ldr	r2, [pc, #148]	; (8004994 <HAL_I2S_Init+0x278>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_I2S_Init+0x1ea>
 8004902:	4b25      	ldr	r3, [pc, #148]	; (8004998 <HAL_I2S_Init+0x27c>)
 8004904:	e001      	b.n	800490a <HAL_I2S_Init+0x1ee>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004916:	d003      	beq.n	8004920 <HAL_I2S_Init+0x204>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e001      	b.n	800492c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004936:	4313      	orrs	r3, r2
 8004938:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004940:	4313      	orrs	r3, r2
 8004942:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800494a:	4313      	orrs	r3, r2
 800494c:	b29a      	uxth	r2, r3
 800494e:	897b      	ldrh	r3, [r7, #10]
 8004950:	4313      	orrs	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004958:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <HAL_I2S_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_I2S_Init+0x24c>
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_I2S_Init+0x27c>)
 8004966:	e001      	b.n	800496c <HAL_I2S_Init+0x250>
 8004968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800496c:	897a      	ldrh	r2, [r7, #10]
 800496e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08004a93 	.word	0x08004a93
 800498c:	cccccccd 	.word	0xcccccccd
 8004990:	08004ba9 	.word	0x08004ba9
 8004994:	40003800 	.word	0x40003800
 8004998:	40003400 	.word	0x40003400

0800499c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ffb8 	bl	800499c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	b292      	uxth	r2, r2
 8004a48:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	1c9a      	adds	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10e      	bne.n	8004a8a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff93 	bl	80049b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d13a      	bne.n	8004b24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d109      	bne.n	8004acc <I2S_IRQHandler+0x3a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d102      	bne.n	8004acc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ffb4 	bl	8004a34 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d126      	bne.n	8004b24 <I2S_IRQHandler+0x92>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d11f      	bne.n	8004b24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ff50 	bl	80049c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d136      	bne.n	8004b9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d109      	bne.n	8004b4e <I2S_IRQHandler+0xbc>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d102      	bne.n	8004b4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff45 	bl	80049d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d122      	bne.n	8004b9e <I2S_IRQHandler+0x10c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d11b      	bne.n	8004b9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff13 	bl	80049c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4aa2      	ldr	r2, [pc, #648]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bc2:	4ba2      	ldr	r3, [pc, #648]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bc4:	e001      	b.n	8004bca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a9b      	ldr	r2, [pc, #620]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d101      	bne.n	8004be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004be0:	4b9a      	ldr	r3, [pc, #616]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004be2:	e001      	b.n	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf4:	d004      	beq.n	8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8099 	bne.w	8004d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d107      	bne.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f925 	bl	8004e64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9c8 	bl	8004fc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d13a      	bne.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d035      	beq.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7e      	ldr	r2, [pc, #504]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c52:	4b7e      	ldr	r3, [pc, #504]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c54:	e001      	b.n	8004c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4979      	ldr	r1, [pc, #484]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d101      	bne.n	8004c6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c66:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c68:	e001      	b.n	8004c6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c72:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fe88 	bl	80049c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	f040 80be 	bne.w	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80b8 	beq.w	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a59      	ldr	r2, [pc, #356]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ce6:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ce8:	e001      	b.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4954      	ldr	r1, [pc, #336]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004cfa:	4b54      	ldr	r3, [pc, #336]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cfc:	e001      	b.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d06:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe4a 	bl	80049c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d30:	e084      	b.n	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d107      	bne.n	8004d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8be 	bl	8004ec8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8fd 	bl	8004f60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d12f      	bne.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02a      	beq.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d88:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d94:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d96:	e001      	b.n	8004d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4929      	ldr	r1, [pc, #164]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004da4:	428b      	cmp	r3, r1
 8004da6:	d101      	bne.n	8004dac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004daa:	e001      	b.n	8004db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004db4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fdfa 	bl	80049c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d131      	bne.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d02c      	beq.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004dee:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004df0:	e001      	b.n	8004df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4912      	ldr	r1, [pc, #72]	; (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dfe:	428b      	cmp	r3, r1
 8004e00:	d101      	bne.n	8004e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e04:	e001      	b.n	8004e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e1e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fdc5 	bl	80049c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e3a:	e000      	b.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e3c:	bf00      	nop
}
 8004e3e:	bf00      	nop
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40003800 	.word	0x40003800
 8004e4c:	40003400 	.word	0x40003400

08004e50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	1c99      	adds	r1, r3, #2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6251      	str	r1, [r2, #36]	; 0x24
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d113      	bne.n	8004ebe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ea4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ffc9 	bl	8004e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c99      	adds	r1, r3, #2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6251      	str	r1, [r2, #36]	; 0x24
 8004eda:	8819      	ldrh	r1, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <I2SEx_TxISR_I2SExt+0x90>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <I2SEx_TxISR_I2SExt+0x22>
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <I2SEx_TxISR_I2SExt+0x94>)
 8004ee8:	e001      	b.n	8004eee <I2SEx_TxISR_I2SExt+0x26>
 8004eea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eee:	460a      	mov	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d121      	bne.n	8004f4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <I2SEx_TxISR_I2SExt+0x90>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <I2SEx_TxISR_I2SExt+0x50>
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <I2SEx_TxISR_I2SExt+0x94>)
 8004f16:	e001      	b.n	8004f1c <I2SEx_TxISR_I2SExt+0x54>
 8004f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	490d      	ldr	r1, [pc, #52]	; (8004f58 <I2SEx_TxISR_I2SExt+0x90>)
 8004f24:	428b      	cmp	r3, r1
 8004f26:	d101      	bne.n	8004f2c <I2SEx_TxISR_I2SExt+0x64>
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <I2SEx_TxISR_I2SExt+0x94>)
 8004f2a:	e001      	b.n	8004f30 <I2SEx_TxISR_I2SExt+0x68>
 8004f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff81 	bl	8004e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40003800 	.word	0x40003800
 8004f5c:	40003400 	.word	0x40003400

08004f60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68d8      	ldr	r0, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	1c99      	adds	r1, r3, #2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f78:	b282      	uxth	r2, r0
 8004f7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d113      	bne.n	8004fbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fa2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff4a 	bl	8004e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <I2SEx_RxISR_I2SExt+0x90>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <I2SEx_RxISR_I2SExt+0x16>
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <I2SEx_RxISR_I2SExt+0x94>)
 8004fd8:	e001      	b.n	8004fde <I2SEx_RxISR_I2SExt+0x1a>
 8004fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fde:	68d8      	ldr	r0, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	1c99      	adds	r1, r3, #2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fea:	b282      	uxth	r2, r0
 8004fec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d121      	bne.n	800504a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <I2SEx_RxISR_I2SExt+0x90>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d101      	bne.n	8005014 <I2SEx_RxISR_I2SExt+0x50>
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <I2SEx_RxISR_I2SExt+0x94>)
 8005012:	e001      	b.n	8005018 <I2SEx_RxISR_I2SExt+0x54>
 8005014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	490d      	ldr	r1, [pc, #52]	; (8005054 <I2SEx_RxISR_I2SExt+0x90>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d101      	bne.n	8005028 <I2SEx_RxISR_I2SExt+0x64>
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <I2SEx_RxISR_I2SExt+0x94>)
 8005026:	e001      	b.n	800502c <I2SEx_RxISR_I2SExt+0x68>
 8005028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005030:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ff03 	bl	8004e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40003800 	.word	0x40003800
 8005058:	40003400 	.word	0x40003400

0800505c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e264      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d075      	beq.n	8005166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800507a:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d00c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4ba0      	ldr	r3, [pc, #640]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800508e:	2b08      	cmp	r3, #8
 8005090:	d112      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b9d      	ldr	r3, [pc, #628]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d10b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	4b99      	ldr	r3, [pc, #612]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05b      	beq.n	8005164 <HAL_RCC_OscConfig+0x108>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d157      	bne.n	8005164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e23f      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x74>
 80050c2:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a90      	ldr	r2, [pc, #576]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x98>
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a8a      	ldr	r2, [pc, #552]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a87      	ldr	r2, [pc, #540]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a83      	ldr	r2, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd f918 	bl	8002348 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd f914 	bl	8002348 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e204      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xc0>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd f904 	bl	8002348 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd f900 	bl	8002348 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1f0      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0xe8>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b62      	ldr	r3, [pc, #392]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1c4      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4952      	ldr	r1, [pc, #328]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e03a      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b4f      	ldr	r3, [pc, #316]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fd f8b9 	bl	8002348 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd f8b5 	bl	8002348 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1a5      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ec:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b43      	ldr	r3, [pc, #268]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4940      	ldr	r1, [pc, #256]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
 800520c:	e015      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd f898 	bl	8002348 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521c:	f7fd f894 	bl	8002348 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e184      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d030      	beq.n	80052a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b30      	ldr	r3, [pc, #192]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fd f878 	bl	8002348 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fd f874 	bl	8002348 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e164      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x200>
 800527a:	e015      	b.n	80052a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005282:	f7fd f861 	bl	8002348 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528a:	f7fd f85d 	bl	8002348 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e14d      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a0 	beq.w	80053f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fd f823 	bl	8002348 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	e011      	b.n	800532a <HAL_RCC_OscConfig+0x2ce>
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
 8005314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fd f816 	bl	8002348 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e106      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCC_OscConfig+0x4e4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d106      	bne.n	800534c <HAL_RCC_OscConfig+0x2f0>
 800533e:	4b81      	ldr	r3, [pc, #516]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a80      	ldr	r2, [pc, #512]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	e01c      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b05      	cmp	r3, #5
 8005352:	d10c      	bne.n	800536e <HAL_RCC_OscConfig+0x312>
 8005354:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
 8005360:	4b78      	ldr	r3, [pc, #480]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a77      	ldr	r2, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	e00b      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800536e:	4b75      	ldr	r3, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a74      	ldr	r2, [pc, #464]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a71      	ldr	r2, [pc, #452]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d015      	beq.n	80053ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538e:	f7fc ffdb 	bl	8002348 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fc ffd7 	bl	8002348 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0c5      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	4b65      	ldr	r3, [pc, #404]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ee      	beq.n	8005396 <HAL_RCC_OscConfig+0x33a>
 80053b8:	e014      	b.n	80053e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ba:	f7fc ffc5 	bl	8002348 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c0:	e00a      	b.n	80053d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fc ffc1 	bl	8002348 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0af      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d8:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ee      	bne.n	80053c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d105      	bne.n	80053f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a55      	ldr	r2, [pc, #340]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 809b 	beq.w	8005536 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b08      	cmp	r3, #8
 800540a:	d05c      	beq.n	80054c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d141      	bne.n	8005498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005414:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fc ff95 	bl	8002348 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005422:	f7fc ff91 	bl	8002348 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e081      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005434:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	4937      	ldr	r1, [pc, #220]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800546a:	4b37      	ldr	r3, [pc, #220]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fc ff6a 	bl	8002348 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fc ff66 	bl	8002348 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e056      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x41c>
 8005496:	e04e      	b.n	8005536 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_RCC_OscConfig+0x4ec>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549e:	f7fc ff53 	bl	8002348 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fc ff4f 	bl	8002348 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e03f      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x44a>
 80054c4:	e037      	b.n	8005536 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e032      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d028      	beq.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d121      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d11a      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005508:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	3b01      	subs	r3, #1
 800551c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d001      	beq.n	8005536 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40007000 	.word	0x40007000
 8005544:	40023800 	.word	0x40023800
 8005548:	42470060 	.word	0x42470060

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0cc      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b68      	ldr	r3, [pc, #416]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d90c      	bls.n	8005588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b65      	ldr	r3, [pc, #404]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b63      	ldr	r3, [pc, #396]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0b8      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a0:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a58      	ldr	r2, [pc, #352]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b8:	4b53      	ldr	r3, [pc, #332]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a52      	ldr	r2, [pc, #328]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c4:	4b50      	ldr	r3, [pc, #320]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	494d      	ldr	r1, [pc, #308]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d044      	beq.n	800566c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d119      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d003      	beq.n	800560a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005606:	2b03      	cmp	r3, #3
 8005608:	d107      	bne.n	800561a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560a:	4b3f      	ldr	r3, [pc, #252]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e06f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561a:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e067      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562a:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 0203 	bic.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4934      	ldr	r1, [pc, #208]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800563c:	f7fc fe84 	bl	8002348 <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	e00a      	b.n	800565a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f7fc fe80 	bl	8002348 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e04f      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 020c 	and.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	429a      	cmp	r2, r3
 800566a:	d1eb      	bne.n	8005644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d20c      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b22      	ldr	r3, [pc, #136]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e032      	b.n	80056fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4916      	ldr	r1, [pc, #88]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	490e      	ldr	r1, [pc, #56]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056d2:	f000 f821 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	490a      	ldr	r1, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x1c0>)
 80056e4:	5ccb      	ldrb	r3, [r1, r3]
 80056e6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 80056ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fc fde4 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023c00 	.word	0x40023c00
 8005708:	40023800 	.word	0x40023800
 800570c:	0800a8e0 	.word	0x0800a8e0
 8005710:	20000004 	.word	0x20000004
 8005714:	2000000c 	.word	0x2000000c

08005718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	2300      	movs	r3, #0
 800572a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005730:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d00d      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x40>
 800573c:	2b08      	cmp	r3, #8
 800573e:	f200 80bd 	bhi.w	80058bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x34>
 8005746:	2b04      	cmp	r3, #4
 8005748:	d003      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x3a>
 800574a:	e0b7      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800574e:	60bb      	str	r3, [r7, #8]
       break;
 8005750:	e0b7      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005752:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005754:	60bb      	str	r3, [r7, #8]
      break;
 8005756:	e0b4      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005758:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04d      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576e:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	461a      	mov	r2, r3
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	ea02 0800 	and.w	r8, r2, r0
 8005786:	ea03 0901 	and.w	r9, r3, r1
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	014b      	lsls	r3, r1, #5
 8005798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800579c:	0142      	lsls	r2, r0, #5
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	ebb0 0008 	subs.w	r0, r0, r8
 80057a6:	eb61 0109 	sbc.w	r1, r1, r9
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	018b      	lsls	r3, r1, #6
 80057b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057b8:	0182      	lsls	r2, r0, #6
 80057ba:	1a12      	subs	r2, r2, r0
 80057bc:	eb63 0301 	sbc.w	r3, r3, r1
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	00d9      	lsls	r1, r3, #3
 80057ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ce:	00d0      	lsls	r0, r2, #3
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	eb12 0208 	adds.w	r2, r2, r8
 80057d8:	eb43 0309 	adc.w	r3, r3, r9
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0259      	lsls	r1, r3, #9
 80057e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80057ea:	0250      	lsls	r0, r2, #9
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f7fa fce4 	bl	80001c8 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e04a      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	099b      	lsrs	r3, r3, #6
 8005810:	461a      	mov	r2, r3
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	ea02 0400 	and.w	r4, r2, r0
 8005822:	ea03 0501 	and.w	r5, r3, r1
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	014b      	lsls	r3, r1, #5
 8005834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005838:	0142      	lsls	r2, r0, #5
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	1b00      	subs	r0, r0, r4
 8005840:	eb61 0105 	sbc.w	r1, r1, r5
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	018b      	lsls	r3, r1, #6
 800584e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005852:	0182      	lsls	r2, r0, #6
 8005854:	1a12      	subs	r2, r2, r0
 8005856:	eb63 0301 	sbc.w	r3, r3, r1
 800585a:	f04f 0000 	mov.w	r0, #0
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	00d9      	lsls	r1, r3, #3
 8005864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005868:	00d0      	lsls	r0, r2, #3
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	1912      	adds	r2, r2, r4
 8005870:	eb45 0303 	adc.w	r3, r5, r3
 8005874:	f04f 0000 	mov.w	r0, #0
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	0299      	lsls	r1, r3, #10
 800587e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005882:	0290      	lsls	r0, r2, #10
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	461a      	mov	r2, r3
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f7fa fc98 	bl	80001c8 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	60bb      	str	r3, [r7, #8]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058be:	60bb      	str	r3, [r7, #8]
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	68bb      	ldr	r3, [r7, #8]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	007a1200 	.word	0x007a1200

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	0800a8f0 	.word	0x0800a8f0

0800591c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d035      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005944:	4b62      	ldr	r3, [pc, #392]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800594a:	f7fc fcfd 	bl	8002348 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005952:	f7fc fcf9 	bl	8002348 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0b0      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005964:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	019a      	lsls	r2, r3, #6
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	071b      	lsls	r3, r3, #28
 800597c:	4955      	ldr	r1, [pc, #340]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005984:	4b52      	ldr	r3, [pc, #328]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800598a:	f7fc fcdd 	bl	8002348 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005992:	f7fc fcd9 	bl	8002348 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e090      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8083 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6413      	str	r3, [r2, #64]	; 0x40
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059da:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059e6:	f7fc fcaf 	bl	8002348 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fc fcab 	bl	8002348 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e062      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a0c:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02f      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d028      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a3a:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d114      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a52:	f7fc fc79 	bl	8002348 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fc fc75 	bl	8002348 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e02a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	490d      	ldr	r1, [pc, #52]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]
 8005aa4:	e005      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ab0:	6093      	str	r3, [r2, #8]
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abe:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	42470068 	.word	0x42470068
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000
 8005adc:	42470e40 	.word	0x42470e40

08005ae0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d13e      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d12f      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b16:	617b      	str	r3, [r7, #20]
          break;
 8005b18:	e02f      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b26:	d108      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	e007      	b.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b50:	099b      	lsrs	r3, r3, #6
 8005b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b64:	0f1b      	lsrs	r3, r3, #28
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
          break;
 8005b72:	e002      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
          break;
 8005b78:	bf00      	nop
        }
      }
      break;
 8005b7a:	bf00      	nop
    }
  }
  return frequency;
 8005b7c:	697b      	ldr	r3, [r7, #20]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	00bb8000 	.word	0x00bb8000
 8005b94:	007a1200 	.word	0x007a1200
 8005b98:	00f42400 	.word	0x00f42400

08005b9c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e01c      	b.n	8005be8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	795b      	ldrb	r3, [r3, #5]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fc86 	bl	80014d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0204 	orr.w	r2, r2, #4
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	791b      	ldrb	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e03d      	b.n	8005c86 <HAL_RNG_GenerateRandomNumber+0x96>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	795b      	ldrb	r3, [r3, #5]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d12c      	bne.n	8005c74 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c20:	f7fc fb92 	bl	8002348 <HAL_GetTick>
 8005c24:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c26:	e011      	b.n	8005c4c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c28:	f7fc fb8e 	bl	8002348 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d90a      	bls.n	8005c4c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e01c      	b.n	8005c86 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d1e6      	bne.n	8005c28 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	715a      	strb	r2, [r3, #5]
 8005c72:	e004      	b.n	8005c7e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	711a      	strb	r2, [r3, #4]

  return status;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ffa7 	bl	8005bf0 <HAL_RNG_GenerateRandomNumber>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	e000      	b.n	8005cb0 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005cae:	2300      	movs	r3, #0
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e07b      	b.n	8005dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d009      	beq.n	8005cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	61da      	str	r2, [r3, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fb fc02 	bl	8001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	ea42 0103 	orr.w	r1, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	f003 0104 	and.w	r1, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	f003 0210 	and.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	603b      	str	r3, [r7, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_SPI_Transmit+0x22>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e126      	b.n	800603a <HAL_SPI_Transmit+0x270>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df4:	f7fc faa8 	bl	8002348 <HAL_GetTick>
 8005df8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e0e:	e10b      	b.n	8006028 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_Transmit+0x52>
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e20:	e102      	b.n	8006028 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2203      	movs	r2, #3
 8005e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e68:	d10f      	bne.n	8005e8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d007      	beq.n	8005ea8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d14b      	bne.n	8005f4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_SPI_Transmit+0xf6>
 8005eba:	8afb      	ldrh	r3, [r7, #22]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d13e      	bne.n	8005f3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	881a      	ldrh	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	1c9a      	adds	r2, r3, #2
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ee4:	e02b      	b.n	8005f3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d112      	bne.n	8005f1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	881a      	ldrh	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	1c9a      	adds	r2, r3, #2
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f18:	e011      	b.n	8005f3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f1a:	f7fc fa15 	bl	8002348 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d803      	bhi.n	8005f32 <HAL_SPI_Transmit+0x168>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f30:	d102      	bne.n	8005f38 <HAL_SPI_Transmit+0x16e>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f3c:	e074      	b.n	8006028 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ce      	bne.n	8005ee6 <HAL_SPI_Transmit+0x11c>
 8005f48:	e04c      	b.n	8005fe4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_Transmit+0x18e>
 8005f52:	8afb      	ldrh	r3, [r7, #22]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d140      	bne.n	8005fda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	7812      	ldrb	r2, [r2, #0]
 8005f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f7e:	e02c      	b.n	8005fda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d113      	bne.n	8005fb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fb4:	e011      	b.n	8005fda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb6:	f7fc f9c7 	bl	8002348 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d803      	bhi.n	8005fce <HAL_SPI_Transmit+0x204>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fcc:	d102      	bne.n	8005fd4 <HAL_SPI_Transmit+0x20a>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fd8:	e026      	b.n	8006028 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1cd      	bne.n	8005f80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f8b3 	bl	8006154 <SPI_EndRxTxTransaction>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e000      	b.n	8006028 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006038:	7ffb      	ldrb	r3, [r7, #31]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006054:	f7fc f978 	bl	8002348 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	4413      	add	r3, r2
 8006062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006064:	f7fc f970 	bl	8002348 <HAL_GetTick>
 8006068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	015b      	lsls	r3, r3, #5
 8006070:	0d1b      	lsrs	r3, r3, #20
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	fb02 f303 	mul.w	r3, r2, r3
 8006078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607a:	e054      	b.n	8006126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006082:	d050      	beq.n	8006126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006084:	f7fc f960 	bl	8002348 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	429a      	cmp	r2, r3
 8006092:	d902      	bls.n	800609a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d13d      	bne.n	8006116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b2:	d111      	bne.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060bc:	d004      	beq.n	80060c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c6:	d107      	bne.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e0:	d10f      	bne.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e017      	b.n	8006146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3b01      	subs	r3, #1
 8006124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4013      	ands	r3, r2
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	429a      	cmp	r2, r3
 8006142:	d19b      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000004 	.word	0x20000004

08006154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <SPI_EndRxTxTransaction+0x7c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <SPI_EndRxTxTransaction+0x80>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	0d5b      	lsrs	r3, r3, #21
 800616c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617e:	d112      	bne.n	80061a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff5a 	bl	8006044 <SPI_WaitFlagStateUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f043 0220 	orr.w	r2, r3, #32
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e00f      	b.n	80061c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d0f2      	beq.n	80061a6 <SPI_EndRxTxTransaction+0x52>
 80061c0:	e000      	b.n	80061c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80061c2:	bf00      	nop
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000004 	.word	0x20000004
 80061d4:	165e9f81 	.word	0x165e9f81

080061d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e041      	b.n	800626e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb fa6e 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f000 fd68 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e04e      	b.n	800632e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <HAL_TIM_Base_Start_IT+0xc4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ba:	d01d      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <HAL_TIM_Base_Start_IT+0xc8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <HAL_TIM_Base_Start_IT+0xcc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIM_Base_Start_IT+0xd0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_TIM_Base_Start_IT+0xd4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x80>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_TIM_Base_Start_IT+0xdc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d111      	bne.n	800631c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b06      	cmp	r3, #6
 8006308:	d010      	beq.n	800632c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	e007      	b.n	800632c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40010000 	.word	0x40010000
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40010400 	.word	0x40010400
 8006350:	40014000 	.word	0x40014000
 8006354:	40001800 	.word	0x40001800

08006358 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_TIM_OC_Start_IT+0x24>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e022      	b.n	80063c2 <HAL_TIM_OC_Start_IT+0x6a>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d109      	bne.n	8006396 <HAL_TIM_OC_Start_IT+0x3e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e015      	b.n	80063c2 <HAL_TIM_OC_Start_IT+0x6a>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_OC_Start_IT+0x58>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e008      	b.n	80063c2 <HAL_TIM_OC_Start_IT+0x6a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e0c2      	b.n	8006550 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <HAL_TIM_OC_Start_IT+0x82>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	e013      	b.n	8006402 <HAL_TIM_OC_Start_IT+0xaa>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d104      	bne.n	80063ea <HAL_TIM_OC_Start_IT+0x92>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e8:	e00b      	b.n	8006402 <HAL_TIM_OC_Start_IT+0xaa>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_OC_Start_IT+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f8:	e003      	b.n	8006402 <HAL_TIM_OC_Start_IT+0xaa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	d841      	bhi.n	800648c <HAL_TIM_OC_Start_IT+0x134>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_TIM_OC_Start_IT+0xb8>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006445 	.word	0x08006445
 8006414:	0800648d 	.word	0x0800648d
 8006418:	0800648d 	.word	0x0800648d
 800641c:	0800648d 	.word	0x0800648d
 8006420:	08006457 	.word	0x08006457
 8006424:	0800648d 	.word	0x0800648d
 8006428:	0800648d 	.word	0x0800648d
 800642c:	0800648d 	.word	0x0800648d
 8006430:	08006469 	.word	0x08006469
 8006434:	0800648d 	.word	0x0800648d
 8006438:	0800648d 	.word	0x0800648d
 800643c:	0800648d 	.word	0x0800648d
 8006440:	0800647b 	.word	0x0800647b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0202 	orr.w	r2, r2, #2
 8006452:	60da      	str	r2, [r3, #12]
      break;
 8006454:	e01b      	b.n	800648e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0204 	orr.w	r2, r2, #4
 8006464:	60da      	str	r2, [r3, #12]
      break;
 8006466:	e012      	b.n	800648e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0208 	orr.w	r2, r2, #8
 8006476:	60da      	str	r2, [r3, #12]
      break;
 8006478:	e009      	b.n	800648e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0210 	orr.w	r2, r2, #16
 8006488:	60da      	str	r2, [r3, #12]
      break;
 800648a:	e000      	b.n	800648e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800648c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2201      	movs	r2, #1
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 ff12 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <HAL_TIM_OC_Start_IT+0x200>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_OC_Start_IT+0x158>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_TIM_OC_Start_IT+0x204>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <HAL_TIM_OC_Start_IT+0x15c>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_TIM_OC_Start_IT+0x15e>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_TIM_OC_Start_IT+0x200>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d022      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d01d      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <HAL_TIM_OC_Start_IT+0x208>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d018      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <HAL_TIM_OC_Start_IT+0x20c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <HAL_TIM_OC_Start_IT+0x210>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a16      	ldr	r2, [pc, #88]	; (800655c <HAL_TIM_OC_Start_IT+0x204>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_TIM_OC_Start_IT+0x214>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIM_OC_Start_IT+0x1c2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <HAL_TIM_OC_Start_IT+0x218>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d111      	bne.n	800653e <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d010      	beq.n	800654e <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	e007      	b.n	800654e <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40000c00 	.word	0x40000c00
 800656c:	40014000 	.word	0x40014000
 8006570:	40001800 	.word	0x40001800

08006574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e041      	b.n	800660a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f839 	bl	8006612 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f000 fb9a 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e097      	b.n	800676a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa fffe 	bl	8001650 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f000 fb36 	bl	8006cec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a8:	f023 0303 	bic.w	r3, r3, #3
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	4313      	orrs	r3, r2
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066c6:	f023 030c 	bic.w	r3, r3, #12
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	4313      	orrs	r3, r2
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	011a      	lsls	r2, r3, #4
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	4313      	orrs	r3, r2
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006704:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800670c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	4313      	orrs	r3, r2
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d122      	bne.n	80067ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d11b      	bne.n	80067ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f06f 0202 	mvn.w	r2, #2
 800679e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fa7b 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 80067ba:	e005      	b.n	80067c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa6d 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa7e 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d122      	bne.n	8006822 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d11b      	bne.n	8006822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0204 	mvn.w	r2, #4
 80067f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa51 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 800680e:	e005      	b.n	800681c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa43 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa54 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b08      	cmp	r3, #8
 800682e:	d122      	bne.n	8006876 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b08      	cmp	r3, #8
 800683c:	d11b      	bne.n	8006876 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0208 	mvn.w	r2, #8
 8006846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2204      	movs	r2, #4
 800684c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa27 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 8006862:	e005      	b.n	8006870 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa19 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa2a 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b10      	cmp	r3, #16
 8006882:	d122      	bne.n	80068ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	d11b      	bne.n	80068ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0210 	mvn.w	r2, #16
 800689a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2208      	movs	r2, #8
 80068a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9fd 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 80068b6:	e005      	b.n	80068c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9ef 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa00 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d10e      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d107      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f06f 0201 	mvn.w	r2, #1
 80068ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9c9 	bl	8006c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	d10e      	bne.n	8006922 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d107      	bne.n	8006922 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800691a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fd7b 	bl	8007418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d10e      	bne.n	800694e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d107      	bne.n	800694e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9c5 	bl	8006cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b20      	cmp	r3, #32
 800695a:	d10e      	bne.n	800697a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d107      	bne.n	800697a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0220 	mvn.w	r2, #32
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fd45 	bl	8007404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800699a:	2302      	movs	r3, #2
 800699c:	e0ac      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	f200 809f 	bhi.w	8006aec <HAL_TIM_PWM_ConfigChannel+0x168>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	08006aed 	.word	0x08006aed
 80069bc:	08006aed 	.word	0x08006aed
 80069c0:	08006aed 	.word	0x08006aed
 80069c4:	08006a29 	.word	0x08006a29
 80069c8:	08006aed 	.word	0x08006aed
 80069cc:	08006aed 	.word	0x08006aed
 80069d0:	08006aed 	.word	0x08006aed
 80069d4:	08006a6b 	.word	0x08006a6b
 80069d8:	08006aed 	.word	0x08006aed
 80069dc:	08006aed 	.word	0x08006aed
 80069e0:	08006aed 	.word	0x08006aed
 80069e4:	08006aab 	.word	0x08006aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fa1c 	bl	8006e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0204 	bic.w	r2, r2, #4
 8006a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6999      	ldr	r1, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	619a      	str	r2, [r3, #24]
      break;
 8006a26:	e062      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fa6c 	bl	8006f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6999      	ldr	r1, [r3, #24]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	021a      	lsls	r2, r3, #8
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	619a      	str	r2, [r3, #24]
      break;
 8006a68:	e041      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fac1 	bl	8006ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0208 	orr.w	r2, r2, #8
 8006a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0204 	bic.w	r2, r2, #4
 8006a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	61da      	str	r2, [r3, #28]
      break;
 8006aa8:	e021      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fb15 	bl	80070e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69d9      	ldr	r1, [r3, #28]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	021a      	lsls	r2, r3, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	61da      	str	r2, [r3, #28]
      break;
 8006aea:	e000      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIM_ConfigClockSource+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e0b3      	b.n	8006c80 <HAL_TIM_ConfigClockSource+0x180>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b50:	d03e      	beq.n	8006bd0 <HAL_TIM_ConfigClockSource+0xd0>
 8006b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b56:	f200 8087 	bhi.w	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	f000 8085 	beq.w	8006c6c <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b66:	d87f      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b68:	2b70      	cmp	r3, #112	; 0x70
 8006b6a:	d01a      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0xa2>
 8006b6c:	2b70      	cmp	r3, #112	; 0x70
 8006b6e:	d87b      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b70:	2b60      	cmp	r3, #96	; 0x60
 8006b72:	d050      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x116>
 8006b74:	2b60      	cmp	r3, #96	; 0x60
 8006b76:	d877      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b78:	2b50      	cmp	r3, #80	; 0x50
 8006b7a:	d03c      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8006b7c:	2b50      	cmp	r3, #80	; 0x50
 8006b7e:	d873      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d058      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x136>
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	d86f      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b88:	2b30      	cmp	r3, #48	; 0x30
 8006b8a:	d064      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x156>
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d86b      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d060      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x156>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d867      	bhi.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05c      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x156>
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d05a      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ba0:	e062      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6899      	ldr	r1, [r3, #8]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f000 fb65 	bl	8007280 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	609a      	str	r2, [r3, #8]
      break;
 8006bce:	e04e      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f000 fb4e 	bl	8007280 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bf2:	609a      	str	r2, [r3, #8]
      break;
 8006bf4:	e03b      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6859      	ldr	r1, [r3, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f000 fac2 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2150      	movs	r1, #80	; 0x50
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fb1b 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006c14:	e02b      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6859      	ldr	r1, [r3, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f000 fae1 	bl	80071ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2160      	movs	r1, #96	; 0x60
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fb0b 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006c34:	e01b      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6859      	ldr	r1, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f000 faa2 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2140      	movs	r1, #64	; 0x40
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fafb 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006c54:	e00b      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f000 faf2 	bl	800724a <TIM_ITRx_SetConfig>
        break;
 8006c66:	e002      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a40      	ldr	r2, [pc, #256]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d00f      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3d      	ldr	r2, [pc, #244]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3b      	ldr	r2, [pc, #236]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3a      	ldr	r2, [pc, #232]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d108      	bne.n	8006d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d02b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d027      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d023      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d017      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a27      	ldr	r2, [pc, #156]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00f      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a26      	ldr	r2, [pc, #152]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <TIM_Base_SetConfig+0x134>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a24      	ldr	r2, [pc, #144]	; (8006e24 <TIM_Base_SetConfig+0x138>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <TIM_Base_SetConfig+0x13c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	615a      	str	r2, [r3, #20]
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40010400 	.word	0x40010400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40014400 	.word	0x40014400
 8006e1c:	40014800 	.word	0x40014800
 8006e20:	40001800 	.word	0x40001800
 8006e24:	40001c00 	.word	0x40001c00
 8006e28:	40002000 	.word	0x40002000

08006e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f023 0302 	bic.w	r3, r3, #2
 8006e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <TIM_OC1_SetConfig+0xd8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC1_SetConfig+0x64>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <TIM_OC1_SetConfig+0xdc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10c      	bne.n	8006eaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 0308 	bic.w	r3, r3, #8
 8006e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0304 	bic.w	r3, r3, #4
 8006ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <TIM_OC1_SetConfig+0xd8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_OC1_SetConfig+0x8e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <TIM_OC1_SetConfig+0xdc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d111      	bne.n	8006ede <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0210 	bic.w	r2, r3, #16
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0320 	bic.w	r3, r3, #32
 8006f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <TIM_OC2_SetConfig+0xe4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC2_SetConfig+0x68>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <TIM_OC2_SetConfig+0xe8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10d      	bne.n	8006f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <TIM_OC2_SetConfig+0xe4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_OC2_SetConfig+0x94>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <TIM_OC2_SetConfig+0xe8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d113      	bne.n	8006fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <TIM_OC3_SetConfig+0xe0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_OC3_SetConfig+0x66>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <TIM_OC3_SetConfig+0xe4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d10d      	bne.n	800707a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <TIM_OC3_SetConfig+0xe0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC3_SetConfig+0x92>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a15      	ldr	r2, [pc, #84]	; (80070dc <TIM_OC3_SetConfig+0xe4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d113      	bne.n	80070b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40010400 	.word	0x40010400

080070e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800712a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a12      	ldr	r2, [pc, #72]	; (8007184 <TIM_OC4_SetConfig+0xa4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_OC4_SetConfig+0x68>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a11      	ldr	r2, [pc, #68]	; (8007188 <TIM_OC4_SetConfig+0xa8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d109      	bne.n	800715c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800714e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 030a 	bic.w	r3, r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	f043 0307 	orr.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e05a      	b.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d01d      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1a      	ldr	r2, [pc, #104]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a17      	ldr	r2, [pc, #92]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a15      	ldr	r2, [pc, #84]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10c      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40000c00 	.word	0x40000c00
 80073f8:	40010400 	.word	0x40010400
 80073fc:	40014000 	.word	0x40014000
 8007400:	40001800 	.word	0x40001800

08007404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800742c:	b084      	sub	sp, #16
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	f107 001c 	add.w	r0, r7, #28
 800743a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2b01      	cmp	r3, #1
 8007442:	d122      	bne.n	800748a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800746c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d105      	bne.n	800747e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f94a 	bl	8007718 <USB_CoreReset>
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e01a      	b.n	80074c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f93e 	bl	8007718 <USB_CoreReset>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38
 80074b2:	e005      	b.n	80074c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d10b      	bne.n	80074de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f043 0206 	orr.w	r2, r3, #6
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074ea:	b004      	add	sp, #16
 80074ec:	4770      	bx	lr

080074ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f043 0201 	orr.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 0201 	bic.w	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d106      	bne.n	800755e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e00b      	b.n	8007576 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	e001      	b.n	8007576 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e003      	b.n	800757e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007576:	2032      	movs	r0, #50	; 0x32
 8007578:	f7fa fef2 	bl	8002360 <HAL_Delay>

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <USB_FlushTxFifo+0x48>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d0f0      	beq.n	80075a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	00030d40 	.word	0x00030d40

080075d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2210      	movs	r2, #16
 80075e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <USB_FlushRxFifo+0x40>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e006      	b.n	8007606 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b10      	cmp	r3, #16
 8007602:	d0f0      	beq.n	80075e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	00030d40 	.word	0x00030d40

08007618 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	460b      	mov	r3, r1
 8007628:	71fb      	strb	r3, [r7, #7]
 800762a:	4613      	mov	r3, r2
 800762c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11a      	bne.n	8007674 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800763e:	88bb      	ldrh	r3, [r7, #4]
 8007640:	3303      	adds	r3, #3
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e00f      	b.n	800766c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	031a      	lsls	r2, r3, #12
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	461a      	mov	r2, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3304      	adds	r3, #4
 8007664:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3301      	adds	r3, #1
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d3eb      	bcc.n	800764c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007682:	b480      	push	{r7}
 8007684:	b089      	sub	sp, #36	; 0x24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	4613      	mov	r3, r2
 800768e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	3303      	adds	r3, #3
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e00b      	b.n	80076be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3304      	adds	r3, #4
 80076b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3ef      	bcc.n	80076a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3724      	adds	r7, #36	; 0x24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f003 0301 	and.w	r3, r3, #1
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <USB_CoreReset+0x64>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e01b      	b.n	800776e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	daf2      	bge.n	8007724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f043 0201 	orr.w	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <USB_CoreReset+0x64>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d0f0      	beq.n	800774e <USB_CoreReset+0x36>

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	00030d40 	.word	0x00030d40

08007780 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007780:	b084      	sub	sp, #16
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	f107 001c 	add.w	r0, r7, #28
 800778e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800779c:	461a      	mov	r2, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d018      	beq.n	8007804 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d10a      	bne.n	80077ee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077e6:	f043 0304 	orr.w	r3, r3, #4
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e014      	b.n	8007818 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e009      	b.n	8007818 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007812:	f023 0304 	bic.w	r3, r3, #4
 8007816:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007818:	2110      	movs	r1, #16
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff feb4 	bl	8007588 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fed7 	bl	80075d4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e015      	b.n	8007858 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007838:	461a      	mov	r2, r3
 800783a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800783e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784c:	461a      	mov	r2, r3
 800784e:	2300      	movs	r3, #0
 8007850:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	429a      	cmp	r2, r3
 800785e:	d3e5      	bcc.n	800782c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8ac 	bl	80079c0 <USB_DriveVbus>

  HAL_Delay(200U);
 8007868:	20c8      	movs	r0, #200	; 0xc8
 800786a:	f7fa fd79 	bl	8002360 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800787a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <USB_HostInit+0x164>)
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <USB_HostInit+0x168>)
 800789a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800789e:	e009      	b.n	80078b4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2280      	movs	r2, #128	; 0x80
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a10      	ldr	r2, [pc, #64]	; (80078ec <USB_HostInit+0x16c>)
 80078aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a10      	ldr	r2, [pc, #64]	; (80078f0 <USB_HostInit+0x170>)
 80078b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f043 0210 	orr.w	r2, r3, #16
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <USB_HostInit+0x174>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078de:	b004      	add	sp, #16
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	01000200 	.word	0x01000200
 80078e8:	00e00300 	.word	0x00e00300
 80078ec:	00600080 	.word	0x00600080
 80078f0:	004000e0 	.word	0x004000e0
 80078f4:	a3200008 	.word	0xa3200008

080078f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007930:	4313      	orrs	r3, r2
 8007932:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d107      	bne.n	800794a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007940:	461a      	mov	r2, r3
 8007942:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007946:	6053      	str	r3, [r2, #4]
 8007948:	e009      	b.n	800795e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d106      	bne.n	800795e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007956:	461a      	mov	r2, r3
 8007958:	f241 7370 	movw	r3, #6000	; 0x1770
 800795c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800798c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800799a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800799c:	2064      	movs	r0, #100	; 0x64
 800799e:	f7fa fcdf 	bl	8002360 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80079b0:	200a      	movs	r0, #10
 80079b2:	f7fa fcd5 	bl	8002360 <HAL_Delay>

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <USB_DriveVbus+0x44>
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d106      	bne.n	8007a04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	d109      	bne.n	8007a24 <USB_DriveVbus+0x64>
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	0c5b      	lsrs	r3, r3, #17
 8007a50:	f003 0303 	and.w	r3, r3, #3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	b29b      	uxth	r3, r3
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
	...

08007a84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	461a      	mov	r2, r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	70fb      	strb	r3, [r7, #3]
 8007a96:	460b      	mov	r3, r1
 8007a98:	70bb      	strb	r3, [r7, #2]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ab8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007aba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d87e      	bhi.n	8007bc0 <USB_HC_Init+0x13c>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USB_HC_Init+0x44>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007b83 	.word	0x08007b83
 8007ad0:	08007ad9 	.word	0x08007ad9
 8007ad4:	08007b45 	.word	0x08007b45
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f240 439d 	movw	r3, #1181	; 0x49d
 8007aea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007aec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da10      	bge.n	8007b16 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	0151      	lsls	r1, r2, #5
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	440a      	add	r2, r1
 8007b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b12:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007b14:	e057      	b.n	8007bc6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d051      	beq.n	8007bc6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b40:	60d3      	str	r3, [r2, #12]
      break;
 8007b42:	e040      	b.n	8007bc6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b50:	461a      	mov	r2, r3
 8007b52:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da34      	bge.n	8007bca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b80:	e023      	b.n	8007bca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f240 2325 	movw	r3, #549	; 0x225
 8007b94:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da17      	bge.n	8007bce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007bbc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007bbe:	e006      	b.n	8007bce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	77fb      	strb	r3, [r7, #31]
      break;
 8007bc4:	e004      	b.n	8007bd0 <USB_HC_Init+0x14c>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <USB_HC_Init+0x14c>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <USB_HC_Init+0x14c>
      break;
 8007bce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	2101      	movs	r1, #1
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	6939      	ldr	r1, [r7, #16]
 8007be6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bea:	4313      	orrs	r3, r2
 8007bec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007bfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da03      	bge.n	8007c0a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e001      	b.n	8007c0e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff ff0f 	bl	8007a32 <USB_GetHostSpeed>
 8007c14:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d106      	bne.n	8007c2c <USB_HC_Init+0x1a8>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d003      	beq.n	8007c2c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e001      	b.n	8007c30 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c30:	787b      	ldrb	r3, [r7, #1]
 8007c32:	059b      	lsls	r3, r3, #22
 8007c34:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c38:	78bb      	ldrb	r3, [r7, #2]
 8007c3a:	02db      	lsls	r3, r3, #11
 8007c3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c40:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c46:	049b      	lsls	r3, r3, #18
 8007c48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	0159      	lsls	r1, r3, #5
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	440b      	add	r3, r1
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c66:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c6c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d10f      	bne.n	8007c96 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c94:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	; 0x30
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	4613      	mov	r3, r2
 8007cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cbc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d02d      	beq.n	8007d26 <USB_HC_StartXfer+0x86>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d129      	bne.n	8007d26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d117      	bne.n	8007d08 <USB_HC_StartXfer+0x68>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	79db      	ldrb	r3, [r3, #7]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <USB_HC_StartXfer+0x48>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	79db      	ldrb	r3, [r3, #7]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d10f      	bne.n	8007d08 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d06:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <USB_HC_StartXfer+0x86>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	795b      	ldrb	r3, [r3, #5]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fa2f 	bl	8008180 <USB_DoPing>
      return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e0f8      	b.n	8007f18 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d018      	beq.n	8007d60 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	8912      	ldrh	r2, [r2, #8]
 8007d36:	4413      	add	r3, r2
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	8912      	ldrh	r2, [r2, #8]
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d42:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d46:	8b7b      	ldrh	r3, [r7, #26]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d90b      	bls.n	8007d64 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007d4c:	8b7b      	ldrh	r3, [r7, #26]
 8007d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	8912      	ldrh	r2, [r2, #8]
 8007d56:	fb02 f203 	mul.w	r2, r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	611a      	str	r2, [r3, #16]
 8007d5e:	e001      	b.n	8007d64 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007d60:	2301      	movs	r3, #1
 8007d62:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	78db      	ldrb	r3, [r3, #3]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	8912      	ldrh	r2, [r2, #8]
 8007d72:	fb02 f203 	mul.w	r2, r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	611a      	str	r2, [r3, #16]
 8007d7a:	e003      	b.n	8007d84 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	695a      	ldr	r2, [r3, #20]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d8e:	04d9      	lsls	r1, r3, #19
 8007d90:	4b63      	ldr	r3, [pc, #396]	; (8007f20 <USB_HC_StartXfer+0x280>)
 8007d92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	7a9b      	ldrb	r3, [r3, #10]
 8007d9a:	075b      	lsls	r3, r3, #29
 8007d9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	0148      	lsls	r0, r1, #5
 8007da4:	6a39      	ldr	r1, [r7, #32]
 8007da6:	4401      	add	r1, r0
 8007da8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007dac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	68d9      	ldr	r1, [r3, #12]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	6a3a      	ldr	r2, [r7, #32]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	7e7b      	ldrb	r3, [r7, #25]
 8007e12:	075b      	lsls	r3, r3, #29
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	0148      	lsls	r0, r1, #5
 8007e18:	6a39      	ldr	r1, [r7, #32]
 8007e1a:	4401      	add	r1, r0
 8007e1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e3a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	78db      	ldrb	r3, [r3, #3]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	e003      	b.n	8007e56 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e54:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e5c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e04e      	b.n	8007f18 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	78db      	ldrb	r3, [r3, #3]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d149      	bne.n	8007f16 <USB_HC_StartXfer+0x276>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d045      	beq.n	8007f16 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	79db      	ldrb	r3, [r3, #7]
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d830      	bhi.n	8007ef4 <USB_HC_StartXfer+0x254>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <USB_HC_StartXfer+0x1f8>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007ecd 	.word	0x08007ecd
 8007ea0:	08007ea9 	.word	0x08007ea9
 8007ea4:	08007ecd 	.word	0x08007ecd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	3303      	adds	r3, #3
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007eb2:	8afa      	ldrh	r2, [r7, #22]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d91c      	bls.n	8007ef8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eca:	e015      	b.n	8007ef8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ed6:	8afa      	ldrh	r2, [r7, #22]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d90a      	bls.n	8007efc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ef2:	e003      	b.n	8007efc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007ef4:	bf00      	nop
 8007ef6:	e002      	b.n	8007efe <USB_HC_StartXfer+0x25e>
        break;
 8007ef8:	bf00      	nop
 8007efa:	e000      	b.n	8007efe <USB_HC_StartXfer+0x25e>
        break;
 8007efc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	68d9      	ldr	r1, [r3, #12]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	785a      	ldrb	r2, [r3, #1]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	9000      	str	r0, [sp, #0]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff fb81 	bl	8007618 <USB_WritePacket>
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	1ff80000 	.word	0x1ff80000

08007f24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	b29b      	uxth	r3, r3
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b089      	sub	sp, #36	; 0x24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	0c9b      	lsrs	r3, r3, #18
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	0fdb      	lsrs	r3, r3, #31
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d104      	bne.n	8007fa0 <USB_HC_Halt+0x5a>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e0e8      	b.n	8008172 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <USB_HC_Halt+0x66>
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d173      	bne.n	8008094 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 80cb 	bne.w	8008170 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d143      	bne.n	800806e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008004:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	440a      	add	r2, r1
 800801c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008024:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	440a      	add	r2, r1
 800803c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008044:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	3301      	adds	r3, #1
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008052:	d81d      	bhi.n	8008090 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800806a:	d0ec      	beq.n	8008046 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800806c:	e080      	b.n	8008170 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	4413      	add	r3, r2
 8008076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	440a      	add	r2, r1
 8008084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800808c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800808e:	e06f      	b.n	8008170 <USB_HC_Halt+0x22a>
            break;
 8008090:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008092:	e06d      	b.n	8008170 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	4413      	add	r3, r2
 800809c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d143      	bne.n	800814c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008102:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	440a      	add	r2, r1
 800811a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800811e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008122:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008130:	d81d      	bhi.n	800816e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008148:	d0ec      	beq.n	8008124 <USB_HC_Halt+0x1de>
 800814a:	e011      	b.n	8008170 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	440a      	add	r2, r1
 8008162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	e000      	b.n	8008170 <USB_HC_Halt+0x22a>
          break;
 800816e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3724      	adds	r7, #36	; 0x24
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008194:	2301      	movs	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	04da      	lsls	r2, r3, #19
 800819c:	4b15      	ldr	r3, [pc, #84]	; (80081f4 <USB_DoPing+0x74>)
 800819e:	4013      	ands	r3, r2
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081de:	461a      	mov	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	1ff80000 	.word	0x1ff80000

080081f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff f981 	bl	8007510 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800820e:	2110      	movs	r1, #16
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff f9b9 	bl	8007588 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff f9dc 	bl	80075d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800821c:	2300      	movs	r3, #0
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	e01f      	b.n	8008262 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008238:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008240:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008248:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4413      	add	r3, r2
 8008252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008256:	461a      	mov	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3301      	adds	r3, #1
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b0f      	cmp	r3, #15
 8008266:	d9dc      	bls.n	8008222 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	e034      	b.n	80082d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008284:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800828c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008294:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a2:	461a      	mov	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3301      	adds	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082b4:	d80c      	bhi.n	80082d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082cc:	d0ec      	beq.n	80082a8 <USB_StopHost+0xb0>
 80082ce:	e000      	b.n	80082d2 <USB_StopHost+0xda>
        break;
 80082d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3301      	adds	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d9c7      	bls.n	800826e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082e4:	461a      	mov	r2, r3
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff f8fa 	bl	80074ee <USB_EnableGlobalInt>

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	af04      	add	r7, sp, #16
 800830a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800830c:	2301      	movs	r3, #1
 800830e:	2202      	movs	r2, #2
 8008310:	2102      	movs	r1, #2
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fc66 	bl	8008be4 <USBH_FindInterface>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2bff      	cmp	r3, #255	; 0xff
 8008320:	d002      	beq.n	8008328 <USBH_CDC_InterfaceInit+0x24>
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d901      	bls.n	800832c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008328:	2302      	movs	r3, #2
 800832a:	e13d      	b.n	80085a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fc3b 	bl	8008bac <USBH_SelectInterface>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008340:	2302      	movs	r3, #2
 8008342:	e131      	b.n	80085a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800834a:	2050      	movs	r0, #80	; 0x50
 800834c:	f002 f9da 	bl	800a704 <malloc>
 8008350:	4603      	mov	r3, r0
 8008352:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008364:	2302      	movs	r3, #2
 8008366:	e11f      	b.n	80085a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008368:	2250      	movs	r2, #80	; 0x50
 800836a:	2100      	movs	r1, #0
 800836c:	68b8      	ldr	r0, [r7, #8]
 800836e:	f002 f9d9 	bl	800a724 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	211a      	movs	r1, #26
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	4413      	add	r3, r2
 800837e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b25b      	sxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	da15      	bge.n	80083b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	211a      	movs	r1, #26
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	4413      	add	r3, r2
 8008396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	211a      	movs	r1, #26
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 fe32 	bl	800a026 <USBH_AllocPipe>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	7819      	ldrb	r1, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	7858      	ldrb	r0, [r3, #1]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	8952      	ldrh	r2, [r2, #10]
 80083e2:	9202      	str	r2, [sp, #8]
 80083e4:	2203      	movs	r2, #3
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	4623      	mov	r3, r4
 80083ec:	4602      	mov	r2, r0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fdea 	bl	8009fc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2200      	movs	r2, #0
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f002 f8f0 	bl	800a5e2 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008402:	2300      	movs	r3, #0
 8008404:	2200      	movs	r2, #0
 8008406:	210a      	movs	r1, #10
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fbeb 	bl	8008be4 <USBH_FindInterface>
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	d002      	beq.n	800841e <USBH_CDC_InterfaceInit+0x11a>
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d901      	bls.n	8008422 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800841e:	2302      	movs	r3, #2
 8008420:	e0c2      	b.n	80085a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	211a      	movs	r1, #26
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	4413      	add	r3, r2
 800842e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b25b      	sxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	da16      	bge.n	8008468 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	211a      	movs	r1, #26
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	4413      	add	r3, r2
 8008446:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800844a:	781a      	ldrb	r2, [r3, #0]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	211a      	movs	r1, #26
 8008456:	fb01 f303 	mul.w	r3, r1, r3
 800845a:	4413      	add	r3, r2
 800845c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008460:	881a      	ldrh	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	835a      	strh	r2, [r3, #26]
 8008466:	e015      	b.n	8008494 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	211a      	movs	r1, #26
 800846e:	fb01 f303 	mul.w	r3, r1, r3
 8008472:	4413      	add	r3, r2
 8008474:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008478:	781a      	ldrb	r2, [r3, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	211a      	movs	r1, #26
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	4413      	add	r3, r2
 800848a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	211a      	movs	r1, #26
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	4413      	add	r3, r2
 80084a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b25b      	sxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da16      	bge.n	80084da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	211a      	movs	r1, #26
 80084b2:	fb01 f303 	mul.w	r3, r1, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	211a      	movs	r1, #26
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	835a      	strh	r2, [r3, #26]
 80084d8:	e015      	b.n	8008506 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	211a      	movs	r1, #26
 80084e0:	fb01 f303 	mul.w	r3, r1, r3
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	211a      	movs	r1, #26
 80084f6:	fb01 f303 	mul.w	r3, r1, r3
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008500:	881a      	ldrh	r2, [r3, #0]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	7b9b      	ldrb	r3, [r3, #14]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fd8a 	bl	800a026 <USBH_AllocPipe>
 8008512:	4603      	mov	r3, r0
 8008514:	461a      	mov	r2, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	7bdb      	ldrb	r3, [r3, #15]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fd80 	bl	800a026 <USBH_AllocPipe>
 8008526:	4603      	mov	r3, r0
 8008528:	461a      	mov	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	7b59      	ldrb	r1, [r3, #13]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	7b98      	ldrb	r0, [r3, #14]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	8b12      	ldrh	r2, [r2, #24]
 8008546:	9202      	str	r2, [sp, #8]
 8008548:	2202      	movs	r2, #2
 800854a:	9201      	str	r2, [sp, #4]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4623      	mov	r3, r4
 8008550:	4602      	mov	r2, r0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fd38 	bl	8009fc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	7b19      	ldrb	r1, [r3, #12]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	7bd8      	ldrb	r0, [r3, #15]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	8b52      	ldrh	r2, [r2, #26]
 8008570:	9202      	str	r2, [sp, #8]
 8008572:	2202      	movs	r2, #2
 8008574:	9201      	str	r2, [sp, #4]
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	4623      	mov	r3, r4
 800857a:	4602      	mov	r2, r0
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 fd23 	bl	8009fc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	7b5b      	ldrb	r3, [r3, #13]
 800858e:	2200      	movs	r2, #0
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f002 f825 	bl	800a5e2 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	7b1b      	ldrb	r3, [r3, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f002 f81e 	bl	800a5e2 <USBH_LL_SetToggle>

  return USBH_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd90      	pop	{r4, r7, pc}

080085b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00e      	beq.n	80085e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fd18 	bl	800a006 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fd43 	bl	800a068 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7b1b      	ldrb	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00e      	beq.n	800860e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7b1b      	ldrb	r3, [r3, #12]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fd05 	bl	800a006 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 fd30 	bl	800a068 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	7b5b      	ldrb	r3, [r3, #13]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00e      	beq.n	8008634 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	7b5b      	ldrb	r3, [r3, #13]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fcf2 	bl	800a006 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	7b5b      	ldrb	r3, [r3, #13]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 fd1d 	bl	800a068 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	4618      	mov	r0, r3
 800864a:	f002 f863 	bl	800a714 <free>
    phost->pActiveClass->pData = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008654:	2200      	movs	r2, #0
 8008656:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3340      	adds	r3, #64	; 0x40
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8b1 	bl	80087e2 <GetLineCoding>
 8008680:	4603      	mov	r3, r0
 8008682:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008690:	2102      	movs	r1, #2
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008696:	7afb      	ldrb	r3, [r7, #11]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d877      	bhi.n	80087b4 <USBH_CDC_Process+0x114>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBH_CDC_Process+0x2c>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086e1 	.word	0x080086e1
 80086d0:	080086e7 	.word	0x080086e7
 80086d4:	08008717 	.word	0x08008717
 80086d8:	0800878b 	.word	0x0800878b
 80086dc:	08008799 	.word	0x08008799
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
      break;
 80086e4:	e06d      	b.n	80087c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f897 	bl	8008820 <SetLineCoding>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008704:	e058      	b.n	80087b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d055      	beq.n	80087b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2204      	movs	r2, #4
 8008710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008714:	e050      	b.n	80087b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3340      	adds	r3, #64	; 0x40
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f860 	bl	80087e2 <GetLineCoding>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d126      	bne.n	800877a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	791b      	ldrb	r3, [r3, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d13b      	bne.n	80087bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008750:	429a      	cmp	r2, r3
 8008752:	d133      	bne.n	80087bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008760:	429a      	cmp	r2, r3
 8008762:	d12b      	bne.n	80087bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800876e:	429a      	cmp	r2, r3
 8008770:	d124      	bne.n	80087bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f958 	bl	8008a28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008778:	e020      	b.n	80087bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d01d      	beq.n	80087bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2204      	movs	r2, #4
 8008784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008788:	e018      	b.n	80087bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f867 	bl	800885e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8da 	bl	800894a <CDC_ProcessReception>
      break;
 8008796:	e014      	b.n	80087c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 ffe3 	bl	8009766 <USBH_ClrFeature>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80087b2:	e005      	b.n	80087c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80087b4:	bf00      	nop
 80087b6:	e004      	b.n	80087c2 <USBH_CDC_Process+0x122>
      break;
 80087b8:	bf00      	nop
 80087ba:	e002      	b.n	80087c2 <USBH_CDC_Process+0x122>
      break;
 80087bc:	bf00      	nop
 80087be:	e000      	b.n	80087c2 <USBH_CDC_Process+0x122>
      break;
 80087c0:	bf00      	nop

  }

  return status;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	22a1      	movs	r2, #161	; 0xa1
 80087f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2221      	movs	r2, #33	; 0x21
 80087f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2207      	movs	r2, #7
 8008808:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2207      	movs	r2, #7
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f988 	bl	8009b26 <USBH_CtlReq>
 8008816:	4603      	mov	r3, r0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2221      	movs	r2, #33	; 0x21
 800882e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2207      	movs	r2, #7
 8008846:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2207      	movs	r2, #7
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f969 	bl	8009b26 <USBH_CtlReq>
 8008854:	4603      	mov	r3, r0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af02      	add	r7, sp, #8
 8008864:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008870:	2300      	movs	r3, #0
 8008872:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800887a:	2b01      	cmp	r3, #1
 800887c:	d002      	beq.n	8008884 <CDC_ProcessTransmission+0x26>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d023      	beq.n	80088ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008882:	e05e      	b.n	8008942 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	8b12      	ldrh	r2, [r2, #24]
 800888c:	4293      	cmp	r3, r2
 800888e:	d90b      	bls.n	80088a8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8b1a      	ldrh	r2, [r3, #24]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	7b5b      	ldrb	r3, [r3, #13]
 800889c:	2001      	movs	r0, #1
 800889e:	9000      	str	r0, [sp, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fb4e 	bl	8009f42 <USBH_BulkSendData>
 80088a6:	e00b      	b.n	80088c0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	7b5b      	ldrb	r3, [r3, #13]
 80088b6:	2001      	movs	r0, #1
 80088b8:	9000      	str	r0, [sp, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 fb41 	bl	8009f42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80088c8:	e03b      	b.n	8008942 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	7b5b      	ldrb	r3, [r3, #13]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fe65 	bl	800a5a0 <USBH_LL_GetURBState>
 80088d6:	4603      	mov	r3, r0
 80088d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d128      	bne.n	8008932 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	8b12      	ldrh	r2, [r2, #24]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d90e      	bls.n	800890a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	8b12      	ldrh	r2, [r2, #24]
 80088f4:	1a9a      	subs	r2, r3, r2
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	8b12      	ldrh	r2, [r2, #24]
 8008902:	441a      	add	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	61da      	str	r2, [r3, #28]
 8008908:	e002      	b.n	8008910 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008920:	e00e      	b.n	8008940 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f868 	bl	8008a00 <USBH_CDC_TransmitCallback>
      break;
 8008930:	e006      	b.n	8008940 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d103      	bne.n	8008940 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008940:	bf00      	nop
  }
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800895c:	2300      	movs	r3, #0
 800895e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008966:	2b03      	cmp	r3, #3
 8008968:	d002      	beq.n	8008970 <CDC_ProcessReception+0x26>
 800896a:	2b04      	cmp	r3, #4
 800896c:	d00e      	beq.n	800898c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800896e:	e043      	b.n	80089f8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6a19      	ldr	r1, [r3, #32]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	8b5a      	ldrh	r2, [r3, #26]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	7b1b      	ldrb	r3, [r3, #12]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fb05 	bl	8009f8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2204      	movs	r2, #4
 8008986:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800898a:	e035      	b.n	80089f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	7b1b      	ldrb	r3, [r3, #12]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 fe04 	bl	800a5a0 <USBH_LL_GetURBState>
 8008998:	4603      	mov	r3, r0
 800899a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800899c:	7cfb      	ldrb	r3, [r7, #19]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d129      	bne.n	80089f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	7b1b      	ldrb	r3, [r3, #12]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fd67 	bl	800a47c <USBH_LL_GetLastXferSize>
 80089ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d016      	beq.n	80089e8 <CDC_ProcessReception+0x9e>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	8b5b      	ldrh	r3, [r3, #26]
 80089be:	461a      	mov	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d910      	bls.n	80089e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	1ad2      	subs	r2, r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	441a      	add	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2203      	movs	r2, #3
 80089e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80089e6:	e006      	b.n	80089f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f80f 	bl	8008a14 <USBH_CDC_ReceiveCallback>
      break;
 80089f6:	bf00      	nop
  }
}
 80089f8:	bf00      	nop
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a50:	2302      	movs	r3, #2
 8008a52:	e029      	b.n	8008aa8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	79fa      	ldrb	r2, [r7, #7]
 8008a58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f81f 	bl	8008ab0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f001 fc37 	bl	800a314 <USBH_LL_Init>

  return USBH_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	e009      	b.n	8008ad6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	33e0      	adds	r3, #224	; 0xe0
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	2200      	movs	r2, #0
 8008ace:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b0e      	cmp	r3, #14
 8008ada:	d9f2      	bls.n	8008ac2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	e009      	b.n	8008af6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afc:	d3f1      	bcc.n	8008ae2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2240      	movs	r2, #64	; 0x40
 8008b22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10e      	bne.n	8008b94 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b7c:	1c59      	adds	r1, r3, #1
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	33de      	adds	r3, #222	; 0xde
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
 8008b92:	e004      	b.n	8008b9e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b94:	2302      	movs	r3, #2
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e001      	b.n	8008b9e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d204      	bcs.n	8008bd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008bd0:	e001      	b.n	8008bd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	70fb      	strb	r3, [r7, #3]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70bb      	strb	r3, [r7, #2]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c0e:	e025      	b.n	8008c5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	221a      	movs	r2, #26
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	3308      	adds	r3, #8
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3302      	adds	r3, #2
 8008c20:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	795b      	ldrb	r3, [r3, #5]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d002      	beq.n	8008c32 <USBH_FindInterface+0x4e>
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	2bff      	cmp	r3, #255	; 0xff
 8008c30:	d111      	bne.n	8008c56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c36:	78ba      	ldrb	r2, [r7, #2]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d002      	beq.n	8008c42 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c3c:	78bb      	ldrb	r3, [r7, #2]
 8008c3e:	2bff      	cmp	r3, #255	; 0xff
 8008c40:	d109      	bne.n	8008c56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c46:	787a      	ldrb	r2, [r7, #1]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d002      	beq.n	8008c52 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c4c:	787b      	ldrb	r3, [r7, #1]
 8008c4e:	2bff      	cmp	r3, #255	; 0xff
 8008c50:	d101      	bne.n	8008c56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	e006      	b.n	8008c64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d9d6      	bls.n	8008c10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c62:	23ff      	movs	r3, #255	; 0xff
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	371c      	adds	r7, #28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fb87 	bl	800a38c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008c7e:	2101      	movs	r1, #1
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fca0 	bl	800a5c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d102      	bne.n	8008cb2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b0b      	cmp	r3, #11
 8008cba:	f200 81b3 	bhi.w	8009024 <USBH_Process+0x394>
 8008cbe:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <USBH_Process+0x34>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008cf5 	.word	0x08008cf5
 8008cc8:	08008d27 	.word	0x08008d27
 8008ccc:	08008d8f 	.word	0x08008d8f
 8008cd0:	08008fbf 	.word	0x08008fbf
 8008cd4:	08009025 	.word	0x08009025
 8008cd8:	08008e33 	.word	0x08008e33
 8008cdc:	08008f65 	.word	0x08008f65
 8008ce0:	08008e69 	.word	0x08008e69
 8008ce4:	08008e89 	.word	0x08008e89
 8008ce8:	08008ea9 	.word	0x08008ea9
 8008cec:	08008ed7 	.word	0x08008ed7
 8008cf0:	08008fa7 	.word	0x08008fa7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 8193 	beq.w	8009028 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d08:	20c8      	movs	r0, #200	; 0xc8
 8008d0a:	f001 fc9a 	bl	800a642 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fb99 	bl	800a446 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d24:	e180      	b.n	8009028 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d3e:	e182      	b.n	8009046 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d4a:	d914      	bls.n	8008d76 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d52:	3301      	adds	r3, #1
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d903      	bls.n	8008d6e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	220d      	movs	r2, #13
 8008d6a:	701a      	strb	r2, [r3, #0]
      break;
 8008d6c:	e16b      	b.n	8009046 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
      break;
 8008d74:	e167      	b.n	8009046 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d7c:	f103 020a 	add.w	r2, r3, #10
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008d86:	200a      	movs	r0, #10
 8008d88:	f001 fc5b 	bl	800a642 <USBH_Delay>
      break;
 8008d8c:	e15b      	b.n	8009046 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d9e:	2104      	movs	r1, #4
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008da4:	2064      	movs	r0, #100	; 0x64
 8008da6:	f001 fc4c 	bl	800a642 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fb24 	bl	800a3f8 <USBH_LL_GetSpeed>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 f92f 	bl	800a026 <USBH_AllocPipe>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008dd0:	2180      	movs	r1, #128	; 0x80
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f927 	bl	800a026 <USBH_AllocPipe>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7919      	ldrb	r1, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008df4:	b292      	uxth	r2, r2
 8008df6:	9202      	str	r2, [sp, #8]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2280      	movs	r2, #128	; 0x80
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f8e0 	bl	8009fc8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7959      	ldrb	r1, [r3, #5]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e1c:	b292      	uxth	r2, r2
 8008e1e:	9202      	str	r2, [sp, #8]
 8008e20:	2200      	movs	r2, #0
 8008e22:	9201      	str	r2, [sp, #4]
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4603      	mov	r3, r0
 8008e28:	2200      	movs	r2, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 f8cc 	bl	8009fc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e30:	e109      	b.n	8009046 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f90c 	bl	8009050 <USBH_HandleEnum>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 80f3 	bne.w	800902c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d103      	bne.n	8008e60 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e5e:	e0e5      	b.n	800902c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2207      	movs	r2, #7
 8008e64:	701a      	strb	r2, [r3, #0]
      break;
 8008e66:	e0e1      	b.n	800902c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80de 	beq.w	8009030 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2208      	movs	r2, #8
 8008e84:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008e86:	e0d3      	b.n	8009030 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fc20 	bl	80096d8 <USBH_SetCfg>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 80ca 	bne.w	8009034 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2209      	movs	r2, #9
 8008ea4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ea6:	e0c5      	b.n	8009034 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc30 	bl	800971e <USBH_SetFeature>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f040 80b9 	bne.w	8009038 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220a      	movs	r2, #10
 8008eca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ecc:	e0b4      	b.n	8009038 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	701a      	strb	r2, [r3, #0]
      break;
 8008ed4:	e0b0      	b.n	8009038 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80ad 	beq.w	800903c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
 8008eee:	e016      	b.n	8008f1e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ef0:	7bfa      	ldrb	r2, [r7, #15]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32de      	adds	r2, #222	; 0xde
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	791a      	ldrb	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d108      	bne.n	8008f18 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008f06:	7bfa      	ldrb	r2, [r7, #15]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	32de      	adds	r2, #222	; 0xde
 8008f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008f16:	e005      	b.n	8008f24 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	73fb      	strb	r3, [r7, #15]
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0e5      	beq.n	8008ef0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d016      	beq.n	8008f5c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d109      	bne.n	8008f54 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2206      	movs	r2, #6
 8008f44:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f52:	e073      	b.n	800903c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220d      	movs	r2, #13
 8008f58:	701a      	strb	r2, [r3, #0]
      break;
 8008f5a:	e06f      	b.n	800903c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	220d      	movs	r2, #13
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e06b      	b.n	800903c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d017      	beq.n	8008f9e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	4798      	blx	r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d103      	bne.n	8008f8e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	220b      	movs	r2, #11
 8008f8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f8c:	e058      	b.n	8009040 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d154      	bne.n	8009040 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	220d      	movs	r2, #13
 8008f9a:	701a      	strb	r2, [r3, #0]
      break;
 8008f9c:	e050      	b.n	8009040 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	220d      	movs	r2, #13
 8008fa2:	701a      	strb	r2, [r3, #0]
      break;
 8008fa4:	e04c      	b.n	8009040 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d049      	beq.n	8009044 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
      }
      break;
 8008fbc:	e042      	b.n	8009044 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff fd72 	bl	8008ab0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d009      	beq.n	8008fea <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ffa:	2105      	movs	r1, #5
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d107      	bne.n	800901c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fe2b 	bl	8008c70 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800901a:	e014      	b.n	8009046 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 f9b5 	bl	800a38c <USBH_LL_Start>
      break;
 8009022:	e010      	b.n	8009046 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009024:	bf00      	nop
 8009026:	e00e      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 8009028:	bf00      	nop
 800902a:	e00c      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 800902c:	bf00      	nop
 800902e:	e00a      	b.n	8009046 <USBH_Process+0x3b6>
    break;
 8009030:	bf00      	nop
 8009032:	e008      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 8009034:	bf00      	nop
 8009036:	e006      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 8009038:	bf00      	nop
 800903a:	e004      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 800903c:	bf00      	nop
 800903e:	e002      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 8009040:	bf00      	nop
 8009042:	e000      	b.n	8009046 <USBH_Process+0x3b6>
      break;
 8009044:	bf00      	nop
  }
  return USBH_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af04      	add	r7, sp, #16
 8009056:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800905c:	2301      	movs	r3, #1
 800905e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b07      	cmp	r3, #7
 8009066:	f200 81c1 	bhi.w	80093ec <USBH_HandleEnum+0x39c>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBH_HandleEnum+0x20>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009091 	.word	0x08009091
 8009074:	0800914f 	.word	0x0800914f
 8009078:	080091b9 	.word	0x080091b9
 800907c:	08009247 	.word	0x08009247
 8009080:	080092b1 	.word	0x080092b1
 8009084:	08009321 	.word	0x08009321
 8009088:	08009367 	.word	0x08009367
 800908c:	080093ad 	.word	0x080093ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009090:	2108      	movs	r1, #8
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa50 	bl	8009538 <USBH_Get_DevDesc>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d130      	bne.n	8009104 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7919      	ldrb	r1, [r3, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090c6:	b292      	uxth	r2, r2
 80090c8:	9202      	str	r2, [sp, #8]
 80090ca:	2200      	movs	r2, #0
 80090cc:	9201      	str	r2, [sp, #4]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4603      	mov	r3, r0
 80090d2:	2280      	movs	r2, #128	; 0x80
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 ff77 	bl	8009fc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7959      	ldrb	r1, [r3, #5]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090ee:	b292      	uxth	r2, r2
 80090f0:	9202      	str	r2, [sp, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	9201      	str	r2, [sp, #4]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	4603      	mov	r3, r0
 80090fa:	2200      	movs	r2, #0
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 ff63 	bl	8009fc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009102:	e175      	b.n	80093f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2b03      	cmp	r3, #3
 8009108:	f040 8172 	bne.w	80093f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009112:	3301      	adds	r3, #1
 8009114:	b2da      	uxtb	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009122:	2b03      	cmp	r3, #3
 8009124:	d903      	bls.n	800912e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	220d      	movs	r2, #13
 800912a:	701a      	strb	r2, [r3, #0]
      break;
 800912c:	e160      	b.n	80093f0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	795b      	ldrb	r3, [r3, #5]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 ff97 	bl	800a068 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	791b      	ldrb	r3, [r3, #4]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 ff91 	bl	800a068 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
      break;
 800914c:	e150      	b.n	80093f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800914e:	2112      	movs	r1, #18
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9f1 	bl	8009538 <USBH_Get_DevDesc>
 8009156:	4603      	mov	r3, r0
 8009158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009166:	e145      	b.n	80093f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b03      	cmp	r3, #3
 800916c:	f040 8142 	bne.w	80093f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009176:	3301      	adds	r3, #1
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009186:	2b03      	cmp	r3, #3
 8009188:	d903      	bls.n	8009192 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	220d      	movs	r2, #13
 800918e:	701a      	strb	r2, [r3, #0]
      break;
 8009190:	e130      	b.n	80093f4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	795b      	ldrb	r3, [r3, #5]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 ff65 	bl	800a068 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	791b      	ldrb	r3, [r3, #4]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 ff5f 	bl	800a068 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
      break;
 80091b6:	e11d      	b.n	80093f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091b8:	2101      	movs	r1, #1
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa68 	bl	8009690 <USBH_SetAddress>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d132      	bne.n	8009230 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80091ca:	2002      	movs	r0, #2
 80091cc:	f001 fa39 	bl	800a642 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2203      	movs	r2, #3
 80091dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7919      	ldrb	r1, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091f2:	b292      	uxth	r2, r2
 80091f4:	9202      	str	r2, [sp, #8]
 80091f6:	2200      	movs	r2, #0
 80091f8:	9201      	str	r2, [sp, #4]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4603      	mov	r3, r0
 80091fe:	2280      	movs	r2, #128	; 0x80
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fee1 	bl	8009fc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7959      	ldrb	r1, [r3, #5]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800921a:	b292      	uxth	r2, r2
 800921c:	9202      	str	r2, [sp, #8]
 800921e:	2200      	movs	r2, #0
 8009220:	9201      	str	r2, [sp, #4]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	4603      	mov	r3, r0
 8009226:	2200      	movs	r2, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fecd 	bl	8009fc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800922e:	e0e3      	b.n	80093f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	2b03      	cmp	r3, #3
 8009234:	f040 80e0 	bne.w	80093f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	220d      	movs	r2, #13
 800923c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	705a      	strb	r2, [r3, #1]
      break;
 8009244:	e0d8      	b.n	80093f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009246:	2109      	movs	r1, #9
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f99d 	bl	8009588 <USBH_Get_CfgDesc>
 800924e:	4603      	mov	r3, r0
 8009250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2204      	movs	r2, #4
 800925c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800925e:	e0cd      	b.n	80093fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b03      	cmp	r3, #3
 8009264:	f040 80ca 	bne.w	80093fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800926e:	3301      	adds	r3, #1
 8009270:	b2da      	uxtb	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800927e:	2b03      	cmp	r3, #3
 8009280:	d903      	bls.n	800928a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	220d      	movs	r2, #13
 8009286:	701a      	strb	r2, [r3, #0]
      break;
 8009288:	e0b8      	b.n	80093fc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	795b      	ldrb	r3, [r3, #5]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fee9 	bl	800a068 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	791b      	ldrb	r3, [r3, #4]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fee3 	bl	800a068 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	701a      	strb	r2, [r3, #0]
      break;
 80092ae:	e0a5      	b.n	80093fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f965 	bl	8009588 <USBH_Get_CfgDesc>
 80092be:	4603      	mov	r3, r0
 80092c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2205      	movs	r2, #5
 80092cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092ce:	e097      	b.n	8009400 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	f040 8094 	bne.w	8009400 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092de:	3301      	adds	r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d903      	bls.n	80092fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	220d      	movs	r2, #13
 80092f6:	701a      	strb	r2, [r3, #0]
      break;
 80092f8:	e082      	b.n	8009400 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	795b      	ldrb	r3, [r3, #5]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 feb1 	bl	800a068 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	791b      	ldrb	r3, [r3, #4]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 feab 	bl	800a068 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
      break;
 800931e:	e06f      	b.n	8009400 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009326:	2b00      	cmp	r3, #0
 8009328:	d019      	beq.n	800935e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009336:	23ff      	movs	r3, #255	; 0xff
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f949 	bl	80095d0 <USBH_Get_StringDesc>
 800933e:	4603      	mov	r3, r0
 8009340:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d103      	bne.n	8009350 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2206      	movs	r2, #6
 800934c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800934e:	e059      	b.n	8009404 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	2b03      	cmp	r3, #3
 8009354:	d156      	bne.n	8009404 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2206      	movs	r2, #6
 800935a:	705a      	strb	r2, [r3, #1]
      break;
 800935c:	e052      	b.n	8009404 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2206      	movs	r2, #6
 8009362:	705a      	strb	r2, [r3, #1]
      break;
 8009364:	e04e      	b.n	8009404 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800936c:	2b00      	cmp	r3, #0
 800936e:	d019      	beq.n	80093a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800937c:	23ff      	movs	r3, #255	; 0xff
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f926 	bl	80095d0 <USBH_Get_StringDesc>
 8009384:	4603      	mov	r3, r0
 8009386:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d103      	bne.n	8009396 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2207      	movs	r2, #7
 8009392:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009394:	e038      	b.n	8009408 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d135      	bne.n	8009408 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2207      	movs	r2, #7
 80093a0:	705a      	strb	r2, [r3, #1]
      break;
 80093a2:	e031      	b.n	8009408 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2207      	movs	r2, #7
 80093a8:	705a      	strb	r2, [r3, #1]
      break;
 80093aa:	e02d      	b.n	8009408 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d017      	beq.n	80093e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093c2:	23ff      	movs	r3, #255	; 0xff
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f903 	bl	80095d0 <USBH_Get_StringDesc>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093d8:	e018      	b.n	800940c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d115      	bne.n	800940c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
      break;
 80093e4:	e012      	b.n	800940c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ea:	e00f      	b.n	800940c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80093ec:	bf00      	nop
 80093ee:	e00e      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 80093f0:	bf00      	nop
 80093f2:	e00c      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 80093f4:	bf00      	nop
 80093f6:	e00a      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 80093f8:	bf00      	nop
 80093fa:	e008      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 80093fc:	bf00      	nop
 80093fe:	e006      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 8009400:	bf00      	nop
 8009402:	e004      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <USBH_HandleEnum+0x3be>
      break;
 800940c:	bf00      	nop
  }
  return Status;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f804 	bl	800945a <USBH_HandleSof>
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b0b      	cmp	r3, #11
 800946a:	d10a      	bne.n	8009482 <USBH_HandleSof+0x28>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
  }
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800949a:	bf00      	nop
}
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80094b6:	bf00      	nop
}
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 ff56 	bl	800a3c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	791b      	ldrb	r3, [r3, #4]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fda3 	bl	800a068 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	795b      	ldrb	r3, [r3, #5]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd9d 	bl	800a068 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af02      	add	r7, sp, #8
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	b29b      	uxth	r3, r3
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f864 	bl	8009626 <USBH_GetDescriptor>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	b292      	uxth	r2, r2
 8009578:	4619      	mov	r1, r3
 800957a:	f000 f918 	bl	80097ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af02      	add	r7, sp, #8
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	331c      	adds	r3, #28
 8009598:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800959a:	887b      	ldrh	r3, [r7, #2]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095a4:	2100      	movs	r1, #0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f83d 	bl	8009626 <USBH_GetDescriptor>
 80095ac:	4603      	mov	r3, r0
 80095ae:	72fb      	strb	r3, [r7, #11]
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d107      	bne.n	80095c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095bc:	887a      	ldrh	r2, [r7, #2]
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f964 	bl	800988e <USBH_ParseCfgDesc>
  }

  return status;
 80095c6:	7afb      	ldrb	r3, [r7, #11]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	461a      	mov	r2, r3
 80095dc:	460b      	mov	r3, r1
 80095de:	72fb      	strb	r3, [r7, #11]
 80095e0:	4613      	mov	r3, r2
 80095e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80095ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80095f4:	893b      	ldrh	r3, [r7, #8]
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	460b      	mov	r3, r1
 80095fa:	2100      	movs	r1, #0
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 f812 	bl	8009626 <USBH_GetDescriptor>
 8009602:	4603      	mov	r3, r0
 8009604:	75fb      	strb	r3, [r7, #23]
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d107      	bne.n	800961c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009612:	893a      	ldrh	r2, [r7, #8]
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fa37 	bl	8009a8a <USBH_ParseStringDesc>
  }

  return status;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	607b      	str	r3, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	72fb      	strb	r3, [r7, #11]
 8009634:	4613      	mov	r3, r2
 8009636:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	789b      	ldrb	r3, [r3, #2]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d11c      	bne.n	800967a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009646:	b2da      	uxtb	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2206      	movs	r2, #6
 8009650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	893a      	ldrh	r2, [r7, #8]
 8009656:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009658:	893b      	ldrh	r3, [r7, #8]
 800965a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800965e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009662:	d104      	bne.n	800966e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f240 4209 	movw	r2, #1033	; 0x409
 800966a:	829a      	strh	r2, [r3, #20]
 800966c:	e002      	b.n	8009674 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8b3a      	ldrh	r2, [r7, #24]
 8009678:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800967a:	8b3b      	ldrh	r3, [r7, #24]
 800967c:	461a      	mov	r2, r3
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fa50 	bl	8009b26 <USBH_CtlReq>
 8009686:	4603      	mov	r3, r0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	789b      	ldrb	r3, [r3, #2]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d10f      	bne.n	80096c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2205      	movs	r2, #5
 80096ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80096c4:	2200      	movs	r2, #0
 80096c6:	2100      	movs	r1, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fa2c 	bl	8009b26 <USBH_CtlReq>
 80096ce:	4603      	mov	r3, r0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	789b      	ldrb	r3, [r3, #2]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d10e      	bne.n	800970a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2209      	movs	r2, #9
 80096f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	887a      	ldrh	r2, [r7, #2]
 80096fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800970a:	2200      	movs	r2, #0
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa09 	bl	8009b26 <USBH_CtlReq>
 8009714:	4603      	mov	r3, r0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	789b      	ldrb	r3, [r3, #2]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d10f      	bne.n	8009752 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2203      	movs	r2, #3
 800973c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	b29a      	uxth	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009752:	2200      	movs	r2, #0
 8009754:	2100      	movs	r1, #0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f9e5 	bl	8009b26 <USBH_CtlReq>
 800975c:	4603      	mov	r3, r0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	789b      	ldrb	r3, [r3, #2]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d10f      	bne.n	800979a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2202      	movs	r2, #2
 800977e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f9c1 	bl	8009b26 <USBH_CtlReq>
 80097a4:	4603      	mov	r3, r0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	4613      	mov	r3, r2
 80097ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	785a      	ldrb	r2, [r3, #1]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3302      	adds	r3, #2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	3303      	adds	r3, #3
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	791a      	ldrb	r2, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	795a      	ldrb	r2, [r3, #5]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	799a      	ldrb	r2, [r3, #6]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	79da      	ldrb	r2, [r3, #7]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	2b08      	cmp	r3, #8
 800980c:	d939      	bls.n	8009882 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3308      	adds	r3, #8
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	b29a      	uxth	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3309      	adds	r3, #9
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	b29b      	uxth	r3, r3
 8009822:	4313      	orrs	r3, r2
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	330a      	adds	r3, #10
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	b29a      	uxth	r2, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	330b      	adds	r3, #11
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	b29b      	uxth	r3, r3
 800983e:	4313      	orrs	r3, r2
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	330c      	adds	r3, #12
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b29a      	uxth	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	330d      	adds	r3, #13
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	b29b      	uxth	r3, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	7b9a      	ldrb	r2, [r3, #14]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	7bda      	ldrb	r2, [r3, #15]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	7c1a      	ldrb	r2, [r3, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	7c5a      	ldrb	r2, [r3, #17]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	745a      	strb	r2, [r3, #17]
  }
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b08a      	sub	sp, #40	; 0x28
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	4613      	mov	r3, r2
 800989a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	785a      	ldrb	r2, [r3, #1]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3302      	adds	r3, #2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3303      	adds	r3, #3
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	791a      	ldrb	r2, [r3, #4]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	795a      	ldrb	r2, [r3, #5]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	799a      	ldrb	r2, [r3, #6]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	79da      	ldrb	r2, [r3, #7]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	7a1a      	ldrb	r2, [r3, #8]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b09      	cmp	r3, #9
 8009908:	d95f      	bls.n	80099ca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800990a:	2309      	movs	r3, #9
 800990c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009912:	e051      	b.n	80099b8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009914:	f107 0316 	add.w	r3, r7, #22
 8009918:	4619      	mov	r1, r3
 800991a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800991c:	f000 f8e8 	bl	8009af0 <USBH_GetNextDesc>
 8009920:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d146      	bne.n	80099b8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800992a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800992e:	221a      	movs	r2, #26
 8009930:	fb02 f303 	mul.w	r3, r2, r3
 8009934:	3308      	adds	r3, #8
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	3302      	adds	r3, #2
 800993c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800993e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009940:	69f8      	ldr	r0, [r7, #28]
 8009942:	f000 f846 	bl	80099d2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800994c:	2300      	movs	r3, #0
 800994e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009950:	e022      	b.n	8009998 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009952:	f107 0316 	add.w	r3, r7, #22
 8009956:	4619      	mov	r1, r3
 8009958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800995a:	f000 f8c9 	bl	8009af0 <USBH_GetNextDesc>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	2b05      	cmp	r3, #5
 8009966:	d117      	bne.n	8009998 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009970:	3201      	adds	r2, #1
 8009972:	00d2      	lsls	r2, r2, #3
 8009974:	211a      	movs	r1, #26
 8009976:	fb01 f303 	mul.w	r3, r1, r3
 800997a:	4413      	add	r3, r2
 800997c:	3308      	adds	r3, #8
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4413      	add	r3, r2
 8009982:	3304      	adds	r3, #4
 8009984:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009988:	69b8      	ldr	r0, [r7, #24]
 800998a:	f000 f851 	bl	8009a30 <USBH_ParseEPDesc>
            ep_ix++;
 800998e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009992:	3301      	adds	r3, #1
 8009994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	791b      	ldrb	r3, [r3, #4]
 800999c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d204      	bcs.n	80099ae <USBH_ParseCfgDesc+0x120>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	885a      	ldrh	r2, [r3, #2]
 80099a8:	8afb      	ldrh	r3, [r7, #22]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d8d1      	bhi.n	8009952 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80099ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b2:	3301      	adds	r3, #1
 80099b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d804      	bhi.n	80099ca <USBH_ParseCfgDesc+0x13c>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	885a      	ldrh	r2, [r3, #2]
 80099c4:	8afb      	ldrh	r3, [r7, #22]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d8a4      	bhi.n	8009914 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80099ca:	bf00      	nop
 80099cc:	3728      	adds	r7, #40	; 0x28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	785a      	ldrb	r2, [r3, #1]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	789a      	ldrb	r2, [r3, #2]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	78da      	ldrb	r2, [r3, #3]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	791a      	ldrb	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	795a      	ldrb	r2, [r3, #5]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	799a      	ldrb	r2, [r3, #6]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	79da      	ldrb	r2, [r3, #7]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	7a1a      	ldrb	r2, [r3, #8]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	721a      	strb	r2, [r3, #8]
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781a      	ldrb	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	785a      	ldrb	r2, [r3, #1]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	789a      	ldrb	r2, [r3, #2]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	78da      	ldrb	r2, [r3, #3]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	3305      	adds	r3, #5
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	799a      	ldrb	r2, [r3, #6]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	719a      	strb	r2, [r3, #6]
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b087      	sub	sp, #28
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	60f8      	str	r0, [r7, #12]
 8009a92:	60b9      	str	r1, [r7, #8]
 8009a94:	4613      	mov	r3, r2
 8009a96:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d120      	bne.n	8009ae4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	1e9a      	subs	r2, r3, #2
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bf28      	it	cs
 8009aae:	4613      	movcs	r3, r2
 8009ab0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	82fb      	strh	r3, [r7, #22]
 8009abc:	e00b      	b.n	8009ad6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009abe:	8afb      	ldrh	r3, [r7, #22]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009ad0:	8afb      	ldrh	r3, [r7, #22]
 8009ad2:	3302      	adds	r3, #2
 8009ad4:	82fb      	strh	r3, [r7, #22]
 8009ad6:	8afa      	ldrh	r2, [r7, #22]
 8009ad8:	8abb      	ldrh	r3, [r7, #20]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d3ef      	bcc.n	8009abe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	881a      	ldrh	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	4413      	add	r3, r2
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	4613      	mov	r3, r2
 8009b32:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	789b      	ldrb	r3, [r3, #2]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d002      	beq.n	8009b46 <USBH_CtlReq+0x20>
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d00f      	beq.n	8009b64 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009b44:	e027      	b.n	8009b96 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	75fb      	strb	r3, [r7, #23]
      break;
 8009b62:	e018      	b.n	8009b96 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f81b 	bl	8009ba0 <USBH_HandleControl>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <USBH_CtlReq+0x54>
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d106      	bne.n	8009b88 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	761a      	strb	r2, [r3, #24]
      break;
 8009b86:	e005      	b.n	8009b94 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d102      	bne.n	8009b94 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	709a      	strb	r2, [r3, #2]
      break;
 8009b94:	bf00      	nop
  }
  return status;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7e1b      	ldrb	r3, [r3, #24]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	2b0a      	cmp	r3, #10
 8009bb8:	f200 8156 	bhi.w	8009e68 <USBH_HandleControl+0x2c8>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBH_HandleControl+0x24>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009bf1 	.word	0x08009bf1
 8009bc8:	08009c0b 	.word	0x08009c0b
 8009bcc:	08009c75 	.word	0x08009c75
 8009bd0:	08009c9b 	.word	0x08009c9b
 8009bd4:	08009cd3 	.word	0x08009cd3
 8009bd8:	08009cfd 	.word	0x08009cfd
 8009bdc:	08009d4f 	.word	0x08009d4f
 8009be0:	08009d71 	.word	0x08009d71
 8009be4:	08009dad 	.word	0x08009dad
 8009be8:	08009dd3 	.word	0x08009dd3
 8009bec:	08009e11 	.word	0x08009e11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f103 0110 	add.w	r1, r3, #16
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	795b      	ldrb	r3, [r3, #5]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f943 	bl	8009e88 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	761a      	strb	r2, [r3, #24]
      break;
 8009c08:	e139      	b.n	8009e7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	795b      	ldrb	r3, [r3, #5]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fcc5 	bl	800a5a0 <USBH_LL_GetURBState>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d11e      	bne.n	8009c5e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7c1b      	ldrb	r3, [r3, #16]
 8009c24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c28:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	8adb      	ldrh	r3, [r3, #22]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009c32:	7b7b      	ldrb	r3, [r7, #13]
 8009c34:	2b80      	cmp	r3, #128	; 0x80
 8009c36:	d103      	bne.n	8009c40 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c3e:	e115      	b.n	8009e6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2205      	movs	r2, #5
 8009c44:	761a      	strb	r2, [r3, #24]
      break;
 8009c46:	e111      	b.n	8009e6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009c48:	7b7b      	ldrb	r3, [r7, #13]
 8009c4a:	2b80      	cmp	r3, #128	; 0x80
 8009c4c:	d103      	bne.n	8009c56 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2209      	movs	r2, #9
 8009c52:	761a      	strb	r2, [r3, #24]
      break;
 8009c54:	e10a      	b.n	8009e6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2207      	movs	r2, #7
 8009c5a:	761a      	strb	r2, [r3, #24]
      break;
 8009c5c:	e106      	b.n	8009e6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d003      	beq.n	8009c6c <USBH_HandleControl+0xcc>
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	f040 8100 	bne.w	8009e6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	220b      	movs	r2, #11
 8009c70:	761a      	strb	r2, [r3, #24]
      break;
 8009c72:	e0fb      	b.n	8009e6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6899      	ldr	r1, [r3, #8]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	899a      	ldrh	r2, [r3, #12]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	791b      	ldrb	r3, [r3, #4]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f93a 	bl	8009f06 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2204      	movs	r2, #4
 8009c96:	761a      	strb	r2, [r3, #24]
      break;
 8009c98:	e0f1      	b.n	8009e7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fc7d 	bl	800a5a0 <USBH_LL_GetURBState>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d102      	bne.n	8009cb6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2209      	movs	r2, #9
 8009cb4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	2b05      	cmp	r3, #5
 8009cba:	d102      	bne.n	8009cc2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cc0:	e0d6      	b.n	8009e70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	f040 80d3 	bne.w	8009e70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	220b      	movs	r2, #11
 8009cce:	761a      	strb	r2, [r3, #24]
      break;
 8009cd0:	e0ce      	b.n	8009e70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6899      	ldr	r1, [r3, #8]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	899a      	ldrh	r2, [r3, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	795b      	ldrb	r3, [r3, #5]
 8009cde:	2001      	movs	r0, #1
 8009ce0:	9000      	str	r0, [sp, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8ea 	bl	8009ebc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2206      	movs	r2, #6
 8009cf8:	761a      	strb	r2, [r3, #24]
      break;
 8009cfa:	e0c0      	b.n	8009e7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	795b      	ldrb	r3, [r3, #5]
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc4c 	bl	800a5a0 <USBH_LL_GetURBState>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d103      	bne.n	8009d1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2207      	movs	r2, #7
 8009d16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d18:	e0ac      	b.n	8009e74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b05      	cmp	r3, #5
 8009d1e:	d105      	bne.n	8009d2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	220c      	movs	r2, #12
 8009d24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009d26:	2303      	movs	r3, #3
 8009d28:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2a:	e0a3      	b.n	8009e74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d103      	bne.n	8009d3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2205      	movs	r2, #5
 8009d36:	761a      	strb	r2, [r3, #24]
      break;
 8009d38:	e09c      	b.n	8009e74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	f040 8099 	bne.w	8009e74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	220b      	movs	r2, #11
 8009d46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d4c:	e092      	b.n	8009e74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8d5 	bl	8009f06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	761a      	strb	r2, [r3, #24]

      break;
 8009d6e:	e086      	b.n	8009e7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fc12 	bl	800a5a0 <USBH_LL_GetURBState>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d105      	bne.n	8009d92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	220d      	movs	r2, #13
 8009d8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d90:	e072      	b.n	8009e78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d103      	bne.n	8009da0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	220b      	movs	r2, #11
 8009d9c:	761a      	strb	r2, [r3, #24]
      break;
 8009d9e:	e06b      	b.n	8009e78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d168      	bne.n	8009e78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009da6:	2303      	movs	r3, #3
 8009da8:	73fb      	strb	r3, [r7, #15]
      break;
 8009daa:	e065      	b.n	8009e78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	795b      	ldrb	r3, [r3, #5]
 8009db0:	2201      	movs	r2, #1
 8009db2:	9200      	str	r2, [sp, #0]
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f87f 	bl	8009ebc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	220a      	movs	r2, #10
 8009dce:	761a      	strb	r2, [r3, #24]
      break;
 8009dd0:	e055      	b.n	8009e7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fbe1 	bl	800a5a0 <USBH_LL_GetURBState>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d105      	bne.n	8009df4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220d      	movs	r2, #13
 8009df0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009df2:	e043      	b.n	8009e7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2209      	movs	r2, #9
 8009dfe:	761a      	strb	r2, [r3, #24]
      break;
 8009e00:	e03c      	b.n	8009e7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d139      	bne.n	8009e7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	220b      	movs	r2, #11
 8009e0c:	761a      	strb	r2, [r3, #24]
      break;
 8009e0e:	e035      	b.n	8009e7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	7e5b      	ldrb	r3, [r3, #25]
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	765a      	strb	r2, [r3, #25]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7e5b      	ldrb	r3, [r3, #25]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d806      	bhi.n	8009e32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e30:	e025      	b.n	8009e7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e38:	2106      	movs	r1, #6
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	795b      	ldrb	r3, [r3, #5]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f90c 	bl	800a068 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f906 	bl	800a068 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009e62:	2302      	movs	r3, #2
 8009e64:	73fb      	strb	r3, [r7, #15]
      break;
 8009e66:	e00a      	b.n	8009e7e <USBH_HandleControl+0x2de>

    default:
      break;
 8009e68:	bf00      	nop
 8009e6a:	e008      	b.n	8009e7e <USBH_HandleControl+0x2de>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e006      	b.n	8009e7e <USBH_HandleControl+0x2de>
      break;
 8009e70:	bf00      	nop
 8009e72:	e004      	b.n	8009e7e <USBH_HandleControl+0x2de>
      break;
 8009e74:	bf00      	nop
 8009e76:	e002      	b.n	8009e7e <USBH_HandleControl+0x2de>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e000      	b.n	8009e7e <USBH_HandleControl+0x2de>
      break;
 8009e7c:	bf00      	nop
  }

  return status;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e96:	79f9      	ldrb	r1, [r7, #7]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	9302      	str	r3, [sp, #8]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2200      	movs	r2, #0
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fb46 	bl	800a53e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af04      	add	r7, sp, #16
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	461a      	mov	r2, r3
 8009eca:	460b      	mov	r3, r1
 8009ecc:	80fb      	strh	r3, [r7, #6]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ee0:	7979      	ldrb	r1, [r7, #5]
 8009ee2:	7e3b      	ldrb	r3, [r7, #24]
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fb21 	bl	800a53e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b088      	sub	sp, #32
 8009f0a:	af04      	add	r7, sp, #16
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	4611      	mov	r1, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	460b      	mov	r3, r1
 8009f16:	80fb      	strh	r3, [r7, #6]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f1c:	7979      	ldrb	r1, [r7, #5]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	9302      	str	r3, [sp, #8]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2201      	movs	r2, #1
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb03 	bl	800a53e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009f38:	2300      	movs	r3, #0

}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	af04      	add	r7, sp, #16
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	460b      	mov	r3, r1
 8009f52:	80fb      	strh	r3, [r7, #6]
 8009f54:	4613      	mov	r3, r2
 8009f56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f66:	7979      	ldrb	r1, [r7, #5]
 8009f68:	7e3b      	ldrb	r3, [r7, #24]
 8009f6a:	9303      	str	r3, [sp, #12]
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	2301      	movs	r3, #1
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2302      	movs	r3, #2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fade 	bl	800a53e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af04      	add	r7, sp, #16
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	80fb      	strh	r3, [r7, #6]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009fa2:	7979      	ldrb	r1, [r7, #5]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 fac0 	bl	800a53e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af04      	add	r7, sp, #16
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	70fb      	strb	r3, [r7, #3]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70bb      	strb	r3, [r7, #2]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009fe2:	7878      	ldrb	r0, [r7, #1]
 8009fe4:	78ba      	ldrb	r2, [r7, #2]
 8009fe6:	78f9      	ldrb	r1, [r7, #3]
 8009fe8:	8b3b      	ldrh	r3, [r7, #24]
 8009fea:	9302      	str	r3, [sp, #8]
 8009fec:	7d3b      	ldrb	r3, [r7, #20]
 8009fee:	9301      	str	r3, [sp, #4]
 8009ff0:	7c3b      	ldrb	r3, [r7, #16]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa53 	bl	800a4a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	460b      	mov	r3, r1
 800a010:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa72 	bl	800a500 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f836 	bl	800a0a4 <USBH_GetFreePipe>
 800a038:	4603      	mov	r3, r0
 800a03a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a03c:	89fb      	ldrh	r3, [r7, #14]
 800a03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a042:	4293      	cmp	r3, r2
 800a044:	d00a      	beq.n	800a05c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	89fb      	ldrh	r3, [r7, #14]
 800a04a:	f003 030f 	and.w	r3, r3, #15
 800a04e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	33e0      	adds	r3, #224	; 0xe0
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a05c:	89fb      	ldrh	r3, [r7, #14]
 800a05e:	b2db      	uxtb	r3, r3
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	2b0a      	cmp	r3, #10
 800a078:	d80d      	bhi.n	800a096 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	33e0      	adds	r3, #224	; 0xe0
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a08c:	6879      	ldr	r1, [r7, #4]
 800a08e:	33e0      	adds	r3, #224	; 0xe0
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	440b      	add	r3, r1
 800a094:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
 800a0b4:	e00f      	b.n	800a0d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	33e0      	adds	r3, #224	; 0xe0
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	e007      	b.n	800a0e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	73fb      	strb	r3, [r7, #15]
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	2b0a      	cmp	r3, #10
 800a0da:	d9ec      	bls.n	800a0b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a0dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	490e      	ldr	r1, [pc, #56]	; (800a12c <MX_USB_HOST_Init+0x40>)
 800a0f4:	480e      	ldr	r0, [pc, #56]	; (800a130 <MX_USB_HOST_Init+0x44>)
 800a0f6:	f7fe fca1 	bl	8008a3c <USBH_Init>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a100:	f7f7 f888 	bl	8001214 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a104:	490b      	ldr	r1, [pc, #44]	; (800a134 <MX_USB_HOST_Init+0x48>)
 800a106:	480a      	ldr	r0, [pc, #40]	; (800a130 <MX_USB_HOST_Init+0x44>)
 800a108:	f7fe fd26 	bl	8008b58 <USBH_RegisterClass>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a112:	f7f7 f87f 	bl	8001214 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a116:	4806      	ldr	r0, [pc, #24]	; (800a130 <MX_USB_HOST_Init+0x44>)
 800a118:	f7fe fdaa 	bl	8008c70 <USBH_Start>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a122:	f7f7 f877 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a126:	bf00      	nop
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	2000037c 	.word	0x2000037c
 800a134:	20000014 	.word	0x20000014

0800a138 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a13c:	4802      	ldr	r0, [pc, #8]	; (800a148 <MX_USB_HOST_Process+0x10>)
 800a13e:	f7fe fda7 	bl	8008c90 <USBH_Process>
}
 800a142:	bf00      	nop
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	2000037c 	.word	0x2000037c

0800a14c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a158:	78fb      	ldrb	r3, [r7, #3]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d819      	bhi.n	800a194 <USBH_UserProcess+0x48>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBH_UserProcess+0x1c>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	0800a185 	.word	0x0800a185
 800a170:	0800a195 	.word	0x0800a195
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a17d 	.word	0x0800a17d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <USBH_UserProcess+0x58>)
 800a17e:	2203      	movs	r2, #3
 800a180:	701a      	strb	r2, [r3, #0]
  break;
 800a182:	e008      	b.n	800a196 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a184:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <USBH_UserProcess+0x58>)
 800a186:	2202      	movs	r2, #2
 800a188:	701a      	strb	r2, [r3, #0]
  break;
 800a18a:	e004      	b.n	800a196 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <USBH_UserProcess+0x58>)
 800a18e:	2201      	movs	r2, #1
 800a190:	701a      	strb	r2, [r3, #0]
  break;
 800a192:	e000      	b.n	800a196 <USBH_UserProcess+0x4a>

  default:
  break;
 800a194:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	200000bc 	.word	0x200000bc

0800a1a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	605a      	str	r2, [r3, #4]
 800a1ba:	609a      	str	r2, [r3, #8]
 800a1bc:	60da      	str	r2, [r3, #12]
 800a1be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c8:	d147      	bne.n	800a25a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	4b25      	ldr	r3, [pc, #148]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d2:	4a24      	ldr	r2, [pc, #144]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a1d4:	f043 0301 	orr.w	r3, r3, #1
 800a1d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1da:	4b22      	ldr	r3, [pc, #136]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a1e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	481b      	ldr	r0, [pc, #108]	; (800a268 <HAL_HCD_MspInit+0xc0>)
 800a1fc:	f7f8 f9e6 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a206:	2302      	movs	r3, #2
 800a208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a20e:	2300      	movs	r3, #0
 800a210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a212:	230a      	movs	r3, #10
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a216:	f107 0314 	add.w	r3, r7, #20
 800a21a:	4619      	mov	r1, r3
 800a21c:	4812      	ldr	r0, [pc, #72]	; (800a268 <HAL_HCD_MspInit+0xc0>)
 800a21e:	f7f8 f9d5 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a222:	4b10      	ldr	r3, [pc, #64]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a226:	4a0f      	ldr	r2, [pc, #60]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	6353      	str	r3, [r2, #52]	; 0x34
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a236:	4a0b      	ldr	r2, [pc, #44]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a23c:	6453      	str	r3, [r2, #68]	; 0x44
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <HAL_HCD_MspInit+0xbc>)
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a24a:	2200      	movs	r2, #0
 800a24c:	2100      	movs	r1, #0
 800a24e:	2043      	movs	r0, #67	; 0x43
 800a250:	f7f8 f985 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a254:	2043      	movs	r0, #67	; 0x43
 800a256:	f7f8 f99e 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a25a:	bf00      	nop
 800a25c:	3728      	adds	r7, #40	; 0x28
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	40023800 	.word	0x40023800
 800a268:	40020000 	.word	0x40020000

0800a26c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff f8db 	bl	8009436 <USBH_LL_IncTimer>
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff f913 	bl	80094c2 <USBH_LL_Connect>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff f91c 	bl	80094f0 <USBH_LL_Disconnect>
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff f8cd 	bl	800948a <USBH_LL_PortEnabled>
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff f8cd 	bl	80094a6 <USBH_LL_PortDisabled>
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a322:	2b01      	cmp	r3, #1
 800a324:	d12a      	bne.n	800a37c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <USBH_LL_Init+0x74>)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a15      	ldr	r2, [pc, #84]	; (800a388 <USBH_LL_Init+0x74>)
 800a332:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a336:	4b14      	ldr	r3, [pc, #80]	; (800a388 <USBH_LL_Init+0x74>)
 800a338:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a33c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a33e:	4b12      	ldr	r3, [pc, #72]	; (800a388 <USBH_LL_Init+0x74>)
 800a340:	2208      	movs	r2, #8
 800a342:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a344:	4b10      	ldr	r3, [pc, #64]	; (800a388 <USBH_LL_Init+0x74>)
 800a346:	2201      	movs	r2, #1
 800a348:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a34a:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <USBH_LL_Init+0x74>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <USBH_LL_Init+0x74>)
 800a352:	2202      	movs	r2, #2
 800a354:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a356:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <USBH_LL_Init+0x74>)
 800a358:	2200      	movs	r2, #0
 800a35a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a35c:	480a      	ldr	r0, [pc, #40]	; (800a388 <USBH_LL_Init+0x74>)
 800a35e:	f7f8 fb35 	bl	80029cc <HAL_HCD_Init>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a368:	f7f6 ff54 	bl	8001214 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a36c:	4806      	ldr	r0, [pc, #24]	; (800a388 <USBH_LL_Init+0x74>)
 800a36e:	f7f8 ff11 	bl	8003194 <HAL_HCD_GetCurrentFrame>
 800a372:	4603      	mov	r3, r0
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff f84e 	bl	8009418 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000754 	.word	0x20000754

0800a38c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7f8 fe80 	bl	80030a8 <HAL_HCD_Start>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f952 	bl	800a658 <USBH_Get_USB_Status>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f8 fe88 	bl	80030ee <HAL_HCD_Stop>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f937 	bl	800a658 <USBH_Get_USB_Status>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a400:	2301      	movs	r3, #1
 800a402:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f8 fed0 	bl	80031b0 <HAL_HCD_GetCurrentSpeed>
 800a410:	4603      	mov	r3, r0
 800a412:	2b02      	cmp	r3, #2
 800a414:	d00c      	beq.n	800a430 <USBH_LL_GetSpeed+0x38>
 800a416:	2b02      	cmp	r3, #2
 800a418:	d80d      	bhi.n	800a436 <USBH_LL_GetSpeed+0x3e>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <USBH_LL_GetSpeed+0x2c>
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d003      	beq.n	800a42a <USBH_LL_GetSpeed+0x32>
 800a422:	e008      	b.n	800a436 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
    break;
 800a428:	e008      	b.n	800a43c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
    break;
 800a42e:	e005      	b.n	800a43c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a430:	2302      	movs	r3, #2
 800a432:	73fb      	strb	r3, [r7, #15]
    break;
 800a434:	e002      	b.n	800a43c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a436:	2301      	movs	r3, #1
 800a438:	73fb      	strb	r3, [r7, #15]
    break;
 800a43a:	bf00      	nop
  }
  return  speed;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f8 fe63 	bl	8003128 <HAL_HCD_ResetPort>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f8f5 	bl	800a658 <USBH_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f7f8 fe6a 	bl	800316c <HAL_HCD_HC_GetXferCount>
 800a498:	4603      	mov	r3, r0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4a2:	b590      	push	{r4, r7, lr}
 800a4a4:	b089      	sub	sp, #36	; 0x24
 800a4a6:	af04      	add	r7, sp, #16
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	70fb      	strb	r3, [r7, #3]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70bb      	strb	r3, [r7, #2]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a4ca:	787c      	ldrb	r4, [r7, #1]
 800a4cc:	78ba      	ldrb	r2, [r7, #2]
 800a4ce:	78f9      	ldrb	r1, [r7, #3]
 800a4d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a4d2:	9302      	str	r3, [sp, #8]
 800a4d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	f7f8 fad5 	bl	8002a90 <HAL_HCD_HC_Init>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f8b3 	bl	800a658 <USBH_Get_USB_Status>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd90      	pop	{r4, r7, pc}

0800a500 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f8 fb45 	bl	8002bae <HAL_HCD_HC_Halt>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f894 	bl	800a658 <USBH_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a534:	7bbb      	ldrb	r3, [r7, #14]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a53e:	b590      	push	{r4, r7, lr}
 800a540:	b089      	sub	sp, #36	; 0x24
 800a542:	af04      	add	r7, sp, #16
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	461a      	mov	r2, r3
 800a54c:	4603      	mov	r3, r0
 800a54e:	70fb      	strb	r3, [r7, #3]
 800a550:	460b      	mov	r3, r1
 800a552:	70bb      	strb	r3, [r7, #2]
 800a554:	4613      	mov	r3, r2
 800a556:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a566:	787c      	ldrb	r4, [r7, #1]
 800a568:	78ba      	ldrb	r2, [r7, #2]
 800a56a:	78f9      	ldrb	r1, [r7, #3]
 800a56c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a574:	9302      	str	r3, [sp, #8]
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	4623      	mov	r3, r4
 800a582:	f7f8 fb37 	bl	8002bf4 <HAL_HCD_HC_SubmitRequest>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f863 	bl	800a658 <USBH_Get_USB_Status>
 800a592:	4603      	mov	r3, r0
 800a594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a596:	7bbb      	ldrb	r3, [r7, #14]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd90      	pop	{r4, r7, pc}

0800a5a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5b2:	78fa      	ldrb	r2, [r7, #3]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f8 fdc4 	bl	8003144 <HAL_HCD_HC_GetURBState>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800a5d2:	20c8      	movs	r0, #200	; 0xc8
 800a5d4:	f7f7 fec4 	bl	8002360 <HAL_Delay>
  return USBH_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5f8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	212c      	movs	r1, #44	; 0x2c
 800a600:	fb01 f303 	mul.w	r3, r1, r3
 800a604:	4413      	add	r3, r2
 800a606:	333b      	adds	r3, #59	; 0x3b
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d009      	beq.n	800a622 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	212c      	movs	r1, #44	; 0x2c
 800a614:	fb01 f303 	mul.w	r3, r1, r3
 800a618:	4413      	add	r3, r2
 800a61a:	3354      	adds	r3, #84	; 0x54
 800a61c:	78ba      	ldrb	r2, [r7, #2]
 800a61e:	701a      	strb	r2, [r3, #0]
 800a620:	e008      	b.n	800a634 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	212c      	movs	r1, #44	; 0x2c
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	4413      	add	r3, r2
 800a62e:	3355      	adds	r3, #85	; 0x55
 800a630:	78ba      	ldrb	r2, [r7, #2]
 800a632:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7f7 fe88 	bl	8002360 <HAL_Delay>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d817      	bhi.n	800a69c <USBH_Get_USB_Status+0x44>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <USBH_Get_USB_Status+0x1c>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a685 	.word	0x0800a685
 800a678:	0800a68b 	.word	0x0800a68b
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a697 	.word	0x0800a697
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]
    break;
 800a688:	e00b      	b.n	800a6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a68a:	2302      	movs	r3, #2
 800a68c:	73fb      	strb	r3, [r7, #15]
    break;
 800a68e:	e008      	b.n	800a6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a690:	2301      	movs	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
    break;
 800a694:	e005      	b.n	800a6a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a696:	2302      	movs	r3, #2
 800a698:	73fb      	strb	r3, [r7, #15]
    break;
 800a69a:	e002      	b.n	800a6a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a69c:	2302      	movs	r3, #2
 800a69e:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a0:	bf00      	nop
  }
  return usb_status;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <__errno>:
 800a6b0:	4b01      	ldr	r3, [pc, #4]	; (800a6b8 <__errno+0x8>)
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	20000034 	.word	0x20000034

0800a6bc <__libc_init_array>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4d0d      	ldr	r5, [pc, #52]	; (800a6f4 <__libc_init_array+0x38>)
 800a6c0:	4c0d      	ldr	r4, [pc, #52]	; (800a6f8 <__libc_init_array+0x3c>)
 800a6c2:	1b64      	subs	r4, r4, r5
 800a6c4:	10a4      	asrs	r4, r4, #2
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	42a6      	cmp	r6, r4
 800a6ca:	d109      	bne.n	800a6e0 <__libc_init_array+0x24>
 800a6cc:	4d0b      	ldr	r5, [pc, #44]	; (800a6fc <__libc_init_array+0x40>)
 800a6ce:	4c0c      	ldr	r4, [pc, #48]	; (800a700 <__libc_init_array+0x44>)
 800a6d0:	f000 f8f8 	bl	800a8c4 <_init>
 800a6d4:	1b64      	subs	r4, r4, r5
 800a6d6:	10a4      	asrs	r4, r4, #2
 800a6d8:	2600      	movs	r6, #0
 800a6da:	42a6      	cmp	r6, r4
 800a6dc:	d105      	bne.n	800a6ea <__libc_init_array+0x2e>
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e4:	4798      	blx	r3
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7ee      	b.n	800a6c8 <__libc_init_array+0xc>
 800a6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ee:	4798      	blx	r3
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	e7f2      	b.n	800a6da <__libc_init_array+0x1e>
 800a6f4:	0800a900 	.word	0x0800a900
 800a6f8:	0800a900 	.word	0x0800a900
 800a6fc:	0800a900 	.word	0x0800a900
 800a700:	0800a904 	.word	0x0800a904

0800a704 <malloc>:
 800a704:	4b02      	ldr	r3, [pc, #8]	; (800a710 <malloc+0xc>)
 800a706:	4601      	mov	r1, r0
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f000 b863 	b.w	800a7d4 <_malloc_r>
 800a70e:	bf00      	nop
 800a710:	20000034 	.word	0x20000034

0800a714 <free>:
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <free+0xc>)
 800a716:	4601      	mov	r1, r0
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	f000 b80b 	b.w	800a734 <_free_r>
 800a71e:	bf00      	nop
 800a720:	20000034 	.word	0x20000034

0800a724 <memset>:
 800a724:	4402      	add	r2, r0
 800a726:	4603      	mov	r3, r0
 800a728:	4293      	cmp	r3, r2
 800a72a:	d100      	bne.n	800a72e <memset+0xa>
 800a72c:	4770      	bx	lr
 800a72e:	f803 1b01 	strb.w	r1, [r3], #1
 800a732:	e7f9      	b.n	800a728 <memset+0x4>

0800a734 <_free_r>:
 800a734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a736:	2900      	cmp	r1, #0
 800a738:	d048      	beq.n	800a7cc <_free_r+0x98>
 800a73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a73e:	9001      	str	r0, [sp, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f1a1 0404 	sub.w	r4, r1, #4
 800a746:	bfb8      	it	lt
 800a748:	18e4      	addlt	r4, r4, r3
 800a74a:	f000 f8ad 	bl	800a8a8 <__malloc_lock>
 800a74e:	4a20      	ldr	r2, [pc, #128]	; (800a7d0 <_free_r+0x9c>)
 800a750:	9801      	ldr	r0, [sp, #4]
 800a752:	6813      	ldr	r3, [r2, #0]
 800a754:	4615      	mov	r5, r2
 800a756:	b933      	cbnz	r3, 800a766 <_free_r+0x32>
 800a758:	6063      	str	r3, [r4, #4]
 800a75a:	6014      	str	r4, [r2, #0]
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a762:	f000 b8a7 	b.w	800a8b4 <__malloc_unlock>
 800a766:	42a3      	cmp	r3, r4
 800a768:	d90b      	bls.n	800a782 <_free_r+0x4e>
 800a76a:	6821      	ldr	r1, [r4, #0]
 800a76c:	1862      	adds	r2, r4, r1
 800a76e:	4293      	cmp	r3, r2
 800a770:	bf04      	itt	eq
 800a772:	681a      	ldreq	r2, [r3, #0]
 800a774:	685b      	ldreq	r3, [r3, #4]
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	bf04      	itt	eq
 800a77a:	1852      	addeq	r2, r2, r1
 800a77c:	6022      	streq	r2, [r4, #0]
 800a77e:	602c      	str	r4, [r5, #0]
 800a780:	e7ec      	b.n	800a75c <_free_r+0x28>
 800a782:	461a      	mov	r2, r3
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b10b      	cbz	r3, 800a78c <_free_r+0x58>
 800a788:	42a3      	cmp	r3, r4
 800a78a:	d9fa      	bls.n	800a782 <_free_r+0x4e>
 800a78c:	6811      	ldr	r1, [r2, #0]
 800a78e:	1855      	adds	r5, r2, r1
 800a790:	42a5      	cmp	r5, r4
 800a792:	d10b      	bne.n	800a7ac <_free_r+0x78>
 800a794:	6824      	ldr	r4, [r4, #0]
 800a796:	4421      	add	r1, r4
 800a798:	1854      	adds	r4, r2, r1
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	6011      	str	r1, [r2, #0]
 800a79e:	d1dd      	bne.n	800a75c <_free_r+0x28>
 800a7a0:	681c      	ldr	r4, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	6053      	str	r3, [r2, #4]
 800a7a6:	4421      	add	r1, r4
 800a7a8:	6011      	str	r1, [r2, #0]
 800a7aa:	e7d7      	b.n	800a75c <_free_r+0x28>
 800a7ac:	d902      	bls.n	800a7b4 <_free_r+0x80>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	e7d3      	b.n	800a75c <_free_r+0x28>
 800a7b4:	6825      	ldr	r5, [r4, #0]
 800a7b6:	1961      	adds	r1, r4, r5
 800a7b8:	428b      	cmp	r3, r1
 800a7ba:	bf04      	itt	eq
 800a7bc:	6819      	ldreq	r1, [r3, #0]
 800a7be:	685b      	ldreq	r3, [r3, #4]
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	bf04      	itt	eq
 800a7c4:	1949      	addeq	r1, r1, r5
 800a7c6:	6021      	streq	r1, [r4, #0]
 800a7c8:	6054      	str	r4, [r2, #4]
 800a7ca:	e7c7      	b.n	800a75c <_free_r+0x28>
 800a7cc:	b003      	add	sp, #12
 800a7ce:	bd30      	pop	{r4, r5, pc}
 800a7d0:	200000c0 	.word	0x200000c0

0800a7d4 <_malloc_r>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	1ccd      	adds	r5, r1, #3
 800a7d8:	f025 0503 	bic.w	r5, r5, #3
 800a7dc:	3508      	adds	r5, #8
 800a7de:	2d0c      	cmp	r5, #12
 800a7e0:	bf38      	it	cc
 800a7e2:	250c      	movcc	r5, #12
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	db01      	blt.n	800a7ee <_malloc_r+0x1a>
 800a7ea:	42a9      	cmp	r1, r5
 800a7ec:	d903      	bls.n	800a7f6 <_malloc_r+0x22>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f6:	f000 f857 	bl	800a8a8 <__malloc_lock>
 800a7fa:	4921      	ldr	r1, [pc, #132]	; (800a880 <_malloc_r+0xac>)
 800a7fc:	680a      	ldr	r2, [r1, #0]
 800a7fe:	4614      	mov	r4, r2
 800a800:	b99c      	cbnz	r4, 800a82a <_malloc_r+0x56>
 800a802:	4f20      	ldr	r7, [pc, #128]	; (800a884 <_malloc_r+0xb0>)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	b923      	cbnz	r3, 800a812 <_malloc_r+0x3e>
 800a808:	4621      	mov	r1, r4
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 f83c 	bl	800a888 <_sbrk_r>
 800a810:	6038      	str	r0, [r7, #0]
 800a812:	4629      	mov	r1, r5
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f837 	bl	800a888 <_sbrk_r>
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	d123      	bne.n	800a866 <_malloc_r+0x92>
 800a81e:	230c      	movs	r3, #12
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f846 	bl	800a8b4 <__malloc_unlock>
 800a828:	e7e3      	b.n	800a7f2 <_malloc_r+0x1e>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	1b5b      	subs	r3, r3, r5
 800a82e:	d417      	bmi.n	800a860 <_malloc_r+0x8c>
 800a830:	2b0b      	cmp	r3, #11
 800a832:	d903      	bls.n	800a83c <_malloc_r+0x68>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	441c      	add	r4, r3
 800a838:	6025      	str	r5, [r4, #0]
 800a83a:	e004      	b.n	800a846 <_malloc_r+0x72>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	42a2      	cmp	r2, r4
 800a840:	bf0c      	ite	eq
 800a842:	600b      	streq	r3, [r1, #0]
 800a844:	6053      	strne	r3, [r2, #4]
 800a846:	4630      	mov	r0, r6
 800a848:	f000 f834 	bl	800a8b4 <__malloc_unlock>
 800a84c:	f104 000b 	add.w	r0, r4, #11
 800a850:	1d23      	adds	r3, r4, #4
 800a852:	f020 0007 	bic.w	r0, r0, #7
 800a856:	1ac2      	subs	r2, r0, r3
 800a858:	d0cc      	beq.n	800a7f4 <_malloc_r+0x20>
 800a85a:	1a1b      	subs	r3, r3, r0
 800a85c:	50a3      	str	r3, [r4, r2]
 800a85e:	e7c9      	b.n	800a7f4 <_malloc_r+0x20>
 800a860:	4622      	mov	r2, r4
 800a862:	6864      	ldr	r4, [r4, #4]
 800a864:	e7cc      	b.n	800a800 <_malloc_r+0x2c>
 800a866:	1cc4      	adds	r4, r0, #3
 800a868:	f024 0403 	bic.w	r4, r4, #3
 800a86c:	42a0      	cmp	r0, r4
 800a86e:	d0e3      	beq.n	800a838 <_malloc_r+0x64>
 800a870:	1a21      	subs	r1, r4, r0
 800a872:	4630      	mov	r0, r6
 800a874:	f000 f808 	bl	800a888 <_sbrk_r>
 800a878:	3001      	adds	r0, #1
 800a87a:	d1dd      	bne.n	800a838 <_malloc_r+0x64>
 800a87c:	e7cf      	b.n	800a81e <_malloc_r+0x4a>
 800a87e:	bf00      	nop
 800a880:	200000c0 	.word	0x200000c0
 800a884:	200000c4 	.word	0x200000c4

0800a888 <_sbrk_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d06      	ldr	r5, [pc, #24]	; (800a8a4 <_sbrk_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f6 fffa 	bl	800188c <_sbrk>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_sbrk_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_sbrk_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20000a58 	.word	0x20000a58

0800a8a8 <__malloc_lock>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	; (800a8b0 <__malloc_lock+0x8>)
 800a8aa:	f000 b809 	b.w	800a8c0 <__retarget_lock_acquire_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	20000a60 	.word	0x20000a60

0800a8b4 <__malloc_unlock>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	; (800a8bc <__malloc_unlock+0x8>)
 800a8b6:	f000 b804 	b.w	800a8c2 <__retarget_lock_release_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20000a60 	.word	0x20000a60

0800a8c0 <__retarget_lock_acquire_recursive>:
 800a8c0:	4770      	bx	lr

0800a8c2 <__retarget_lock_release_recursive>:
 800a8c2:	4770      	bx	lr

0800a8c4 <_init>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <_fini>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr
