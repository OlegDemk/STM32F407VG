
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001109c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08011228  08011228  00021228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011800  08011800  00030274  2**0
                  CONTENTS
  4 .ARM          00000008  08011800  08011800  00021800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011808  08011808  00030274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011808  08011808  00021808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801180c  0801180c  0002180c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08011810  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000278  08011a84  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  08011a84  00030da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a337  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ad  00000000  00000000  0005a5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  0005fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  00061988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4b  00000000  00000000  00063378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026be4  00000000  00000000  00089ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d963f  00000000  00000000  000b0aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a0e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007adc  00000000  00000000  0018a13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801120c 	.word	0x0801120c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	0801120c 	.word	0x0801120c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <DelayMicro+0x3c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayMicro+0x3c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <DelayMicro+0x40>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0ddb      	lsrs	r3, r3, #23
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
 8000ea8:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000eaa:	bf00      	nop
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1fa      	bne.n	8000eac <DelayMicro+0x24>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	ffa71ee7 	.word	0xffa71ee7

08000ecc <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <NRF24_ReadReg+0x60>)
 8000ee0:	f006 f844 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000ee4:	f107 020f 	add.w	r2, r7, #15
 8000ee8:	1df9      	adds	r1, r7, #7
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <NRF24_ReadReg+0x64>)
 8000ef4:	f00a ffc2 	bl	800be7c <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d00c      	beq.n	8000f18 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000f02:	f107 020f 	add.w	r2, r7, #15
 8000f06:	f107 010e 	add.w	r1, r7, #14
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <NRF24_ReadReg+0x64>)
 8000f14:	f00a ffb2 	bl	800be7c <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <NRF24_ReadReg+0x60>)
 8000f1e:	f006 f825 	bl	8006f6c <HAL_GPIO_WritePin>
  return dt;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	20000488 	.word	0x20000488

08000f34 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <NRF24_WriteReg+0x54>)
 8000f54:	f006 f80a 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	// Send address in bus
 8000f58:	1df9      	adds	r1, r7, #7
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	2201      	movs	r2, #1
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <NRF24_WriteReg+0x58>)
 8000f62:	f00a fd3e 	bl	800b9e2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8000f66:	1db9      	adds	r1, r7, #6
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <NRF24_WriteReg+0x58>)
 8000f70:	f00a fd37 	bl	800b9e2 <HAL_SPI_Transmit>
  CS_OFF;
 8000f74:	2201      	movs	r2, #1
 8000f76:	2110      	movs	r1, #16
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <NRF24_WriteReg+0x54>)
 8000f7a:	f005 fff7 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	20000488 	.word	0x20000488

08000f90 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000f96:	2350      	movs	r3, #80	; 0x50
 8000f98:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <NRF24_ToggleFeatures+0x4c>)
 8000fa0:	f005 ffe4 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	2201      	movs	r2, #1
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <NRF24_ToggleFeatures+0x50>)
 8000fae:	f00a fd18 	bl	800b9e2 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff ff68 	bl	8000e88 <DelayMicro>
  dt[0] = 0x73;
 8000fb8:	2373      	movs	r3, #115	; 0x73
 8000fba:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000fbc:	1d39      	adds	r1, r7, #4
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <NRF24_ToggleFeatures+0x50>)
 8000fc6:	f00a fd0c 	bl	800b9e2 <HAL_SPI_Transmit>
  CS_OFF;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <NRF24_ToggleFeatures+0x4c>)
 8000fd0:	f005 ffcc 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	20000488 	.word	0x20000488

08000fe4 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <NRF24_Read_Buf+0x4c>)
 8000ffa:	f005 ffb7 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000ffe:	1df9      	adds	r1, r7, #7
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	2201      	movs	r2, #1
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <NRF24_Read_Buf+0x50>)
 8001008:	f00a fceb 	bl	800b9e2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	b29a      	uxth	r2, r3
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <NRF24_Read_Buf+0x50>)
 8001018:	f00a fe1f 	bl	800bc5a <HAL_SPI_Receive>
  CS_OFF;
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <NRF24_Read_Buf+0x4c>)
 8001022:	f005 ffa3 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020800 	.word	0x40020800
 8001034:	20000488 	.word	0x20000488

08001038 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	b2db      	uxtb	r3, r3
 8001050:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <NRF24_Write_Buf+0x5c>)
 8001058:	f005 ff88 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800105c:	1df9      	adds	r1, r7, #7
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	2201      	movs	r2, #1
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <NRF24_Write_Buf+0x60>)
 8001066:	f00a fcbc 	bl	800b9e2 <HAL_SPI_Transmit>
  DelayMicro(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff0c 	bl	8000e88 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	b29a      	uxth	r2, r3
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <NRF24_Write_Buf+0x60>)
 800107c:	f00a fcb1 	bl	800b9e2 <HAL_SPI_Transmit>
  CS_OFF;
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <NRF24_Write_Buf+0x5c>)
 8001086:	f005 ff71 	bl	8006f6c <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020800 	.word	0x40020800
 8001098:	20000488 	.word	0x20000488

0800109c <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 80010a2:	23e2      	movs	r3, #226	; 0xe2
 80010a4:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80010a6:	2200      	movs	r2, #0
 80010a8:	2110      	movs	r1, #16
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <NRF24_FlushRX+0x3c>)
 80010ac:	f005 ff5e 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80010b0:	1d39      	adds	r1, r7, #4
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	2201      	movs	r2, #1
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <NRF24_FlushRX+0x40>)
 80010ba:	f00a fc92 	bl	800b9e2 <HAL_SPI_Transmit>
  DelayMicro(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff fee2 	bl	8000e88 <DelayMicro>
  CS_OFF;
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <NRF24_FlushRX+0x3c>)
 80010ca:	f005 ff4f 	bl	8006f6c <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20000488 	.word	0x20000488

080010e0 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80010e6:	23e1      	movs	r3, #225	; 0xe1
 80010e8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80010ea:	2200      	movs	r2, #0
 80010ec:	2110      	movs	r1, #16
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <NRF24_FlushTX+0x3c>)
 80010f0:	f005 ff3c 	bl	8006f6c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	2201      	movs	r2, #1
 80010fc:	4808      	ldr	r0, [pc, #32]	; (8001120 <NRF24_FlushTX+0x40>)
 80010fe:	f00a fc70 	bl	800b9e2 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fec0 	bl	8000e88 <DelayMicro>
  CS_OFF;
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <NRF24_FlushTX+0x3c>)
 800110e:	f005 ff2d 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020800 	.word	0x40020800
 8001120:	20000488 	.word	0x20000488

08001124 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fecc 	bl	8000ecc <NRF24_ReadReg>
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  // Power up module. Write PWR_UP и PRIM_RX bits
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f043 0303 	orr.w	r3, r3, #3
 800113e:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fef5 	bl	8000f34 <NRF24_WriteReg>
  CE_SET;
 800114a:	2201      	movs	r2, #1
 800114c:	2108      	movs	r1, #8
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <NRF24L01_RX_Mode+0x48>)
 8001150:	f005 ff0c 	bl	8006f6c <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8001154:	2096      	movs	r0, #150	; 0x96
 8001156:	f7ff fe97 	bl	8000e88 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800115a:	f7ff ff9f 	bl	800109c <NRF24_FlushRX>
  NRF24_FlushTX();
 800115e:	f7ff ffbf 	bl	80010e0 <NRF24_FlushTX>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020000 	.word	0x40020000

08001170 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	CE_RESET;
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	4824      	ldr	r0, [pc, #144]	; (800120c <NRF24_ini+0x9c>)
 800117a:	f005 fef7 	bl	8006f6c <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800117e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001182:	f7ff fe81 	bl	8000e88 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001186:	210a      	movs	r1, #10
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fed3 	bl	8000f34 <NRF24_WriteReg>

	DelayMicro(5000);
 800118e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001192:	f7ff fe79 	bl	8000e88 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x02); 			// Enable Pipe1
 8001196:	2102      	movs	r1, #2
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fecb 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x02); 		// Enable Pipe1
 800119e:	2102      	movs	r1, #2
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fec7 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80011a6:	2101      	movs	r1, #1
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff fec3 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80011ae:	215f      	movs	r1, #95	; 0x5f
 80011b0:	2004      	movs	r0, #4
 80011b2:	f7ff febf 	bl	8000f34 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80011b6:	f7ff feeb 	bl	8000f90 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	201d      	movs	r0, #29
 80011be:	f7ff feb9 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	201c      	movs	r0, #28
 80011c6:	f7ff feb5 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80011ca:	2170      	movs	r1, #112	; 0x70
 80011cc:	2007      	movs	r0, #7
 80011ce:	f7ff feb1 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80011d2:	214c      	movs	r1, #76	; 0x4c
 80011d4:	2005      	movs	r0, #5
 80011d6:	f7ff fead 	bl	8000f34 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); 		//TX_PWR:0dBm, Datarate:1Mbps
 80011da:	2106      	movs	r1, #6
 80011dc:	2006      	movs	r0, #6
 80011de:	f7ff fea9 	bl	8000f34 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80011e2:	2203      	movs	r2, #3
 80011e4:	490a      	ldr	r1, [pc, #40]	; (8001210 <NRF24_ini+0xa0>)
 80011e6:	2010      	movs	r0, #16
 80011e8:	f7ff ff26 	bl	8001038 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 80011ec:	2203      	movs	r2, #3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <NRF24_ini+0xa0>)
 80011f0:	200b      	movs	r0, #11
 80011f2:	f7ff ff21 	bl	8001038 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX
 80011f6:	2102      	movs	r1, #2
 80011f8:	2012      	movs	r0, #18
 80011fa:	f7ff fe9b 	bl	8000f34 <NRF24_WriteReg>
	NRF24L01_RX_Mode();
 80011fe:	f7ff ff91 	bl	8001124 <NRF24L01_RX_Mode>

	test_nrf();
 8001202:	f000 f807 	bl	8001214 <test_nrf>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000
 8001210:	20000000 	.word	0x20000000

08001214 <test_nrf>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void test_nrf(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t dt_reg=0;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f005 fbba 	bl	8006998 <HAL_Delay>

	dt_reg = NRF24_ReadReg(CONFIG);			// 0x0B
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fe51 	bl	8000ecc <NRF24_ReadReg>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(EN_AA);			// 0x02
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fe4c 	bl	8000ecc <NRF24_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(EN_RXADDR); 		// 0x02
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fe47 	bl	8000ecc <NRF24_ReadReg>
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8001242:	2007      	movs	r0, #7
 8001244:	f7ff fe42 	bl	8000ecc <NRF24_ReadReg>
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(RF_SETUP);		// 0x06
 800124c:	2006      	movs	r0, #6
 800124e:	f7ff fe3d 	bl	8000ecc <NRF24_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8001256:	2203      	movs	r2, #3
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <test_nrf+0x64>)
 800125a:	2010      	movs	r0, #16
 800125c:	f7ff fec2 	bl	8000fe4 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P1,buf1,3);
 8001260:	2203      	movs	r2, #3
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <test_nrf+0x64>)
 8001264:	200b      	movs	r0, #11
 8001266:	f7ff febd 	bl	8000fe4 <NRF24_Read_Buf>

	dt_reg = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	71fb      	strb	r3, [r7, #7]
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000294 	.word	0x20000294

0800127c <nrf_communication_test>:



void nrf_communication_test(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	NRF24_ini();
 8001280:	f7ff ff76 	bl	8001170 <NRF24_ini>





}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	char digith = 0;;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8001292:	f000 f853 	bl	800133c <read_one_digit_from_keyboard>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b23      	cmp	r3, #35	; 0x23
 800129e:	d10a      	bne.n	80012b6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80012a0:	221e      	movs	r2, #30
 80012a2:	2100      	movs	r1, #0
 80012a4:	4824      	ldr	r0, [pc, #144]	; (8001338 <read_digits+0xb0>)
 80012a6:	f00f fb6f 	bl	8010988 <memset>
		keyboard.read_digits_position = 0;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <read_digits+0xb0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <read_digits+0xb0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b2a      	cmp	r3, #42	; 0x2a
 80012ba:	d109      	bne.n	80012d0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <read_digits+0xb0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <read_digits+0xb0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <read_digits+0xb0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d028      	beq.n	8001328 <read_digits+0xa0>
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b23      	cmp	r3, #35	; 0x23
 80012da:	d025      	beq.n	8001328 <read_digits+0xa0>
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b2a      	cmp	r3, #42	; 0x2a
 80012e0:	d022      	beq.n	8001328 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <read_digits+0xb0>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <read_digits+0xb0>)
 80012e8:	7f92      	ldrb	r2, [r2, #30]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dc11      	bgt.n	8001312 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <read_digits+0xb0>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	4911      	ldr	r1, [pc, #68]	; (8001338 <read_digits+0xb0>)
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <read_digits+0xb0>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <read_digits+0xb0>)
 8001300:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <read_digits+0xb0>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <read_digits+0xb0>)
 800130c:	2201      	movs	r2, #1
 800130e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001310:	e00e      	b.n	8001330 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <read_digits+0xb0>)
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <read_digits+0xb0>)
 800131c:	2200      	movs	r2, #0
 800131e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <read_digits+0xb0>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001326:	e003      	b.n	8001330 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <read_digits+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	77da      	strb	r2, [r3, #31]
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002c0 	.word	0x200002c0

0800133c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	char digit = '\0';
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134c:	48cf      	ldr	r0, [pc, #828]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800134e:	f005 fe0d 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	48cc      	ldr	r0, [pc, #816]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800135a:	f005 fe07 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	48c9      	ldr	r0, [pc, #804]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001366:	f005 fe01 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	48c6      	ldr	r0, [pc, #792]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001372:	f005 fdfb 	bl	8006f6c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137a:	48c5      	ldr	r0, [pc, #788]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 800137c:	f005 fdde 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d169      	bne.n	800145a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138c:	48bf      	ldr	r0, [pc, #764]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800138e:	f005 fded 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	48bc      	ldr	r0, [pc, #752]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800139a:	f005 fde7 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a4:	48b9      	ldr	r0, [pc, #740]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80013a6:	f005 fde1 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	48b6      	ldr	r0, [pc, #728]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80013b2:	f005 fddb 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	48b5      	ldr	r0, [pc, #724]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 80013bc:	f005 fdbe 	bl	8006f3c <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80013c6:	2331      	movs	r3, #49	; 0x31
 80013c8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d0:	48ae      	ldr	r0, [pc, #696]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80013d2:	f005 fdcb 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013dc:	48ab      	ldr	r0, [pc, #684]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80013de:	f005 fdc5 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	48aa      	ldr	r0, [pc, #680]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 80013e8:	f005 fda8 	bl	8006f3c <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 80013f2:	2334      	movs	r3, #52	; 0x34
 80013f4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fc:	48a3      	ldr	r0, [pc, #652]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80013fe:	f005 fdb5 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001408:	48a0      	ldr	r0, [pc, #640]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800140a:	f005 fdaf 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	489f      	ldr	r0, [pc, #636]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 8001414:	f005 fd92 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800141e:	2337      	movs	r3, #55	; 0x37
 8001420:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	4898      	ldr	r0, [pc, #608]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800142a:	f005 fd9f 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	4895      	ldr	r0, [pc, #596]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001436:	f005 fd99 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	4894      	ldr	r0, [pc, #592]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 8001440:	f005 fd7c 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800144a:	232a      	movs	r3, #42	; 0x2a
 800144c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001454:	488d      	ldr	r0, [pc, #564]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001456:	f005 fd89 	bl	8006f6c <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	488a      	ldr	r0, [pc, #552]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001462:	f005 fd83 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	4887      	ldr	r0, [pc, #540]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800146e:	f005 fd7d 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	4884      	ldr	r0, [pc, #528]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800147a:	f005 fd77 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001484:	4881      	ldr	r0, [pc, #516]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001486:	f005 fd71 	bl	8006f6c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4880      	ldr	r0, [pc, #512]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 8001490:	f005 fd54 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d169      	bne.n	800156e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	487a      	ldr	r0, [pc, #488]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014a2:	f005 fd63 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ac:	4877      	ldr	r0, [pc, #476]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014ae:	f005 fd5d 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b8:	4874      	ldr	r0, [pc, #464]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014ba:	f005 fd57 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c4:	4871      	ldr	r0, [pc, #452]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014c6:	f005 fd51 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80014ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ce:	4870      	ldr	r0, [pc, #448]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 80014d0:	f005 fd34 	bl	8006f3c <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80014da:	2332      	movs	r3, #50	; 0x32
 80014dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e4:	4869      	ldr	r0, [pc, #420]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014e6:	f005 fd41 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f0:	4866      	ldr	r0, [pc, #408]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80014f2:	f005 fd3b 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	4865      	ldr	r0, [pc, #404]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 80014fc:	f005 fd1e 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001506:	2335      	movs	r3, #53	; 0x35
 8001508:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001510:	485e      	ldr	r0, [pc, #376]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001512:	f005 fd2b 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	485b      	ldr	r0, [pc, #364]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800151e:	f005 fd25 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	485a      	ldr	r0, [pc, #360]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 8001528:	f005 fd08 	bl	8006f3c <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001532:	2338      	movs	r3, #56	; 0x38
 8001534:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	4853      	ldr	r0, [pc, #332]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800153e:	f005 fd15 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4850      	ldr	r0, [pc, #320]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800154a:	f005 fd0f 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	484f      	ldr	r0, [pc, #316]	; (8001690 <read_one_digit_from_keyboard+0x354>)
 8001554:	f005 fcf2 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	4848      	ldr	r0, [pc, #288]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800156a:	f005 fcff 	bl	8006f6c <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001574:	4845      	ldr	r0, [pc, #276]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001576:	f005 fcf9 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001580:	4842      	ldr	r0, [pc, #264]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001582:	f005 fcf3 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158c:	483f      	ldr	r0, [pc, #252]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800158e:	f005 fced 	bl	8006f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	483c      	ldr	r0, [pc, #240]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800159a:	f005 fce7 	bl	8006f6c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 800159e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a2:	483c      	ldr	r0, [pc, #240]	; (8001694 <read_one_digit_from_keyboard+0x358>)
 80015a4:	f005 fcca 	bl	8006f3c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d169      	bne.n	8001682 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b4:	4835      	ldr	r0, [pc, #212]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80015b6:	f005 fcd9 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c0:	4832      	ldr	r0, [pc, #200]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80015c2:	f005 fcd3 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	482f      	ldr	r0, [pc, #188]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80015ce:	f005 fccd 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	482c      	ldr	r0, [pc, #176]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80015da:	f005 fcc7 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80015de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e2:	482c      	ldr	r0, [pc, #176]	; (8001694 <read_one_digit_from_keyboard+0x358>)
 80015e4:	f005 fcaa 	bl	8006f3c <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80015ee:	2333      	movs	r3, #51	; 0x33
 80015f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f8:	4824      	ldr	r0, [pc, #144]	; (800168c <read_one_digit_from_keyboard+0x350>)
 80015fa:	f005 fcb7 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001606:	f005 fcb1 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800160a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160e:	4821      	ldr	r0, [pc, #132]	; (8001694 <read_one_digit_from_keyboard+0x358>)
 8001610:	f005 fc94 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800161a:	2336      	movs	r3, #54	; 0x36
 800161c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001626:	f005 fca1 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	4816      	ldr	r0, [pc, #88]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001632:	f005 fc9b 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <read_one_digit_from_keyboard+0x358>)
 800163c:	f005 fc7e 	bl	8006f3c <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001646:	2339      	movs	r3, #57	; 0x39
 8001648:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <read_one_digit_from_keyboard+0x350>)
 8001652:	f005 fc8b 	bl	8006f6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800165e:	f005 fc85 	bl	8006f6c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <read_one_digit_from_keyboard+0x358>)
 8001668:	f005 fc68 	bl	8006f3c <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001672:	2323      	movs	r3, #35	; 0x23
 8001674:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <read_one_digit_from_keyboard+0x350>)
 800167e:	f005 fc75 	bl	8006f6c <HAL_GPIO_WritePin>
	}
	return digit;
 8001682:	79fb      	ldrb	r3, [r7, #7]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40020400 	.word	0x40020400
 8001694:	40021000 	.word	0x40021000

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169e:	f005 f909 	bl	80068b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a2:	f000 f845 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a6:	f000 faf5 	bl	8001c94 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016aa:	f000 f96d 	bl	8001988 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80016ae:	f00e fe41 	bl	8010334 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80016b2:	f000 fa2d 	bl	8001b10 <MX_TIM2_Init>
  MX_SPI2_Init();
 80016b6:	f000 f99d 	bl	80019f4 <MX_SPI2_Init>
  MX_RNG_Init();
 80016ba:	f000 f951 	bl	8001960 <MX_RNG_Init>
  MX_TIM3_Init();
 80016be:	f000 fa75 	bl	8001bac <MX_TIM3_Init>
  MX_TIM1_Init();
 80016c2:	f000 f9cd 	bl	8001a60 <MX_TIM1_Init>
  MX_I2C3_Init();
 80016c6:	f000 f8ef 	bl	80018a8 <MX_I2C3_Init>
  MX_I2C2_Init();
 80016ca:	f000 f8bf 	bl	800184c <MX_I2C2_Init>
  MX_I2S3_Init();
 80016ce:	f000 f919 	bl	8001904 <MX_I2S3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016d2:	f000 f8af 	bl	8001834 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80016d6:	f001 fa79 	bl	8002bcc <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80016da:	2000      	movs	r0, #0
 80016dc:	f001 fc1c 	bl	8002f18 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80016e0:	2003      	movs	r0, #3
 80016e2:	f001 fa15 	bl	8002b10 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f001 fc16 	bl	8002f18 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f002 fadd 	bl	8003cb0 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 fc0e 	bl	8002f18 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <main+0x90>)
 80016fe:	f00a fedf 	bl	800c4c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001702:	2100      	movs	r1, #0
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <main+0x90>)
 8001706:	f00a ff4b 	bl	800c5a0 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <main+0x94>)
 800170c:	220a      	movs	r2, #10
 800170e:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 8001710:	f003 fdb4 	bl	800527c <detect_all_sensors_and_init>
  measure_sensors();
 8001714:	f003 fdda 	bl	80052cc <measure_sensors>

  //NRF24_ini();
  nrf_communication_test();
 8001718:	f7ff fdb0 	bl	800127c <nrf_communication_test>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 800171c:	f001 fd46 	bl	80031ac <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001720:	f00e fe2e 	bl	8010380 <MX_USB_HOST_Process>
	 menu();
 8001724:	e7fa      	b.n	800171c <main+0x84>
 8001726:	bf00      	nop
 8001728:	200003e8 	.word	0x200003e8
 800172c:	200002c0 	.word	0x200002c0

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b098      	sub	sp, #96	; 0x60
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00f f922 	bl	8010988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <SystemClock_Config+0xfc>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a30      	ldr	r2, [pc, #192]	; (800182c <SystemClock_Config+0xfc>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <SystemClock_Config+0xfc>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <SystemClock_Config+0x100>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <SystemClock_Config+0x100>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <SystemClock_Config+0x100>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179a:	2301      	movs	r3, #1
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ae:	2308      	movs	r3, #8
 80017b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017bc:	2307      	movs	r3, #7
 80017be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c4:	4618      	mov	r0, r3
 80017c6:	f009 fa55 	bl	800ac74 <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80017d0:	f000 fc0c 	bl	8001fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2105      	movs	r1, #5
 80017f2:	4618      	mov	r0, r3
 80017f4:	f009 fcb6 	bl	800b164 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017fe:	f000 fbf5 	bl	8001fec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001802:	2301      	movs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4618      	mov	r0, r3
 8001814:	f009 fe8e 	bl	800b534 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800181e:	f000 fbe5 	bl	8001fec <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3760      	adds	r7, #96	; 0x60
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	201c      	movs	r0, #28
 800183e:	f005 f9aa 	bl	8006b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001842:	201c      	movs	r0, #28
 8001844:	f005 f9c3 	bl	8006bce <HAL_NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C2_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <MX_I2C2_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C2_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_I2C2_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C2_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C2_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_I2C2_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C2_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_I2C2_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_I2C2_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C2_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_I2C2_Init+0x50>)
 800188a:	f007 f91f 	bl	8008acc <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 fbaa 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000394 	.word	0x20000394
 80018a0:	40005800 	.word	0x40005800
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C3_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C3_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C3_Init+0x50>)
 80018e6:	f007 f8f1 	bl	8008acc <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 fb7c 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200002e8 	.word	0x200002e8
 80018fc:	40005c00 	.word	0x40005c00
 8001900:	000186a0 	.word	0x000186a0

08001904 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_I2S3_Init+0x54>)
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <MX_I2S3_Init+0x58>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_I2S3_Init+0x54>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_I2S3_Init+0x54>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_I2S3_Init+0x54>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_I2S3_Init+0x54>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_I2S3_Init+0x54>)
 800192a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800192e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_I2S3_Init+0x54>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_I2S3_Init+0x54>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_I2S3_Init+0x54>)
 800193e:	2201      	movs	r2, #1
 8001940:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_I2S3_Init+0x54>)
 8001944:	f008 fcf6 	bl	800a334 <HAL_I2S_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800194e:	f000 fb4d 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000528 	.word	0x20000528
 800195c:	40003c00 	.word	0x40003c00

08001960 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_RNG_Init+0x20>)
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <MX_RNG_Init+0x24>)
 8001968:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_RNG_Init+0x20>)
 800196c:	f009 ff22 	bl	800b7b4 <HAL_RNG_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001976:	f000 fb39 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000478 	.word	0x20000478
 8001984:	50060800 	.word	0x50060800

08001988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_SPI1_Init+0x64>)
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <MX_SPI1_Init+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_SPI1_Init+0x64>)
 8001994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_SPI1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_SPI1_Init+0x64>)
 80019b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SPI1_Init+0x64>)
 80019bc:	2218      	movs	r2, #24
 80019be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SPI1_Init+0x64>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_SPI1_Init+0x64>)
 80019da:	f009 ff79 	bl	800b8d0 <HAL_SPI_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019e4:	f000 fb02 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000488 	.word	0x20000488
 80019f0:	40013000 	.word	0x40013000

080019f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_SPI2_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_SPI2_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_SPI2_Init+0x64>)
 8001a46:	f009 ff43 	bl	800b8d0 <HAL_SPI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a50:	f000 facc 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000033c 	.word	0x2000033c
 8001a5c:	40003800 	.word	0x40003800

08001a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2224      	movs	r2, #36	; 0x24
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00e ff8a 	bl	8010988 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a7e:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <MX_TIM1_Init+0xac>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001ad4:	f00a fecb 	bl	800c86e <HAL_TIM_Encoder_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ade:	f000 fa85 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM1_Init+0xa8>)
 8001af0:	f00b fd30 	bl	800d554 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001afa:	f000 fa77 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000430 	.word	0x20000430
 8001b0c:	40010000 	.word	0x40010000

08001b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b36:	f240 3247 	movw	r2, #839	; 0x347
 8001b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b56:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b58:	f00a fc62 	bl	800c420 <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b62:	f000 fa43 	bl	8001fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b74:	f00b f8e8 	bl	800cd48 <HAL_TIM_ConfigClockSource>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b7e:	f000 fa35 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001b82:	2310      	movs	r3, #16
 8001b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_TIM2_Init+0x98>)
 8001b90:	f00b fce0 	bl	800d554 <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b9a:	f000 fa27 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200004e0 	.word	0x200004e0

08001bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	f107 0320 	add.w	r3, r7, #32
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001bde:	4a2c      	ldr	r2, [pc, #176]	; (8001c90 <MX_TIM3_Init+0xe4>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001be4:	f640 0233 	movw	r2, #2099	; 0x833
 8001be8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001bf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c04:	4821      	ldr	r0, [pc, #132]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c06:	f00a fc0b 	bl	800c420 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c10:	f000 f9ec 	bl	8001fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481a      	ldr	r0, [pc, #104]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c22:	f00b f891 	bl	800cd48 <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c2c:	f000 f9de 	bl	8001fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c30:	4816      	ldr	r0, [pc, #88]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c32:	f00a fdc3 	bl	800c7bc <HAL_TIM_PWM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c3c:	f000 f9d6 	bl	8001fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c50:	f00b fc80 	bl	800d554 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c5a:	f000 f9c7 	bl	8001fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5e:	2360      	movs	r3, #96	; 0x60
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_TIM3_Init+0xe0>)
 8001c76:	f00a ffa9 	bl	800cbcc <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c80:	f000 f9b4 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3738      	adds	r7, #56	; 0x38
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200003e8 	.word	0x200003e8
 8001c90:	40000400 	.word	0x40000400

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4bb6      	ldr	r3, [pc, #728]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4ab5      	ldr	r2, [pc, #724]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4bb3      	ldr	r3, [pc, #716]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4baf      	ldr	r3, [pc, #700]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4aae      	ldr	r2, [pc, #696]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4bac      	ldr	r3, [pc, #688]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4ba8      	ldr	r3, [pc, #672]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4aa7      	ldr	r2, [pc, #668]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4ba1      	ldr	r3, [pc, #644]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4aa0      	ldr	r2, [pc, #640]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b9a      	ldr	r3, [pc, #616]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a99      	ldr	r2, [pc, #612]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b97      	ldr	r3, [pc, #604]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b90      	ldr	r3, [pc, #576]	; (8001f88 <MX_GPIO_Init+0x2f4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001d52:	2200      	movs	r2, #0
 8001d54:	217c      	movs	r1, #124	; 0x7c
 8001d56:	488d      	ldr	r0, [pc, #564]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001d58:	f005 f908 	bl	8006f6c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|CSN_nrf_Pin, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2111      	movs	r1, #17
 8001d60:	488b      	ldr	r0, [pc, #556]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001d62:	f005 f903 	bl	8006f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_nrf_GPIO_Port, CE_nrf_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2108      	movs	r1, #8
 8001d6a:	488a      	ldr	r0, [pc, #552]	; (8001f94 <MX_GPIO_Init+0x300>)
 8001d6c:	f005 f8fe 	bl	8006f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001d70:	2200      	movs	r2, #0
 8001d72:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001d76:	4888      	ldr	r0, [pc, #544]	; (8001f98 <MX_GPIO_Init+0x304>)
 8001d78:	f005 f8f8 	bl	8006f6c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001d82:	4883      	ldr	r0, [pc, #524]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001d84:	f005 f8f2 	bl	8006f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001d8e:	4883      	ldr	r0, [pc, #524]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001d90:	f005 f8ec 	bl	8006f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001d94:	2374      	movs	r3, #116	; 0x74
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4878      	ldr	r0, [pc, #480]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001dac:	f004 ff2a 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001db0:	2308      	movs	r3, #8
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4871      	ldr	r0, [pc, #452]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001dc8:	f004 ff1c 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin IRQ_nrf_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin|IRQ_nrf_Pin;
 8001dcc:	f242 0322 	movw	r3, #8226	; 0x2022
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	486b      	ldr	r0, [pc, #428]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001de2:	f004 ff0f 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001de6:	f640 0341 	movw	r3, #2113	; 0x841
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4864      	ldr	r0, [pc, #400]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001e00:	f004 ff00 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e04:	2308      	movs	r3, #8
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	485c      	ldr	r0, [pc, #368]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001e20:	f004 fef0 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_nrf_Pin */
  GPIO_InitStruct.Pin = CE_nrf_Pin;
 8001e24:	2308      	movs	r3, #8
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_nrf_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4856      	ldr	r0, [pc, #344]	; (8001f94 <MX_GPIO_Init+0x300>)
 8001e3c:	f004 fee2 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_nrf_Pin */
  GPIO_InitStruct.Pin = CSN_nrf_Pin;
 8001e40:	2310      	movs	r3, #16
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_nrf_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	484e      	ldr	r0, [pc, #312]	; (8001f90 <MX_GPIO_Init+0x2fc>)
 8001e58:	f004 fed4 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	484b      	ldr	r0, [pc, #300]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001e70:	f004 fec8 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <MX_GPIO_Init+0x30c>)
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4840      	ldr	r0, [pc, #256]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001e8a:	f004 febb 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001e8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	483a      	ldr	r0, [pc, #232]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001ea4:	f004 feae 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001ea8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4837      	ldr	r0, [pc, #220]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001ebe:	f004 fea1 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001ec2:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001ec6:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482f      	ldr	r0, [pc, #188]	; (8001f98 <MX_GPIO_Init+0x304>)
 8001edc:	f004 fe92 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4829      	ldr	r0, [pc, #164]	; (8001f98 <MX_GPIO_Init+0x304>)
 8001ef4:	f004 fe86 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef8:	2340      	movs	r3, #64	; 0x40
 8001efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4823      	ldr	r0, [pc, #140]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001f10:	f004 fe78 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001f14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481b      	ldr	r0, [pc, #108]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001f2e:	f004 fe69 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f38:	2312      	movs	r3, #18
 8001f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f44:	2304      	movs	r3, #4
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4813      	ldr	r0, [pc, #76]	; (8001f9c <MX_GPIO_Init+0x308>)
 8001f50:	f004 fe58 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001f68:	f004 fe4c 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_GPIO_Init+0x310>)
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_GPIO_Init+0x2f8>)
 8001f80:	f004 fe40 	bl	8006c04 <HAL_GPIO_Init>
 8001f84:	e010      	b.n	8001fa8 <MX_GPIO_Init+0x314>
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	10110000 	.word	0x10110000
 8001fa4:	10120000 	.word	0x10120000

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2028      	movs	r0, #40	; 0x28
 8001fae:	f004 fdf2 	bl	8006b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fb2:	2028      	movs	r0, #40	; 0x28
 8001fb4:	f004 fe0b 	bl	8006bce <HAL_NVIC_EnableIRQ>

}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	; 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd0:	d105      	bne.n	8001fde <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001fda:	f004 ffc7 	bl	8006f6c <HAL_GPIO_WritePin>
	}
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020c00 	.word	0x40020c00

08001fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff0:	b672      	cpsid	i
}
 8001ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <Error_Handler+0x8>
	...

08001ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_MspInit+0x5c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_MspInit+0x5c>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_MspInit+0x5c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_MspInit+0x5c>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_MspInit+0x5c>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_MspInit+0x5c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002036:	2007      	movs	r0, #7
 8002038:	f004 fda2 	bl	8006b80 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2005      	movs	r0, #5
 8002042:	f004 fda8 	bl	8006b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002046:	2005      	movs	r0, #5
 8002048:	f004 fdc1 	bl	8006bce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_I2C_MspInit+0x128>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12d      	bne.n	80020d6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a40      	ldr	r2, [pc, #256]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002096:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209c:	2312      	movs	r3, #18
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020a8:	2304      	movs	r3, #4
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	4835      	ldr	r0, [pc, #212]	; (8002188 <HAL_I2C_MspInit+0x130>)
 80020b4:	f004 fda6 	bl	8006c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020d4:	e050      	b.n	8002178 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2c      	ldr	r2, [pc, #176]	; (800218c <HAL_I2C_MspInit+0x134>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d14b      	bne.n	8002178 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211e:	2312      	movs	r3, #18
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002122:	2301      	movs	r3, #1
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800212a:	2304      	movs	r3, #4
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4816      	ldr	r0, [pc, #88]	; (8002190 <HAL_I2C_MspInit+0x138>)
 8002136:	f004 fd65 	bl	8006c04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800214c:	2304      	movs	r3, #4
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	480f      	ldr	r0, [pc, #60]	; (8002194 <HAL_I2C_MspInit+0x13c>)
 8002158:	f004 fd54 	bl	8006c04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 8002166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_I2C_MspInit+0x12c>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
}
 8002178:	bf00      	nop
 800217a:	3730      	adds	r7, #48	; 0x30
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40005800 	.word	0x40005800
 8002184:	40023800 	.word	0x40023800
 8002188:	40020400 	.word	0x40020400
 800218c:	40005c00 	.word	0x40005c00
 8002190:	40020800 	.word	0x40020800
 8002194:	40020000 	.word	0x40020000

08002198 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a37      	ldr	r2, [pc, #220]	; (8002294 <HAL_I2S_MspInit+0xfc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d168      	bne.n	800228c <HAL_I2S_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a35      	ldr	r2, [pc, #212]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_I2S_MspInit+0x100>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_I2S_MspInit+0x100>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_I2S_MspInit+0x100>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_I2S_MspInit+0x100>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_I2S_MspInit+0x100>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    PB4     ------> I2S3_ext_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800222a:	2310      	movs	r3, #16
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800223a:	2306      	movs	r3, #6
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <HAL_I2S_MspInit+0x104>)
 8002246:	f004 fcdd 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800224a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800225c:	2306      	movs	r3, #6
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <HAL_I2S_MspInit+0x108>)
 8002268:	f004 fccc 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800226c:	2310      	movs	r3, #16
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 800227c:	2307      	movs	r3, #7
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <HAL_I2S_MspInit+0x10c>)
 8002288:	f004 fcbc 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40003c00 	.word	0x40003c00
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020400 	.word	0x40020400

080022a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <HAL_RNG_MspInit+0x3c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10d      	bne.n	80022d6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_RNG_MspInit+0x40>)
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RNG_MspInit+0x40>)
 80022c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c8:	6353      	str	r3, [r2, #52]	; 0x34
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RNG_MspInit+0x40>)
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	50060800 	.word	0x50060800
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a41      	ldr	r2, [pc, #260]	; (8002410 <HAL_SPI_MspInit+0x124>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d12c      	bne.n	8002368 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a3f      	ldr	r2, [pc, #252]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a38      	ldr	r2, [pc, #224]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_SPI_MspInit+0x128>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002346:	23e0      	movs	r3, #224	; 0xe0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002356:	2305      	movs	r3, #5
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	482d      	ldr	r0, [pc, #180]	; (8002418 <HAL_SPI_MspInit+0x12c>)
 8002362:	f004 fc4f 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002366:	e04f      	b.n	8002408 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_SPI_MspInit+0x130>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d14a      	bne.n	8002408 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a26      	ldr	r2, [pc, #152]	; (8002414 <HAL_SPI_MspInit+0x128>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_SPI_MspInit+0x128>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_SPI_MspInit+0x128>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_SPI_MspInit+0x128>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_SPI_MspInit+0x128>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_SPI_MspInit+0x128>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c6:	2304      	movs	r3, #4
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d6:	2305      	movs	r3, #5
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <HAL_SPI_MspInit+0x134>)
 80023e2:	f004 fc0f 	bl	8006c04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80023e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023f8:	2305      	movs	r3, #5
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	4619      	mov	r1, r3
 8002402:	4808      	ldr	r0, [pc, #32]	; (8002424 <HAL_SPI_MspInit+0x138>)
 8002404:	f004 fbfe 	bl	8006c04 <HAL_GPIO_Init>
}
 8002408:	bf00      	nop
 800240a:	3730      	adds	r7, #48	; 0x30
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40013000 	.word	0x40013000
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000
 800241c:	40003800 	.word	0x40003800
 8002420:	40020800 	.word	0x40020800
 8002424:	40020400 	.word	0x40020400

08002428 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_TIM_Encoder_MspInit+0x84>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12c      	bne.n	80024a4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002482:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248c:	2301      	movs	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80024a0:	f004 fbb0 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024e6:	e01a      	b.n	800251e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_Base_MspInit+0x74>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d115      	bne.n	800251e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_TIM_Base_MspInit+0x70>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	201d      	movs	r0, #29
 8002514:	f004 fb3f 	bl	8006b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002518:	201d      	movs	r0, #29
 800251a:	f004 fb58 	bl	8006bce <HAL_NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40000400 	.word	0x40000400

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <NMI_Handler+0x4>

08002536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <MemManage_Handler+0x4>

08002542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler+0x4>

0800254e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f004 f9ec 	bl	8006958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259c:	481b      	ldr	r0, [pc, #108]	; (800260c <TIM2_IRQHandler+0x78>)
 800259e:	f004 fcfe 	bl	8006f9e <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <TIM2_IRQHandler+0x7c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d111      	bne.n	80025ce <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2bc8      	cmp	r3, #200	; 0xc8
 80025b0:	dc0a      	bgt.n	80025c8 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <TIM2_IRQHandler+0x84>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	4a14      	ldr	r2, [pc, #80]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e002      	b.n	80025ce <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <TIM2_IRQHandler+0x7c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <TIM2_IRQHandler+0x7c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d114      	bne.n	8002600 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b63      	cmp	r3, #99	; 0x63
 80025dc:	dd0a      	ble.n	80025f4 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <TIM2_IRQHandler+0x84>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e005      	b.n	8002600 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <TIM2_IRQHandler+0x7c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
		  i = 100;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <TIM2_IRQHandler+0x80>)
 80025fc:	2264      	movs	r2, #100	; 0x64
 80025fe:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <TIM2_IRQHandler+0x84>)
 8002602:	f00a f9da 	bl	800c9ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40020c00 	.word	0x40020c00
 8002610:	200002a8 	.word	0x200002a8
 8002614:	20000004 	.word	0x20000004
 8002618:	200004e0 	.word	0x200004e0

0800261c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <TIM3_IRQHandler+0x1c>)
 8002626:	f004 fcba 	bl	8006f9e <HAL_GPIO_TogglePin>
  read_digits();
 800262a:	f7fe fe2d 	bl	8001288 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <TIM3_IRQHandler+0x20>)
 8002630:	f00a f9c3 	bl	800c9ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40020c00 	.word	0x40020c00
 800263c:	200003e8 	.word	0x200003e8

08002640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002644:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002648:	f004 fcc4 	bl	8006fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <OTG_FS_IRQHandler+0x10>)
 8002656:	f004 ff3f 	bl	80074d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000a90 	.word	0x20000a90

08002664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <_sbrk+0x5c>)
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <_sbrk+0x60>)
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <_sbrk+0x64>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <_sbrk+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d207      	bcs.n	80026a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002694:	f00e f930 	bl	80108f8 <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	220c      	movs	r2, #12
 800269c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a2:	e009      	b.n	80026b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <_sbrk+0x64>)
 80026b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20020000 	.word	0x20020000
 80026c4:	00000400 	.word	0x00000400
 80026c8:	200002ac 	.word	0x200002ac
 80026cc:	20000da8 	.word	0x20000da8

080026d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <SystemInit+0x20>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <SystemInit+0x20>)
 80026dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b08b      	sub	sp, #44	; 0x2c
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4623      	mov	r3, r4
 8002704:	80fb      	strh	r3, [r7, #6]
 8002706:	4603      	mov	r3, r0
 8002708:	80bb      	strh	r3, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	807b      	strh	r3, [r7, #2]
 800270e:	4613      	mov	r3, r2
 8002710:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	f1c3 0301 	rsb	r3, r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800272c:	e061      	b.n	80027f2 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e018      	b.n	800276a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	b298      	uxth	r0, r3
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	b29a      	uxth	r2, r3
 8002740:	88bb      	ldrh	r3, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	883a      	ldrh	r2, [r7, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f000 fc0b 	bl	8002f64 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	b298      	uxth	r0, r3
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	b29b      	uxth	r3, r3
 8002756:	88ba      	ldrh	r2, [r7, #4]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	883a      	ldrh	r2, [r7, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	f000 fc00 	bl	8002f64 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3301      	adds	r3, #1
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	4413      	add	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	dde0      	ble.n	8002738 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e018      	b.n	80027b2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	b298      	uxth	r0, r3
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	b29a      	uxth	r2, r3
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	883a      	ldrh	r2, [r7, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f000 fbe7 	bl	8002f64 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	b298      	uxth	r0, r3
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	b29b      	uxth	r3, r3
 800279e:	88ba      	ldrh	r2, [r7, #4]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	883a      	ldrh	r2, [r7, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f000 fbdc 	bl	8002f64 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3301      	adds	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	4413      	add	r3, r2
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	dde0      	ble.n	8002780 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	3301      	adds	r3, #1
 80027c2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	3302      	adds	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005a      	lsls	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	dd09      	ble.n	80027f2 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	3b01      	subs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3302      	adds	r3, #2
 80027f0:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	da99      	bge.n	800272e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	372c      	adds	r7, #44	; 0x2c
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af02      	add	r7, sp, #8
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	71fb      	strb	r3, [r7, #7]
 8002816:	4603      	mov	r3, r0
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	71bb      	strb	r3, [r7, #6]
 800281e:	4613      	mov	r3, r2
 8002820:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b1f      	cmp	r3, #31
 800282a:	d902      	bls.n	8002832 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	3b20      	subs	r3, #32
 8002830:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002832:	2300      	movs	r3, #0
 8002834:	753b      	strb	r3, [r7, #20]
 8002836:	e012      	b.n	800285e <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002838:	7dfa      	ldrb	r2, [r7, #23]
 800283a:	7d38      	ldrb	r0, [r7, #20]
 800283c:	7d39      	ldrb	r1, [r7, #20]
 800283e:	4c3b      	ldr	r4, [pc, #236]	; (800292c <ILI9341_Draw_Char+0x128>)
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4423      	add	r3, r4
 800284a:	4403      	add	r3, r0
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	440b      	add	r3, r1
 8002854:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002858:	7d3b      	ldrb	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	753b      	strb	r3, [r7, #20]
 800285e:	7d3b      	ldrb	r3, [r7, #20]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d9e9      	bls.n	8002838 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	b299      	uxth	r1, r3
 8002868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800286a:	461a      	mov	r2, r3
 800286c:	0052      	lsls	r2, r2, #1
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	b29c      	uxth	r4, r3
 800287a:	88b8      	ldrh	r0, [r7, #4]
 800287c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4623      	mov	r3, r4
 8002882:	f000 fc37 	bl	80030f4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002886:	2300      	movs	r3, #0
 8002888:	757b      	strb	r3, [r7, #21]
 800288a:	e046      	b.n	800291a <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800288c:	2300      	movs	r3, #0
 800288e:	75bb      	strb	r3, [r7, #22]
 8002890:	e03d      	b.n	800290e <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8002892:	7d7b      	ldrb	r3, [r7, #21]
 8002894:	f107 0218 	add.w	r2, r7, #24
 8002898:	4413      	add	r3, r2
 800289a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800289e:	461a      	mov	r2, r3
 80028a0:	7dbb      	ldrb	r3, [r7, #22]
 80028a2:	fa42 f303 	asr.w	r3, r2, r3
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02c      	beq.n	8002908 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80028ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10f      	bne.n	80028d4 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80028b4:	7d7b      	ldrb	r3, [r7, #21]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	88bb      	ldrh	r3, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	b298      	uxth	r0, r3
 80028be:	79bb      	ldrb	r3, [r7, #6]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	7dbb      	ldrb	r3, [r7, #22]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f000 fb49 	bl	8002f64 <ILI9341_Draw_Pixel>
 80028d2:	e019      	b.n	8002908 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80028d4:	7d7b      	ldrb	r3, [r7, #21]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028da:	fb12 f303 	smulbb	r3, r2, r3
 80028de:	b29a      	uxth	r2, r3
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	b298      	uxth	r0, r3
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	7dbb      	ldrb	r3, [r7, #22]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80028f0:	fb11 f303 	smulbb	r3, r1, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b299      	uxth	r1, r3
 80028fa:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80028fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4623      	mov	r3, r4
 8002904:	f000 fbf6 	bl	80030f4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002908:	7dbb      	ldrb	r3, [r7, #22]
 800290a:	3301      	adds	r3, #1
 800290c:	75bb      	strb	r3, [r7, #22]
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	2b07      	cmp	r3, #7
 8002912:	d9be      	bls.n	8002892 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002914:	7d7b      	ldrb	r3, [r7, #21]
 8002916:	3301      	adds	r3, #1
 8002918:	757b      	strb	r3, [r7, #21]
 800291a:	7d7b      	ldrb	r3, [r7, #21]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d9b5      	bls.n	800288c <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	0801135c 	.word	0x0801135c

08002930 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b087      	sub	sp, #28
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	727b      	strb	r3, [r7, #9]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 800294a:	e016      	b.n	800297a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	60fa      	str	r2, [r7, #12]
 8002952:	7818      	ldrb	r0, [r3, #0]
 8002954:	88fc      	ldrh	r4, [r7, #6]
 8002956:	7a7a      	ldrb	r2, [r7, #9]
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	8c3b      	ldrh	r3, [r7, #32]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4623      	mov	r3, r4
 8002964:	f7ff ff4e 	bl	8002804 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002968:	8c3b      	ldrh	r3, [r7, #32]
 800296a:	461a      	mov	r2, r3
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	4413      	add	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	4413      	add	r3, r2
 8002978:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e4      	bne.n	800294c <ILI9341_Draw_Text+0x1c>
    }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}

0800298c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002990:	2200      	movs	r2, #0
 8002992:	2110      	movs	r1, #16
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <ILI9341_SPI_Init+0x14>)
 8002996:	f004 fae9 	bl	8006f6c <HAL_GPIO_WritePin>
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80029ae:	1df9      	adds	r1, r7, #7
 80029b0:	2301      	movs	r3, #1
 80029b2:	2201      	movs	r2, #1
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <ILI9341_SPI_Send+0x20>)
 80029b6:	f009 f814 	bl	800b9e2 <HAL_SPI_Transmit>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000033c 	.word	0x2000033c

080029c8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2110      	movs	r1, #16
 80029d6:	480a      	ldr	r0, [pc, #40]	; (8002a00 <ILI9341_Write_Command+0x38>)
 80029d8:	f004 fac8 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <ILI9341_Write_Command+0x38>)
 80029e2:	f004 fac3 	bl	8006f6c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ffdb 	bl	80029a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80029ee:	2201      	movs	r2, #1
 80029f0:	2110      	movs	r1, #16
 80029f2:	4803      	ldr	r0, [pc, #12]	; (8002a00 <ILI9341_Write_Command+0x38>)
 80029f4:	f004 faba 	bl	8006f6c <HAL_GPIO_WritePin>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	480a      	ldr	r0, [pc, #40]	; (8002a3c <ILI9341_Write_Data+0x38>)
 8002a14:	f004 faaa 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	4807      	ldr	r0, [pc, #28]	; (8002a3c <ILI9341_Write_Data+0x38>)
 8002a1e:	f004 faa5 	bl	8006f6c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffbd 	bl	80029a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2110      	movs	r1, #16
 8002a2e:	4803      	ldr	r0, [pc, #12]	; (8002a3c <ILI9341_Write_Data+0x38>)
 8002a30:	f004 fa9c 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000

08002a40 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	80fb      	strh	r3, [r7, #6]
 8002a52:	4603      	mov	r3, r0
 8002a54:	80bb      	strh	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002a5e:	202a      	movs	r0, #42	; 0x2a
 8002a60:	f7ff ffb2 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ffc9 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ffc4 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ffbd 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ffb8 	bl	8002a04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002a94:	202b      	movs	r0, #43	; 0x2b
 8002a96:	f7ff ff97 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002a9a:	88bb      	ldrh	r3, [r7, #4]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffae 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ffa9 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002ab2:	883b      	ldrh	r3, [r7, #0]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffa2 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002ac0:	883b      	ldrh	r3, [r7, #0]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff9d 	bl	8002a04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002aca:	202c      	movs	r0, #44	; 0x2c
 8002acc:	f7ff ff7c 	bl	80029c8 <ILI9341_Write_Command>
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}

08002ad8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2120      	movs	r1, #32
 8002ae0:	480a      	ldr	r0, [pc, #40]	; (8002b0c <ILI9341_Reset+0x34>)
 8002ae2:	f004 fa43 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002ae6:	20c8      	movs	r0, #200	; 0xc8
 8002ae8:	f003 ff56 	bl	8006998 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2110      	movs	r1, #16
 8002af0:	4806      	ldr	r0, [pc, #24]	; (8002b0c <ILI9341_Reset+0x34>)
 8002af2:	f004 fa3b 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002af6:	20c8      	movs	r0, #200	; 0xc8
 8002af8:	f003 ff4e 	bl	8006998 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002afc:	2201      	movs	r2, #1
 8002afe:	2120      	movs	r1, #32
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <ILI9341_Reset+0x34>)
 8002b02:	f004 fa33 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002b1e:	2036      	movs	r0, #54	; 0x36
 8002b20:	f7ff ff52 	bl	80029c8 <ILI9341_Write_Command>
HAL_Delay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f003 ff37 	bl	8006998 <HAL_Delay>
	
switch(screen_rotation) 
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d837      	bhi.n	8002ba0 <ILI9341_Set_Rotation+0x90>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <ILI9341_Set_Rotation+0x28>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b5f 	.word	0x08002b5f
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002b8b 	.word	0x08002b8b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002b48:	2048      	movs	r0, #72	; 0x48
 8002b4a:	f7ff ff5b 	bl	8002a04 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b50:	22f0      	movs	r2, #240	; 0xf0
 8002b52:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b5a:	801a      	strh	r2, [r3, #0]
			break;
 8002b5c:	e021      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f7ff ff50 	bl	8002a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b6e:	22f0      	movs	r2, #240	; 0xf0
 8002b70:	801a      	strh	r2, [r3, #0]
			break;
 8002b72:	e016      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002b74:	2088      	movs	r0, #136	; 0x88
 8002b76:	f7ff ff45 	bl	8002a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b7c:	22f0      	movs	r2, #240	; 0xf0
 8002b7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b86:	801a      	strh	r2, [r3, #0]
			break;
 8002b88:	e00b      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002b8a:	20e8      	movs	r0, #232	; 0xe8
 8002b8c:	f7ff ff3a 	bl	8002a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b9a:	22f0      	movs	r2, #240	; 0xf0
 8002b9c:	801a      	strh	r2, [r3, #0]
			break;
 8002b9e:	e000      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002ba0:	bf00      	nop
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000000e 	.word	0x2000000e
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2120      	movs	r1, #32
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <ILI9341_Enable+0x14>)
 8002bbe:	f004 f9d5 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002bd0:	f7ff fff0 	bl	8002bb4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002bd4:	f7ff feda 	bl	800298c <ILI9341_SPI_Init>
ILI9341_Reset();
 8002bd8:	f7ff ff7e 	bl	8002ad8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff fef3 	bl	80029c8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be6:	f003 fed7 	bl	8006998 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002bea:	20cb      	movs	r0, #203	; 0xcb
 8002bec:	f7ff feec 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002bf0:	2039      	movs	r0, #57	; 0x39
 8002bf2:	f7ff ff07 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002bf6:	202c      	movs	r0, #44	; 0x2c
 8002bf8:	f7ff ff04 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7ff ff01 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002c02:	2034      	movs	r0, #52	; 0x34
 8002c04:	f7ff fefe 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f7ff fefb 	bl	8002a04 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002c0e:	20cf      	movs	r0, #207	; 0xcf
 8002c10:	f7ff feda 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff fef5 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c1a:	20c1      	movs	r0, #193	; 0xc1
 8002c1c:	f7ff fef2 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002c20:	2030      	movs	r0, #48	; 0x30
 8002c22:	f7ff feef 	bl	8002a04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002c26:	20e8      	movs	r0, #232	; 0xe8
 8002c28:	f7ff fece 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002c2c:	2085      	movs	r0, #133	; 0x85
 8002c2e:	f7ff fee9 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7ff fee6 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002c38:	2078      	movs	r0, #120	; 0x78
 8002c3a:	f7ff fee3 	bl	8002a04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002c3e:	20ea      	movs	r0, #234	; 0xea
 8002c40:	f7ff fec2 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7ff fedd 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7ff feda 	bl	8002a04 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002c50:	20ed      	movs	r0, #237	; 0xed
 8002c52:	f7ff feb9 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	f7ff fed4 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f7ff fed1 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002c62:	2012      	movs	r0, #18
 8002c64:	f7ff fece 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002c68:	2081      	movs	r0, #129	; 0x81
 8002c6a:	f7ff fecb 	bl	8002a04 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002c6e:	20f7      	movs	r0, #247	; 0xf7
 8002c70:	f7ff feaa 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002c74:	2020      	movs	r0, #32
 8002c76:	f7ff fec5 	bl	8002a04 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002c7a:	20c0      	movs	r0, #192	; 0xc0
 8002c7c:	f7ff fea4 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002c80:	2023      	movs	r0, #35	; 0x23
 8002c82:	f7ff febf 	bl	8002a04 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002c86:	20c1      	movs	r0, #193	; 0xc1
 8002c88:	f7ff fe9e 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002c8c:	2010      	movs	r0, #16
 8002c8e:	f7ff feb9 	bl	8002a04 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002c92:	20c5      	movs	r0, #197	; 0xc5
 8002c94:	f7ff fe98 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002c98:	203e      	movs	r0, #62	; 0x3e
 8002c9a:	f7ff feb3 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002c9e:	2028      	movs	r0, #40	; 0x28
 8002ca0:	f7ff feb0 	bl	8002a04 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002ca4:	20c7      	movs	r0, #199	; 0xc7
 8002ca6:	f7ff fe8f 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002caa:	2086      	movs	r0, #134	; 0x86
 8002cac:	f7ff feaa 	bl	8002a04 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002cb0:	2036      	movs	r0, #54	; 0x36
 8002cb2:	f7ff fe89 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002cb6:	2048      	movs	r0, #72	; 0x48
 8002cb8:	f7ff fea4 	bl	8002a04 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002cbc:	203a      	movs	r0, #58	; 0x3a
 8002cbe:	f7ff fe83 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002cc2:	2055      	movs	r0, #85	; 0x55
 8002cc4:	f7ff fe9e 	bl	8002a04 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002cc8:	20b1      	movs	r0, #177	; 0xb1
 8002cca:	f7ff fe7d 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7ff fe98 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002cd4:	2018      	movs	r0, #24
 8002cd6:	f7ff fe95 	bl	8002a04 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002cda:	20b6      	movs	r0, #182	; 0xb6
 8002cdc:	f7ff fe74 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002ce0:	2008      	movs	r0, #8
 8002ce2:	f7ff fe8f 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002ce6:	2082      	movs	r0, #130	; 0x82
 8002ce8:	f7ff fe8c 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002cec:	2027      	movs	r0, #39	; 0x27
 8002cee:	f7ff fe89 	bl	8002a04 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002cf2:	20f2      	movs	r0, #242	; 0xf2
 8002cf4:	f7ff fe68 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff fe83 	bl	8002a04 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002cfe:	2026      	movs	r0, #38	; 0x26
 8002d00:	f7ff fe62 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002d04:	2001      	movs	r0, #1
 8002d06:	f7ff fe7d 	bl	8002a04 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002d0a:	20e0      	movs	r0, #224	; 0xe0
 8002d0c:	f7ff fe5c 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002d10:	200f      	movs	r0, #15
 8002d12:	f7ff fe77 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002d16:	2031      	movs	r0, #49	; 0x31
 8002d18:	f7ff fe74 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002d1c:	202b      	movs	r0, #43	; 0x2b
 8002d1e:	f7ff fe71 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002d22:	200c      	movs	r0, #12
 8002d24:	f7ff fe6e 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d28:	200e      	movs	r0, #14
 8002d2a:	f7ff fe6b 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002d2e:	2008      	movs	r0, #8
 8002d30:	f7ff fe68 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002d34:	204e      	movs	r0, #78	; 0x4e
 8002d36:	f7ff fe65 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002d3a:	20f1      	movs	r0, #241	; 0xf1
 8002d3c:	f7ff fe62 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002d40:	2037      	movs	r0, #55	; 0x37
 8002d42:	f7ff fe5f 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002d46:	2007      	movs	r0, #7
 8002d48:	f7ff fe5c 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002d4c:	2010      	movs	r0, #16
 8002d4e:	f7ff fe59 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002d52:	2003      	movs	r0, #3
 8002d54:	f7ff fe56 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d58:	200e      	movs	r0, #14
 8002d5a:	f7ff fe53 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002d5e:	2009      	movs	r0, #9
 8002d60:	f7ff fe50 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7ff fe4d 	bl	8002a04 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002d6a:	20e1      	movs	r0, #225	; 0xe1
 8002d6c:	f7ff fe2c 	bl	80029c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7ff fe47 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d76:	200e      	movs	r0, #14
 8002d78:	f7ff fe44 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002d7c:	2014      	movs	r0, #20
 8002d7e:	f7ff fe41 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002d82:	2003      	movs	r0, #3
 8002d84:	f7ff fe3e 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002d88:	2011      	movs	r0, #17
 8002d8a:	f7ff fe3b 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002d8e:	2007      	movs	r0, #7
 8002d90:	f7ff fe38 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002d94:	2031      	movs	r0, #49	; 0x31
 8002d96:	f7ff fe35 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002d9a:	20c1      	movs	r0, #193	; 0xc1
 8002d9c:	f7ff fe32 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002da0:	2048      	movs	r0, #72	; 0x48
 8002da2:	f7ff fe2f 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002da6:	2008      	movs	r0, #8
 8002da8:	f7ff fe2c 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002dac:	200f      	movs	r0, #15
 8002dae:	f7ff fe29 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002db2:	200c      	movs	r0, #12
 8002db4:	f7ff fe26 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002db8:	2031      	movs	r0, #49	; 0x31
 8002dba:	f7ff fe23 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002dbe:	2036      	movs	r0, #54	; 0x36
 8002dc0:	f7ff fe20 	bl	8002a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002dc4:	200f      	movs	r0, #15
 8002dc6:	f7ff fe1d 	bl	8002a04 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002dca:	2011      	movs	r0, #17
 8002dcc:	f7ff fdfc 	bl	80029c8 <ILI9341_Write_Command>
HAL_Delay(120);
 8002dd0:	2078      	movs	r0, #120	; 0x78
 8002dd2:	f003 fde1 	bl	8006998 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002dd6:	2029      	movs	r0, #41	; 0x29
 8002dd8:	f7ff fdf6 	bl	80029c8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f7ff fe97 	bl	8002b10 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002de2:	200a      	movs	r0, #10
 8002de4:	f003 fdd8 	bl	8006998 <HAL_Delay>
//
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	80fb      	strh	r3, [r7, #6]
 8002df8:	466b      	mov	r3, sp
 8002dfa:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e08:	d202      	bcs.n	8002e10 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e002      	b.n	8002e16 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002e10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002e16:	2201      	movs	r2, #1
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	483d      	ldr	r0, [pc, #244]	; (8002f10 <ILI9341_Draw_Colour_Burst+0x124>)
 8002e1c:	f004 f8a6 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2110      	movs	r1, #16
 8002e24:	483a      	ldr	r0, [pc, #232]	; (8002f10 <ILI9341_Draw_Colour_Burst+0x124>)
 8002e26:	f004 f8a1 	bl	8006f6c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002e34:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e36:	4623      	mov	r3, r4
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e50:	00c2      	lsls	r2, r0, #3
 8002e52:	4620      	mov	r0, r4
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00cb      	lsls	r3, r1, #3
 8002e62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e66:	00c2      	lsls	r2, r0, #3
 8002e68:	1de3      	adds	r3, r4, #7
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	ebad 0d03 	sub.w	sp, sp, r3
 8002e72:	466b      	mov	r3, sp
 8002e74:	3300      	adds	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7c:	e00e      	b.n	8002e9c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	4413      	add	r3, r2
 8002e84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e88:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	b2d1      	uxtb	r1, r2
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	3302      	adds	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3ec      	bcc.n	8002e7e <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ebe:	fb01 f202 	mul.w	r2, r1, r2
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed0:	e009      	b.n	8002ee6 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	230a      	movs	r3, #10
 8002eda:	480e      	ldr	r0, [pc, #56]	; (8002f14 <ILI9341_Draw_Colour_Burst+0x128>)
 8002edc:	f008 fd81 	bl	800b9e2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3f1      	bcc.n	8002ed2 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	230a      	movs	r3, #10
 8002ef6:	4807      	ldr	r0, [pc, #28]	; (8002f14 <ILI9341_Draw_Colour_Burst+0x128>)
 8002ef8:	f008 fd73 	bl	800b9e2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002efc:	2201      	movs	r2, #1
 8002efe:	2110      	movs	r1, #16
 8002f00:	4803      	ldr	r0, [pc, #12]	; (8002f10 <ILI9341_Draw_Colour_Burst+0x124>)
 8002f02:	f004 f833 	bl	8006f6c <HAL_GPIO_WritePin>
 8002f06:	46ad      	mov	sp, r5
}
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	2000033c 	.word	0x2000033c

08002f18 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <ILI9341_Fill_Screen+0x44>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <ILI9341_Fill_Screen+0x48>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7ff fd85 	bl	8002a40 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <ILI9341_Fill_Screen+0x44>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <ILI9341_Fill_Screen+0x48>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	fb03 f302 	mul.w	r3, r3, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff4c 	bl	8002dec <ILI9341_Draw_Colour_Burst>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000000e 	.word	0x2000000e
 8002f60:	2000000c 	.word	0x2000000c

08002f64 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	80bb      	strh	r3, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <ILI9341_Draw_Pixel+0x180>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	f080 80ac 	bcs.w	80030dc <ILI9341_Draw_Pixel+0x178>
 8002f84:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <ILI9341_Draw_Pixel+0x184>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	88ba      	ldrh	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f080 80a5 	bcs.w	80030dc <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f92:	2200      	movs	r2, #0
 8002f94:	2140      	movs	r1, #64	; 0x40
 8002f96:	4855      	ldr	r0, [pc, #340]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8002f98:	f003 ffe8 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	4852      	ldr	r0, [pc, #328]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8002fa2:	f003 ffe3 	bl	8006f6c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002fa6:	202a      	movs	r0, #42	; 0x2a
 8002fa8:	f7ff fcfc 	bl	80029a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002fac:	2201      	movs	r2, #1
 8002fae:	2140      	movs	r1, #64	; 0x40
 8002fb0:	484e      	ldr	r0, [pc, #312]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8002fb2:	f003 ffdb 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2110      	movs	r1, #16
 8002fba:	484c      	ldr	r0, [pc, #304]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8002fbc:	f003 ffd6 	bl	8006f6c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	4849      	ldr	r0, [pc, #292]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8002fc6:	f003 ffd1 	bl	8006f6c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	753b      	strb	r3, [r7, #20]
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	757b      	strb	r3, [r7, #21]
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	121b      	asrs	r3, r3, #8
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	75bb      	strb	r3, [r7, #22]
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002fee:	f107 0114 	add.w	r1, r7, #20
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	483e      	ldr	r0, [pc, #248]	; (80030f0 <ILI9341_Draw_Pixel+0x18c>)
 8002ff8:	f008 fcf3 	bl	800b9e2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	2110      	movs	r1, #16
 8003000:	483a      	ldr	r0, [pc, #232]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003002:	f003 ffb3 	bl	8006f6c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003006:	2200      	movs	r2, #0
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	4838      	ldr	r0, [pc, #224]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 800300c:	f003 ffae 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003010:	2200      	movs	r2, #0
 8003012:	2110      	movs	r1, #16
 8003014:	4835      	ldr	r0, [pc, #212]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003016:	f003 ffa9 	bl	8006f6c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800301a:	202b      	movs	r0, #43	; 0x2b
 800301c:	f7ff fcc2 	bl	80029a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003020:	2201      	movs	r2, #1
 8003022:	2140      	movs	r1, #64	; 0x40
 8003024:	4831      	ldr	r0, [pc, #196]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003026:	f003 ffa1 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800302a:	2201      	movs	r2, #1
 800302c:	2110      	movs	r1, #16
 800302e:	482f      	ldr	r0, [pc, #188]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003030:	f003 ff9c 	bl	8006f6c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	2110      	movs	r1, #16
 8003038:	482c      	ldr	r0, [pc, #176]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 800303a:	f003 ff97 	bl	8006f6c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	743b      	strb	r3, [r7, #16]
 8003048:	88bb      	ldrh	r3, [r7, #4]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	747b      	strb	r3, [r7, #17]
 800304e:	88bb      	ldrh	r3, [r7, #4]
 8003050:	3301      	adds	r3, #1
 8003052:	121b      	asrs	r3, r3, #8
 8003054:	b2db      	uxtb	r3, r3
 8003056:	74bb      	strb	r3, [r7, #18]
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003062:	f107 0110 	add.w	r1, r7, #16
 8003066:	2301      	movs	r3, #1
 8003068:	2204      	movs	r2, #4
 800306a:	4821      	ldr	r0, [pc, #132]	; (80030f0 <ILI9341_Draw_Pixel+0x18c>)
 800306c:	f008 fcb9 	bl	800b9e2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003070:	2201      	movs	r2, #1
 8003072:	2110      	movs	r1, #16
 8003074:	481d      	ldr	r0, [pc, #116]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003076:	f003 ff79 	bl	8006f6c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	481b      	ldr	r0, [pc, #108]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 8003080:	f003 ff74 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003084:	2200      	movs	r2, #0
 8003086:	2110      	movs	r1, #16
 8003088:	4818      	ldr	r0, [pc, #96]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 800308a:	f003 ff6f 	bl	8006f6c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800308e:	202c      	movs	r0, #44	; 0x2c
 8003090:	f7ff fc88 	bl	80029a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003094:	2201      	movs	r2, #1
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	4814      	ldr	r0, [pc, #80]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 800309a:	f003 ff67 	bl	8006f6c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800309e:	2201      	movs	r2, #1
 80030a0:	2110      	movs	r1, #16
 80030a2:	4812      	ldr	r0, [pc, #72]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 80030a4:	f003 ff62 	bl	8006f6c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2110      	movs	r1, #16
 80030ac:	480f      	ldr	r0, [pc, #60]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 80030ae:	f003 ff5d 	bl	8006f6c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	733b      	strb	r3, [r7, #12]
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80030c2:	f107 010c 	add.w	r1, r7, #12
 80030c6:	2301      	movs	r3, #1
 80030c8:	2202      	movs	r2, #2
 80030ca:	4809      	ldr	r0, [pc, #36]	; (80030f0 <ILI9341_Draw_Pixel+0x18c>)
 80030cc:	f008 fc89 	bl	800b9e2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	2110      	movs	r1, #16
 80030d4:	4805      	ldr	r0, [pc, #20]	; (80030ec <ILI9341_Draw_Pixel+0x188>)
 80030d6:	f003 ff49 	bl	8006f6c <HAL_GPIO_WritePin>
 80030da:	e000      	b.n	80030de <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80030dc:	bf00      	nop
	
}
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	2000000e 	.word	0x2000000e
 80030e8:	2000000c 	.word	0x2000000c
 80030ec:	40021000 	.word	0x40021000
 80030f0:	2000033c 	.word	0x2000033c

080030f4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4623      	mov	r3, r4
 8003104:	80fb      	strh	r3, [r7, #6]
 8003106:	4603      	mov	r3, r0
 8003108:	80bb      	strh	r3, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	807b      	strh	r3, [r7, #2]
 800310e:	4613      	mov	r3, r2
 8003110:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <ILI9341_Draw_Rectangle+0xb0>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	429a      	cmp	r2, r3
 800311c:	d23d      	bcs.n	800319a <ILI9341_Draw_Rectangle+0xa6>
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <ILI9341_Draw_Rectangle+0xb4>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	88ba      	ldrh	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d237      	bcs.n	800319a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	4413      	add	r3, r2
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <ILI9341_Draw_Rectangle+0xb0>)
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	b292      	uxth	r2, r2
 8003136:	4293      	cmp	r3, r2
 8003138:	dd05      	ble.n	8003146 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <ILI9341_Draw_Rectangle+0xb0>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29a      	uxth	r2, r3
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003146:	88ba      	ldrh	r2, [r7, #4]
 8003148:	883b      	ldrh	r3, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <ILI9341_Draw_Rectangle+0xb4>)
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	b292      	uxth	r2, r2
 8003152:	4293      	cmp	r3, r2
 8003154:	dd05      	ble.n	8003162 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <ILI9341_Draw_Rectangle+0xb4>)
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	88bb      	ldrh	r3, [r7, #4]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	4413      	add	r3, r2
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29c      	uxth	r4, r3
 800316e:	88ba      	ldrh	r2, [r7, #4]
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	88b9      	ldrh	r1, [r7, #4]
 800317c:	88f8      	ldrh	r0, [r7, #6]
 800317e:	4622      	mov	r2, r4
 8003180:	f7ff fc5e 	bl	8002a40 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003184:	883b      	ldrh	r3, [r7, #0]
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	461a      	mov	r2, r3
 800318e:	8b3b      	ldrh	r3, [r7, #24]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe2a 	bl	8002dec <ILI9341_Draw_Colour_Burst>
 8003198:	e000      	b.n	800319c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800319a:	bf00      	nop
}
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000000e 	.word	0x2000000e
 80031a8:	2000000c 	.word	0x2000000c

080031ac <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 80031b2:	4832      	ldr	r0, [pc, #200]	; (800327c <menu+0xd0>)
 80031b4:	f000 fd4a 	bl	8003c4c <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 80031b8:	4831      	ldr	r0, [pc, #196]	; (8003280 <menu+0xd4>)
 80031ba:	f000 fd19 	bl	8003bf0 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 80031be:	f000 fc4f 	bl	8003a60 <getPressKey>
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2bff      	cmp	r3, #255	; 0xff
 80031ca:	d04a      	beq.n	8003262 <menu+0xb6>
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <menu+0xd8>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d043      	beq.n	8003262 <menu+0xb6>
	   {
			flagPressed = true;
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <menu+0xd8>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d83b      	bhi.n	800325e <menu+0xb2>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <menu+0x40>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003201 	.word	0x08003201
 80031f0:	08003211 	.word	0x08003211
 80031f4:	0800322d 	.word	0x0800322d
 80031f8:	08003249 	.word	0x08003249
 80031fc:	08003259 	.word	0x08003259
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8003200:	f000 fcea 	bl	8003bd8 <Menu_GetCurrentMenu>
 8003204:	4603      	mov	r3, r0
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fcf1 	bl	8003bf0 <Menu_Navigate>
					break;
 800320e:	e027      	b.n	8003260 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <menu+0xdc>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	3b01      	subs	r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <menu+0xdc>)
 800321a:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 800321c:	f000 fcdc 	bl	8003bd8 <Menu_GetCurrentMenu>
 8003220:	4603      	mov	r3, r0
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fce3 	bl	8003bf0 <Menu_Navigate>
					break;
 800322a:	e019      	b.n	8003260 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <menu+0xdc>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <menu+0xdc>)
 8003236:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8003238:	f000 fcce 	bl	8003bd8 <Menu_GetCurrentMenu>
 800323c:	4603      	mov	r3, r0
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fcd5 	bl	8003bf0 <Menu_Navigate>
					break;
 8003246:	e00b      	b.n	8003260 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8003248:	f000 fcc6 	bl	8003bd8 <Menu_GetCurrentMenu>
 800324c:	4603      	mov	r3, r0
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fccd 	bl	8003bf0 <Menu_Navigate>
					break;
 8003256:	e003      	b.n	8003260 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8003258:	f000 fd0c 	bl	8003c74 <Menu_EnterCurrentItem>
					break;
 800325c:	e000      	b.n	8003260 <menu+0xb4>

			 default:
			  break;
 800325e:	bf00      	nop
			switch(pressed_key)
 8003260:	e00b      	b.n	800327a <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8003262:	f000 fbfd 	bl	8003a60 <getPressKey>
 8003266:	4603      	mov	r3, r0
 8003268:	2bff      	cmp	r3, #255	; 0xff
 800326a:	d1a8      	bne.n	80031be <menu+0x12>
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <menu+0xd8>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0a4      	beq.n	80031be <menu+0x12>
	   {
		   flagPressed = false;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <menu+0xd8>)
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
	  {
 800327a:	e7a0      	b.n	80031be <menu+0x12>
 800327c:	08003b91 	.word	0x08003b91
 8003280:	080115b4 	.word	0x080115b4
 8003284:	200002b4 	.word	0x200002b4
 8003288:	2000014c 	.word	0x2000014c

0800328c <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003292:	2300      	movs	r3, #0
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329e:	226e      	movs	r2, #110	; 0x6e
 80032a0:	211e      	movs	r1, #30
 80032a2:	4884      	ldr	r0, [pc, #528]	; (80034b4 <print_all_top_menu+0x228>)
 80032a4:	f7ff fb44 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80032a8:	2300      	movs	r3, #0
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b4:	2282      	movs	r2, #130	; 0x82
 80032b6:	211e      	movs	r1, #30
 80032b8:	487e      	ldr	r0, [pc, #504]	; (80034b4 <print_all_top_menu+0x228>)
 80032ba:	f7ff fb39 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80032be:	2300      	movs	r3, #0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ca:	2296      	movs	r2, #150	; 0x96
 80032cc:	211e      	movs	r1, #30
 80032ce:	4879      	ldr	r0, [pc, #484]	; (80034b4 <print_all_top_menu+0x228>)
 80032d0:	f7ff fb2e 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80032d4:	2300      	movs	r3, #0
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032e0:	22aa      	movs	r2, #170	; 0xaa
 80032e2:	211e      	movs	r1, #30
 80032e4:	4873      	ldr	r0, [pc, #460]	; (80034b4 <print_all_top_menu+0x228>)
 80032e6:	f7ff fb23 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f6:	22be      	movs	r2, #190	; 0xbe
 80032f8:	211e      	movs	r1, #30
 80032fa:	486e      	ldr	r0, [pc, #440]	; (80034b4 <print_all_top_menu+0x228>)
 80032fc:	f7ff fb18 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800330c:	22d2      	movs	r2, #210	; 0xd2
 800330e:	211e      	movs	r1, #30
 8003310:	4868      	ldr	r0, [pc, #416]	; (80034b4 <print_all_top_menu+0x228>)
 8003312:	f7ff fb0d 	bl	8002930 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8003316:	2300      	movs	r3, #0
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003322:	226e      	movs	r2, #110	; 0x6e
 8003324:	211e      	movs	r1, #30
 8003326:	4864      	ldr	r0, [pc, #400]	; (80034b8 <print_all_top_menu+0x22c>)
 8003328:	f7ff fb02 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 800332c:	2300      	movs	r3, #0
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2302      	movs	r3, #2
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003338:	2282      	movs	r2, #130	; 0x82
 800333a:	211e      	movs	r1, #30
 800333c:	485f      	ldr	r0, [pc, #380]	; (80034bc <print_all_top_menu+0x230>)
 800333e:	f7ff faf7 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8003342:	2300      	movs	r3, #0
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334e:	2296      	movs	r2, #150	; 0x96
 8003350:	211e      	movs	r1, #30
 8003352:	485b      	ldr	r0, [pc, #364]	; (80034c0 <print_all_top_menu+0x234>)
 8003354:	f7ff faec 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8003358:	2300      	movs	r3, #0
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2302      	movs	r3, #2
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003364:	22aa      	movs	r2, #170	; 0xaa
 8003366:	211e      	movs	r1, #30
 8003368:	4856      	ldr	r0, [pc, #344]	; (80034c4 <print_all_top_menu+0x238>)
 800336a:	f7ff fae1 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 800336e:	2300      	movs	r3, #0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337a:	22be      	movs	r2, #190	; 0xbe
 800337c:	211e      	movs	r1, #30
 800337e:	4852      	ldr	r0, [pc, #328]	; (80034c8 <print_all_top_menu+0x23c>)
 8003380:	f7ff fad6 	bl	8002930 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8003384:	4b51      	ldr	r3, [pc, #324]	; (80034cc <print_all_top_menu+0x240>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 800338c:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <print_all_top_menu+0x240>)
 800338e:	2205      	movs	r2, #5
 8003390:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8003392:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <print_all_top_menu+0x240>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d902      	bls.n	80033a0 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 800339a:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <print_all_top_menu+0x240>)
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2302      	movs	r3, #2
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ac:	226e      	movs	r2, #110	; 0x6e
 80033ae:	2105      	movs	r1, #5
 80033b0:	4847      	ldr	r0, [pc, #284]	; (80034d0 <print_all_top_menu+0x244>)
 80033b2:	f7ff fabd 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80033b6:	2300      	movs	r3, #0
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	2302      	movs	r3, #2
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033c2:	2282      	movs	r2, #130	; 0x82
 80033c4:	2105      	movs	r1, #5
 80033c6:	4842      	ldr	r0, [pc, #264]	; (80034d0 <print_all_top_menu+0x244>)
 80033c8:	f7ff fab2 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80033cc:	2300      	movs	r3, #0
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	2302      	movs	r3, #2
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d8:	2296      	movs	r2, #150	; 0x96
 80033da:	2105      	movs	r1, #5
 80033dc:	483c      	ldr	r0, [pc, #240]	; (80034d0 <print_all_top_menu+0x244>)
 80033de:	f7ff faa7 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80033e2:	2300      	movs	r3, #0
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	2302      	movs	r3, #2
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ee:	22aa      	movs	r2, #170	; 0xaa
 80033f0:	2105      	movs	r1, #5
 80033f2:	4837      	ldr	r0, [pc, #220]	; (80034d0 <print_all_top_menu+0x244>)
 80033f4:	f7ff fa9c 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80033f8:	2300      	movs	r3, #0
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	2302      	movs	r3, #2
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003404:	22be      	movs	r2, #190	; 0xbe
 8003406:	2105      	movs	r1, #5
 8003408:	4831      	ldr	r0, [pc, #196]	; (80034d0 <print_all_top_menu+0x244>)
 800340a:	f7ff fa91 	bl	8002930 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <print_all_top_menu+0x240>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	2b04      	cmp	r3, #4
 8003416:	d849      	bhi.n	80034ac <print_all_top_menu+0x220>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <print_all_top_menu+0x194>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003435 	.word	0x08003435
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003465 	.word	0x08003465
 800342c:	0800347d 	.word	0x0800347d
 8003430:	08003495 	.word	0x08003495
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003440:	226e      	movs	r2, #110	; 0x6e
 8003442:	2105      	movs	r1, #5
 8003444:	4823      	ldr	r0, [pc, #140]	; (80034d4 <print_all_top_menu+0x248>)
 8003446:	f7ff fa73 	bl	8002930 <ILI9341_Draw_Text>
			break;
 800344a:	e02f      	b.n	80034ac <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800344c:	2300      	movs	r3, #0
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003458:	2282      	movs	r2, #130	; 0x82
 800345a:	2105      	movs	r1, #5
 800345c:	481d      	ldr	r0, [pc, #116]	; (80034d4 <print_all_top_menu+0x248>)
 800345e:	f7ff fa67 	bl	8002930 <ILI9341_Draw_Text>
			break;
 8003462:	e023      	b.n	80034ac <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003464:	2300      	movs	r3, #0
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2302      	movs	r3, #2
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003470:	2296      	movs	r2, #150	; 0x96
 8003472:	2105      	movs	r1, #5
 8003474:	4817      	ldr	r0, [pc, #92]	; (80034d4 <print_all_top_menu+0x248>)
 8003476:	f7ff fa5b 	bl	8002930 <ILI9341_Draw_Text>
			break;
 800347a:	e017      	b.n	80034ac <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 800347c:	2300      	movs	r3, #0
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2302      	movs	r3, #2
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003488:	22aa      	movs	r2, #170	; 0xaa
 800348a:	2105      	movs	r1, #5
 800348c:	4811      	ldr	r0, [pc, #68]	; (80034d4 <print_all_top_menu+0x248>)
 800348e:	f7ff fa4f 	bl	8002930 <ILI9341_Draw_Text>
			break;
 8003492:	e00b      	b.n	80034ac <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8003494:	2300      	movs	r3, #0
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	2302      	movs	r3, #2
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034a0:	22be      	movs	r2, #190	; 0xbe
 80034a2:	2105      	movs	r1, #5
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <print_all_top_menu+0x248>)
 80034a6:	f7ff fa43 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80034aa:	bf00      	nop
	}

}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08011228 	.word	0x08011228
 80034b8:	20000014 	.word	0x20000014
 80034bc:	20000032 	.word	0x20000032
 80034c0:	20000050 	.word	0x20000050
 80034c4:	2000006e 	.word	0x2000006e
 80034c8:	2000008c 	.word	0x2000008c
 80034cc:	2000014c 	.word	0x2000014c
 80034d0:	0801124c 	.word	0x0801124c
 80034d4:	08011250 	.word	0x08011250

080034d8 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80034de:	2300      	movs	r3, #0
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	2302      	movs	r3, #2
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ea:	226e      	movs	r2, #110	; 0x6e
 80034ec:	211e      	movs	r1, #30
 80034ee:	4877      	ldr	r0, [pc, #476]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 80034f0:	f7ff fa1e 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80034f4:	2300      	movs	r3, #0
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2302      	movs	r3, #2
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003500:	2282      	movs	r2, #130	; 0x82
 8003502:	211e      	movs	r1, #30
 8003504:	4871      	ldr	r0, [pc, #452]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 8003506:	f7ff fa13 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800350a:	2300      	movs	r3, #0
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2302      	movs	r3, #2
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003516:	2296      	movs	r2, #150	; 0x96
 8003518:	211e      	movs	r1, #30
 800351a:	486c      	ldr	r0, [pc, #432]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 800351c:	f7ff fa08 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003520:	2300      	movs	r3, #0
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2302      	movs	r3, #2
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800352c:	22aa      	movs	r2, #170	; 0xaa
 800352e:	211e      	movs	r1, #30
 8003530:	4866      	ldr	r0, [pc, #408]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 8003532:	f7ff f9fd 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003536:	2300      	movs	r3, #0
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2302      	movs	r3, #2
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003542:	22be      	movs	r2, #190	; 0xbe
 8003544:	211e      	movs	r1, #30
 8003546:	4861      	ldr	r0, [pc, #388]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 8003548:	f7ff f9f2 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 800354c:	2300      	movs	r3, #0
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2302      	movs	r3, #2
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003558:	22d2      	movs	r2, #210	; 0xd2
 800355a:	211e      	movs	r1, #30
 800355c:	485b      	ldr	r0, [pc, #364]	; (80036cc <print_all_menu_1_menus+0x1f4>)
 800355e:	f7ff f9e7 	bl	8002930 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003562:	2300      	movs	r3, #0
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	2302      	movs	r3, #2
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800356e:	226e      	movs	r2, #110	; 0x6e
 8003570:	2105      	movs	r1, #5
 8003572:	4857      	ldr	r0, [pc, #348]	; (80036d0 <print_all_menu_1_menus+0x1f8>)
 8003574:	f7ff f9dc 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003578:	2300      	movs	r3, #0
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	2302      	movs	r3, #2
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003584:	2282      	movs	r2, #130	; 0x82
 8003586:	2105      	movs	r1, #5
 8003588:	4851      	ldr	r0, [pc, #324]	; (80036d0 <print_all_menu_1_menus+0x1f8>)
 800358a:	f7ff f9d1 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2302      	movs	r3, #2
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800359a:	2296      	movs	r2, #150	; 0x96
 800359c:	2105      	movs	r1, #5
 800359e:	484c      	ldr	r0, [pc, #304]	; (80036d0 <print_all_menu_1_menus+0x1f8>)
 80035a0:	f7ff f9c6 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80035a4:	2300      	movs	r3, #0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	2302      	movs	r3, #2
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b0:	22aa      	movs	r2, #170	; 0xaa
 80035b2:	2105      	movs	r1, #5
 80035b4:	4846      	ldr	r0, [pc, #280]	; (80036d0 <print_all_menu_1_menus+0x1f8>)
 80035b6:	f7ff f9bb 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2302      	movs	r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c6:	22be      	movs	r2, #190	; 0xbe
 80035c8:	2105      	movs	r1, #5
 80035ca:	4841      	ldr	r0, [pc, #260]	; (80036d0 <print_all_menu_1_menus+0x1f8>)
 80035cc:	f7ff f9b0 	bl	8002930 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	2302      	movs	r3, #2
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035dc:	226e      	movs	r2, #110	; 0x6e
 80035de:	211e      	movs	r1, #30
 80035e0:	483c      	ldr	r0, [pc, #240]	; (80036d4 <print_all_menu_1_menus+0x1fc>)
 80035e2:	f7ff f9a5 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2302      	movs	r3, #2
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f2:	2282      	movs	r2, #130	; 0x82
 80035f4:	211e      	movs	r1, #30
 80035f6:	4838      	ldr	r0, [pc, #224]	; (80036d8 <print_all_menu_1_menus+0x200>)
 80035f8:	f7ff f99a 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80035fc:	2300      	movs	r3, #0
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	2302      	movs	r3, #2
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003608:	2296      	movs	r2, #150	; 0x96
 800360a:	211e      	movs	r1, #30
 800360c:	4833      	ldr	r0, [pc, #204]	; (80036dc <print_all_menu_1_menus+0x204>)
 800360e:	f7ff f98f 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 8003612:	2300      	movs	r3, #0
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361e:	22aa      	movs	r2, #170	; 0xaa
 8003620:	211e      	movs	r1, #30
 8003622:	482f      	ldr	r0, [pc, #188]	; (80036e0 <print_all_menu_1_menus+0x208>)
 8003624:	f7ff f984 	bl	8002930 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003628:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <print_all_menu_1_menus+0x20c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <print_all_menu_1_menus+0x20c>)
 8003632:	2204      	movs	r2, #4
 8003634:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <print_all_menu_1_menus+0x20c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d902      	bls.n	8003644 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <print_all_menu_1_menus+0x20c>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <print_all_menu_1_menus+0x20c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	2b03      	cmp	r3, #3
 800364c:	d83a      	bhi.n	80036c4 <print_all_menu_1_menus+0x1ec>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <print_all_menu_1_menus+0x17c>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003695 	.word	0x08003695
 8003660:	080036ad 	.word	0x080036ad
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003664:	2300      	movs	r3, #0
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2302      	movs	r3, #2
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003670:	226e      	movs	r2, #110	; 0x6e
 8003672:	2105      	movs	r1, #5
 8003674:	481c      	ldr	r0, [pc, #112]	; (80036e8 <print_all_menu_1_menus+0x210>)
 8003676:	f7ff f95b 	bl	8002930 <ILI9341_Draw_Text>
			break;
 800367a:	e023      	b.n	80036c4 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800367c:	2300      	movs	r3, #0
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2302      	movs	r3, #2
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003688:	2282      	movs	r2, #130	; 0x82
 800368a:	2105      	movs	r1, #5
 800368c:	4816      	ldr	r0, [pc, #88]	; (80036e8 <print_all_menu_1_menus+0x210>)
 800368e:	f7ff f94f 	bl	8002930 <ILI9341_Draw_Text>
			break;
 8003692:	e017      	b.n	80036c4 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003694:	2300      	movs	r3, #0
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	2302      	movs	r3, #2
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036a0:	2296      	movs	r2, #150	; 0x96
 80036a2:	2105      	movs	r1, #5
 80036a4:	4810      	ldr	r0, [pc, #64]	; (80036e8 <print_all_menu_1_menus+0x210>)
 80036a6:	f7ff f943 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80036aa:	e00b      	b.n	80036c4 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2302      	movs	r3, #2
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036b8:	22aa      	movs	r2, #170	; 0xaa
 80036ba:	2105      	movs	r1, #5
 80036bc:	480a      	ldr	r0, [pc, #40]	; (80036e8 <print_all_menu_1_menus+0x210>)
 80036be:	f7ff f937 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80036c2:	bf00      	nop
	}
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	08011228 	.word	0x08011228
 80036d0:	0801124c 	.word	0x0801124c
 80036d4:	200000ac 	.word	0x200000ac
 80036d8:	200000c0 	.word	0x200000c0
 80036dc:	200000d4 	.word	0x200000d4
 80036e0:	200000e8 	.word	0x200000e8
 80036e4:	2000014c 	.word	0x2000014c
 80036e8:	08011250 	.word	0x08011250

080036ec <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80036f2:	2300      	movs	r3, #0
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036fe:	226e      	movs	r2, #110	; 0x6e
 8003700:	211e      	movs	r1, #30
 8003702:	4877      	ldr	r0, [pc, #476]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 8003704:	f7ff f914 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2302      	movs	r3, #2
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003714:	2282      	movs	r2, #130	; 0x82
 8003716:	211e      	movs	r1, #30
 8003718:	4871      	ldr	r0, [pc, #452]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 800371a:	f7ff f909 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800371e:	2300      	movs	r3, #0
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2302      	movs	r3, #2
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800372a:	2296      	movs	r2, #150	; 0x96
 800372c:	211e      	movs	r1, #30
 800372e:	486c      	ldr	r0, [pc, #432]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 8003730:	f7ff f8fe 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003734:	2300      	movs	r3, #0
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	2302      	movs	r3, #2
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003740:	22aa      	movs	r2, #170	; 0xaa
 8003742:	211e      	movs	r1, #30
 8003744:	4866      	ldr	r0, [pc, #408]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 8003746:	f7ff f8f3 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800374a:	2300      	movs	r3, #0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003756:	22be      	movs	r2, #190	; 0xbe
 8003758:	211e      	movs	r1, #30
 800375a:	4861      	ldr	r0, [pc, #388]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 800375c:	f7ff f8e8 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003760:	2300      	movs	r3, #0
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2302      	movs	r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800376c:	22d2      	movs	r2, #210	; 0xd2
 800376e:	211e      	movs	r1, #30
 8003770:	485b      	ldr	r0, [pc, #364]	; (80038e0 <print_all_menu_1_1_menus+0x1f4>)
 8003772:	f7ff f8dd 	bl	8002930 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003776:	2300      	movs	r3, #0
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2302      	movs	r3, #2
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003782:	226e      	movs	r2, #110	; 0x6e
 8003784:	2105      	movs	r1, #5
 8003786:	4857      	ldr	r0, [pc, #348]	; (80038e4 <print_all_menu_1_1_menus+0x1f8>)
 8003788:	f7ff f8d2 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 800378c:	2300      	movs	r3, #0
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003798:	2282      	movs	r2, #130	; 0x82
 800379a:	2105      	movs	r1, #5
 800379c:	4851      	ldr	r0, [pc, #324]	; (80038e4 <print_all_menu_1_1_menus+0x1f8>)
 800379e:	f7ff f8c7 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ae:	2296      	movs	r2, #150	; 0x96
 80037b0:	2105      	movs	r1, #5
 80037b2:	484c      	ldr	r0, [pc, #304]	; (80038e4 <print_all_menu_1_1_menus+0x1f8>)
 80037b4:	f7ff f8bc 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80037b8:	2300      	movs	r3, #0
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	2302      	movs	r3, #2
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c4:	22aa      	movs	r2, #170	; 0xaa
 80037c6:	2105      	movs	r1, #5
 80037c8:	4846      	ldr	r0, [pc, #280]	; (80038e4 <print_all_menu_1_1_menus+0x1f8>)
 80037ca:	f7ff f8b1 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80037ce:	2300      	movs	r3, #0
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2302      	movs	r3, #2
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037da:	22be      	movs	r2, #190	; 0xbe
 80037dc:	2105      	movs	r1, #5
 80037de:	4841      	ldr	r0, [pc, #260]	; (80038e4 <print_all_menu_1_1_menus+0x1f8>)
 80037e0:	f7ff f8a6 	bl	8002930 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80037e4:	2300      	movs	r3, #0
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	2302      	movs	r3, #2
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f0:	226e      	movs	r2, #110	; 0x6e
 80037f2:	211e      	movs	r1, #30
 80037f4:	483c      	ldr	r0, [pc, #240]	; (80038e8 <print_all_menu_1_1_menus+0x1fc>)
 80037f6:	f7ff f89b 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80037fa:	2300      	movs	r3, #0
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2302      	movs	r3, #2
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003806:	2282      	movs	r2, #130	; 0x82
 8003808:	211e      	movs	r1, #30
 800380a:	4838      	ldr	r0, [pc, #224]	; (80038ec <print_all_menu_1_1_menus+0x200>)
 800380c:	f7ff f890 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003810:	2300      	movs	r3, #0
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	2302      	movs	r3, #2
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800381c:	2296      	movs	r2, #150	; 0x96
 800381e:	211e      	movs	r1, #30
 8003820:	4833      	ldr	r0, [pc, #204]	; (80038f0 <print_all_menu_1_1_menus+0x204>)
 8003822:	f7ff f885 	bl	8002930 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8003826:	2300      	movs	r3, #0
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	2302      	movs	r3, #2
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003832:	22aa      	movs	r2, #170	; 0xaa
 8003834:	211e      	movs	r1, #30
 8003836:	482f      	ldr	r0, [pc, #188]	; (80038f4 <print_all_menu_1_1_menus+0x208>)
 8003838:	f7ff f87a 	bl	8002930 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 800383c:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <print_all_menu_1_1_menus+0x20c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <print_all_menu_1_1_menus+0x20c>)
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <print_all_menu_1_1_menus+0x20c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b04      	cmp	r3, #4
 8003850:	d902      	bls.n	8003858 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <print_all_menu_1_1_menus+0x20c>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <print_all_menu_1_1_menus+0x20c>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	2b03      	cmp	r3, #3
 8003860:	d83a      	bhi.n	80038d8 <print_all_menu_1_1_menus+0x1ec>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <print_all_menu_1_1_menus+0x17c>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003879 	.word	0x08003879
 800386c:	08003891 	.word	0x08003891
 8003870:	080038a9 	.word	0x080038a9
 8003874:	080038c1 	.word	0x080038c1
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003878:	2300      	movs	r3, #0
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2302      	movs	r3, #2
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003884:	226e      	movs	r2, #110	; 0x6e
 8003886:	2105      	movs	r1, #5
 8003888:	481c      	ldr	r0, [pc, #112]	; (80038fc <print_all_menu_1_1_menus+0x210>)
 800388a:	f7ff f851 	bl	8002930 <ILI9341_Draw_Text>
			break;
 800388e:	e023      	b.n	80038d8 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003890:	2300      	movs	r3, #0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2302      	movs	r3, #2
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800389c:	2282      	movs	r2, #130	; 0x82
 800389e:	2105      	movs	r1, #5
 80038a0:	4816      	ldr	r0, [pc, #88]	; (80038fc <print_all_menu_1_1_menus+0x210>)
 80038a2:	f7ff f845 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80038a6:	e017      	b.n	80038d8 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80038a8:	2300      	movs	r3, #0
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2302      	movs	r3, #2
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038b4:	2296      	movs	r2, #150	; 0x96
 80038b6:	2105      	movs	r1, #5
 80038b8:	4810      	ldr	r0, [pc, #64]	; (80038fc <print_all_menu_1_1_menus+0x210>)
 80038ba:	f7ff f839 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80038be:	e00b      	b.n	80038d8 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80038c0:	2300      	movs	r3, #0
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2302      	movs	r3, #2
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038cc:	22aa      	movs	r2, #170	; 0xaa
 80038ce:	2105      	movs	r1, #5
 80038d0:	480a      	ldr	r0, [pc, #40]	; (80038fc <print_all_menu_1_1_menus+0x210>)
 80038d2:	f7ff f82d 	bl	8002930 <ILI9341_Draw_Text>
			break;
 80038d6:	bf00      	nop
	}
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08011228 	.word	0x08011228
 80038e4:	0801124c 	.word	0x0801124c
 80038e8:	200000fc 	.word	0x200000fc
 80038ec:	20000110 	.word	0x20000110
 80038f0:	20000124 	.word	0x20000124
 80038f4:	20000138 	.word	0x20000138
 80038f8:	2000014c 	.word	0x2000014c
 80038fc:	08011250 	.word	0x08011250

08003900 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8003904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <tongle_green_led+0x14>)
 800390a:	f003 fb48 	bl	8006f9e <HAL_GPIO_TogglePin>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40020c00 	.word	0x40020c00

08003918 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800391c:	2201      	movs	r2, #1
 800391e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003922:	4802      	ldr	r0, [pc, #8]	; (800392c <RED_LED_ON+0x14>)
 8003924:	f003 fb22 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40020c00 	.word	0x40020c00

08003930 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800393a:	4802      	ldr	r0, [pc, #8]	; (8003944 <RED_LED_OFF+0x14>)
 800393c:	f003 fb16 	bl	8006f6c <HAL_GPIO_WritePin>
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40020c00 	.word	0x40020c00

08003948 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 800394e:	2300      	movs	r3, #0
 8003950:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8003952:	2300      	movs	r3, #0
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	2302      	movs	r3, #2
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395e:	223c      	movs	r2, #60	; 0x3c
 8003960:	210a      	movs	r1, #10
 8003962:	4838      	ldr	r0, [pc, #224]	; (8003a44 <Level1Item3_Enter+0xfc>)
 8003964:	f7fe ffe4 	bl	8002930 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003968:	2300      	movs	r3, #0
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	2302      	movs	r3, #2
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003974:	223c      	movs	r2, #60	; 0x3c
 8003976:	210a      	movs	r1, #10
 8003978:	4833      	ldr	r0, [pc, #204]	; (8003a48 <Level1Item3_Enter+0x100>)
 800397a:	f7fe ffd9 	bl	8002930 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 800397e:	e049      	b.n	8003a14 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003984:	4831      	ldr	r0, [pc, #196]	; (8003a4c <Level1Item3_Enter+0x104>)
 8003986:	f003 fad9 	bl	8006f3c <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d019      	beq.n	80039c8 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10b      	bne.n	80039b2 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 800399a:	2300      	movs	r3, #0
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2302      	movs	r3, #2
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a6:	223c      	movs	r2, #60	; 0x3c
 80039a8:	2196      	movs	r1, #150	; 0x96
 80039aa:	4829      	ldr	r0, [pc, #164]	; (8003a50 <Level1Item3_Enter+0x108>)
 80039ac:	f7fe ffc0 	bl	8002930 <ILI9341_Draw_Text>
 80039b0:	e00a      	b.n	80039c8 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80039b2:	2300      	movs	r3, #0
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2302      	movs	r3, #2
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039be:	223c      	movs	r2, #60	; 0x3c
 80039c0:	2196      	movs	r1, #150	; 0x96
 80039c2:	4824      	ldr	r0, [pc, #144]	; (8003a54 <Level1Item3_Enter+0x10c>)
 80039c4:	f7fe ffb4 	bl	8002930 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80039c8:	f000 f84a 	bl	8003a60 <getPressKey>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2bff      	cmp	r3, #255	; 0xff
 80039d0:	d016      	beq.n	8003a00 <Level1Item3_Enter+0xb8>
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80039de:	2301      	movs	r3, #1
 80039e0:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80039e2:	f000 f83d 	bl	8003a60 <getPressKey>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <Level1Item3_Enter+0xaa>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d003      	beq.n	80039f8 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80039f0:	e005      	b.n	80039fe <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80039f2:	f7ff ff91 	bl	8003918 <RED_LED_ON>
	  	  		  break;
 80039f6:	e002      	b.n	80039fe <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80039f8:	f7ff ff9a 	bl	8003930 <RED_LED_OFF>
	  	  		  break;
 80039fc:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80039fe:	e009      	b.n	8003a14 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8003a00:	f000 f82e 	bl	8003a60 <getPressKey>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2bff      	cmp	r3, #255	; 0xff
 8003a08:	d104      	bne.n	8003a14 <Level1Item3_Enter+0xcc>
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8003a10:	2300      	movs	r3, #0
 8003a12:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8003a14:	f000 f824 	bl	8003a60 <getPressKey>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1b0      	bne.n	8003980 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	2302      	movs	r3, #2
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a2a:	223c      	movs	r2, #60	; 0x3c
 8003a2c:	210a      	movs	r1, #10
 8003a2e:	480a      	ldr	r0, [pc, #40]	; (8003a58 <Level1Item3_Enter+0x110>)
 8003a30:	f7fe ff7e 	bl	8002930 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8003a34:	4809      	ldr	r0, [pc, #36]	; (8003a5c <Level1Item3_Enter+0x114>)
 8003a36:	f000 f8db 	bl	8003bf0 <Menu_Navigate>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08011254 	.word	0x08011254
 8003a48:	08011270 	.word	0x08011270
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	0801127c 	.word	0x0801127c
 8003a54:	08011280 	.word	0x08011280
 8003a58:	08011284 	.word	0x08011284
 8003a5c:	0801160c 	.word	0x0801160c

08003a60 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
	char digit = '\0';
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003a6a:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <getPressKey+0x12c>)
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a72:	6018      	str	r0, [r3, #0]
 8003a74:	3304      	adds	r3, #4
 8003a76:	8019      	strh	r1, [r3, #0]
 8003a78:	1dbb      	adds	r3, r7, #6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8003a84:	f7fd fc5a 	bl	800133c <read_one_digit_from_keyboard>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	3b32      	subs	r3, #50	; 0x32
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d875      	bhi.n	8003b80 <getPressKey+0x120>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <getPressKey+0x3c>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003b81 	.word	0x08003b81
 8003aa4:	08003ab9 	.word	0x08003ab9
 8003aa8:	08003b59 	.word	0x08003b59
 8003aac:	08003b31 	.word	0x08003b31
 8003ab0:	08003b81 	.word	0x08003b81
 8003ab4:	08003b09 	.word	0x08003b09
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8003ab8:	f107 0117 	add.w	r1, r7, #23
 8003abc:	463b      	mov	r3, r7
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00d f823 	bl	8010b0c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2302      	movs	r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f7fe ff2a 	bl	8002930 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e050      	b.n	8003b82 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8003ae0:	f107 0117 	add.w	r1, r7, #23
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f00d f80f 	bl	8010b0c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003aee:	4638      	mov	r0, r7
 8003af0:	2300      	movs	r3, #0
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	2302      	movs	r3, #2
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	f7fe ff16 	bl	8002930 <ILI9341_Draw_Text>
			return BUTTON_UP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e03c      	b.n	8003b82 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003b08:	f107 0117 	add.w	r1, r7, #23
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f00c fffb 	bl	8010b0c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b16:	4638      	mov	r0, r7
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	f7fe ff02 	bl	8002930 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e028      	b.n	8003b82 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8003b30:	f107 0117 	add.w	r1, r7, #23
 8003b34:	463b      	mov	r3, r7
 8003b36:	2201      	movs	r2, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f00c ffe7 	bl	8010b0c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b3e:	4638      	mov	r0, r7
 8003b40:	2300      	movs	r3, #0
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f7fe feee 	bl	8002930 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e014      	b.n	8003b82 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003b58:	f107 0117 	add.w	r1, r7, #23
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f00c ffd3 	bl	8010b0c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b66:	4638      	mov	r0, r7
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	f7fe feda 	bl	8002930 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e000      	b.n	8003b82 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003b80:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	080112a0 	.word	0x080112a0

08003b90 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
	if (Text)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d015      	beq.n	8003bca <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003baa:	2264      	movs	r2, #100	; 0x64
 8003bac:	210a      	movs	r1, #10
 8003bae:	4809      	ldr	r0, [pc, #36]	; (8003bd4 <Generic_Write+0x44>)
 8003bb0:	f7fe febe 	bl	8002930 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc0:	2264      	movs	r2, #100	; 0x64
 8003bc2:	210a      	movs	r1, #10
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe feb3 	bl	8002930 <ILI9341_Draw_Text>
	}
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	080112b4 	.word	0x080112b4

08003bd8 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <Menu_GetCurrentMenu+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000010 	.word	0x20000010

08003bf0 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <Menu_Navigate+0x50>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01a      	beq.n	8003c36 <Menu_Navigate+0x46>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d017      	beq.n	8003c36 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 8003c06:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <Menu_Navigate+0x54>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <Menu_Navigate+0x58>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <Menu_Navigate+0x58>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <Menu_Navigate+0x54>)
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	3218      	adds	r2, #24
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <Menu_Navigate+0x54>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4798      	blx	r3
 8003c34:	e000      	b.n	8003c38 <Menu_Navigate+0x48>
		return;		// Exit
 8003c36:	bf00      	nop
	}
}
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	0801159c 	.word	0x0801159c
 8003c44:	20000010 	.word	0x20000010
 8003c48:	200002b0 	.word	0x200002b0

08003c4c <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8003c54:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <Menu_SetGenericWriteCallback+0x20>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <Menu_SetGenericWriteCallback+0x24>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffc6 	bl	8003bf0 <Menu_Navigate>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200002b0 	.word	0x200002b0
 8003c70:	20000010 	.word	0x20000010

08003c74 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <Menu_EnterCurrentItem+0x34>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <Menu_EnterCurrentItem+0x38>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00d      	beq.n	8003ca0 <Menu_EnterCurrentItem+0x2c>
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <Menu_EnterCurrentItem+0x34>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <Menu_EnterCurrentItem+0x34>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e000      	b.n	8003ca2 <Menu_EnterCurrentItem+0x2e>
		return;
 8003ca0:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000010 	.word	0x20000010
 8003cac:	0801159c 	.word	0x0801159c

08003cb0 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	int i =0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8003cbc:	e036      	b.n	8003d2c <speed_test_LCD+0x7c>
	{
		i ++;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003cd8:	4819      	ldr	r0, [pc, #100]	; (8003d40 <speed_test_LCD+0x90>)
 8003cda:	f007 fde4 	bl	800b8a6 <HAL_RNG_GetRandomNumber>
 8003cde:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003ce4:	4816      	ldr	r0, [pc, #88]	; (8003d40 <speed_test_LCD+0x90>)
 8003ce6:	f007 fdde 	bl	800b8a6 <HAL_RNG_GetRandomNumber>
 8003cea:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003cf0:	4813      	ldr	r0, [pc, #76]	; (8003d40 <speed_test_LCD+0x90>)
 8003cf2:	f007 fdd8 	bl	800b8a6 <HAL_RNG_GetRandomNumber>
 8003cf6:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003cfc:	4810      	ldr	r0, [pc, #64]	; (8003d40 <speed_test_LCD+0x90>)
 8003cfe:	f007 fdd2 	bl	800b8a6 <HAL_RNG_GetRandomNumber>
 8003d02:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003d08:	89fb      	ldrh	r3, [r7, #14]
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8003d10:	89bb      	ldrh	r3, [r7, #12]
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	897a      	ldrh	r2, [r7, #10]
 8003d24:	89b9      	ldrh	r1, [r7, #12]
 8003d26:	89f8      	ldrh	r0, [r7, #14]
 8003d28:	f7fe fce4 	bl	80026f4 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	ddc4      	ble.n	8003cbe <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000478 	.word	0x20000478

08003d44 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f001 f9f1 	bl	800513c <null_ptr_check>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d133      	bne.n	8003dce <bme280_init+0x8a>
		while (try_count) {
 8003d66:	e028      	b.n	8003dba <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003d68:	f107 010d 	add.w	r1, r7, #13
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	20d0      	movs	r0, #208	; 0xd0
 8003d72:	f000 f832 	bl	8003dda <bme280_get_regs>
 8003d76:	4603      	mov	r3, r0
 8003d78:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d114      	bne.n	8003dac <bme280_init+0x68>
 8003d82:	7b7b      	ldrb	r3, [r7, #13]
 8003d84:	2b60      	cmp	r3, #96	; 0x60
 8003d86:	d111      	bne.n	8003dac <bme280_init+0x68>
				dev->chip_id = chip_id;
 8003d88:	7b7a      	ldrb	r2, [r7, #13]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f976 	bl	8004080 <bme280_soft_reset>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8003d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d110      	bne.n	8003dc2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f001 f841 	bl	8004e28 <get_calib_data>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8003daa:	e00a      	b.n	8003dc2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2001      	movs	r0, #1
 8003db2:	4798      	blx	r3
			--try_count;
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8003dba:	7bbb      	ldrb	r3, [r7, #14]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1d3      	bne.n	8003d68 <bme280_init+0x24>
 8003dc0:	e000      	b.n	8003dc4 <bme280_init+0x80>
				break;
 8003dc2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8003dca:	23fe      	movs	r3, #254	; 0xfe
 8003dcc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003dda:	b590      	push	{r4, r7, lr}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	4603      	mov	r3, r0
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	4613      	mov	r3, r2
 8003dea:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f001 f9a5 	bl	800513c <null_ptr_check>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d117      	bne.n	8003e2e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	789b      	ldrb	r3, [r3, #2]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d003      	beq.n	8003e0e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e0c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685c      	ldr	r4, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7858      	ldrb	r0, [r3, #1]
 8003e16:	89bb      	ldrh	r3, [r7, #12]
 8003e18:	7bf9      	ldrb	r1, [r7, #15]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	47a0      	blx	r4
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8003e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003e2a:	23fc      	movs	r3, #252	; 0xfc
 8003e2c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}

08003e3a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003e3a:	b590      	push	{r4, r7, lr}
 8003e3c:	b08d      	sub	sp, #52	; 0x34
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	2b0a      	cmp	r3, #10
 8003e4e:	d901      	bls.n	8003e54 <bme280_set_regs+0x1a>
		len = 10;
 8003e50:	230a      	movs	r3, #10
 8003e52:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003e54:	6838      	ldr	r0, [r7, #0]
 8003e56:	f001 f971 	bl	800513c <null_ptr_check>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d154      	bne.n	8003f12 <bme280_set_regs+0xd8>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d051      	beq.n	8003f12 <bme280_set_regs+0xd8>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d04e      	beq.n	8003f12 <bme280_set_regs+0xd8>
		if (len != 0) {
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d047      	beq.n	8003f0a <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	789b      	ldrb	r3, [r3, #2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d01a      	beq.n	8003ebe <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	e011      	b.n	8003eb4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3e8      	bcc.n	8003e90 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d90b      	bls.n	8003edc <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	f107 0114 	add.w	r1, r7, #20
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fff0 	bl	8004eb2 <interleave_reg_addr>
				temp_len = len * 2;
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003eda:	e001      	b.n	8003ee0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689c      	ldr	r4, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7858      	ldrb	r0, [r3, #1]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	7819      	ldrb	r1, [r3, #0]
 8003eec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003eee:	f107 0214 	add.w	r2, r7, #20
 8003ef2:	47a0      	blx	r4
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003efa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8003f02:	23fc      	movs	r3, #252	; 0xfc
 8003f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003f08:	e007      	b.n	8003f1a <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003f0a:	23fd      	movs	r3, #253	; 0xfd
 8003f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003f10:	e003      	b.n	8003f1a <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003f12:	23ff      	movs	r3, #255	; 0xff
 8003f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f18:	e000      	b.n	8003f1c <bme280_set_regs+0xe2>
		if (len != 0) {
 8003f1a:	bf00      	nop
	}


	return rslt;
 8003f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3734      	adds	r7, #52	; 0x34
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}

08003f28 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003f34:	6838      	ldr	r0, [r7, #0]
 8003f36:	f001 f901 	bl	800513c <null_ptr_check>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d13f      	bne.n	8003fc6 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003f46:	f107 030e 	add.w	r3, r7, #14
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f874 	bl	800403a <bme280_get_sensor_mode>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <bme280_set_sensor_settings+0x46>
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003f64:	6838      	ldr	r0, [r7, #0]
 8003f66:	f000 fb4e 	bl	8004606 <put_device_to_sleep>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d127      	bne.n	8003fc6 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	2007      	movs	r0, #7
 8003f7c:	f001 f8c2 	bl	8005104 <are_settings_changed>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f98a 	bl	80042aa <set_osr_settings>
 8003f96:	4603      	mov	r3, r0
 8003f98:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d111      	bne.n	8003fc6 <bme280_set_sensor_settings+0x9e>
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	2018      	movs	r0, #24
 8003fa8:	f001 f8ac 	bl	8005104 <are_settings_changed>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fa11 	bl	80043e4 <set_filter_standby_settings>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	6039      	str	r1, [r7, #0]
 8003fdc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	f001 f8ac 	bl	800513c <null_ptr_check>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11e      	bne.n	800402e <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003ff0:	f107 030e 	add.w	r3, r7, #14
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f81f 	bl	800403a <bme280_get_sensor_mode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <bme280_set_sensor_mode+0x46>
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	f000 faf9 	bl	8004606 <put_device_to_sleep>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fabb 	bl	80045a0 <write_power_mode>
 800402a:	4603      	mov	r3, r0
 800402c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800402e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004044:	6838      	ldr	r0, [r7, #0]
 8004046:	f001 f879 	bl	800513c <null_ptr_check>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	20f4      	movs	r0, #244	; 0xf4
 800405e:	f7ff febc 	bl	8003dda <bme280_get_regs>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004088:	23e0      	movs	r3, #224	; 0xe0
 800408a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800408c:	23b6      	movs	r3, #182	; 0xb6
 800408e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f001 f853 	bl	800513c <null_ptr_check>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80040a2:	f107 010d 	add.w	r1, r7, #13
 80040a6:	f107 000e 	add.w	r0, r7, #14
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f7ff fec4 	bl	8003e3a <bme280_set_regs>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2002      	movs	r0, #2
 80040bc:	4798      	blx	r3
	}

	return rslt;
 80040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08a      	sub	sp, #40	; 0x28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 f825 	bl	800513c <null_ptr_check>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80040f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d124      	bne.n	800414a <bme280_get_sensor_data+0x80>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d021      	beq.n	800414a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004106:	f107 011c 	add.w	r1, r7, #28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2208      	movs	r2, #8
 800410e:	20f7      	movs	r0, #247	; 0xf7
 8004110:	f7ff fe63 	bl	8003dda <bme280_get_regs>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800411a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800411e:	2b00      	cmp	r3, #0
 8004120:	d116      	bne.n	8004150 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004122:	f107 0210 	add.w	r2, r7, #16
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f815 	bl	800415c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3310      	adds	r3, #16
 8004136:	f107 0110 	add.w	r1, r7, #16
 800413a:	7bf8      	ldrb	r0, [r7, #15]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	f000 f853 	bl	80041e8 <bme280_compensate_data>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004148:	e002      	b.n	8004150 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800414a:	23ff      	movs	r3, #255	; 0xff
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8004150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004154:	4618      	mov	r0, r3
 8004156:	3728      	adds	r7, #40	; 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3301      	adds	r3, #1
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3302      	adds	r3, #2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	b2db      	uxtb	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	431a      	orrs	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3303      	adds	r3, #3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3305      	adds	r3, #5
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3306      	adds	r3, #6
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3307      	adds	r3, #7
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04b      	beq.n	800429a <bme280_compensate_data+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d048      	beq.n	800429a <bme280_compensate_data+0xb2>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d045      	beq.n	800429a <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f000 fa2b 	bl	80046a0 <compensate_temperature>
 800424a:	eeb0 7a40 	vmov.f32	s14, s0
 800424e:	eef0 7a60 	vmov.f32	s15, s1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	68b8      	ldr	r0, [r7, #8]
 8004266:	f000 faef 	bl	8004848 <compensate_pressure>
 800426a:	eeb0 7a40 	vmov.f32	s14, s0
 800426e:	eef0 7a60 	vmov.f32	s15, s1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	68b8      	ldr	r0, [r7, #8]
 8004286:	f000 fcaf 	bl	8004be8 <compensate_humidity>
 800428a:	eeb0 7a40 	vmov.f32	s14, s0
 800428e:	eef0 7a60 	vmov.f32	s15, s1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8004298:	e001      	b.n	800429e <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800429a:	23ff      	movs	r3, #255	; 0xff
 800429c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800429e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68b8      	ldr	r0, [r7, #8]
 80042ca:	f000 f815 	bl	80042f8 <set_osr_humidity_settings>
 80042ce:	4603      	mov	r3, r0
 80042d0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f842 	bl	800436c <set_osr_press_temp_settings>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80042ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004302:	23f2      	movs	r3, #242	; 0xf2
 8004304:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	789b      	ldrb	r3, [r3, #2]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b2db      	uxtb	r3, r3
 8004310:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004312:	f107 010e 	add.w	r1, r7, #14
 8004316:	f107 000c 	add.w	r0, r7, #12
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	f7ff fd8c 	bl	8003e3a <bme280_set_regs>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8004326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800432e:	23f4      	movs	r3, #244	; 0xf4
 8004330:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004332:	7b38      	ldrb	r0, [r7, #12]
 8004334:	f107 010d 	add.w	r1, r7, #13
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	f7ff fd4d 	bl	8003dda <bme280_get_regs>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8004344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800434c:	f107 010d 	add.w	r1, r7, #13
 8004350:	f107 000c 	add.w	r0, r7, #12
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2201      	movs	r2, #1
 8004358:	f7ff fd6f 	bl	8003e3a <bme280_set_regs>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800437a:	23f4      	movs	r3, #244	; 0xf4
 800437c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800437e:	7db8      	ldrb	r0, [r7, #22]
 8004380:	f107 0115 	add.w	r1, r7, #21
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f7ff fd27 	bl	8003dda <bme280_get_regs>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8004390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11f      	bne.n	80043d8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80043a2:	f107 0315 	add.w	r3, r7, #21
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f88e 	bl	80044ca <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80043b8:	f107 0315 	add.w	r3, r7, #21
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8a0 	bl	8004504 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80043c4:	f107 0115 	add.w	r1, r7, #21
 80043c8:	f107 0016 	add.w	r0, r7, #22
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f7ff fd33 	bl	8003e3a <bme280_set_regs>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80043d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80043f2:	23f5      	movs	r3, #245	; 0xf5
 80043f4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80043f6:	7db8      	ldrb	r0, [r7, #22]
 80043f8:	f107 0115 	add.w	r1, r7, #21
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f7ff fceb 	bl	8003dda <bme280_get_regs>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8004408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11f      	bne.n	8004450 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800441a:	f107 0315 	add.w	r3, r7, #21
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f81b 	bl	800445c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8004430:	f107 0315 	add.w	r3, r7, #21
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f82d 	bl	8004496 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800443c:	f107 0115 	add.w	r1, r7, #21
 8004440:	f107 0016 	add.w	r0, r7, #22
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f7ff fcf7 	bl	8003e3a <bme280_set_regs>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b25b      	sxtb	r3, r3
 800446c:	f023 031c 	bic.w	r3, r3, #28
 8004470:	b25a      	sxtb	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f003 031c 	and.w	r3, r3, #28
 800447e:	b25b      	sxtb	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b25b      	sxtb	r3, r3
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	701a      	strb	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	015b      	lsls	r3, r3, #5
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	701a      	strb	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	f023 031c 	bic.w	r3, r3, #28
 80044de:	b25a      	sxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	f003 031c 	and.w	r3, r3, #28
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	4313      	orrs	r3, r2
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	701a      	strb	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b25b      	sxtb	r3, r3
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	b25a      	sxtb	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	015b      	lsls	r3, r3, #5
 8004520:	b25b      	sxtb	r3, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	b25b      	sxtb	r3, r3
 8004526:	b2da      	uxtb	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	701a      	strb	r2, [r3, #0]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	b2da      	uxtb	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3302      	adds	r3, #2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	109b      	asrs	r3, r3, #2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3302      	adds	r3, #2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	b2da      	uxtb	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3303      	adds	r3, #3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	109b      	asrs	r3, r3, #2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	b2da      	uxtb	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3303      	adds	r3, #3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	b2da      	uxtb	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	711a      	strb	r2, [r3, #4]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80045ac:	23f4      	movs	r3, #244	; 0xf4
 80045ae:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80045b0:	7bb8      	ldrb	r0, [r7, #14]
 80045b2:	f107 010d 	add.w	r1, r7, #13
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f7ff fc0e 	bl	8003dda <bme280_get_regs>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80045c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d117      	bne.n	80045fa <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80045ca:	7b7b      	ldrb	r3, [r7, #13]
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	b25a      	sxtb	r2, r3
 80045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80045e6:	f107 010d 	add.w	r1, r7, #13
 80045ea:	f107 000e 	add.w	r0, r7, #14
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f7ff fc22 	bl	8003e3a <bme280_set_regs>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80045fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800460e:	f107 0110 	add.w	r1, r7, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	20f2      	movs	r0, #242	; 0xf2
 8004618:	f7ff fbdf 	bl	8003dda <bme280_get_regs>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d118      	bne.n	800465a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004628:	f107 0208 	add.w	r2, r7, #8
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff80 	bl	8004538 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fd21 	bl	8004080 <bme280_soft_reset>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8004642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800464a:	f107 0308 	add.w	r3, r7, #8
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f808 	bl	8004666 <reload_device_settings>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800465a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	201f      	movs	r0, #31
 8004676:	f7ff fe18 	bl	80042aa <set_osr_settings>
 800467a:	4603      	mov	r3, r0
 800467c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	201f      	movs	r0, #31
 800468c:	f7ff feaa 	bl	80043e4 <set_filter_standby_settings>
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b08c      	sub	sp, #48	; 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <compensate_temperature+0x18c>)
 80046b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	4b5d      	ldr	r3, [pc, #372]	; (8004830 <compensate_temperature+0x190>)
 80046ba:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fb fec2 	bl	800044c <__aeabi_ui2d>
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	4b59      	ldr	r3, [pc, #356]	; (8004834 <compensate_temperature+0x194>)
 80046ce:	f7fc f861 	bl	8000794 <__aeabi_ddiv>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	461d      	mov	r5, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fb feb4 	bl	800044c <__aeabi_ui2d>
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <compensate_temperature+0x198>)
 80046ea:	f7fc f853 	bl	8000794 <__aeabi_ddiv>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4620      	mov	r0, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7fb fd6b 	bl	80001d0 <__aeabi_dsub>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb feaf 	bl	800046c <__aeabi_i2d>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004716:	f7fb ff13 	bl	8000540 <__aeabi_dmul>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb fe90 	bl	800044c <__aeabi_ui2d>
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004734:	f7fc f82e 	bl	8000794 <__aeabi_ddiv>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb fe81 	bl	800044c <__aeabi_ui2d>
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <compensate_temperature+0x19c>)
 8004750:	f7fc f820 	bl	8000794 <__aeabi_ddiv>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4620      	mov	r0, r4
 800475a:	4629      	mov	r1, r5
 800475c:	f7fb fd38 	bl	80001d0 <__aeabi_dsub>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800476c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004770:	f7fb fee6 	bl	8000540 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4614      	mov	r4, r2
 800477a:	461d      	mov	r5, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fe72 	bl	800046c <__aeabi_i2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fb fed6 	bl	8000540 <__aeabi_dmul>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047a4:	f7fb fd16 	bl	80001d4 <__adddf3>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fc f976 	bl	8000aa0 <__aeabi_d2iz>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80047ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047c2:	f7fb fd07 	bl	80001d4 <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <compensate_temperature+0x1a0>)
 80047d4:	f7fb ffde 	bl	8000794 <__aeabi_ddiv>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80047e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047e8:	f7fc f91c 	bl	8000a24 <__aeabi_dcmplt>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <compensate_temperature+0x15c>
		temperature = temperature_min;
 80047f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80047fa:	e00c      	b.n	8004816 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80047fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004800:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004804:	f7fc f92c 	bl	8000a60 <__aeabi_dcmpgt>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <compensate_temperature+0x176>
		temperature = temperature_max;
 800480e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004812:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8004816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800481a:	ec43 2b17 	vmov	d7, r2, r3
}
 800481e:	eeb0 0a47 	vmov.f32	s0, s14
 8004822:	eef0 0a67 	vmov.f32	s1, s15
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bdb0      	pop	{r4, r5, r7, pc}
 800482c:	c0440000 	.word	0xc0440000
 8004830:	40554000 	.word	0x40554000
 8004834:	40d00000 	.word	0x40d00000
 8004838:	40900000 	.word	0x40900000
 800483c:	40c00000 	.word	0x40c00000
 8004840:	40b40000 	.word	0x40b40000
 8004844:	00000000 	.word	0x00000000

08004848 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b08e      	sub	sp, #56	; 0x38
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8004852:	a3d9      	add	r3, pc, #868	; (adr r3, 8004bb8 <compensate_pressure+0x370>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 800485c:	a3d8      	add	r3, pc, #864	; (adr r3, 8004bc0 <compensate_pressure+0x378>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fdfe 	bl	800046c <__aeabi_i2d>
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004878:	f7fb ff8c 	bl	8000794 <__aeabi_ddiv>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	4bc1      	ldr	r3, [pc, #772]	; (8004b90 <compensate_pressure+0x348>)
 800488a:	f7fb fca1 	bl	80001d0 <__aeabi_dsub>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8004896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800489a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800489e:	f7fb fe4f 	bl	8000540 <__aeabi_dmul>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	461d      	mov	r5, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fddb 	bl	800046c <__aeabi_i2d>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fe3f 	bl	8000540 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	4bb1      	ldr	r3, [pc, #708]	; (8004b94 <compensate_pressure+0x34c>)
 80048d0:	f7fb ff60 	bl	8000794 <__aeabi_ddiv>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fdc2 	bl	800046c <__aeabi_i2d>
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	f7fb fe28 	bl	8000540 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	f7fb fc6a 	bl	80001d4 <__adddf3>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004908:	f7fb fc64 	bl	80001d4 <__adddf3>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	4b9f      	ldr	r3, [pc, #636]	; (8004b98 <compensate_pressure+0x350>)
 800491a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800491e:	f7fb ff39 	bl	8000794 <__aeabi_ddiv>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4614      	mov	r4, r2
 8004928:	461d      	mov	r5, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fb fd9b 	bl	800046c <__aeabi_i2d>
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	4b98      	ldr	r3, [pc, #608]	; (8004b9c <compensate_pressure+0x354>)
 800493c:	f7fb fe00 	bl	8000540 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f7fb fc44 	bl	80001d4 <__adddf3>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fb fd86 	bl	800046c <__aeabi_i2d>
 8004960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004964:	f7fb fdec 	bl	8000540 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	f7fb fde4 	bl	8000540 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	4b86      	ldr	r3, [pc, #536]	; (8004ba0 <compensate_pressure+0x358>)
 8004986:	f7fb ff05 	bl	8000794 <__aeabi_ddiv>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fb fd67 	bl	800046c <__aeabi_i2d>
 800499e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a2:	f7fb fdcd 	bl	8000540 <__aeabi_dmul>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b2:	f7fb fc0f 	bl	80001d4 <__adddf3>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	4b77      	ldr	r3, [pc, #476]	; (8004ba0 <compensate_pressure+0x358>)
 80049c4:	f7fb fee6 	bl	8000794 <__aeabi_ddiv>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <compensate_pressure+0x34c>)
 80049d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049da:	f7fb fedb 	bl	8000794 <__aeabi_ddiv>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	4b6e      	ldr	r3, [pc, #440]	; (8004ba4 <compensate_pressure+0x35c>)
 80049ec:	f7fb fbf2 	bl	80001d4 <__adddf3>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	461d      	mov	r5, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	88db      	ldrh	r3, [r3, #6]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fd25 	bl	800044c <__aeabi_ui2d>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4620      	mov	r0, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7fb fd99 	bl	8000540 <__aeabi_dmul>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a22:	f7fb fff5 	bl	8000a10 <__aeabi_dcmpeq>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 80cd 	bne.w	8004bc8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fd0a 	bl	800044c <__aeabi_ui2d>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	4959      	ldr	r1, [pc, #356]	; (8004ba8 <compensate_pressure+0x360>)
 8004a42:	f7fb fbc5 	bl	80001d0 <__aeabi_dsub>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	4b56      	ldr	r3, [pc, #344]	; (8004bac <compensate_pressure+0x364>)
 8004a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a58:	f7fb fe9c 	bl	8000794 <__aeabi_ddiv>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a64:	f7fb fbb4 	bl	80001d0 <__aeabi_dsub>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	a345      	add	r3, pc, #276	; (adr r3, 8004b88 <compensate_pressure+0x340>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f7fb fd63 	bl	8000540 <__aeabi_dmul>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a86:	f7fb fe85 	bl	8000794 <__aeabi_ddiv>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fce7 	bl	800046c <__aeabi_i2d>
 8004a9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aa2:	f7fb fd4d 	bl	8000540 <__aeabi_dmul>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ab2:	f7fb fd45 	bl	8000540 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <compensate_pressure+0x368>)
 8004ac4:	f7fb fe66 	bl	8000794 <__aeabi_ddiv>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fb fcc8 	bl	800046c <__aeabi_i2d>
 8004adc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ae0:	f7fb fd2e 	bl	8000540 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <compensate_pressure+0x34c>)
 8004af2:	f7fb fe4f 	bl	8000794 <__aeabi_ddiv>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8004afe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b06:	f7fb fb65 	bl	80001d4 <__adddf3>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4614      	mov	r4, r2
 8004b10:	461d      	mov	r5, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fb fca7 	bl	800046c <__aeabi_i2d>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fb55 	bl	80001d4 <__adddf3>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <compensate_pressure+0x36c>)
 8004b38:	f7fb fe2c 	bl	8000794 <__aeabi_ddiv>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b44:	f7fb fb46 	bl	80001d4 <__adddf3>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b58:	f7fb ff64 	bl	8000a24 <__aeabi_dcmplt>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <compensate_pressure+0x324>
			pressure = pressure_min;
 8004b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004b6a:	e031      	b.n	8004bd0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004b6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b74:	f7fb ff74 	bl	8000a60 <__aeabi_dcmpgt>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d028      	beq.n	8004bd0 <compensate_pressure+0x388>
			pressure = pressure_max;
 8004b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004b86:	e023      	b.n	8004bd0 <compensate_pressure+0x388>
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	40b86a00 	.word	0x40b86a00
 8004b90:	40ef4000 	.word	0x40ef4000
 8004b94:	40e00000 	.word	0x40e00000
 8004b98:	40100000 	.word	0x40100000
 8004b9c:	40f00000 	.word	0x40f00000
 8004ba0:	41200000 	.word	0x41200000
 8004ba4:	3ff00000 	.word	0x3ff00000
 8004ba8:	41300000 	.word	0x41300000
 8004bac:	40b00000 	.word	0x40b00000
 8004bb0:	41e00000 	.word	0x41e00000
 8004bb4:	40300000 	.word	0x40300000
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	40dd4c00 	.word	0x40dd4c00
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8004bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bcc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8004bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bdc:	eef0 0a67 	vmov.f32	s1, s15
 8004be0:	3738      	adds	r7, #56	; 0x38
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bdb0      	pop	{r4, r5, r7, pc}
 8004be6:	bf00      	nop

08004be8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004be8:	b5b0      	push	{r4, r5, r7, lr}
 8004bea:	b094      	sub	sp, #80	; 0x50
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	4b81      	ldr	r3, [pc, #516]	; (8004e08 <compensate_humidity+0x220>)
 8004c04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fc2d 	bl	800046c <__aeabi_i2d>
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4b7d      	ldr	r3, [pc, #500]	; (8004e0c <compensate_humidity+0x224>)
 8004c18:	f7fb fada 	bl	80001d0 <__aeabi_dsub>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fb fc1e 	bl	800046c <__aeabi_i2d>
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	4b76      	ldr	r3, [pc, #472]	; (8004e10 <compensate_humidity+0x228>)
 8004c36:	f7fb fc83 	bl	8000540 <__aeabi_dmul>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4614      	mov	r4, r2
 8004c40:	461d      	mov	r5, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fc0f 	bl	800046c <__aeabi_i2d>
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	4b70      	ldr	r3, [pc, #448]	; (8004e14 <compensate_humidity+0x22c>)
 8004c54:	f7fb fd9e 	bl	8000794 <__aeabi_ddiv>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c64:	f7fb fc6c 	bl	8000540 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fab0 	bl	80001d4 <__adddf3>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb fbe3 	bl	800044c <__aeabi_ui2d>
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8a:	f7fb faa1 	bl	80001d0 <__aeabi_dsub>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fbe5 	bl	800046c <__aeabi_i2d>
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	4b5c      	ldr	r3, [pc, #368]	; (8004e18 <compensate_humidity+0x230>)
 8004ca8:	f7fb fd74 	bl	8000794 <__aeabi_ddiv>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	7f1b      	ldrb	r3, [r3, #28]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fbc7 	bl	800044c <__aeabi_ui2d>
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	4b56      	ldr	r3, [pc, #344]	; (8004e1c <compensate_humidity+0x234>)
 8004cc4:	f7fb fd66 	bl	8000794 <__aeabi_ddiv>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cd4:	f7fb fc34 	bl	8000540 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	4b4e      	ldr	r3, [pc, #312]	; (8004e20 <compensate_humidity+0x238>)
 8004ce6:	f7fb fa75 	bl	80001d4 <__adddf3>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fbb7 	bl	800046c <__aeabi_i2d>
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	4b46      	ldr	r3, [pc, #280]	; (8004e1c <compensate_humidity+0x234>)
 8004d04:	f7fb fd46 	bl	8000794 <__aeabi_ddiv>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d14:	f7fb fc14 	bl	8000540 <__aeabi_dmul>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d24:	f7fb fc0c 	bl	8000540 <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <compensate_humidity+0x238>)
 8004d36:	f7fb fa4d 	bl	80001d4 <__adddf3>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8004d42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d4a:	f7fb fbf9 	bl	8000540 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4614      	mov	r4, r2
 8004d54:	461d      	mov	r5, r3
 8004d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d5e:	f7fb fbef 	bl	8000540 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fbe9 	bl	8000540 <__aeabi_dmul>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	7e1b      	ldrb	r3, [r3, #24]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fb66 	bl	800044c <__aeabi_ui2d>
 8004d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d84:	f7fb fbdc 	bl	8000540 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <compensate_humidity+0x23c>)
 8004d96:	f7fb fcfd 	bl	8000794 <__aeabi_ddiv>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	f04f 0000 	mov.w	r0, #0
 8004da2:	491f      	ldr	r1, [pc, #124]	; (8004e20 <compensate_humidity+0x238>)
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dsub>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004db0:	f7fb fbc6 	bl	8000540 <__aeabi_dmul>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8004dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dc0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dc4:	f7fb fe4c 	bl	8000a60 <__aeabi_dcmpgt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8004dce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004dd6:	e00c      	b.n	8004df2 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8004dd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ddc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004de0:	f7fb fe20 	bl	8000a24 <__aeabi_dcmplt>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8004dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8004df2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004df6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004dfe:	eef0 0a67 	vmov.f32	s1, s15
 8004e02:	3750      	adds	r7, #80	; 0x50
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bdb0      	pop	{r4, r5, r7, pc}
 8004e08:	40590000 	.word	0x40590000
 8004e0c:	40f2c000 	.word	0x40f2c000
 8004e10:	40500000 	.word	0x40500000
 8004e14:	40d00000 	.word	0x40d00000
 8004e18:	40f00000 	.word	0x40f00000
 8004e1c:	41900000 	.word	0x41900000
 8004e20:	3ff00000 	.word	0x3ff00000
 8004e24:	41200000 	.word	0x41200000

08004e28 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004e30:	2388      	movs	r3, #136	; 0x88
 8004e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	611a      	str	r2, [r3, #16]
 8004e4a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004e4c:	f107 010c 	add.w	r1, r7, #12
 8004e50:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	221a      	movs	r2, #26
 8004e58:	f7fe ffbf 	bl	8003dda <bme280_get_regs>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8004e62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11d      	bne.n	8004ea6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f84a 	bl	8004f0a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004e76:	23e1      	movs	r3, #225	; 0xe1
 8004e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004e7c:	f107 010c 	add.w	r1, r7, #12
 8004e80:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2207      	movs	r2, #7
 8004e88:	f7fe ffa7 	bl	8003dda <bme280_get_regs>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004e92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f8e1 	bl	8005068 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8004ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
 8004ec4:	e016      	b.n	8004ef4 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	441a      	add	r2, r3
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	440b      	add	r3, r1
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	441a      	add	r2, r3
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	440b      	add	r3, r1
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
 8004ef4:	7dfa      	ldrb	r2, [r7, #23]
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d3e4      	bcc.n	8004ec6 <interleave_reg_addr+0x14>
	}
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	3310      	adds	r3, #16
 8004f18:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3303      	adds	r3, #3
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	b21a      	sxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3302      	adds	r3, #2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b21b      	sxth	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b21a      	sxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3305      	adds	r3, #5
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	b21a      	sxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b21b      	sxth	r3, r3
 8004f60:	4313      	orrs	r3, r2
 8004f62:	b21a      	sxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	b21a      	sxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3306      	adds	r3, #6
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b21b      	sxth	r3, r3
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	b21b      	sxth	r3, r3
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3309      	adds	r3, #9
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3308      	adds	r3, #8
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b21a      	sxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	330b      	adds	r3, #11
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	b21a      	sxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	330a      	adds	r3, #10
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	330d      	adds	r3, #13
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b21a      	sxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	330f      	adds	r3, #15
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	330e      	adds	r3, #14
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b21a      	sxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3311      	adds	r3, #17
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	b21a      	sxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	b21a      	sxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3313      	adds	r3, #19
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	b21a      	sxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3312      	adds	r3, #18
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b21b      	sxth	r3, r3
 8005018:	4313      	orrs	r3, r2
 800501a:	b21a      	sxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3315      	adds	r3, #21
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b21a      	sxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3314      	adds	r3, #20
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b21b      	sxth	r3, r3
 8005032:	4313      	orrs	r3, r2
 8005034:	b21a      	sxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3317      	adds	r3, #23
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	b21a      	sxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3316      	adds	r3, #22
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b21b      	sxth	r3, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	b21a      	sxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7e5a      	ldrb	r2, [r3, #25]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	761a      	strb	r2, [r3, #24]

}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	3310      	adds	r3, #16
 8005076:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3301      	adds	r3, #1
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	b21a      	sxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b21b      	sxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	b21a      	sxth	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	789a      	ldrb	r2, [r3, #2]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3303      	adds	r3, #3
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80050b6:	8a7a      	ldrh	r2, [r7, #18]
 80050b8:	8a3b      	ldrh	r3, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b21a      	sxth	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3305      	adds	r3, #5
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	89bb      	ldrh	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b21a      	sxth	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3306      	adds	r3, #6
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b25a      	sxtb	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	460a      	mov	r2, r1
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	4613      	mov	r3, r2
 8005112:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8005118:	79fa      	ldrb	r2, [r7, #7]
 800511a:	79bb      	ldrb	r3, [r7, #6]
 800511c:	4013      	ands	r3, r2
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	e001      	b.n	800512e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <null_ptr_check+0x26>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <null_ptr_check+0x26>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <null_ptr_check+0x26>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8005162:	23ff      	movs	r3, #255	; 0xff
 8005164:	73fb      	strb	r3, [r7, #15]
 8005166:	e001      	b.n	800516c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800516c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af02      	add	r7, sp, #8
 8005182:	603a      	str	r2, [r7, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
 800518a:	460b      	mov	r3, r1
 800518c:	71bb      	strb	r3, [r7, #6]
 800518e:	4613      	mov	r3, r2
 8005190:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	b29b      	uxth	r3, r3
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	b299      	uxth	r1, r3
 800519a:	1dba      	adds	r2, r7, #6
 800519c:	230a      	movs	r3, #10
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2301      	movs	r3, #1
 80051a2:	4811      	ldr	r0, [pc, #68]	; (80051e8 <user_i2c_read+0x6c>)
 80051a4:	f003 fdd6 	bl	8008d54 <HAL_I2C_Master_Transmit>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <user_i2c_read+0x38>
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b2:	e014      	b.n	80051de <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	b21b      	sxth	r3, r3
 80051c0:	b299      	uxth	r1, r3
 80051c2:	88bb      	ldrh	r3, [r7, #4]
 80051c4:	220a      	movs	r2, #10
 80051c6:	9200      	str	r2, [sp, #0]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	4807      	ldr	r0, [pc, #28]	; (80051e8 <user_i2c_read+0x6c>)
 80051cc:	f003 fec0 	bl	8008f50 <HAL_I2C_Master_Receive>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <user_i2c_read+0x60>
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051da:	e000      	b.n	80051de <user_i2c_read+0x62>

  return 0;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	200002e8 	.word	0x200002e8

080051ec <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fbcf 	bl	8006998 <HAL_Delay>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	603a      	str	r2, [r7, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
 8005212:	460b      	mov	r3, r1
 8005214:	71bb      	strb	r3, [r7, #6]
 8005216:	4613      	mov	r3, r2
 8005218:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800521a:	88bb      	ldrh	r3, [r7, #4]
 800521c:	3301      	adds	r3, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f00b fb94 	bl	801094c <malloc>
 8005224:	4603      	mov	r3, r0
 8005226:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005228:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	88ba      	ldrh	r2, [r7, #4]
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f00b fb97 	bl	801096c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	b29b      	uxth	r3, r3
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	b299      	uxth	r1, r3
 8005246:	88bb      	ldrh	r3, [r7, #4]
 8005248:	3301      	adds	r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005250:	9200      	str	r2, [sp, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4808      	ldr	r0, [pc, #32]	; (8005278 <user_i2c_write+0x74>)
 8005256:	f003 fd7d 	bl	8008d54 <HAL_I2C_Master_Transmit>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <user_i2c_write+0x62>
 8005260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005264:	e003      	b.n	800526e <user_i2c_write+0x6a>

  free(buf);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f00b fb78 	bl	801095c <free>
  return 0;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200002e8 	.word	0x200002e8

0800527c <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	detect_bme280();
 8005280:	f000 fa64 	bl	800574c <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <detect_all_sensors_and_init+0x4c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 800528c:	f000 f9dc 	bl	8005648 <init_bme280>
	}

	detect_mpu6050();
 8005290:	f000 fa92 	bl	80057b8 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <detect_all_sensors_and_init+0x4c>)
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 800529c:	f000 f98e 	bl	80055bc <init_mpu6050>
	}



	detect_ms5611();
 80052a0:	f000 fb3a 	bl	8005918 <detect_ms5611>
	if(i2c_device.MS5611_ready_status == true)
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <detect_all_sensors_and_init+0x4c>)
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <detect_all_sensors_and_init+0x34>
	{
		init_ms5611();
 80052ac:	f000 f960 	bl	8005570 <init_ms5611>
	}

	init_am2302();			// Init AM2302 sensor
 80052b0:	f000 f846 	bl	8005340 <init_am2302>

	//////////////////////////////////////////////////////////////
	// DON'T WORK
	denect_hmc5883l();								// Don't work
 80052b4:	f000 fb02 	bl	80058bc <denect_hmc5883l>

	detect_apds9960();
 80052b8:	f000 fb5c 	bl	8005974 <detect_apds9960>
	if(i2c_device.APDS9960_ready_status == true)
	{
		//init_apds9960();
	}
	///////////////////////////////////////////////////////////////
	detect_oled_screen();
 80052bc:	f000 fb90 	bl	80059e0 <detect_oled_screen>
	detect_ds3231();
 80052c0:	f000 fbb4 	bl	8005a2c <detect_ds3231>

}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000628 	.word	0x20000628

080052cc <measure_sensors>:
//---------------------------------------------------------------------------------------
// Measure one time
void measure_sensors(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
//	while(1)
//	{

		bme280_measure();
 80052d2:	f000 fa03 	bl	80056dc <bme280_measure>
		mpu6050_measure();
 80052d6:	f000 f981 	bl	80055dc <mpu6050_measure>
		ms5611_measure();
 80052da:	f000 f955 	bl	8005588 <ms5611_measure>

		bool am2302_measure_ok = true;
 80052de:	2301      	movs	r3, #1
 80052e0:	71fb      	strb	r3, [r7, #7]
		if(am2302_measure_ok)
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <measure_sensors+0x28>
		{
			HAL_Delay(1000);
 80052e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052ec:	f001 fb54 	bl	8006998 <HAL_Delay>
			am2302_measure();	// Measure must be less than one time per 2-3 seconds
 80052f0:	f000 f84a 	bl	8005388 <am2302_measure>
		//HAL_Delay(1000);
//	}



}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <DelayMicro+0x3c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <DelayMicro+0x3c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <DelayMicro+0x40>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	0ddb      	lsrs	r3, r3, #23
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800531e:	bf00      	nop
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1e5a      	subs	r2, r3, #1
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1fa      	bne.n	8005320 <DelayMicro+0x24>
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000008 	.word	0x20000008
 800533c:	ffa71ee7 	.word	0xffa71ee7

08005340 <init_am2302>:
//----------------------------------------------------------------------------------------
void init_am2302(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <init_am2302+0x44>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <init_am2302+0x44>)
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <init_am2302+0x44>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <init_am2302+0x44>)
 8005356:	f023 0302 	bic.w	r3, r3, #2
 800535a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <init_am2302+0x44>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <init_am2302+0x44>)
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <init_am2302+0x44>)
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <init_am2302+0x44>)
 800536e:	f083 0302 	eor.w	r3, r3, #2
 8005372:	6153      	str	r3, [r2, #20]
	HAL_Delay(2000); 							// First init must be 2 seconds delay
 8005374:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005378:	f001 fb0e 	bl	8006998 <HAL_Delay>
	am2302_measure(); 							// For fill in i2c_device.AM2302_ready_status
 800537c:	f000 f804 	bl	8005388 <am2302_measure>
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40020800 	.word	0x40020800

08005388 <am2302_measure>:
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]
	int j = 0;   							// Counter bytes
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
	int i = 0;								// Counter bits
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 800539a:	2300      	movs	r3, #0
 800539c:	603b      	str	r3, [r7, #0]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 800539e:	4b72      	ldr	r3, [pc, #456]	; (8005568 <am2302_measure+0x1e0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a71      	ldr	r2, [pc, #452]	; (8005568 <am2302_measure+0x1e0>)
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80053aa:	4b6f      	ldr	r3, [pc, #444]	; (8005568 <am2302_measure+0x1e0>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4a6e      	ldr	r2, [pc, #440]	; (8005568 <am2302_measure+0x1e0>)
 80053b0:	f023 0302 	bic.w	r3, r3, #2
 80053b4:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80053b6:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <am2302_measure+0x1e0>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4a6b      	ldr	r2, [pc, #428]	; (8005568 <am2302_measure+0x1e0>)
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	6093      	str	r3, [r2, #8]

	// Make output pin C1
	GPIOC->ODR &= ~0x02;		// Low level
 80053c2:	4b69      	ldr	r3, [pc, #420]	; (8005568 <am2302_measure+0x1e0>)
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4a68      	ldr	r2, [pc, #416]	; (8005568 <am2302_measure+0x1e0>)
 80053c8:	f023 0302 	bic.w	r3, r3, #2
 80053cc:	6153      	str	r3, [r2, #20]
	DelayMicro(18000);
 80053ce:	f244 6050 	movw	r0, #18000	; 0x4650
 80053d2:	f7ff ff93 	bl	80052fc <DelayMicro>
	GPIOC->ODR ^= 0x02;			// High level
 80053d6:	4b64      	ldr	r3, [pc, #400]	; (8005568 <am2302_measure+0x1e0>)
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4a63      	ldr	r2, [pc, #396]	; (8005568 <am2302_measure+0x1e0>)
 80053dc:	f083 0302 	eor.w	r3, r3, #2
 80053e0:	6153      	str	r3, [r2, #20]
	DelayMicro(39);
 80053e2:	2027      	movs	r0, #39	; 0x27
 80053e4:	f7ff ff8a 	bl	80052fc <DelayMicro>

	// Make input pin C1
	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80053e8:	4b5f      	ldr	r3, [pc, #380]	; (8005568 <am2302_measure+0x1e0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5e      	ldr	r2, [pc, #376]	; (8005568 <am2302_measure+0x1e0>)
 80053ee:	f023 0304 	bic.w	r3, r3, #4
 80053f2:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80053f4:	4b5c      	ldr	r3, [pc, #368]	; (8005568 <am2302_measure+0x1e0>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a5b      	ldr	r2, [pc, #364]	; (8005568 <am2302_measure+0x1e0>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	60d3      	str	r3, [r2, #12]

	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8005400:	4b59      	ldr	r3, [pc, #356]	; (8005568 <am2302_measure+0x1e0>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <am2302_measure+0x8a>
	{
		get_data_status = false; 					// Error. Sensor not response
 800540c:	2300      	movs	r3, #0
 800540e:	75fb      	strb	r3, [r7, #23]
 8005410:	e001      	b.n	8005416 <am2302_measure+0x8e>
	}
	else
	{
		get_data_status = true;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
	}

	DelayMicro(80);
 8005416:	2050      	movs	r0, #80	; 0x50
 8005418:	f7ff ff70 	bl	80052fc <DelayMicro>
	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 800541c:	4b52      	ldr	r3, [pc, #328]	; (8005568 <am2302_measure+0x1e0>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <am2302_measure+0xa6>
	{
		get_data_status = false; 					// Error. Sensor not response
 8005428:	2300      	movs	r3, #0
 800542a:	75fb      	strb	r3, [r7, #23]
 800542c:	e001      	b.n	8005432 <am2302_measure+0xaa>
	}
	else
	{
		get_data_status = true;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
	}
	DelayMicro(80);
 8005432:	2050      	movs	r0, #80	; 0x50
 8005434:	f7ff ff62 	bl	80052fc <DelayMicro>

	if(get_data_status == true)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 808c 	beq.w	8005558 <am2302_measure+0x1d0>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e048      	b.n	80054d8 <am2302_measure+0x150>
		{
			data[4-j] = 0;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f1c3 0304 	rsb	r3, r3, #4
 800544c:	f107 0218 	add.w	r2, r7, #24
 8005450:	4413      	add	r3, r2
 8005452:	2200      	movs	r2, #0
 8005454:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e034      	b.n	80054c8 <am2302_measure+0x140>
			{
				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 800545e:	bf00      	nop
 8005460:	4b41      	ldr	r3, [pc, #260]	; (8005568 <am2302_measure+0x1e0>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f9      	beq.n	8005460 <am2302_measure+0xd8>
				DelayMicro(30);
 800546c:	201e      	movs	r0, #30
 800546e:	f7ff ff45 	bl	80052fc <DelayMicro>
				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8005472:	4b3d      	ldr	r3, [pc, #244]	; (8005568 <am2302_measure+0x1e0>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01a      	beq.n	80054b4 <am2302_measure+0x12c>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f1c3 0304 	rsb	r3, r3, #4
 8005484:	f107 0218 	add.w	r2, r7, #24
 8005488:	4413      	add	r3, r2
 800548a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800548e:	b25a      	sxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f1c3 0307 	rsb	r3, r3, #7
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	b25b      	sxtb	r3, r3
 800549e:	4313      	orrs	r3, r2
 80054a0:	b25a      	sxtb	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f1c3 0304 	rsb	r3, r3, #4
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	f107 0118 	add.w	r1, r7, #24
 80054ae:	440b      	add	r3, r1
 80054b0:	f803 2c18 	strb.w	r2, [r3, #-24]
				}
				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80054b4:	bf00      	nop
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <am2302_measure+0x1e0>)
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f9      	bne.n	80054b6 <am2302_measure+0x12e>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b07      	cmp	r3, #7
 80054cc:	ddc7      	ble.n	800545e <am2302_measure+0xd6>
			}
			get_data_status = true;										// Data was been written okay
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3301      	adds	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	ddb3      	ble.n	8005446 <am2302_measure+0xbe>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80054de:	463b      	mov	r3, r7
 80054e0:	3301      	adds	r3, #1
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80054f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f8:	edc7 7a02 	vstr	s15, [r7, #8]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80054fc:	463b      	mov	r3, r7
 80054fe:	3301      	adds	r3, #1
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b21b      	sxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	da0f      	bge.n	8005528 <am2302_measure+0x1a0>
 8005508:	68b8      	ldr	r0, [r7, #8]
 800550a:	f7fa ffc1 	bl	8000490 <__aeabi_f2d>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4610      	mov	r0, r2
 8005514:	4619      	mov	r1, r3
 8005516:	f7fb faeb 	bl	8000af0 <__aeabi_d2f>
 800551a:	4603      	mov	r3, r0
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef1 7a67 	vneg.f32	s15, s15
 8005524:	edc7 7a02 	vstr	s15, [r7, #8]

		i2c_device.AM2302_temperature = temper;
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <am2302_measure+0x1e4>)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6613      	str	r3, [r2, #96]	; 0x60

		hum = (float)(*(int16_t*)(data+3)) / 10;
 800552e:	463b      	mov	r3, r7
 8005530:	3303      	adds	r3, #3
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800553e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005546:	edc7 7a01 	vstr	s15, [r7, #4]
		i2c_device.AM2302_humidity = hum;
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <am2302_measure+0x1e4>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6653      	str	r3, [r2, #100]	; 0x64

		i2c_device.AM2302_ready_status = true;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <am2302_measure+0x1e4>)
 8005552:	2201      	movs	r2, #1
 8005554:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.AM2302_ready_status = false;
	}
}
 8005556:	e002      	b.n	800555e <am2302_measure+0x1d6>
		i2c_device.AM2302_ready_status = false;
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <am2302_measure+0x1e4>)
 800555a:	2200      	movs	r2, #0
 800555c:	715a      	strb	r2, [r3, #5]
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40020800 	.word	0x40020800
 800556c:	20000628 	.word	0x20000628

08005570 <init_ms5611>:
//----------------------------------------------------------------------------------------
void init_ms5611(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
	ms5611_set_i2c(&hi2c2);
 8005574:	4803      	ldr	r0, [pc, #12]	; (8005584 <init_ms5611+0x14>)
 8005576:	f000 fe21 	bl	80061bc <ms5611_set_i2c>
	ms5611_init();
 800557a:	f000 fe73 	bl	8006264 <ms5611_init>
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000394 	.word	0x20000394

08005588 <ms5611_measure>:
//----------------------------------------------------------------------------------------
void ms5611_measure(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	ms5611_update();
 800558c:	f000 ff08 	bl	80063a0 <ms5611_update>

	i2c_device.MS5611_temperature = ms5611_get_temperature();
 8005590:	f000 ff0e 	bl	80063b0 <ms5611_get_temperature>
 8005594:	eeb0 7a40 	vmov.f32	s14, s0
 8005598:	eef0 7a60 	vmov.f32	s15, s1
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <ms5611_measure+0x30>)
 800559e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	i2c_device.MS5611_pressure = ms5611_get_pressure();
 80055a2:	f000 ff81 	bl	80064a8 <ms5611_get_pressure>
 80055a6:	eeb0 7a40 	vmov.f32	s14, s0
 80055aa:	eef0 7a60 	vmov.f32	s15, s1
 80055ae:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <ms5611_measure+0x30>)
 80055b0:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
}
 80055b4:	bf00      	nop
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000628 	.word	0x20000628

080055bc <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 80055c0:	4805      	ldr	r0, [pc, #20]	; (80055d8 <init_mpu6050+0x1c>)
 80055c2:	f000 fa61 	bl	8005a88 <MPU6050_Init>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <init_mpu6050+0x14>
	{
		return 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 80055d0:	2301      	movs	r3, #1
	}
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000394 	.word	0x20000394

080055dc <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 80055e0:	4916      	ldr	r1, [pc, #88]	; (800563c <mpu6050_measure+0x60>)
 80055e2:	4817      	ldr	r0, [pc, #92]	; (8005640 <mpu6050_measure+0x64>)
 80055e4:	f000 faa8 	bl	8005b38 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <mpu6050_measure+0x60>)
 80055ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80055ee:	4915      	ldr	r1, [pc, #84]	; (8005644 <mpu6050_measure+0x68>)
 80055f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <mpu6050_measure+0x60>)
 80055f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055fa:	4912      	ldr	r1, [pc, #72]	; (8005644 <mpu6050_measure+0x68>)
 80055fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <mpu6050_measure+0x60>)
 8005602:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005606:	490f      	ldr	r1, [pc, #60]	; (8005644 <mpu6050_measure+0x68>)
 8005608:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <mpu6050_measure+0x60>)
 800560e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005612:	490c      	ldr	r1, [pc, #48]	; (8005644 <mpu6050_measure+0x68>)
 8005614:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <mpu6050_measure+0x60>)
 800561a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800561e:	4909      	ldr	r1, [pc, #36]	; (8005644 <mpu6050_measure+0x68>)
 8005620:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <mpu6050_measure+0x60>)
 8005626:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800562a:	4906      	ldr	r1, [pc, #24]	; (8005644 <mpu6050_measure+0x68>)
 800562c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <mpu6050_measure+0x60>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <mpu6050_measure+0x68>)
 8005636:	6493      	str	r3, [r2, #72]	; 0x48
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200005d0 	.word	0x200005d0
 8005640:	20000394 	.word	0x20000394
 8005644:	20000628 	.word	0x20000628

08005648 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 800564c:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <init_bme280+0x80>)
 800564e:	2276      	movs	r2, #118	; 0x76
 8005650:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <init_bme280+0x80>)
 8005654:	2201      	movs	r2, #1
 8005656:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8005658:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <init_bme280+0x80>)
 800565a:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <init_bme280+0x84>)
 800565c:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 800565e:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <init_bme280+0x80>)
 8005660:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <init_bme280+0x88>)
 8005662:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8005664:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <init_bme280+0x80>)
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <init_bme280+0x8c>)
 8005668:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 800566a:	4817      	ldr	r0, [pc, #92]	; (80056c8 <init_bme280+0x80>)
 800566c:	f7fe fb6a 	bl	8003d44 <bme280_init>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <init_bme280+0x90>)
 8005676:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <init_bme280+0x80>)
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <init_bme280+0x80>)
 8005682:	2205      	movs	r2, #5
 8005684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <init_bme280+0x80>)
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <init_bme280+0x80>)
 8005692:	2204      	movs	r2, #4
 8005694:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8005698:	490b      	ldr	r1, [pc, #44]	; (80056c8 <init_bme280+0x80>)
 800569a:	200f      	movs	r0, #15
 800569c:	f7fe fc44 	bl	8003f28 <bme280_set_sensor_settings>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <init_bme280+0x90>)
 80056a6:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80056a8:	4907      	ldr	r1, [pc, #28]	; (80056c8 <init_bme280+0x80>)
 80056aa:	2003      	movs	r0, #3
 80056ac:	f7fe fc91 	bl	8003fd2 <bme280_set_sensor_mode>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <init_bme280+0x90>)
 80056b6:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <init_bme280+0x80>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2028      	movs	r0, #40	; 0x28
 80056be:	4798      	blx	r3
}
 80056c0:	bf00      	nop
 80056c2:	4618      	mov	r0, r3
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000570 	.word	0x20000570
 80056cc:	0800517d 	.word	0x0800517d
 80056d0:	08005205 	.word	0x08005205
 80056d4:	080051ed 	.word	0x080051ed
 80056d8:	200005b0 	.word	0x200005b0

080056dc <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <bme280_measure+0x60>)
 80056e2:	4917      	ldr	r1, [pc, #92]	; (8005740 <bme280_measure+0x64>)
 80056e4:	2007      	movs	r0, #7
 80056e6:	f7fe fcf0 	bl	80040ca <bme280_get_sensor_data>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <bme280_measure+0x68>)
 80056f0:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <bme280_measure+0x68>)
 80056f4:	f993 3000 	ldrsb.w	r3, [r3]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11d      	bne.n	8005738 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <bme280_measure+0x64>)
 80056fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f7fb f9f3 	bl	8000af0 <__aeabi_d2f>
 800570a:	4603      	mov	r3, r0
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <bme280_measure+0x6c>)
 800570e:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <bme280_measure+0x64>)
 8005712:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	f7fb f9e9 	bl	8000af0 <__aeabi_d2f>
 800571e:	4603      	mov	r3, r0
 8005720:	4a09      	ldr	r2, [pc, #36]	; (8005748 <bme280_measure+0x6c>)
 8005722:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <bme280_measure+0x64>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	f7fb f9df 	bl	8000af0 <__aeabi_d2f>
 8005732:	4603      	mov	r3, r0
 8005734:	4a04      	ldr	r2, [pc, #16]	; (8005748 <bme280_measure+0x6c>)
 8005736:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000570 	.word	0x20000570
 8005740:	200005b8 	.word	0x200005b8
 8005744:	200005b0 	.word	0x200005b0
 8005748:	20000628 	.word	0x20000628

0800574c <detect_bme280>:

// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
// Temperature, humidity and pressure sensor
void detect_bme280(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8005752:	2300      	movs	r3, #0
 8005754:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8005756:	2376      	movs	r3, #118	; 0x76
 8005758:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 800575a:	23d0      	movs	r3, #208	; 0xd0
 800575c:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 800575e:	2360      	movs	r3, #96	; 0x60
 8005760:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8005762:	2300      	movs	r3, #0
 8005764:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005766:	88bb      	ldrh	r3, [r7, #4]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	b299      	uxth	r1, r3
 800576c:	887a      	ldrh	r2, [r7, #2]
 800576e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005772:	9302      	str	r3, [sp, #8]
 8005774:	2301      	movs	r3, #1
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	463b      	mov	r3, r7
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	2301      	movs	r3, #1
 800577e:	480c      	ldr	r0, [pc, #48]	; (80057b0 <detect_bme280+0x64>)
 8005780:	f003 ff06 	bl	8009590 <HAL_I2C_Mem_Read>
 8005784:	4603      	mov	r3, r0
 8005786:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8005788:	783b      	ldrb	r3, [r7, #0]
 800578a:	787a      	ldrb	r2, [r7, #1]
 800578c:	429a      	cmp	r2, r3
 800578e:	d106      	bne.n	800579e <detect_bme280+0x52>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <detect_bme280+0x68>)
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e003      	b.n	80057a6 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <detect_bme280+0x68>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
	}
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200002e8 	.word	0x200002e8
 80057b4:	20000628 	.word	0x20000628

080057b8 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
// 1. IMU Module. Measure Acceleration X, Y, Z and Gyroscope X, Y, Z.
// 2. Turn on ability work with  hmc5883l ( Magnetometer  sensor ).
void detect_mpu6050(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 80057c2:	23d0      	movs	r3, #208	; 0xd0
 80057c4:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 80057c6:	2375      	movs	r3, #117	; 0x75
 80057c8:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 80057ca:	2368      	movs	r3, #104	; 0x68
 80057cc:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 80057d2:	897a      	ldrh	r2, [r7, #10]
 80057d4:	89b9      	ldrh	r1, [r7, #12]
 80057d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	2301      	movs	r3, #1
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2301      	movs	r3, #1
 80057e8:	4832      	ldr	r0, [pc, #200]	; (80058b4 <detect_mpu6050+0xfc>)
 80057ea:	f003 fed1 	bl	8009590 <HAL_I2C_Mem_Read>
 80057ee:	4603      	mov	r3, r0
 80057f0:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 80057f2:	7a3b      	ldrb	r3, [r7, #8]
 80057f4:	7a7a      	ldrb	r2, [r7, #9]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d106      	bne.n	8005808 <detect_mpu6050+0x50>
 80057fa:	89fb      	ldrh	r3, [r7, #14]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <detect_mpu6050+0x100>)
 8005802:	2201      	movs	r2, #1
 8005804:	705a      	strb	r2, [r3, #1]
 8005806:	e002      	b.n	800580e <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8005808:	4b2b      	ldr	r3, [pc, #172]	; (80058b8 <detect_mpu6050+0x100>)
 800580a:	2200      	movs	r2, #0
 800580c:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <detect_mpu6050+0x100>)
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04a      	beq.n	80058ac <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8005816:	2300      	movs	r3, #0
 8005818:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 800581a:	89b9      	ldrh	r1, [r7, #12]
 800581c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	2301      	movs	r3, #1
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	1dfb      	adds	r3, r7, #7
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2301      	movs	r3, #1
 800582c:	226a      	movs	r2, #106	; 0x6a
 800582e:	4821      	ldr	r0, [pc, #132]	; (80058b4 <detect_mpu6050+0xfc>)
 8005830:	f003 fdb4 	bl	800939c <HAL_I2C_Mem_Write>
 8005834:	4603      	mov	r3, r0
 8005836:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8005838:	2302      	movs	r3, #2
 800583a:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 800583c:	89b9      	ldrh	r1, [r7, #12]
 800583e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	2301      	movs	r3, #1
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	1dfb      	adds	r3, r7, #7
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2301      	movs	r3, #1
 800584e:	2237      	movs	r2, #55	; 0x37
 8005850:	4818      	ldr	r0, [pc, #96]	; (80058b4 <detect_mpu6050+0xfc>)
 8005852:	f003 fda3 	bl	800939c <HAL_I2C_Mem_Write>
 8005856:	4603      	mov	r3, r0
 8005858:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 800585e:	89b9      	ldrh	r1, [r7, #12]
 8005860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	2301      	movs	r3, #1
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2301      	movs	r3, #1
 8005872:	226a      	movs	r2, #106	; 0x6a
 8005874:	480f      	ldr	r0, [pc, #60]	; (80058b4 <detect_mpu6050+0xfc>)
 8005876:	f003 fe8b 	bl	8009590 <HAL_I2C_Mem_Read>
 800587a:	4603      	mov	r3, r0
 800587c:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8005882:	89b9      	ldrh	r1, [r7, #12]
 8005884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	2237      	movs	r2, #55	; 0x37
 8005898:	4806      	ldr	r0, [pc, #24]	; (80058b4 <detect_mpu6050+0xfc>)
 800589a:	f003 fe79 	bl	8009590 <HAL_I2C_Mem_Read>
 800589e:	4603      	mov	r3, r0
 80058a0:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 80058a2:	89fb      	ldrh	r3, [r7, #14]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80058a8:	f000 f808 	bl	80058bc <denect_hmc5883l>
		}
	}
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000394 	.word	0x20000394
 80058b8:	20000628 	.word	0x20000628

080058bc <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 80058c6:	231e      	movs	r3, #30
 80058c8:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 80058ca:	230a      	movs	r3, #10
 80058cc:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 80058d2:	88bb      	ldrh	r3, [r7, #4]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	b299      	uxth	r1, r3
 80058d8:	887a      	ldrh	r2, [r7, #2]
 80058da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	2301      	movs	r3, #1
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	1c7b      	adds	r3, r7, #1
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	2301      	movs	r3, #1
 80058ea:	4809      	ldr	r0, [pc, #36]	; (8005910 <denect_hmc5883l+0x54>)
 80058ec:	f003 fe50 	bl	8009590 <HAL_I2C_Mem_Read>
 80058f0:	4603      	mov	r3, r0
 80058f2:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <denect_hmc5883l+0x58>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8005900:	e002      	b.n	8005908 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <denect_hmc5883l+0x58>)
 8005904:	2200      	movs	r2, #0
 8005906:	709a      	strb	r2, [r3, #2]
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000394 	.word	0x20000394
 8005914:	20000628 	.word	0x20000628

08005918 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8005922:	2377      	movs	r3, #119	; 0x77
 8005924:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8005926:	2300      	movs	r3, #0
 8005928:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	b299      	uxth	r1, r3
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2301      	movs	r3, #1
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	1c7b      	adds	r3, r7, #1
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2301      	movs	r3, #1
 8005946:	4809      	ldr	r0, [pc, #36]	; (800596c <detect_ms5611+0x54>)
 8005948:	f003 fe22 	bl	8009590 <HAL_I2C_Mem_Read>
 800594c:	4603      	mov	r3, r0
 800594e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <detect_ms5611+0x58>)
 8005958:	2201      	movs	r2, #1
 800595a:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 800595c:	e002      	b.n	8005964 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <detect_ms5611+0x58>)
 8005960:	2200      	movs	r2, #0
 8005962:	70da      	strb	r2, [r3, #3]
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000394 	.word	0x20000394
 8005970:	20000628 	.word	0x20000628

08005974 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800597e:	2339      	movs	r3, #57	; 0x39
 8005980:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 8005982:	2392      	movs	r3, #146	; 0x92
 8005984:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8005986:	23a8      	movs	r3, #168	; 0xa8
 8005988:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800598e:	88bb      	ldrh	r3, [r7, #4]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	b299      	uxth	r1, r3
 8005994:	887a      	ldrh	r2, [r7, #2]
 8005996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	2301      	movs	r3, #1
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	463b      	mov	r3, r7
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2301      	movs	r3, #1
 80059a6:	480c      	ldr	r0, [pc, #48]	; (80059d8 <detect_apds9960+0x64>)
 80059a8:	f003 fdf2 	bl	8009590 <HAL_I2C_Mem_Read>
 80059ac:	4603      	mov	r3, r0
 80059ae:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80059b0:	783b      	ldrb	r3, [r7, #0]
 80059b2:	787a      	ldrb	r2, [r7, #1]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <detect_apds9960+0x52>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <detect_apds9960+0x68>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	711a      	strb	r2, [r3, #4]
 80059c4:	e003      	b.n	80059ce <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <detect_apds9960+0x68>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	711a      	strb	r2, [r3, #4]
	}
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000394 	.word	0x20000394
 80059dc:	20000628 	.word	0x20000628

080059e0 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 80059ea:	2300      	movs	r3, #0
 80059ec:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 80059ee:	23ae      	movs	r3, #174	; 0xae
 80059f0:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 80059f2:	1d3a      	adds	r2, r7, #4
 80059f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	2302      	movs	r3, #2
 80059fc:	2178      	movs	r1, #120	; 0x78
 80059fe:	4809      	ldr	r0, [pc, #36]	; (8005a24 <detect_oled_screen+0x44>)
 8005a00:	f003 f9a8 	bl	8008d54 <HAL_I2C_Master_Transmit>
 8005a04:	4603      	mov	r3, r0
 8005a06:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <detect_oled_screen+0x48>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8005a14:	e002      	b.n	8005a1c <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8005a16:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <detect_oled_screen+0x48>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	719a      	strb	r2, [r3, #6]
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200002e8 	.word	0x200002e8
 8005a28:	20000628 	.word	0x20000628

08005a2c <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 8005a36:	2368      	movs	r3, #104	; 0x68
 8005a38:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005a42:	88bb      	ldrh	r3, [r7, #4]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	b299      	uxth	r1, r3
 8005a48:	887a      	ldrh	r2, [r7, #2]
 8005a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a4e:	9302      	str	r3, [sp, #8]
 8005a50:	2301      	movs	r3, #1
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	1c7b      	adds	r3, r7, #1
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4809      	ldr	r0, [pc, #36]	; (8005a80 <detect_ds3231+0x54>)
 8005a5c:	f003 fd98 	bl	8009590 <HAL_I2C_Mem_Read>
 8005a60:	4603      	mov	r3, r0
 8005a62:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <detect_ds3231+0x58>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 8005a70:	e002      	b.n	8005a78 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <detect_ds3231+0x58>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	71da      	strb	r2, [r3, #7]
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200002e8 	.word	0x200002e8
 8005a84:	20000628 	.word	0x20000628

08005a88 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af04      	add	r7, sp, #16
 8005a8e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8005a90:	2364      	movs	r3, #100	; 0x64
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	2301      	movs	r3, #1
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f107 030f 	add.w	r3, r7, #15
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2275      	movs	r2, #117	; 0x75
 8005aa2:	21d0      	movs	r1, #208	; 0xd0
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f003 fd73 	bl	8009590 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b68      	cmp	r3, #104	; 0x68
 8005aae:	d13d      	bne.n	8005b2c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8005ab4:	2364      	movs	r3, #100	; 0x64
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	f107 030e 	add.w	r3, r7, #14
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	226b      	movs	r2, #107	; 0x6b
 8005ac6:	21d0      	movs	r1, #208	; 0xd0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f003 fc67 	bl	800939c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8005ace:	2307      	movs	r3, #7
 8005ad0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8005ad2:	2364      	movs	r3, #100	; 0x64
 8005ad4:	9302      	str	r3, [sp, #8]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	f107 030e 	add.w	r3, r7, #14
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	2219      	movs	r2, #25
 8005ae4:	21d0      	movs	r1, #208	; 0xd0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f003 fc58 	bl	800939c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005af0:	2364      	movs	r3, #100	; 0x64
 8005af2:	9302      	str	r3, [sp, #8]
 8005af4:	2301      	movs	r3, #1
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	f107 030e 	add.w	r3, r7, #14
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	2301      	movs	r3, #1
 8005b00:	221c      	movs	r2, #28
 8005b02:	21d0      	movs	r1, #208	; 0xd0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f003 fc49 	bl	800939c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005b0e:	2364      	movs	r3, #100	; 0x64
 8005b10:	9302      	str	r3, [sp, #8]
 8005b12:	2301      	movs	r3, #1
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	f107 030e 	add.w	r3, r7, #14
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	221b      	movs	r2, #27
 8005b20:	21d0      	movs	r1, #208	; 0xd0
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f003 fc3a 	bl	800939c <HAL_I2C_Mem_Write>
        return 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <MPU6050_Init+0xa6>
    }
    return 1;
 8005b2c:	2301      	movs	r3, #1
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8005b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b3c:	b094      	sub	sp, #80	; 0x50
 8005b3e:	af04      	add	r7, sp, #16
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8005b44:	2364      	movs	r3, #100	; 0x64
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	230e      	movs	r3, #14
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	223b      	movs	r2, #59	; 0x3b
 8005b56:	21d0      	movs	r1, #208	; 0xd0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f003 fd19 	bl	8009590 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8005b5e:	7a3b      	ldrb	r3, [r7, #8]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	b21a      	sxth	r2, r3
 8005b64:	7a7b      	ldrb	r3, [r7, #9]
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	b21a      	sxth	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8005b70:	7abb      	ldrb	r3, [r7, #10]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	b21a      	sxth	r2, r3
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b21a      	sxth	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8005b82:	7b3b      	ldrb	r3, [r7, #12]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	b21a      	sxth	r2, r3
 8005b88:	7b7b      	ldrb	r3, [r7, #13]
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	b21a      	sxth	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	b21a      	sxth	r2, r3
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8005ba2:	7c3b      	ldrb	r3, [r7, #16]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b21a      	sxth	r2, r3
 8005ba8:	7c7b      	ldrb	r3, [r7, #17]
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	4313      	orrs	r3, r2
 8005bae:	b21a      	sxth	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8005bb4:	7cbb      	ldrb	r3, [r7, #18]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	b21a      	sxth	r2, r3
 8005bba:	7cfb      	ldrb	r3, [r7, #19]
 8005bbc:	b21b      	sxth	r3, r3
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	b21a      	sxth	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8005bc6:	7d3b      	ldrb	r3, [r7, #20]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	b21a      	sxth	r2, r3
 8005bcc:	7d7b      	ldrb	r3, [r7, #21]
 8005bce:	b21b      	sxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b21a      	sxth	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fc44 	bl	800046c <__aeabi_i2d>
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	4bbd      	ldr	r3, [pc, #756]	; (8005ee0 <MPU6050_Read_All+0x3a8>)
 8005bea:	f7fa fdd3 	bl	8000794 <__aeabi_ddiv>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fa fc34 	bl	800046c <__aeabi_i2d>
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	4bb5      	ldr	r3, [pc, #724]	; (8005ee0 <MPU6050_Read_All+0x3a8>)
 8005c0a:	f7fa fdc3 	bl	8000794 <__aeabi_ddiv>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fc24 	bl	800046c <__aeabi_i2d>
 8005c24:	a3a8      	add	r3, pc, #672	; (adr r3, 8005ec8 <MPU6050_Read_All+0x390>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fdb3 	bl	8000794 <__aeabi_ddiv>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8005c38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c44:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8005ee4 <MPU6050_Read_All+0x3ac>
 8005c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c4c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005ee8 <MPU6050_Read_All+0x3b0>
 8005c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fc03 	bl	800046c <__aeabi_i2d>
 8005c66:	a39a      	add	r3, pc, #616	; (adr r3, 8005ed0 <MPU6050_Read_All+0x398>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fd92 	bl	8000794 <__aeabi_ddiv>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa fbf3 	bl	800046c <__aeabi_i2d>
 8005c86:	a392      	add	r3, pc, #584	; (adr r3, 8005ed0 <MPU6050_Read_All+0x398>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f7fa fd82 	bl	8000794 <__aeabi_ddiv>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fa fbe3 	bl	800046c <__aeabi_i2d>
 8005ca6:	a38a      	add	r3, pc, #552	; (adr r3, 8005ed0 <MPU6050_Read_All+0x398>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f7fa fd72 	bl	8000794 <__aeabi_ddiv>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8005cba:	f000 fe61 	bl	8006980 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <MPU6050_Read_All+0x3b4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fa fbc0 	bl	800044c <__aeabi_ui2d>
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	4b87      	ldr	r3, [pc, #540]	; (8005ef0 <MPU6050_Read_All+0x3b8>)
 8005cd2:	f7fa fd5f 	bl	8000794 <__aeabi_ddiv>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8005cde:	f000 fe4f 	bl	8006980 <HAL_GetTick>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4a81      	ldr	r2, [pc, #516]	; (8005eec <MPU6050_Read_All+0x3b4>)
 8005ce6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cf6:	fb03 f202 	mul.w	r2, r3, r2
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d00:	4619      	mov	r1, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d08:	fb03 f301 	mul.w	r3, r3, r1
 8005d0c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fbac 	bl	800046c <__aeabi_i2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	ec43 2b10 	vmov	d0, r2, r3
 8005d1c:	f00b f8c4 	bl	8010ea8 <sqrt>
 8005d20:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d30:	f7fa fe6e 	bl	8000a10 <__aeabi_dcmpeq>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d11f      	bne.n	8005d7a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fa fb93 	bl	800046c <__aeabi_i2d>
 8005d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d4a:	f7fa fd23 	bl	8000794 <__aeabi_ddiv>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	ec43 2b17 	vmov	d7, r2, r3
 8005d56:	eeb0 0a47 	vmov.f32	s0, s14
 8005d5a:	eef0 0a67 	vmov.f32	s1, s15
 8005d5e:	f00a fef7 	bl	8010b50 <atan>
 8005d62:	ec51 0b10 	vmov	r0, r1, d0
 8005d66:	a35c      	add	r3, pc, #368	; (adr r3, 8005ed8 <MPU6050_Read_All+0x3a0>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fbe8 	bl	8000540 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005d78:	e005      	b.n	8005d86 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8c:	425b      	negs	r3, r3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fa fb6c 	bl	800046c <__aeabi_i2d>
 8005d94:	4682      	mov	sl, r0
 8005d96:	468b      	mov	fp, r1
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fb64 	bl	800046c <__aeabi_i2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	ec43 2b11 	vmov	d1, r2, r3
 8005dac:	ec4b ab10 	vmov	d0, sl, fp
 8005db0:	f00b f877 	bl	8010ea2 <atan2>
 8005db4:	ec51 0b10 	vmov	r0, r1, d0
 8005db8:	a347      	add	r3, pc, #284	; (adr r3, 8005ed8 <MPU6050_Read_All+0x3a0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fbbf 	bl	8000540 <__aeabi_dmul>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	4b49      	ldr	r3, [pc, #292]	; (8005ef4 <MPU6050_Read_All+0x3bc>)
 8005dd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005dd4:	f7fa fe26 	bl	8000a24 <__aeabi_dcmplt>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <MPU6050_Read_All+0x2bc>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	4b43      	ldr	r3, [pc, #268]	; (8005ef8 <MPU6050_Read_All+0x3c0>)
 8005dea:	f7fa fe39 	bl	8000a60 <__aeabi_dcmpgt>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d114      	bne.n	8005e1e <MPU6050_Read_All+0x2e6>
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <MPU6050_Read_All+0x3c0>)
 8005dfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005dfe:	f7fa fe2f 	bl	8000a60 <__aeabi_dcmpgt>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <MPU6050_Read_All+0x2fc>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	4b38      	ldr	r3, [pc, #224]	; (8005ef4 <MPU6050_Read_All+0x3bc>)
 8005e14:	f7fa fe06 	bl	8000a24 <__aeabi_dcmplt>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8005e1e:	4937      	ldr	r1, [pc, #220]	; (8005efc <MPU6050_Read_All+0x3c4>)
 8005e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e24:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005e32:	e014      	b.n	8005e5e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005e3a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005e3e:	eeb0 1a47 	vmov.f32	s2, s14
 8005e42:	eef0 1a67 	vmov.f32	s3, s15
 8005e46:	ed97 0b06 	vldr	d0, [r7, #24]
 8005e4a:	482c      	ldr	r0, [pc, #176]	; (8005efc <MPU6050_Read_All+0x3c4>)
 8005e4c:	f000 f85a 	bl	8005f04 <Kalman_getAngle>
 8005e50:	eeb0 7a40 	vmov.f32	s14, s0
 8005e54:	eef0 7a60 	vmov.f32	s15, s1
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005e64:	4690      	mov	r8, r2
 8005e66:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <MPU6050_Read_All+0x3c0>)
 8005e70:	4640      	mov	r0, r8
 8005e72:	4649      	mov	r1, r9
 8005e74:	f7fa fdf4 	bl	8000a60 <__aeabi_dcmpgt>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005e84:	4614      	mov	r4, r2
 8005e86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005e96:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005e9a:	eeb0 1a47 	vmov.f32	s2, s14
 8005e9e:	eef0 1a67 	vmov.f32	s3, s15
 8005ea2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005ea6:	4816      	ldr	r0, [pc, #88]	; (8005f00 <MPU6050_Read_All+0x3c8>)
 8005ea8:	f000 f82c 	bl	8005f04 <Kalman_getAngle>
 8005eac:	eeb0 7a40 	vmov.f32	s14, s0
 8005eb0:	eef0 7a60 	vmov.f32	s15, s1
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8005eba:	bf00      	nop
 8005ebc:	3740      	adds	r7, #64	; 0x40
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	40cc2900 	.word	0x40cc2900
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	40606000 	.word	0x40606000
 8005ed8:	1a63c1f8 	.word	0x1a63c1f8
 8005edc:	404ca5dc 	.word	0x404ca5dc
 8005ee0:	40d00000 	.word	0x40d00000
 8005ee4:	43aa0000 	.word	0x43aa0000
 8005ee8:	42121eb8 	.word	0x42121eb8
 8005eec:	2000069c 	.word	0x2000069c
 8005ef0:	408f4000 	.word	0x408f4000
 8005ef4:	c0568000 	.word	0xc0568000
 8005ef8:	40568000 	.word	0x40568000
 8005efc:	20000198 	.word	0x20000198
 8005f00:	20000150 	.word	0x20000150

08005f04 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8005f04:	b5b0      	push	{r4, r5, r7, lr}
 8005f06:	b096      	sub	sp, #88	; 0x58
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	61f8      	str	r0, [r7, #28]
 8005f0c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005f10:	ed87 1b02 	vstr	d1, [r7, #8]
 8005f14:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f22:	f7fa f955 	bl	80001d0 <__aeabi_dsub>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3c:	f7fa fb00 	bl	8000540 <__aeabi_dmul>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7fa f944 	bl	80001d4 <__adddf3>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f66:	f7fa faeb 	bl	8000540 <__aeabi_dmul>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005f78:	f7fa f92a 	bl	80001d0 <__aeabi_dsub>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005f8a:	f7fa f921 	bl	80001d0 <__aeabi_dsub>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa f91a 	bl	80001d4 <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f7fa fac8 	bl	8000540 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa f90c 	bl	80001d4 <__adddf3>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd6:	f7fa fab3 	bl	8000540 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa f8f5 	bl	80001d0 <__aeabi_dsub>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006000:	f7fa fa9e 	bl	8000540 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f8e0 	bl	80001d0 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	69f9      	ldr	r1, [r7, #28]
 8006016:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	f7fa fa89 	bl	8000540 <__aeabi_dmul>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa f8cd 	bl	80001d4 <__adddf3>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	69f9      	ldr	r1, [r7, #28]
 8006040:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006050:	f7fa f8c0 	bl	80001d4 <__adddf3>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006066:	f7fa fb95 	bl	8000794 <__aeabi_ddiv>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800607c:	f7fa fb8a 	bl	8000794 <__aeabi_ddiv>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800608e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006092:	f7fa f89d 	bl	80001d0 <__aeabi_dsub>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80060a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060ac:	f7fa fa48 	bl	8000540 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f88c 	bl	80001d4 <__adddf3>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	69f9      	ldr	r1, [r7, #28]
 80060c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80060cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060d4:	f7fa fa34 	bl	8000540 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4620      	mov	r0, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	f7fa f878 	bl	80001d4 <__adddf3>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80060f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80060fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006108:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800610c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006110:	f7fa fa16 	bl	8000540 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4620      	mov	r0, r4
 800611a:	4629      	mov	r1, r5
 800611c:	f7fa f858 	bl	80001d0 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006130:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006138:	f7fa fa02 	bl	8000540 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f844 	bl	80001d0 <__aeabi_dsub>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006158:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800615c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006160:	f7fa f9ee 	bl	8000540 <__aeabi_dmul>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa f830 	bl	80001d0 <__aeabi_dsub>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006180:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006184:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006188:	f7fa f9da 	bl	8000540 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa f81c 	bl	80001d0 <__aeabi_dsub>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80061a8:	ec43 2b17 	vmov	d7, r2, r3
};
 80061ac:	eeb0 0a47 	vmov.f32	s0, s14
 80061b0:	eef0 0a67 	vmov.f32	s1, s15
 80061b4:	3758      	adds	r7, #88	; 0x58
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061bc <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 80061c4:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <ms5611_set_i2c+0x1c>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000698 	.word	0x20000698

080061dc <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	4603      	mov	r3, r0
 80061e4:	603a      	str	r2, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
 80061e8:	460b      	mov	r3, r1
 80061ea:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	79bb      	ldrb	r3, [r7, #6]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061fc:	9102      	str	r1, [sp, #8]
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2301      	movs	r3, #1
 8006206:	21ee      	movs	r1, #238	; 0xee
 8006208:	4804      	ldr	r0, [pc, #16]	; (800621c <ms5611_read_i2c+0x40>)
 800620a:	f003 f9c1 	bl	8009590 <HAL_I2C_Mem_Read>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000394 	.word	0x20000394

08006220 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af04      	add	r7, sp, #16
 8006226:	4603      	mov	r3, r0
 8006228:	603a      	str	r2, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
 800622c:	460b      	mov	r3, r1
 800622e:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	b29a      	uxth	r2, r3
 8006238:	79bb      	ldrb	r3, [r7, #6]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006240:	9102      	str	r1, [sp, #8]
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2301      	movs	r3, #1
 800624a:	21ee      	movs	r1, #238	; 0xee
 800624c:	4804      	ldr	r0, [pc, #16]	; (8006260 <ms5611_write_i2c+0x40>)
 800624e:	f003 f99f 	bl	8009590 <HAL_I2C_Mem_Read>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006256:	7bfb      	ldrb	r3, [r7, #15]

}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000394 	.word	0x20000394

08006264 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e01c      	b.n	80062aa <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3b5e      	subs	r3, #94	; 0x5e
 800627a:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 800627c:	2300      	movs	r3, #0
 800627e:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8006280:	463a      	mov	r2, r7
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	2102      	movs	r1, #2
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff ffa8 	bl	80061dc <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800628c:	783b      	ldrb	r3, [r7, #0]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	b21a      	sxth	r2, r3
 8006292:	787b      	ldrb	r3, [r7, #1]
 8006294:	b21b      	sxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b21b      	sxth	r3, r3
 800629a:	b299      	uxth	r1, r3
 800629c:	4a07      	ldr	r2, [pc, #28]	; (80062bc <ms5611_init+0x58>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3301      	adds	r3, #1
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	dddf      	ble.n	8006270 <ms5611_init+0xc>
	}
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200006a4 	.word	0x200006a4

080062c0 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80062c6:	4a17      	ldr	r2, [pc, #92]	; (8006324 <ms5611_update_pressure+0x64>)
 80062c8:	463b      	mov	r3, r7
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	4611      	mov	r1, r2
 80062ce:	8019      	strh	r1, [r3, #0]
 80062d0:	3302      	adds	r3, #2
 80062d2:	0c12      	lsrs	r2, r2, #16
 80062d4:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <ms5611_update_pressure+0x68>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	463a      	mov	r2, r7
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff ff98 	bl	8006220 <ms5611_write_i2c>
 80062f0:	4603      	mov	r3, r0
 80062f2:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80062f4:	200c      	movs	r0, #12
 80062f6:	f000 fb4f 	bl	8006998 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80062fa:	463b      	mov	r3, r7
 80062fc:	461a      	mov	r2, r3
 80062fe:	2103      	movs	r1, #3
 8006300:	2000      	movs	r0, #0
 8006302:	f7ff ff6b 	bl	80061dc <ms5611_read_i2c>
 8006306:	4603      	mov	r3, r0
 8006308:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800630a:	783b      	ldrb	r3, [r7, #0]
 800630c:	041a      	lsls	r2, r3, #16
 800630e:	787b      	ldrb	r3, [r7, #1]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	4313      	orrs	r3, r2
 8006314:	78ba      	ldrb	r2, [r7, #2]
 8006316:	4313      	orrs	r3, r2
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <ms5611_update_pressure+0x6c>)
 800631a:	6013      	str	r3, [r2, #0]

}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	0801133c 	.word	0x0801133c
 8006328:	200001e0 	.word	0x200001e0
 800632c:	200006a0 	.word	0x200006a0

08006330 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8006336:	4a17      	ldr	r2, [pc, #92]	; (8006394 <ms5611_update_temperature+0x64>)
 8006338:	463b      	mov	r3, r7
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	4611      	mov	r1, r2
 800633e:	8019      	strh	r1, [r3, #0]
 8006340:	3302      	adds	r3, #2
 8006342:	0c12      	lsrs	r2, r2, #16
 8006344:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <ms5611_update_temperature+0x68>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006352:	b25b      	sxtb	r3, r3
 8006354:	b2db      	uxtb	r3, r3
 8006356:	463a      	mov	r2, r7
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff ff60 	bl	8006220 <ms5611_write_i2c>
 8006360:	4603      	mov	r3, r0
 8006362:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006364:	200c      	movs	r0, #12
 8006366:	f000 fb17 	bl	8006998 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 800636a:	463b      	mov	r3, r7
 800636c:	461a      	mov	r2, r3
 800636e:	2103      	movs	r1, #3
 8006370:	2000      	movs	r0, #0
 8006372:	f7ff ff33 	bl	80061dc <ms5611_read_i2c>
 8006376:	4603      	mov	r3, r0
 8006378:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800637a:	783b      	ldrb	r3, [r7, #0]
 800637c:	041a      	lsls	r2, r3, #16
 800637e:	787b      	ldrb	r3, [r7, #1]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	4313      	orrs	r3, r2
 8006384:	78ba      	ldrb	r2, [r7, #2]
 8006386:	4313      	orrs	r3, r2
 8006388:	4a04      	ldr	r2, [pc, #16]	; (800639c <ms5611_update_temperature+0x6c>)
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	0801133c 	.word	0x0801133c
 8006398:	200001e0 	.word	0x200001e0
 800639c:	200006b0 	.word	0x200006b0

080063a0 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 80063a4:	f7ff ffc4 	bl	8006330 <ms5611_update_temperature>
	ms5611_update_pressure();
 80063a8:	f7ff ff8a 	bl	80062c0 <ms5611_update_pressure>
}
 80063ac:	bf00      	nop
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80063b6:	4b36      	ldr	r3, [pc, #216]	; (8006490 <ms5611_get_temperature+0xe0>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b36      	ldr	r3, [pc, #216]	; (8006494 <ms5611_get_temperature+0xe4>)
 80063bc:	891b      	ldrh	r3, [r3, #8]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7fa f841 	bl	800044c <__aeabi_ui2d>
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <ms5611_get_temperature+0xe4>)
 80063d0:	895b      	ldrh	r3, [r3, #10]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fa f84a 	bl	800046c <__aeabi_i2d>
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <ms5611_get_temperature+0xe8>)
 80063de:	f7fa f9d9 	bl	8000794 <__aeabi_ddiv>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7fa f8a9 	bl	8000540 <__aeabi_dmul>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	4b28      	ldr	r3, [pc, #160]	; (800649c <ms5611_get_temperature+0xec>)
 80063fc:	f7f9 feea 	bl	80001d4 <__adddf3>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b20      	ldr	r3, [pc, #128]	; (800649c <ms5611_get_temperature+0xec>)
 800641a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800641e:	f7fa fb01 	bl	8000a24 <__aeabi_dcmplt>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d016      	beq.n	8006456 <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7fa f80f 	bl	800044c <__aeabi_ui2d>
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7fa f80a 	bl	800044c <__aeabi_ui2d>
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <ms5611_get_temperature+0xf0>)
 800643e:	f7fa f9a9 	bl	8000794 <__aeabi_ddiv>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7fa f879 	bl	8000540 <__aeabi_dmul>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 8006456:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800645a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645e:	f7f9 feb7 	bl	80001d0 <__aeabi_dsub>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <ms5611_get_temperature+0xf4>)
 8006470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006474:	f7fa f98e 	bl	8000794 <__aeabi_ddiv>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006480:	eeb0 0a47 	vmov.f32	s0, s14
 8006484:	eef0 0a67 	vmov.f32	s1, s15
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bdb0      	pop	{r4, r5, r7, pc}
 800648e:	bf00      	nop
 8006490:	200006b0 	.word	0x200006b0
 8006494:	200006a4 	.word	0x200006a4
 8006498:	41600000 	.word	0x41600000
 800649c:	409f4000 	.word	0x409f4000
 80064a0:	41e00000 	.word	0x41e00000
 80064a4:	40590000 	.word	0x40590000

080064a8 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b090      	sub	sp, #64	; 0x40
 80064ac:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80064ae:	4bc4      	ldr	r3, [pc, #784]	; (80067c0 <ms5611_get_pressure+0x318>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4bc4      	ldr	r3, [pc, #784]	; (80067c4 <ms5611_get_pressure+0x31c>)
 80064b4:	891b      	ldrh	r3, [r3, #8]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80064bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064be:	f7f9 ffc5 	bl	800044c <__aeabi_ui2d>
 80064c2:	4604      	mov	r4, r0
 80064c4:	460d      	mov	r5, r1
 80064c6:	4bbf      	ldr	r3, [pc, #764]	; (80067c4 <ms5611_get_pressure+0x31c>)
 80064c8:	895b      	ldrh	r3, [r3, #10]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7f9 ffce 	bl	800046c <__aeabi_i2d>
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	4bbc      	ldr	r3, [pc, #752]	; (80067c8 <ms5611_get_pressure+0x320>)
 80064d6:	f7fa f95d 	bl	8000794 <__aeabi_ddiv>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa f82d 	bl	8000540 <__aeabi_dmul>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	4bb6      	ldr	r3, [pc, #728]	; (80067cc <ms5611_get_pressure+0x324>)
 80064f4:	f7f9 fe6e 	bl	80001d4 <__adddf3>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 8006500:	4bb0      	ldr	r3, [pc, #704]	; (80067c4 <ms5611_get_pressure+0x31c>)
 8006502:	885b      	ldrh	r3, [r3, #2]
 8006504:	041b      	lsls	r3, r3, #16
 8006506:	461a      	mov	r2, r3
 8006508:	4bae      	ldr	r3, [pc, #696]	; (80067c4 <ms5611_get_pressure+0x31c>)
 800650a:	88db      	ldrh	r3, [r3, #6]
 800650c:	4619      	mov	r1, r3
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	fb03 f301 	mul.w	r3, r3, r1
 8006514:	09db      	lsrs	r3, r3, #7
 8006516:	4413      	add	r3, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7f9 ff97 	bl	800044c <__aeabi_ui2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8006526:	4ba7      	ldr	r3, [pc, #668]	; (80067c4 <ms5611_get_pressure+0x31c>)
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	03db      	lsls	r3, r3, #15
 800652c:	461a      	mov	r2, r3
 800652e:	4ba5      	ldr	r3, [pc, #660]	; (80067c4 <ms5611_get_pressure+0x31c>)
 8006530:	889b      	ldrh	r3, [r3, #4]
 8006532:	4619      	mov	r1, r3
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	fb03 f301 	mul.w	r3, r3, r1
 800653a:	0a1b      	lsrs	r3, r3, #8
 800653c:	4413      	add	r3, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f7f9 ff84 	bl	800044c <__aeabi_ui2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 800654c:	4ba0      	ldr	r3, [pc, #640]	; (80067d0 <ms5611_get_pressure+0x328>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f7f9 ff7b 	bl	800044c <__aeabi_ui2d>
 8006556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800655a:	f7f9 fff1 	bl	8000540 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	4b9a      	ldr	r3, [pc, #616]	; (80067d4 <ms5611_get_pressure+0x32c>)
 800656c:	f7fa f912 	bl	8000794 <__aeabi_ddiv>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800657c:	f7f9 fe28 	bl	80001d0 <__aeabi_dsub>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	4b92      	ldr	r3, [pc, #584]	; (80067d8 <ms5611_get_pressure+0x330>)
 800658e:	f7fa f901 	bl	8000794 <__aeabi_ddiv>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	4b82      	ldr	r3, [pc, #520]	; (80067cc <ms5611_get_pressure+0x324>)
 80065c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065c8:	f7fa fa2c 	bl	8000a24 <__aeabi_dcmplt>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80cc 	beq.w	800676c <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	fb03 f303 	mul.w	r3, r3, r3
 80065da:	0fdb      	lsrs	r3, r3, #31
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	f7f9 ff7d 	bl	80004e4 <__aeabi_l2d>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	4b75      	ldr	r3, [pc, #468]	; (80067cc <ms5611_get_pressure+0x324>)
 80065f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065fc:	f7f9 fde8 	bl	80001d0 <__aeabi_dsub>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	4b73      	ldr	r3, [pc, #460]	; (80067dc <ms5611_get_pressure+0x334>)
 800660e:	f7f9 ff97 	bl	8000540 <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4614      	mov	r4, r2
 8006618:	461d      	mov	r5, r3
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	4b6b      	ldr	r3, [pc, #428]	; (80067cc <ms5611_get_pressure+0x324>)
 8006620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006624:	f7f9 fdd4 	bl	80001d0 <__aeabi_dsub>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4620      	mov	r0, r4
 800662e:	4629      	mov	r1, r5
 8006630:	f7f9 ff86 	bl	8000540 <__aeabi_dmul>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4610      	mov	r0, r2
 800663a:	4619      	mov	r1, r3
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006644:	f7fa f8a6 	bl	8000794 <__aeabi_ddiv>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	4b5d      	ldr	r3, [pc, #372]	; (80067cc <ms5611_get_pressure+0x324>)
 8006656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800665a:	f7f9 fdb9 	bl	80001d0 <__aeabi_dsub>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <ms5611_get_pressure+0x334>)
 800666c:	f7f9 ff68 	bl	8000540 <__aeabi_dmul>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	4b53      	ldr	r3, [pc, #332]	; (80067cc <ms5611_get_pressure+0x324>)
 800667e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006682:	f7f9 fda5 	bl	80001d0 <__aeabi_dsub>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7f9 ff57 	bl	8000540 <__aeabi_dmul>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	4b50      	ldr	r3, [pc, #320]	; (80067e0 <ms5611_get_pressure+0x338>)
 80066a0:	f7fa f878 	bl	8000794 <__aeabi_ddiv>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 80066ac:	a340      	add	r3, pc, #256	; (adr r3, 80067b0 <ms5611_get_pressure+0x308>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066b6:	f7fa f9b5 	bl	8000a24 <__aeabi_dcmplt>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d055      	beq.n	800676c <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80066c0:	a33d      	add	r3, pc, #244	; (adr r3, 80067b8 <ms5611_get_pressure+0x310>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066ca:	f7f9 fd83 	bl	80001d4 <__adddf3>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <ms5611_get_pressure+0x33c>)
 80066dc:	f7f9 ff30 	bl	8000540 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	a333      	add	r3, pc, #204	; (adr r3, 80067b8 <ms5611_get_pressure+0x310>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066f2:	f7f9 fd6f 	bl	80001d4 <__adddf3>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7f9 ff1f 	bl	8000540 <__aeabi_dmul>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800670a:	f7f9 fd63 	bl	80001d4 <__adddf3>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8006716:	a328      	add	r3, pc, #160	; (adr r3, 80067b8 <ms5611_get_pressure+0x310>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006720:	f7f9 fd58 	bl	80001d4 <__adddf3>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <ms5611_get_pressure+0x334>)
 8006732:	f7f9 ff05 	bl	8000540 <__aeabi_dmul>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4614      	mov	r4, r2
 800673c:	461d      	mov	r5, r3
 800673e:	a31e      	add	r3, pc, #120	; (adr r3, 80067b8 <ms5611_get_pressure+0x310>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006748:	f7f9 fd44 	bl	80001d4 <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4620      	mov	r0, r4
 8006752:	4629      	mov	r1, r5
 8006754:	f7f9 fef4 	bl	8000540 <__aeabi_dmul>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006760:	f7f9 fd38 	bl	80001d4 <__adddf3>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 800676c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006770:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006774:	f7f9 fd2c 	bl	80001d0 <__aeabi_dsub>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 8006780:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006784:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006788:	f7f9 fd22 	bl	80001d0 <__aeabi_dsub>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 8006794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800679c:	f7f9 fd18 	bl	80001d0 <__aeabi_dsub>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <ms5611_get_pressure+0x328>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	e01b      	b.n	80067e8 <ms5611_get_pressure+0x340>
 80067b0:	00000000 	.word	0x00000000
 80067b4:	c0977000 	.word	0xc0977000
 80067b8:	00000000 	.word	0x00000000
 80067bc:	40977000 	.word	0x40977000
 80067c0:	200006b0 	.word	0x200006b0
 80067c4:	200006a4 	.word	0x200006a4
 80067c8:	41600000 	.word	0x41600000
 80067cc:	409f4000 	.word	0x409f4000
 80067d0:	200006a0 	.word	0x200006a0
 80067d4:	41400000 	.word	0x41400000
 80067d8:	40e00000 	.word	0x40e00000
 80067dc:	40140000 	.word	0x40140000
 80067e0:	40100000 	.word	0x40100000
 80067e4:	401c0000 	.word	0x401c0000
 80067e8:	f7f9 fe30 	bl	800044c <__aeabi_ui2d>
 80067ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067f0:	f7f9 fea6 	bl	8000540 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <ms5611_get_pressure+0x3ac>)
 8006802:	f7f9 ffc7 	bl	8000794 <__aeabi_ddiv>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4610      	mov	r0, r2
 800680c:	4619      	mov	r1, r3
 800680e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006812:	f7f9 fcdd 	bl	80001d0 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <ms5611_get_pressure+0x3b0>)
 8006824:	f7f9 ffb6 	bl	8000794 <__aeabi_ddiv>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <ms5611_get_pressure+0x3b4>)
 8006836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683a:	f7f9 ffab 	bl	8000794 <__aeabi_ddiv>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	ec43 2b17 	vmov	d7, r2, r3
}
 8006846:	eeb0 0a47 	vmov.f32	s0, s14
 800684a:	eef0 0a67 	vmov.f32	s1, s15
 800684e:	3740      	adds	r7, #64	; 0x40
 8006850:	46bd      	mov	sp, r7
 8006852:	bdb0      	pop	{r4, r5, r7, pc}
 8006854:	41400000 	.word	0x41400000
 8006858:	40e00000 	.word	0x40e00000
 800685c:	40590000 	.word	0x40590000

08006860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006864:	480d      	ldr	r0, [pc, #52]	; (800689c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006866:	490e      	ldr	r1, [pc, #56]	; (80068a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006868:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800686a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800686c:	e002      	b.n	8006874 <LoopCopyDataInit>

0800686e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800686e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006872:	3304      	adds	r3, #4

08006874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006878:	d3f9      	bcc.n	800686e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800687a:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800687c:	4c0b      	ldr	r4, [pc, #44]	; (80068ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800687e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006880:	e001      	b.n	8006886 <LoopFillZerobss>

08006882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006884:	3204      	adds	r2, #4

08006886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006888:	d3fb      	bcc.n	8006882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800688a:	f7fb ff21 	bl	80026d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800688e:	f00a f839 	bl	8010904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006892:	f7fa ff01 	bl	8001698 <main>
  bx  lr    
 8006896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800689c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068a0:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80068a4:	08011810 	.word	0x08011810
  ldr r2, =_sbss
 80068a8:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80068ac:	20000da4 	.word	0x20000da4

080068b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068b0:	e7fe      	b.n	80068b0 <ADC_IRQHandler>
	...

080068b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <HAL_Init+0x40>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <HAL_Init+0x40>)
 80068be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_Init+0x40>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <HAL_Init+0x40>)
 80068ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_Init+0x40>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <HAL_Init+0x40>)
 80068d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068dc:	2003      	movs	r0, #3
 80068de:	f000 f94f 	bl	8006b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068e2:	2000      	movs	r0, #0
 80068e4:	f000 f808 	bl	80068f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068e8:	f7fb fb86 	bl	8001ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40023c00 	.word	0x40023c00

080068f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_InitTick+0x54>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b12      	ldr	r3, [pc, #72]	; (8006950 <HAL_InitTick+0x58>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800690e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f967 	bl	8006bea <HAL_SYSTICK_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e00e      	b.n	8006944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	d80a      	bhi.n	8006942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800692c:	2200      	movs	r2, #0
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006934:	f000 f92f 	bl	8006b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006938:	4a06      	ldr	r2, [pc, #24]	; (8006954 <HAL_InitTick+0x5c>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000008 	.word	0x20000008
 8006950:	200001e8 	.word	0x200001e8
 8006954:	200001e4 	.word	0x200001e4

08006958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_IncTick+0x20>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_IncTick+0x24>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4413      	add	r3, r2
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <HAL_IncTick+0x24>)
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	200001e8 	.word	0x200001e8
 800697c:	200006b4 	.word	0x200006b4

08006980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return uwTick;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_GetTick+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	200006b4 	.word	0x200006b4

08006998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7ff ffee 	bl	8006980 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b0:	d005      	beq.n	80069be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <HAL_Delay+0x44>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069be:	bf00      	nop
 80069c0:	f7ff ffde 	bl	8006980 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d8f7      	bhi.n	80069c0 <HAL_Delay+0x28>
  {
  }
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200001e8 	.word	0x200001e8

080069e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069f0:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <__NVIC_SetPriorityGrouping+0x44>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069fc:	4013      	ands	r3, r2
 80069fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a12:	4a04      	ldr	r2, [pc, #16]	; (8006a24 <__NVIC_SetPriorityGrouping+0x44>)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	60d3      	str	r3, [r2, #12]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <__NVIC_GetPriorityGrouping+0x18>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	f003 0307 	and.w	r3, r3, #7
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	e000ed00 	.word	0xe000ed00

08006a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	db0b      	blt.n	8006a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	f003 021f 	and.w	r2, r3, #31
 8006a5c:	4907      	ldr	r1, [pc, #28]	; (8006a7c <__NVIC_EnableIRQ+0x38>)
 8006a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	2001      	movs	r0, #1
 8006a66:	fa00 f202 	lsl.w	r2, r0, r2
 8006a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	e000e100 	.word	0xe000e100

08006a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db0a      	blt.n	8006aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	490c      	ldr	r1, [pc, #48]	; (8006acc <__NVIC_SetPriority+0x4c>)
 8006a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006aa8:	e00a      	b.n	8006ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	4908      	ldr	r1, [pc, #32]	; (8006ad0 <__NVIC_SetPriority+0x50>)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3b04      	subs	r3, #4
 8006ab8:	0112      	lsls	r2, r2, #4
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	440b      	add	r3, r1
 8006abe:	761a      	strb	r2, [r3, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	e000e100 	.word	0xe000e100
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f1c3 0307 	rsb	r3, r3, #7
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	bf28      	it	cs
 8006af2:	2304      	movcs	r3, #4
 8006af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3304      	adds	r3, #4
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d902      	bls.n	8006b04 <NVIC_EncodePriority+0x30>
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3b03      	subs	r3, #3
 8006b02:	e000      	b.n	8006b06 <NVIC_EncodePriority+0x32>
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	43da      	mvns	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	401a      	ands	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	43d9      	mvns	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b2c:	4313      	orrs	r3, r2
         );
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	; 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b4c:	d301      	bcc.n	8006b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e00f      	b.n	8006b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b52:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <SysTick_Config+0x40>)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b5a:	210f      	movs	r1, #15
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b60:	f7ff ff8e 	bl	8006a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b64:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <SysTick_Config+0x40>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <SysTick_Config+0x40>)
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	e000e010 	.word	0xe000e010

08006b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff29 	bl	80069e0 <__NVIC_SetPriorityGrouping>
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ba8:	f7ff ff3e 	bl	8006a28 <__NVIC_GetPriorityGrouping>
 8006bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	6978      	ldr	r0, [r7, #20]
 8006bb4:	f7ff ff8e 	bl	8006ad4 <NVIC_EncodePriority>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff ff5d 	bl	8006a80 <__NVIC_SetPriority>
}
 8006bc6:	bf00      	nop
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff31 	bl	8006a44 <__NVIC_EnableIRQ>
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ffa2 	bl	8006b3c <SysTick_Config>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	e16b      	b.n	8006ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c20:	2201      	movs	r2, #1
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	f040 815a 	bne.w	8006ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d005      	beq.n	8006c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d130      	bne.n	8006cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	2203      	movs	r2, #3
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	43db      	mvns	r3, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 0201 	and.w	r2, r3, #1
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d017      	beq.n	8006cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	2203      	movs	r2, #3
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d123      	bne.n	8006d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	08da      	lsrs	r2, r3, #3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3208      	adds	r2, #8
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	220f      	movs	r2, #15
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	08da      	lsrs	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3208      	adds	r2, #8
 8006d42:	69b9      	ldr	r1, [r7, #24]
 8006d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	2203      	movs	r2, #3
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f003 0203 	and.w	r2, r3, #3
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80b4 	beq.w	8006ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <HAL_GPIO_Init+0x30c>)
 8006d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d92:	4a5f      	ldr	r2, [pc, #380]	; (8006f10 <HAL_GPIO_Init+0x30c>)
 8006d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d98:	6453      	str	r3, [r2, #68]	; 0x44
 8006d9a:	4b5d      	ldr	r3, [pc, #372]	; (8006f10 <HAL_GPIO_Init+0x30c>)
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006da6:	4a5b      	ldr	r2, [pc, #364]	; (8006f14 <HAL_GPIO_Init+0x310>)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	3302      	adds	r3, #2
 8006dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	220f      	movs	r2, #15
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a52      	ldr	r2, [pc, #328]	; (8006f18 <HAL_GPIO_Init+0x314>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d02b      	beq.n	8006e2a <HAL_GPIO_Init+0x226>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a51      	ldr	r2, [pc, #324]	; (8006f1c <HAL_GPIO_Init+0x318>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d025      	beq.n	8006e26 <HAL_GPIO_Init+0x222>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a50      	ldr	r2, [pc, #320]	; (8006f20 <HAL_GPIO_Init+0x31c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01f      	beq.n	8006e22 <HAL_GPIO_Init+0x21e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a4f      	ldr	r2, [pc, #316]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d019      	beq.n	8006e1e <HAL_GPIO_Init+0x21a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a4e      	ldr	r2, [pc, #312]	; (8006f28 <HAL_GPIO_Init+0x324>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_GPIO_Init+0x216>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a4d      	ldr	r2, [pc, #308]	; (8006f2c <HAL_GPIO_Init+0x328>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00d      	beq.n	8006e16 <HAL_GPIO_Init+0x212>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a4c      	ldr	r2, [pc, #304]	; (8006f30 <HAL_GPIO_Init+0x32c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <HAL_GPIO_Init+0x20e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a4b      	ldr	r2, [pc, #300]	; (8006f34 <HAL_GPIO_Init+0x330>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <HAL_GPIO_Init+0x20a>
 8006e0a:	2307      	movs	r3, #7
 8006e0c:	e00e      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	e00c      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e12:	2306      	movs	r3, #6
 8006e14:	e00a      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e16:	2305      	movs	r3, #5
 8006e18:	e008      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	e006      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e004      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e002      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <HAL_GPIO_Init+0x228>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	f002 0203 	and.w	r2, r2, #3
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	4093      	lsls	r3, r2
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e3c:	4935      	ldr	r1, [pc, #212]	; (8006f14 <HAL_GPIO_Init+0x310>)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	089b      	lsrs	r3, r3, #2
 8006e42:	3302      	adds	r3, #2
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e4a:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e6e:	4a32      	ldr	r2, [pc, #200]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e74:	4b30      	ldr	r3, [pc, #192]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4013      	ands	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e98:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e9e:	4b26      	ldr	r3, [pc, #152]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ec2:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006eec:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <HAL_GPIO_Init+0x334>)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	f67f ae90 	bls.w	8006c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	3724      	adds	r7, #36	; 0x24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40013800 	.word	0x40013800
 8006f18:	40020000 	.word	0x40020000
 8006f1c:	40020400 	.word	0x40020400
 8006f20:	40020800 	.word	0x40020800
 8006f24:	40020c00 	.word	0x40020c00
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	40021400 	.word	0x40021400
 8006f30:	40021800 	.word	0x40021800
 8006f34:	40021c00 	.word	0x40021c00
 8006f38:	40013c00 	.word	0x40013c00

08006f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	887b      	ldrh	r3, [r7, #2]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f54:	2301      	movs	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e001      	b.n	8006f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f7c:	787b      	ldrb	r3, [r7, #1]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f82:	887a      	ldrh	r2, [r7, #2]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f88:	e003      	b.n	8006f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f8a:	887b      	ldrh	r3, [r7, #2]
 8006f8c:	041a      	lsls	r2, r3, #16
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	619a      	str	r2, [r3, #24]
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fb0:	887a      	ldrh	r2, [r7, #2]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	041a      	lsls	r2, r3, #16
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	43d9      	mvns	r1, r3
 8006fbc:	887b      	ldrh	r3, [r7, #2]
 8006fbe:	400b      	ands	r3, r1
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fde:	4b08      	ldr	r3, [pc, #32]	; (8007000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fea:	4a05      	ldr	r2, [pc, #20]	; (8007000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fa ffe4 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40013c00 	.word	0x40013c00

08007004 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b08f      	sub	sp, #60	; 0x3c
 8007008:	af0a      	add	r7, sp, #40	; 0x28
 800700a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e054      	b.n	80070c0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f009 f9dd 	bl	80103f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2203      	movs	r2, #3
 800703a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f006 fb7f 	bl	800d758 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	687e      	ldr	r6, [r7, #4]
 8007062:	466d      	mov	r5, sp
 8007064:	f106 0410 	add.w	r4, r6, #16
 8007068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800706a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800706c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800706e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007074:	e885 0003 	stmia.w	r5, {r0, r1}
 8007078:	1d33      	adds	r3, r6, #4
 800707a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800707c:	6838      	ldr	r0, [r7, #0]
 800707e:	f006 faf9 	bl	800d674 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f006 fb76 	bl	800d77a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	687e      	ldr	r6, [r7, #4]
 8007096:	466d      	mov	r5, sp
 8007098:	f106 0410 	add.w	r4, r6, #16
 800709c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800709e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80070ac:	1d33      	adds	r3, r6, #4
 80070ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070b0:	6838      	ldr	r0, [r7, #0]
 80070b2:	f006 fc89 	bl	800d9c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070c8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b089      	sub	sp, #36	; 0x24
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	70fb      	strb	r3, [r7, #3]
 80070da:	460b      	mov	r3, r1
 80070dc:	70bb      	strb	r3, [r7, #2]
 80070de:	4613      	mov	r3, r2
 80070e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_HCD_HC_Init+0x28>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e076      	b.n	80071de <HAL_HCD_HC_Init+0x116>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	212c      	movs	r1, #44	; 0x2c
 80070fe:	fb01 f303 	mul.w	r3, r1, r3
 8007102:	4413      	add	r3, r2
 8007104:	333d      	adds	r3, #61	; 0x3d
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	212c      	movs	r1, #44	; 0x2c
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	4413      	add	r3, r2
 8007116:	3338      	adds	r3, #56	; 0x38
 8007118:	787a      	ldrb	r2, [r7, #1]
 800711a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	212c      	movs	r1, #44	; 0x2c
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	3340      	adds	r3, #64	; 0x40
 800712a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800712c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	212c      	movs	r1, #44	; 0x2c
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	4413      	add	r3, r2
 800713a:	3339      	adds	r3, #57	; 0x39
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	212c      	movs	r1, #44	; 0x2c
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	333f      	adds	r3, #63	; 0x3f
 800714e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800715c:	b2d0      	uxtb	r0, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	212c      	movs	r1, #44	; 0x2c
 8007162:	fb01 f303 	mul.w	r3, r1, r3
 8007166:	4413      	add	r3, r2
 8007168:	333a      	adds	r3, #58	; 0x3a
 800716a:	4602      	mov	r2, r0
 800716c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800716e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007172:	2b00      	cmp	r3, #0
 8007174:	da09      	bge.n	800718a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	212c      	movs	r1, #44	; 0x2c
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	333b      	adds	r3, #59	; 0x3b
 8007184:	2201      	movs	r2, #1
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e008      	b.n	800719c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	212c      	movs	r1, #44	; 0x2c
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	4413      	add	r3, r2
 8007196:	333b      	adds	r3, #59	; 0x3b
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	212c      	movs	r1, #44	; 0x2c
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	333c      	adds	r3, #60	; 0x3c
 80071aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80071ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	787c      	ldrb	r4, [r7, #1]
 80071b6:	78ba      	ldrb	r2, [r7, #2]
 80071b8:	78f9      	ldrb	r1, [r7, #3]
 80071ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	4623      	mov	r3, r4
 80071cc:	f006 fd7e 	bl	800dccc <USB_HC_Init>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}

080071e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_HCD_HC_Halt+0x1e>
 8007200:	2302      	movs	r3, #2
 8007202:	e00f      	b.n	8007224 <HAL_HCD_HC_Halt+0x3e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	4611      	mov	r1, r2
 8007214:	4618      	mov	r0, r3
 8007216:	f006 ffba 	bl	800e18e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	4603      	mov	r3, r0
 800723c:	70fb      	strb	r3, [r7, #3]
 800723e:	460b      	mov	r3, r1
 8007240:	70bb      	strb	r3, [r7, #2]
 8007242:	4613      	mov	r3, r2
 8007244:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	212c      	movs	r1, #44	; 0x2c
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	4413      	add	r3, r2
 8007252:	333b      	adds	r3, #59	; 0x3b
 8007254:	78ba      	ldrb	r2, [r7, #2]
 8007256:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	212c      	movs	r1, #44	; 0x2c
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	333f      	adds	r3, #63	; 0x3f
 8007266:	787a      	ldrb	r2, [r7, #1]
 8007268:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800726a:	7c3b      	ldrb	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d112      	bne.n	8007296 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	212c      	movs	r1, #44	; 0x2c
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	3342      	adds	r3, #66	; 0x42
 800727e:	2203      	movs	r2, #3
 8007280:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	212c      	movs	r1, #44	; 0x2c
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	4413      	add	r3, r2
 800728e:	333d      	adds	r3, #61	; 0x3d
 8007290:	7f3a      	ldrb	r2, [r7, #28]
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e008      	b.n	80072a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	212c      	movs	r1, #44	; 0x2c
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	4413      	add	r3, r2
 80072a2:	3342      	adds	r3, #66	; 0x42
 80072a4:	2202      	movs	r2, #2
 80072a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80072a8:	787b      	ldrb	r3, [r7, #1]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f200 80c6 	bhi.w	800743c <HAL_HCD_HC_SubmitRequest+0x210>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	08007429 	.word	0x08007429
 80072c0:	0800732d 	.word	0x0800732d
 80072c4:	080073ab 	.word	0x080073ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80072c8:	7c3b      	ldrb	r3, [r7, #16]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	f040 80b8 	bne.w	8007440 <HAL_HCD_HC_SubmitRequest+0x214>
 80072d0:	78bb      	ldrb	r3, [r7, #2]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 80b4 	bne.w	8007440 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80072d8:	8b3b      	ldrh	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d108      	bne.n	80072f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	212c      	movs	r1, #44	; 0x2c
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	3355      	adds	r3, #85	; 0x55
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	212c      	movs	r1, #44	; 0x2c
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	3355      	adds	r3, #85	; 0x55
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	212c      	movs	r1, #44	; 0x2c
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	4413      	add	r3, r2
 8007310:	3342      	adds	r3, #66	; 0x42
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007316:	e093      	b.n	8007440 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	3342      	adds	r3, #66	; 0x42
 8007326:	2202      	movs	r2, #2
 8007328:	701a      	strb	r2, [r3, #0]
      break;
 800732a:	e089      	b.n	8007440 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800732c:	78bb      	ldrb	r3, [r7, #2]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d11d      	bne.n	800736e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	212c      	movs	r1, #44	; 0x2c
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	3355      	adds	r3, #85	; 0x55
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	212c      	movs	r1, #44	; 0x2c
 800734c:	fb01 f303 	mul.w	r3, r1, r3
 8007350:	4413      	add	r3, r2
 8007352:	3342      	adds	r3, #66	; 0x42
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007358:	e073      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	212c      	movs	r1, #44	; 0x2c
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	3342      	adds	r3, #66	; 0x42
 8007368:	2202      	movs	r2, #2
 800736a:	701a      	strb	r2, [r3, #0]
      break;
 800736c:	e069      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	212c      	movs	r1, #44	; 0x2c
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	3354      	adds	r3, #84	; 0x54
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	212c      	movs	r1, #44	; 0x2c
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	4413      	add	r3, r2
 800738e:	3342      	adds	r3, #66	; 0x42
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
      break;
 8007394:	e055      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	212c      	movs	r1, #44	; 0x2c
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	3342      	adds	r3, #66	; 0x42
 80073a4:	2202      	movs	r2, #2
 80073a6:	701a      	strb	r2, [r3, #0]
      break;
 80073a8:	e04b      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80073aa:	78bb      	ldrb	r3, [r7, #2]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d11d      	bne.n	80073ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	212c      	movs	r1, #44	; 0x2c
 80073b6:	fb01 f303 	mul.w	r3, r1, r3
 80073ba:	4413      	add	r3, r2
 80073bc:	3355      	adds	r3, #85	; 0x55
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	212c      	movs	r1, #44	; 0x2c
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	3342      	adds	r3, #66	; 0x42
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80073d6:	e034      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	212c      	movs	r1, #44	; 0x2c
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	3342      	adds	r3, #66	; 0x42
 80073e6:	2202      	movs	r2, #2
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e02a      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	212c      	movs	r1, #44	; 0x2c
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	3354      	adds	r3, #84	; 0x54
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	212c      	movs	r1, #44	; 0x2c
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	3342      	adds	r3, #66	; 0x42
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e016      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	212c      	movs	r1, #44	; 0x2c
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	3342      	adds	r3, #66	; 0x42
 8007422:	2202      	movs	r2, #2
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e00c      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	212c      	movs	r1, #44	; 0x2c
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	4413      	add	r3, r2
 8007434:	3342      	adds	r3, #66	; 0x42
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
      break;
 800743a:	e002      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007440:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	212c      	movs	r1, #44	; 0x2c
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	3344      	adds	r3, #68	; 0x44
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	8b3a      	ldrh	r2, [r7, #24]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	202c      	movs	r0, #44	; 0x2c
 800745c:	fb00 f303 	mul.w	r3, r0, r3
 8007460:	440b      	add	r3, r1
 8007462:	334c      	adds	r3, #76	; 0x4c
 8007464:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	212c      	movs	r1, #44	; 0x2c
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	4413      	add	r3, r2
 8007472:	3360      	adds	r3, #96	; 0x60
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	212c      	movs	r1, #44	; 0x2c
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	4413      	add	r3, r2
 8007484:	3350      	adds	r3, #80	; 0x50
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	212c      	movs	r1, #44	; 0x2c
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	4413      	add	r3, r2
 8007496:	3339      	adds	r3, #57	; 0x39
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	212c      	movs	r1, #44	; 0x2c
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	3361      	adds	r3, #97	; 0x61
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	222c      	movs	r2, #44	; 0x2c
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
 80074ba:	3338      	adds	r3, #56	; 0x38
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	18d1      	adds	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	f006 fd0e 	bl	800dee8 <USB_HC_StartXfer>
 80074cc:	4603      	mov	r3, r0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop

080074d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f006 fa27 	bl	800d942 <USB_GetMode>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	f040 80ef 	bne.w	80076da <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f006 fa0b 	bl	800d91c <USB_ReadInterrupts>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80e5 	beq.w	80076d8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f006 fa02 	bl	800d91c <USB_ReadInterrupts>
 8007518:	4603      	mov	r3, r0
 800751a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800751e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007522:	d104      	bne.n	800752e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800752c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f006 f9f2 	bl	800d91c <USB_ReadInterrupts>
 8007538:	4603      	mov	r3, r0
 800753a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007542:	d104      	bne.n	800754e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800754c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f006 f9e2 	bl	800d91c <USB_ReadInterrupts>
 8007558:	4603      	mov	r3, r0
 800755a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800755e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007562:	d104      	bne.n	800756e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800756c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f006 f9d2 	bl	800d91c <USB_ReadInterrupts>
 8007578:	4603      	mov	r3, r0
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d103      	bne.n	800758a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2202      	movs	r2, #2
 8007588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f006 f9c4 	bl	800d91c <USB_ReadInterrupts>
 8007594:	4603      	mov	r3, r0
 8007596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800759a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800759e:	d115      	bne.n	80075cc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d108      	bne.n	80075cc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f008 ff96 	bl	80104ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	4618      	mov	r0, r3
 80075c8:	f006 faba 	bl	800db40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f006 f9a3 	bl	800d91c <USB_ReadInterrupts>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075e0:	d102      	bne.n	80075e8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 f9ff 	bl	80089e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f006 f995 	bl	800d91c <USB_ReadInterrupts>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d106      	bne.n	800760a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f008 ff59 	bl	80104b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2208      	movs	r2, #8
 8007608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f006 f984 	bl	800d91c <USB_ReadInterrupts>
 8007614:	4603      	mov	r3, r0
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b10      	cmp	r3, #16
 800761c:	d101      	bne.n	8007622 <HAL_HCD_IRQHandler+0x14a>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <HAL_HCD_IRQHandler+0x14c>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0210 	bic.w	r2, r2, #16
 8007636:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f902 	bl	8008842 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0210 	orr.w	r2, r2, #16
 800764c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f006 f962 	bl	800d91c <USB_ReadInterrupts>
 8007658:	4603      	mov	r3, r0
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007662:	d13a      	bne.n	80076da <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f006 fd7f 	bl	800e16c <USB_HC_ReadInterrupt>
 800766e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e025      	b.n	80076c2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	fa22 f303 	lsr.w	r3, r2, r3
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d018      	beq.n	80076bc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800769c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a0:	d106      	bne.n	80076b0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f8ab 	bl	8007804 <HCD_HC_IN_IRQHandler>
 80076ae:	e005      	b.n	80076bc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fcc6 	bl	8008048 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	3301      	adds	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d3d4      	bcc.n	8007676 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076d4:	615a      	str	r2, [r3, #20]
 80076d6:	e000      	b.n	80076da <HAL_HCD_IRQHandler+0x202>
      return;
 80076d8:	bf00      	nop
    }
  }
}
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_HCD_Start+0x16>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e013      	b.n	800771e <HAL_HCD_Start+0x3e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f006 f817 	bl	800d736 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f006 fa7a 	bl	800dc08 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_HCD_Stop+0x16>
 8007738:	2302      	movs	r3, #2
 800773a:	e00d      	b.n	8007758 <HAL_HCD_Stop+0x32>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f006 fe79 	bl	800e440 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f006 fa21 	bl	800dbb4 <USB_ResetPort>
 8007772:	4603      	mov	r3, r0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	212c      	movs	r1, #44	; 0x2c
 800778e:	fb01 f303 	mul.w	r3, r1, r3
 8007792:	4413      	add	r3, r2
 8007794:	3360      	adds	r3, #96	; 0x60
 8007796:	781b      	ldrb	r3, [r3, #0]
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	212c      	movs	r1, #44	; 0x2c
 80077b6:	fb01 f303 	mul.w	r3, r1, r3
 80077ba:	4413      	add	r3, r2
 80077bc:	3350      	adds	r3, #80	; 0x50
 80077be:	681b      	ldr	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f006 fa65 	bl	800dca8 <USB_GetCurrentFrame>
 80077de:	4603      	mov	r3, r0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f006 fa40 	bl	800dc7a <USB_GetHostSpeed>
 80077fa:	4603      	mov	r3, r0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b04      	cmp	r3, #4
 8007832:	d119      	bne.n	8007868 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007840:	461a      	mov	r2, r3
 8007842:	2304      	movs	r3, #4
 8007844:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	440a      	add	r2, r1
 800785c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007860:	f043 0302 	orr.w	r3, r3, #2
 8007864:	60d3      	str	r3, [r2, #12]
 8007866:	e101      	b.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4413      	add	r3, r2
 8007870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787e:	d12b      	bne.n	80078d8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788c:	461a      	mov	r2, r3
 800788e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007892:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	212c      	movs	r1, #44	; 0x2c
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3361      	adds	r3, #97	; 0x61
 80078a2:	2207      	movs	r2, #7
 80078a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c0:	f043 0302 	orr.w	r3, r3, #2
 80078c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f006 fc5c 	bl	800e18e <USB_HC_Halt>
 80078d6:	e0c9      	b.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d109      	bne.n	8007902 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fa:	461a      	mov	r2, r3
 80078fc:	2320      	movs	r3, #32
 80078fe:	6093      	str	r3, [r2, #8]
 8007900:	e0b4      	b.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	4413      	add	r3, r2
 800790a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b08      	cmp	r3, #8
 8007916:	d133      	bne.n	8007980 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	440a      	add	r2, r1
 800792e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007932:	f043 0302 	orr.w	r3, r3, #2
 8007936:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	212c      	movs	r1, #44	; 0x2c
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	4413      	add	r3, r2
 8007944:	3361      	adds	r3, #97	; 0x61
 8007946:	2205      	movs	r2, #5
 8007948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007956:	461a      	mov	r2, r3
 8007958:	2310      	movs	r3, #16
 800795a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	4413      	add	r3, r2
 8007964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007968:	461a      	mov	r2, r3
 800796a:	2308      	movs	r3, #8
 800796c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	4611      	mov	r1, r2
 8007978:	4618      	mov	r0, r3
 800797a:	f006 fc08 	bl	800e18e <USB_HC_Halt>
 800797e:	e075      	b.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007996:	d134      	bne.n	8007a02 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b2:	f043 0302 	orr.w	r3, r3, #2
 80079b6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	212c      	movs	r1, #44	; 0x2c
 80079be:	fb01 f303 	mul.w	r3, r1, r3
 80079c2:	4413      	add	r3, r2
 80079c4:	3361      	adds	r3, #97	; 0x61
 80079c6:	2208      	movs	r2, #8
 80079c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d6:	461a      	mov	r2, r3
 80079d8:	2310      	movs	r3, #16
 80079da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f006 fbc7 	bl	800e18e <USB_HC_Halt>
 8007a00:	e034      	b.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d129      	bne.n	8007a6c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a32:	f043 0302 	orr.w	r3, r3, #2
 8007a36:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	212c      	movs	r1, #44	; 0x2c
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	3361      	adds	r3, #97	; 0x61
 8007a46:	2206      	movs	r2, #6
 8007a48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	4611      	mov	r1, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f006 fb9a 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a66:	461a      	mov	r2, r3
 8007a68:	2380      	movs	r3, #128	; 0x80
 8007a6a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a82:	d122      	bne.n	8007aca <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a9e:	f043 0302 	orr.w	r3, r3, #2
 8007aa2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f006 fb6d 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007ac8:	e2ba      	b.n	8008040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f040 811b 	bne.w	8007d18 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d019      	beq.n	8007b1e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	212c      	movs	r1, #44	; 0x2c
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	4413      	add	r3, r2
 8007af6:	3348      	adds	r3, #72	; 0x48
 8007af8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	0159      	lsls	r1, r3, #5
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007b0c:	1ad2      	subs	r2, r2, r3
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	202c      	movs	r0, #44	; 0x2c
 8007b14:	fb00 f303 	mul.w	r3, r0, r3
 8007b18:	440b      	add	r3, r1
 8007b1a:	3350      	adds	r3, #80	; 0x50
 8007b1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	212c      	movs	r1, #44	; 0x2c
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	3361      	adds	r3, #97	; 0x61
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	212c      	movs	r1, #44	; 0x2c
 8007b36:	fb01 f303 	mul.w	r3, r1, r3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	335c      	adds	r3, #92	; 0x5c
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2301      	movs	r3, #1
 8007b52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	212c      	movs	r1, #44	; 0x2c
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	333f      	adds	r3, #63	; 0x3f
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	212c      	movs	r1, #44	; 0x2c
 8007b6e:	fb01 f303 	mul.w	r3, r1, r3
 8007b72:	4413      	add	r3, r2
 8007b74:	333f      	adds	r3, #63	; 0x3f
 8007b76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d121      	bne.n	8007bc0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b96:	f043 0302 	orr.w	r3, r3, #2
 8007b9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f006 faf1 	bl	800e18e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2310      	movs	r3, #16
 8007bbc:	6093      	str	r3, [r2, #8]
 8007bbe:	e066      	b.n	8007c8e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	212c      	movs	r1, #44	; 0x2c
 8007bc6:	fb01 f303 	mul.w	r3, r1, r3
 8007bca:	4413      	add	r3, r2
 8007bcc:	333f      	adds	r3, #63	; 0x3f
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d127      	bne.n	8007c24 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	212c      	movs	r1, #44	; 0x2c
 8007bfa:	fb01 f303 	mul.w	r3, r1, r3
 8007bfe:	4413      	add	r3, r2
 8007c00:	3360      	adds	r3, #96	; 0x60
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	b2d9      	uxtb	r1, r3
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	202c      	movs	r0, #44	; 0x2c
 8007c10:	fb00 f303 	mul.w	r3, r0, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	3360      	adds	r3, #96	; 0x60
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f008 fc73 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c22:	e034      	b.n	8007c8e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	212c      	movs	r1, #44	; 0x2c
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	4413      	add	r3, r2
 8007c30:	333f      	adds	r3, #63	; 0x3f
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d12a      	bne.n	8007c8e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	212c      	movs	r1, #44	; 0x2c
 8007c3e:	fb01 f303 	mul.w	r3, r1, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	3360      	adds	r3, #96	; 0x60
 8007c46:	2201      	movs	r2, #1
 8007c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	212c      	movs	r1, #44	; 0x2c
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3354      	adds	r3, #84	; 0x54
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f083 0301 	eor.w	r3, r3, #1
 8007c5e:	b2d8      	uxtb	r0, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	212c      	movs	r1, #44	; 0x2c
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3354      	adds	r3, #84	; 0x54
 8007c6e:	4602      	mov	r2, r0
 8007c70:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	b2d9      	uxtb	r1, r3
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	202c      	movs	r0, #44	; 0x2c
 8007c7c:	fb00 f303 	mul.w	r3, r0, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	3360      	adds	r3, #96	; 0x60
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f008 fc3d 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d12b      	bne.n	8007cee <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	212c      	movs	r1, #44	; 0x2c
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3348      	adds	r3, #72	; 0x48
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	202c      	movs	r0, #44	; 0x2c
 8007cac:	fb00 f202 	mul.w	r2, r0, r2
 8007cb0:	440a      	add	r2, r1
 8007cb2:	3240      	adds	r2, #64	; 0x40
 8007cb4:	8812      	ldrh	r2, [r2, #0]
 8007cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 81be 	beq.w	8008040 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	212c      	movs	r1, #44	; 0x2c
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	4413      	add	r3, r2
 8007cd0:	3354      	adds	r3, #84	; 0x54
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f083 0301 	eor.w	r3, r3, #1
 8007cd8:	b2d8      	uxtb	r0, r3
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	212c      	movs	r1, #44	; 0x2c
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3354      	adds	r3, #84	; 0x54
 8007ce8:	4602      	mov	r2, r0
 8007cea:	701a      	strb	r2, [r3, #0]
}
 8007cec:	e1a8      	b.n	8008040 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	212c      	movs	r1, #44	; 0x2c
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3354      	adds	r3, #84	; 0x54
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	f083 0301 	eor.w	r3, r3, #1
 8007d02:	b2d8      	uxtb	r0, r3
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	212c      	movs	r1, #44	; 0x2c
 8007d0a:	fb01 f303 	mul.w	r3, r1, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	3354      	adds	r3, #84	; 0x54
 8007d12:	4602      	mov	r2, r0
 8007d14:	701a      	strb	r2, [r3, #0]
}
 8007d16:	e193      	b.n	8008040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	f040 8106 	bne.w	8007f3c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4a:	f023 0302 	bic.w	r3, r3, #2
 8007d4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	212c      	movs	r1, #44	; 0x2c
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	3361      	adds	r3, #97	; 0x61
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d109      	bne.n	8007d78 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	212c      	movs	r1, #44	; 0x2c
 8007d6a:	fb01 f303 	mul.w	r3, r1, r3
 8007d6e:	4413      	add	r3, r2
 8007d70:	3360      	adds	r3, #96	; 0x60
 8007d72:	2201      	movs	r2, #1
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e0c9      	b.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	212c      	movs	r1, #44	; 0x2c
 8007d7e:	fb01 f303 	mul.w	r3, r1, r3
 8007d82:	4413      	add	r3, r2
 8007d84:	3361      	adds	r3, #97	; 0x61
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d109      	bne.n	8007da0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	212c      	movs	r1, #44	; 0x2c
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	3360      	adds	r3, #96	; 0x60
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e0b5      	b.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	212c      	movs	r1, #44	; 0x2c
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	3361      	adds	r3, #97	; 0x61
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b06      	cmp	r3, #6
 8007db2:	d009      	beq.n	8007dc8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	212c      	movs	r1, #44	; 0x2c
 8007dba:	fb01 f303 	mul.w	r3, r1, r3
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3361      	adds	r3, #97	; 0x61
 8007dc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d150      	bne.n	8007e6a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	212c      	movs	r1, #44	; 0x2c
 8007dce:	fb01 f303 	mul.w	r3, r1, r3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	335c      	adds	r3, #92	; 0x5c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	202c      	movs	r0, #44	; 0x2c
 8007de0:	fb00 f303 	mul.w	r3, r0, r3
 8007de4:	440b      	add	r3, r1
 8007de6:	335c      	adds	r3, #92	; 0x5c
 8007de8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	212c      	movs	r1, #44	; 0x2c
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	4413      	add	r3, r2
 8007df6:	335c      	adds	r3, #92	; 0x5c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d912      	bls.n	8007e24 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	212c      	movs	r1, #44	; 0x2c
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	4413      	add	r3, r2
 8007e0a:	335c      	adds	r3, #92	; 0x5c
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	212c      	movs	r1, #44	; 0x2c
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3360      	adds	r3, #96	; 0x60
 8007e1e:	2204      	movs	r2, #4
 8007e20:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007e22:	e073      	b.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	212c      	movs	r1, #44	; 0x2c
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	3360      	adds	r3, #96	; 0x60
 8007e32:	2202      	movs	r2, #2
 8007e34:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e4c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e62:	461a      	mov	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007e68:	e050      	b.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	212c      	movs	r1, #44	; 0x2c
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	4413      	add	r3, r2
 8007e76:	3361      	adds	r3, #97	; 0x61
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d122      	bne.n	8007ec4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	212c      	movs	r1, #44	; 0x2c
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	3360      	adds	r3, #96	; 0x60
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ea6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e023      	b.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	212c      	movs	r1, #44	; 0x2c
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	4413      	add	r3, r2
 8007ed0:	3361      	adds	r3, #97	; 0x61
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b07      	cmp	r3, #7
 8007ed6:	d119      	bne.n	8007f0c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	212c      	movs	r1, #44	; 0x2c
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	335c      	adds	r3, #92	; 0x5c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	202c      	movs	r0, #44	; 0x2c
 8007ef0:	fb00 f303 	mul.w	r3, r0, r3
 8007ef4:	440b      	add	r3, r1
 8007ef6:	335c      	adds	r3, #92	; 0x5c
 8007ef8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	212c      	movs	r1, #44	; 0x2c
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	3360      	adds	r3, #96	; 0x60
 8007f08:	2204      	movs	r2, #4
 8007f0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	b2d9      	uxtb	r1, r3
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	202c      	movs	r0, #44	; 0x2c
 8007f28:	fb00 f303 	mul.w	r3, r0, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3360      	adds	r3, #96	; 0x60
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f008 fae7 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007f3a:	e081      	b.n	8008040 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d176      	bne.n	8008040 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	212c      	movs	r1, #44	; 0x2c
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	333f      	adds	r3, #63	; 0x3f
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d121      	bne.n	8007faa <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	212c      	movs	r1, #44	; 0x2c
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	335c      	adds	r3, #92	; 0x5c
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f92:	f043 0302 	orr.w	r3, r3, #2
 8007f96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f006 f8f3 	bl	800e18e <USB_HC_Halt>
 8007fa8:	e041      	b.n	800802e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	212c      	movs	r1, #44	; 0x2c
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	333f      	adds	r3, #63	; 0x3f
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	212c      	movs	r1, #44	; 0x2c
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	333f      	adds	r3, #63	; 0x3f
 8007fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d12d      	bne.n	800802e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	212c      	movs	r1, #44	; 0x2c
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	335c      	adds	r3, #92	; 0x5c
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d120      	bne.n	800802e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	212c      	movs	r1, #44	; 0x2c
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3361      	adds	r3, #97	; 0x61
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	440a      	add	r2, r1
 8008014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008018:	f043 0302 	orr.w	r3, r3, #2
 800801c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f006 f8b0 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803a:	461a      	mov	r2, r3
 800803c:	2310      	movs	r3, #16
 800803e:	6093      	str	r3, [r2, #8]
}
 8008040:	bf00      	nop
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	4413      	add	r3, r2
 800806a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b04      	cmp	r3, #4
 8008076:	d119      	bne.n	80080ac <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	4413      	add	r3, r2
 8008080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008084:	461a      	mov	r2, r3
 8008086:	2304      	movs	r3, #4
 8008088:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a4:	f043 0302 	orr.w	r3, r3, #2
 80080a8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80080aa:	e3c6      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d13e      	bne.n	8008140 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ce:	461a      	mov	r2, r3
 80080d0:	2320      	movs	r3, #32
 80080d2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	212c      	movs	r1, #44	; 0x2c
 80080da:	fb01 f303 	mul.w	r3, r1, r3
 80080de:	4413      	add	r3, r2
 80080e0:	333d      	adds	r3, #61	; 0x3d
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	f040 83a8 	bne.w	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	212c      	movs	r1, #44	; 0x2c
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	4413      	add	r3, r2
 80080f6:	333d      	adds	r3, #61	; 0x3d
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	212c      	movs	r1, #44	; 0x2c
 8008102:	fb01 f303 	mul.w	r3, r1, r3
 8008106:	4413      	add	r3, r2
 8008108:	3360      	adds	r3, #96	; 0x60
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	4413      	add	r3, r2
 8008116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	440a      	add	r2, r1
 8008124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f006 f828 	bl	800e18e <USB_HC_Halt>
}
 800813e:	e37c      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	4413      	add	r3, r2
 8008148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008156:	d122      	bne.n	800819e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	440a      	add	r2, r1
 800816e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008172:	f043 0302 	orr.w	r3, r3, #2
 8008176:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f006 f803 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008194:	461a      	mov	r2, r3
 8008196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819a:	6093      	str	r3, [r2, #8]
}
 800819c:	e34d      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d150      	bne.n	8008256 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	212c      	movs	r1, #44	; 0x2c
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	4413      	add	r3, r2
 80081c0:	335c      	adds	r3, #92	; 0x5c
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d111      	bne.n	8008200 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	212c      	movs	r1, #44	; 0x2c
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	333d      	adds	r3, #61	; 0x3d
 80081ea:	2201      	movs	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fa:	461a      	mov	r2, r3
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	4413      	add	r3, r2
 8008208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	440a      	add	r2, r1
 8008216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821a:	f043 0302 	orr.w	r3, r3, #2
 800821e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f005 ffaf 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	4413      	add	r3, r2
 8008238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823c:	461a      	mov	r2, r3
 800823e:	2301      	movs	r3, #1
 8008240:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	212c      	movs	r1, #44	; 0x2c
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	3361      	adds	r3, #97	; 0x61
 8008250:	2201      	movs	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
}
 8008254:	e2f1      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d13c      	bne.n	80082e6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	212c      	movs	r1, #44	; 0x2c
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	4413      	add	r3, r2
 8008278:	3361      	adds	r3, #97	; 0x61
 800827a:	2204      	movs	r2, #4
 800827c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	212c      	movs	r1, #44	; 0x2c
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	4413      	add	r3, r2
 800828a:	333d      	adds	r3, #61	; 0x3d
 800828c:	2201      	movs	r2, #1
 800828e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	212c      	movs	r1, #44	; 0x2c
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	4413      	add	r3, r2
 800829c:	335c      	adds	r3, #92	; 0x5c
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082bc:	f043 0302 	orr.w	r3, r3, #2
 80082c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f005 ff5e 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	461a      	mov	r2, r3
 80082e0:	2340      	movs	r3, #64	; 0x40
 80082e2:	6093      	str	r3, [r2, #8]
}
 80082e4:	e2a9      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d12a      	bne.n	8008352 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008308:	461a      	mov	r2, r3
 800830a:	2308      	movs	r3, #8
 800830c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	440a      	add	r2, r1
 8008324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008328:	f043 0302 	orr.w	r3, r3, #2
 800832c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f005 ff28 	bl	800e18e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	212c      	movs	r1, #44	; 0x2c
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	3361      	adds	r3, #97	; 0x61
 800834c:	2205      	movs	r2, #5
 800834e:	701a      	strb	r2, [r3, #0]
}
 8008350:	e273      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	4413      	add	r3, r2
 800835a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b10      	cmp	r3, #16
 8008366:	d150      	bne.n	800840a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	212c      	movs	r1, #44	; 0x2c
 800836e:	fb01 f303 	mul.w	r3, r1, r3
 8008372:	4413      	add	r3, r2
 8008374:	335c      	adds	r3, #92	; 0x5c
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	212c      	movs	r1, #44	; 0x2c
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	4413      	add	r3, r2
 8008386:	3361      	adds	r3, #97	; 0x61
 8008388:	2203      	movs	r2, #3
 800838a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	212c      	movs	r1, #44	; 0x2c
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	4413      	add	r3, r2
 8008398:	333d      	adds	r3, #61	; 0x3d
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d112      	bne.n	80083c6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	212c      	movs	r1, #44	; 0x2c
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	333c      	adds	r3, #60	; 0x3c
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d108      	bne.n	80083c6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	212c      	movs	r1, #44	; 0x2c
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	333d      	adds	r3, #61	; 0x3d
 80083c2:	2201      	movs	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f005 fecc 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008402:	461a      	mov	r2, r3
 8008404:	2310      	movs	r3, #16
 8008406:	6093      	str	r3, [r2, #8]
}
 8008408:	e217      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	4413      	add	r3, r2
 8008412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d174      	bne.n	800850a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d121      	bne.n	800846c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	212c      	movs	r1, #44	; 0x2c
 800842e:	fb01 f303 	mul.w	r3, r1, r3
 8008432:	4413      	add	r3, r2
 8008434:	3361      	adds	r3, #97	; 0x61
 8008436:	2206      	movs	r2, #6
 8008438:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	440a      	add	r2, r1
 8008450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008454:	f043 0302 	orr.w	r3, r3, #2
 8008458:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f005 fe92 	bl	800e18e <USB_HC_Halt>
 800846a:	e044      	b.n	80084f6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	212c      	movs	r1, #44	; 0x2c
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	335c      	adds	r3, #92	; 0x5c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	202c      	movs	r0, #44	; 0x2c
 8008484:	fb00 f303 	mul.w	r3, r0, r3
 8008488:	440b      	add	r3, r1
 800848a:	335c      	adds	r3, #92	; 0x5c
 800848c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	212c      	movs	r1, #44	; 0x2c
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	4413      	add	r3, r2
 800849a:	335c      	adds	r3, #92	; 0x5c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d920      	bls.n	80084e4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	212c      	movs	r1, #44	; 0x2c
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	4413      	add	r3, r2
 80084ae:	335c      	adds	r3, #92	; 0x5c
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	212c      	movs	r1, #44	; 0x2c
 80084ba:	fb01 f303 	mul.w	r3, r1, r3
 80084be:	4413      	add	r3, r2
 80084c0:	3360      	adds	r3, #96	; 0x60
 80084c2:	2204      	movs	r2, #4
 80084c4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	b2d9      	uxtb	r1, r3
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	202c      	movs	r0, #44	; 0x2c
 80084d0:	fb00 f303 	mul.w	r3, r0, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	3360      	adds	r3, #96	; 0x60
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f008 f813 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
 80084e2:	e008      	b.n	80084f6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	212c      	movs	r1, #44	; 0x2c
 80084ea:	fb01 f303 	mul.w	r3, r1, r3
 80084ee:	4413      	add	r3, r2
 80084f0:	3360      	adds	r3, #96	; 0x60
 80084f2:	2202      	movs	r2, #2
 80084f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	461a      	mov	r2, r3
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	6093      	str	r3, [r2, #8]
}
 8008508:	e197      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008520:	d134      	bne.n	800858c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853c:	f043 0302 	orr.w	r3, r3, #2
 8008540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f005 fe1e 	bl	800e18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855e:	461a      	mov	r2, r3
 8008560:	2310      	movs	r3, #16
 8008562:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008570:	461a      	mov	r2, r3
 8008572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008576:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	212c      	movs	r1, #44	; 0x2c
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	4413      	add	r3, r2
 8008584:	3361      	adds	r3, #97	; 0x61
 8008586:	2208      	movs	r2, #8
 8008588:	701a      	strb	r2, [r3, #0]
}
 800858a:	e156      	b.n	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	4413      	add	r3, r2
 8008594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b02      	cmp	r3, #2
 80085a0:	f040 814b 	bne.w	800883a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085be:	f023 0302 	bic.w	r3, r3, #2
 80085c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	212c      	movs	r1, #44	; 0x2c
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	3361      	adds	r3, #97	; 0x61
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d179      	bne.n	80086cc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	212c      	movs	r1, #44	; 0x2c
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	3360      	adds	r3, #96	; 0x60
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	212c      	movs	r1, #44	; 0x2c
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	4413      	add	r3, r2
 80085f6:	333f      	adds	r3, #63	; 0x3f
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d00a      	beq.n	8008614 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	212c      	movs	r1, #44	; 0x2c
 8008604:	fb01 f303 	mul.w	r3, r1, r3
 8008608:	4413      	add	r3, r2
 800860a:	333f      	adds	r3, #63	; 0x3f
 800860c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800860e:	2b03      	cmp	r3, #3
 8008610:	f040 80fc 	bne.w	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d142      	bne.n	80086a2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	212c      	movs	r1, #44	; 0x2c
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	334c      	adds	r3, #76	; 0x4c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80ed 	beq.w	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	212c      	movs	r1, #44	; 0x2c
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	4413      	add	r3, r2
 800863e:	334c      	adds	r3, #76	; 0x4c
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	202c      	movs	r0, #44	; 0x2c
 8008648:	fb00 f202 	mul.w	r2, r0, r2
 800864c:	440a      	add	r2, r1
 800864e:	3240      	adds	r2, #64	; 0x40
 8008650:	8812      	ldrh	r2, [r2, #0]
 8008652:	4413      	add	r3, r2
 8008654:	3b01      	subs	r3, #1
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	202c      	movs	r0, #44	; 0x2c
 800865c:	fb00 f202 	mul.w	r2, r0, r2
 8008660:	440a      	add	r2, r1
 8008662:	3240      	adds	r2, #64	; 0x40
 8008664:	8812      	ldrh	r2, [r2, #0]
 8008666:	fbb3 f3f2 	udiv	r3, r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80ca 	beq.w	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	212c      	movs	r1, #44	; 0x2c
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3355      	adds	r3, #85	; 0x55
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f083 0301 	eor.w	r3, r3, #1
 800868c:	b2d8      	uxtb	r0, r3
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	212c      	movs	r1, #44	; 0x2c
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	4413      	add	r3, r2
 800869a:	3355      	adds	r3, #85	; 0x55
 800869c:	4602      	mov	r2, r0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e0b4      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	212c      	movs	r1, #44	; 0x2c
 80086a8:	fb01 f303 	mul.w	r3, r1, r3
 80086ac:	4413      	add	r3, r2
 80086ae:	3355      	adds	r3, #85	; 0x55
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f083 0301 	eor.w	r3, r3, #1
 80086b6:	b2d8      	uxtb	r0, r3
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	212c      	movs	r1, #44	; 0x2c
 80086be:	fb01 f303 	mul.w	r3, r1, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	3355      	adds	r3, #85	; 0x55
 80086c6:	4602      	mov	r2, r0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e09f      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	212c      	movs	r1, #44	; 0x2c
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	3361      	adds	r3, #97	; 0x61
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d109      	bne.n	80086f4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	212c      	movs	r1, #44	; 0x2c
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	4413      	add	r3, r2
 80086ec:	3360      	adds	r3, #96	; 0x60
 80086ee:	2202      	movs	r2, #2
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e08b      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	212c      	movs	r1, #44	; 0x2c
 80086fa:	fb01 f303 	mul.w	r3, r1, r3
 80086fe:	4413      	add	r3, r2
 8008700:	3361      	adds	r3, #97	; 0x61
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b04      	cmp	r3, #4
 8008706:	d109      	bne.n	800871c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	212c      	movs	r1, #44	; 0x2c
 800870e:	fb01 f303 	mul.w	r3, r1, r3
 8008712:	4413      	add	r3, r2
 8008714:	3360      	adds	r3, #96	; 0x60
 8008716:	2202      	movs	r2, #2
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	e077      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	212c      	movs	r1, #44	; 0x2c
 8008722:	fb01 f303 	mul.w	r3, r1, r3
 8008726:	4413      	add	r3, r2
 8008728:	3361      	adds	r3, #97	; 0x61
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b05      	cmp	r3, #5
 800872e:	d109      	bne.n	8008744 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	212c      	movs	r1, #44	; 0x2c
 8008736:	fb01 f303 	mul.w	r3, r1, r3
 800873a:	4413      	add	r3, r2
 800873c:	3360      	adds	r3, #96	; 0x60
 800873e:	2205      	movs	r2, #5
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e063      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	212c      	movs	r1, #44	; 0x2c
 800874a:	fb01 f303 	mul.w	r3, r1, r3
 800874e:	4413      	add	r3, r2
 8008750:	3361      	adds	r3, #97	; 0x61
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b06      	cmp	r3, #6
 8008756:	d009      	beq.n	800876c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	212c      	movs	r1, #44	; 0x2c
 800875e:	fb01 f303 	mul.w	r3, r1, r3
 8008762:	4413      	add	r3, r2
 8008764:	3361      	adds	r3, #97	; 0x61
 8008766:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008768:	2b08      	cmp	r3, #8
 800876a:	d14f      	bne.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	212c      	movs	r1, #44	; 0x2c
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	4413      	add	r3, r2
 8008778:	335c      	adds	r3, #92	; 0x5c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	202c      	movs	r0, #44	; 0x2c
 8008784:	fb00 f303 	mul.w	r3, r0, r3
 8008788:	440b      	add	r3, r1
 800878a:	335c      	adds	r3, #92	; 0x5c
 800878c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	212c      	movs	r1, #44	; 0x2c
 8008794:	fb01 f303 	mul.w	r3, r1, r3
 8008798:	4413      	add	r3, r2
 800879a:	335c      	adds	r3, #92	; 0x5c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d912      	bls.n	80087c8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	212c      	movs	r1, #44	; 0x2c
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	335c      	adds	r3, #92	; 0x5c
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	212c      	movs	r1, #44	; 0x2c
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	3360      	adds	r3, #96	; 0x60
 80087c2:	2204      	movs	r2, #4
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e021      	b.n	800880c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	212c      	movs	r1, #44	; 0x2c
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	3360      	adds	r3, #96	; 0x60
 80087d6:	2202      	movs	r2, #2
 80087d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	461a      	mov	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008818:	461a      	mov	r2, r3
 800881a:	2302      	movs	r3, #2
 800881c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	b2d9      	uxtb	r1, r3
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	202c      	movs	r0, #44	; 0x2c
 8008828:	fb00 f303 	mul.w	r3, r0, r3
 800882c:	4413      	add	r3, r2
 800882e:	3360      	adds	r3, #96	; 0x60
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f007 fe67 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800883a:	bf00      	nop
 800883c:	3720      	adds	r7, #32
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b08a      	sub	sp, #40	; 0x28
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	0c5b      	lsrs	r3, r3, #17
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	091b      	lsrs	r3, r3, #4
 8008872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008876:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d004      	beq.n	8008888 <HCD_RXQLVL_IRQHandler+0x46>
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b05      	cmp	r3, #5
 8008882:	f000 80a9 	beq.w	80089d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008886:	e0aa      	b.n	80089de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80a6 	beq.w	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	212c      	movs	r1, #44	; 0x2c
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	4413      	add	r3, r2
 800889c:	3344      	adds	r3, #68	; 0x44
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 809b 	beq.w	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	212c      	movs	r1, #44	; 0x2c
 80088ac:	fb01 f303 	mul.w	r3, r1, r3
 80088b0:	4413      	add	r3, r2
 80088b2:	3350      	adds	r3, #80	; 0x50
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	441a      	add	r2, r3
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	202c      	movs	r0, #44	; 0x2c
 80088c0:	fb00 f303 	mul.w	r3, r0, r3
 80088c4:	440b      	add	r3, r1
 80088c6:	334c      	adds	r3, #76	; 0x4c
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d87a      	bhi.n	80089c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	212c      	movs	r1, #44	; 0x2c
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	4413      	add	r3, r2
 80088de:	3344      	adds	r3, #68	; 0x44
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	b292      	uxth	r2, r2
 80088e6:	4619      	mov	r1, r3
 80088e8:	f004 ffef 	bl	800d8ca <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	212c      	movs	r1, #44	; 0x2c
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	4413      	add	r3, r2
 80088f8:	3344      	adds	r3, #68	; 0x44
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	441a      	add	r2, r3
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	202c      	movs	r0, #44	; 0x2c
 8008906:	fb00 f303 	mul.w	r3, r0, r3
 800890a:	440b      	add	r3, r1
 800890c:	3344      	adds	r3, #68	; 0x44
 800890e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	212c      	movs	r1, #44	; 0x2c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	4413      	add	r3, r2
 800891c:	3350      	adds	r3, #80	; 0x50
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	441a      	add	r2, r3
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	202c      	movs	r0, #44	; 0x2c
 800892a:	fb00 f303 	mul.w	r3, r0, r3
 800892e:	440b      	add	r3, r1
 8008930:	3350      	adds	r3, #80	; 0x50
 8008932:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	4413      	add	r3, r2
 800893c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	0cdb      	lsrs	r3, r3, #19
 8008944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008948:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	212c      	movs	r1, #44	; 0x2c
 8008950:	fb01 f303 	mul.w	r3, r1, r3
 8008954:	4413      	add	r3, r2
 8008956:	3340      	adds	r3, #64	; 0x40
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	4293      	cmp	r3, r2
 8008960:	d13c      	bne.n	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d039      	beq.n	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800897e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008986:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008994:	461a      	mov	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	212c      	movs	r1, #44	; 0x2c
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	4413      	add	r3, r2
 80089a6:	3354      	adds	r3, #84	; 0x54
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f083 0301 	eor.w	r3, r3, #1
 80089ae:	b2d8      	uxtb	r0, r3
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	212c      	movs	r1, #44	; 0x2c
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	4413      	add	r3, r2
 80089bc:	3354      	adds	r3, #84	; 0x54
 80089be:	4602      	mov	r2, r0
 80089c0:	701a      	strb	r2, [r3, #0]
      break;
 80089c2:	e00b      	b.n	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	212c      	movs	r1, #44	; 0x2c
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	3360      	adds	r3, #96	; 0x60
 80089d2:	2204      	movs	r2, #4
 80089d4:	701a      	strb	r2, [r3, #0]
      break;
 80089d6:	e001      	b.n	80089dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80089d8:	bf00      	nop
 80089da:	e000      	b.n	80089de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80089dc:	bf00      	nop
  }
}
 80089de:	bf00      	nop
 80089e0:	3728      	adds	r7, #40	; 0x28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d10b      	bne.n	8008a36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d102      	bne.n	8008a2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f007 fd51 	bl	80104d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f043 0302 	orr.w	r3, r3, #2
 8008a34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d132      	bne.n	8008aa6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f043 0308 	orr.w	r3, r3, #8
 8008a46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d126      	bne.n	8008aa0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d113      	bne.n	8008a82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008a60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a64:	d106      	bne.n	8008a74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2102      	movs	r1, #2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f005 f867 	bl	800db40 <USB_InitFSLSPClkSel>
 8008a72:	e011      	b.n	8008a98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f005 f860 	bl	800db40 <USB_InitFSLSPClkSel>
 8008a80:	e00a      	b.n	8008a98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d106      	bne.n	8008a98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a90:	461a      	mov	r2, r3
 8008a92:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008a96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f007 fd43 	bl	8010524 <HAL_HCD_PortEnabled_Callback>
 8008a9e:	e002      	b.n	8008aa6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f007 fd4d 	bl	8010540 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d103      	bne.n	8008ab8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f043 0320 	orr.w	r3, r3, #32
 8008ab6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008abe:	461a      	mov	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	6013      	str	r3, [r2, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e12b      	b.n	8008d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7f9 fab0 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2224      	movs	r2, #36	; 0x24
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b30:	f002 fcec 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 8008b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4a81      	ldr	r2, [pc, #516]	; (8008d40 <HAL_I2C_Init+0x274>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d807      	bhi.n	8008b50 <HAL_I2C_Init+0x84>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4a80      	ldr	r2, [pc, #512]	; (8008d44 <HAL_I2C_Init+0x278>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	bf94      	ite	ls
 8008b48:	2301      	movls	r3, #1
 8008b4a:	2300      	movhi	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e006      	b.n	8008b5e <HAL_I2C_Init+0x92>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a7d      	ldr	r2, [pc, #500]	; (8008d48 <HAL_I2C_Init+0x27c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf94      	ite	ls
 8008b58:	2301      	movls	r3, #1
 8008b5a:	2300      	movhi	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e0e7      	b.n	8008d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a78      	ldr	r2, [pc, #480]	; (8008d4c <HAL_I2C_Init+0x280>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	0c9b      	lsrs	r3, r3, #18
 8008b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a6a      	ldr	r2, [pc, #424]	; (8008d40 <HAL_I2C_Init+0x274>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d802      	bhi.n	8008ba0 <HAL_I2C_Init+0xd4>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	e009      	b.n	8008bb4 <HAL_I2C_Init+0xe8>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	4a69      	ldr	r2, [pc, #420]	; (8008d50 <HAL_I2C_Init+0x284>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	099b      	lsrs	r3, r3, #6
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	495c      	ldr	r1, [pc, #368]	; (8008d40 <HAL_I2C_Init+0x274>)
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	d819      	bhi.n	8008c08 <HAL_I2C_Init+0x13c>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	1e59      	subs	r1, r3, #1
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8008be2:	1c59      	adds	r1, r3, #1
 8008be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008be8:	400b      	ands	r3, r1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <HAL_I2C_Init+0x138>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	1e59      	subs	r1, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c02:	e051      	b.n	8008ca8 <HAL_I2C_Init+0x1dc>
 8008c04:	2304      	movs	r3, #4
 8008c06:	e04f      	b.n	8008ca8 <HAL_I2C_Init+0x1dc>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <HAL_I2C_Init+0x168>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	1e58      	subs	r0, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	440b      	add	r3, r1
 8008c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c22:	3301      	adds	r3, #1
 8008c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e012      	b.n	8008c5a <HAL_I2C_Init+0x18e>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1e58      	subs	r0, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	0099      	lsls	r1, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_I2C_Init+0x196>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e022      	b.n	8008ca8 <HAL_I2C_Init+0x1dc>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10e      	bne.n	8008c88 <HAL_I2C_Init+0x1bc>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1e58      	subs	r0, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	440b      	add	r3, r1
 8008c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	e00f      	b.n	8008ca8 <HAL_I2C_Init+0x1dc>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	1e58      	subs	r0, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6859      	ldr	r1, [r3, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	0099      	lsls	r1, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	6809      	ldr	r1, [r1, #0]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6911      	ldr	r1, [r2, #16]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68d2      	ldr	r2, [r2, #12]
 8008ce2:	4311      	orrs	r1, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695a      	ldr	r2, [r3, #20]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	000186a0 	.word	0x000186a0
 8008d44:	001e847f 	.word	0x001e847f
 8008d48:	003d08ff 	.word	0x003d08ff
 8008d4c:	431bde83 	.word	0x431bde83
 8008d50:	10624dd3 	.word	0x10624dd3

08008d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	460b      	mov	r3, r1
 8008d62:	817b      	strh	r3, [r7, #10]
 8008d64:	4613      	mov	r3, r2
 8008d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d68:	f7fd fe0a 	bl	8006980 <HAL_GetTick>
 8008d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	f040 80e0 	bne.w	8008f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2319      	movs	r3, #25
 8008d82:	2201      	movs	r2, #1
 8008d84:	4970      	ldr	r1, [pc, #448]	; (8008f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f001 f8f6 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
 8008d94:	e0d3      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_I2C_Master_Transmit+0x50>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0cc      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d007      	beq.n	8008dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0201 	orr.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2221      	movs	r2, #33	; 0x21
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2210      	movs	r2, #16
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	893a      	ldrh	r2, [r7, #8]
 8008dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4a50      	ldr	r2, [pc, #320]	; (8008f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e0c:	8979      	ldrh	r1, [r7, #10]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fde2 	bl	80099dc <I2C_MasterRequestWrite>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e08d      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008e38:	e066      	b.n	8008f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	6a39      	ldr	r1, [r7, #32]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f001 f970 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d107      	bne.n	8008e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e06b      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d11b      	bne.n	8008edc <HAL_I2C_Master_Transmit+0x188>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	6a39      	ldr	r1, [r7, #32]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 f960 	bl	800a1a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00d      	beq.n	8008f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d107      	bne.n	8008f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e01a      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d194      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e000      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	00100002 	.word	0x00100002
 8008f4c:	ffff0000 	.word	0xffff0000

08008f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08c      	sub	sp, #48	; 0x30
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	817b      	strh	r3, [r7, #10]
 8008f60:	4613      	mov	r3, r2
 8008f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f64:	f7fd fd0c 	bl	8006980 <HAL_GetTick>
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	f040 820b 	bne.w	800938e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	2319      	movs	r3, #25
 8008f7e:	2201      	movs	r2, #1
 8008f80:	497c      	ldr	r1, [pc, #496]	; (8009174 <HAL_I2C_Master_Receive+0x224>)
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fff8 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e1fe      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_I2C_Master_Receive+0x50>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e1f7      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d007      	beq.n	8008fc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f042 0201 	orr.w	r2, r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2222      	movs	r2, #34	; 0x22
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2210      	movs	r2, #16
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	893a      	ldrh	r2, [r7, #8]
 8008ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a5c      	ldr	r2, [pc, #368]	; (8009178 <HAL_I2C_Master_Receive+0x228>)
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009008:	8979      	ldrh	r1, [r7, #10]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fd66 	bl	8009ae0 <I2C_MasterRequestRead>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e1b8      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d113      	bne.n	800904e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009026:	2300      	movs	r3, #0
 8009028:	623b      	str	r3, [r7, #32]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	623b      	str	r3, [r7, #32]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	e18c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009052:	2b01      	cmp	r3, #1
 8009054:	d11b      	bne.n	800908e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e16c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	2b02      	cmp	r3, #2
 8009094:	d11b      	bne.n	80090ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	e14c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80090f4:	e138      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	f200 80f1 	bhi.w	80092e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	2b01      	cmp	r3, #1
 8009106:	d123      	bne.n	8009150 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f001 f88b 	bl	800a228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e139      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800914e:	e10b      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009154:	2b02      	cmp	r3, #2
 8009156:	d14e      	bne.n	80091f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	2200      	movs	r2, #0
 8009160:	4906      	ldr	r1, [pc, #24]	; (800917c <HAL_I2C_Master_Receive+0x22c>)
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 ff08 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e10e      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
 8009172:	bf00      	nop
 8009174:	00100002 	.word	0x00100002
 8009178:	ffff0000 	.word	0xffff0000
 800917c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091f4:	e0b8      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	4966      	ldr	r1, [pc, #408]	; (8009398 <HAL_I2C_Master_Receive+0x448>)
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 feb9 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0bf      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	2200      	movs	r2, #0
 800925a:	494f      	ldr	r1, [pc, #316]	; (8009398 <HAL_I2C_Master_Receive+0x448>)
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fe8b 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e091      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092e0:	e042      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 ff9e 	bl	800a228 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e04c      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b04      	cmp	r3, #4
 8009334:	d118      	bne.n	8009368 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009352:	3b01      	subs	r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	f47f aec2 	bne.w	80090f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	e000      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800938e:	2302      	movs	r3, #2
  }
}
 8009390:	4618      	mov	r0, r3
 8009392:	3728      	adds	r7, #40	; 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	00010004 	.word	0x00010004

0800939c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	461a      	mov	r2, r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	817b      	strh	r3, [r7, #10]
 80093ae:	460b      	mov	r3, r1
 80093b0:	813b      	strh	r3, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093b6:	f7fd fae3 	bl	8006980 <HAL_GetTick>
 80093ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	f040 80d9 	bne.w	800957c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	2319      	movs	r3, #25
 80093d0:	2201      	movs	r2, #1
 80093d2:	496d      	ldr	r1, [pc, #436]	; (8009588 <HAL_I2C_Mem_Write+0x1ec>)
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fdcf 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80093e0:	2302      	movs	r3, #2
 80093e2:	e0cc      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_I2C_Mem_Write+0x56>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e0c5      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b01      	cmp	r3, #1
 8009406:	d007      	beq.n	8009418 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2221      	movs	r2, #33	; 0x21
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2240      	movs	r2, #64	; 0x40
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a4d      	ldr	r2, [pc, #308]	; (800958c <HAL_I2C_Mem_Write+0x1f0>)
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800945a:	88f8      	ldrh	r0, [r7, #6]
 800945c:	893a      	ldrh	r2, [r7, #8]
 800945e:	8979      	ldrh	r1, [r7, #10]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	4603      	mov	r3, r0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fc06 	bl	8009c7c <I2C_RequestMemoryWrite>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d052      	beq.n	800951c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e081      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fe50 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	2b04      	cmp	r3, #4
 8009490:	d107      	bne.n	80094a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e06b      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	781a      	ldrb	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d11b      	bne.n	800951c <HAL_I2C_Mem_Write+0x180>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d017      	beq.n	800951c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1aa      	bne.n	800947a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fe3c 	bl	800a1a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00d      	beq.n	8009550 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	2b04      	cmp	r3, #4
 800953a:	d107      	bne.n	800954c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e016      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800955e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2220      	movs	r2, #32
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	e000      	b.n	800957e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800957c:	2302      	movs	r3, #2
  }
}
 800957e:	4618      	mov	r0, r3
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	00100002 	.word	0x00100002
 800958c:	ffff0000 	.word	0xffff0000

08009590 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	; 0x30
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	461a      	mov	r2, r3
 800959e:	4603      	mov	r3, r0
 80095a0:	817b      	strh	r3, [r7, #10]
 80095a2:	460b      	mov	r3, r1
 80095a4:	813b      	strh	r3, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095aa:	f7fd f9e9 	bl	8006980 <HAL_GetTick>
 80095ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	f040 8208 	bne.w	80099ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	2319      	movs	r3, #25
 80095c4:	2201      	movs	r2, #1
 80095c6:	497b      	ldr	r1, [pc, #492]	; (80097b4 <HAL_I2C_Mem_Read+0x224>)
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fcd5 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80095d4:	2302      	movs	r3, #2
 80095d6:	e1fb      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_I2C_Mem_Read+0x56>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e1f4      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d007      	beq.n	800960c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0201 	orr.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800961a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2222      	movs	r2, #34	; 0x22
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800963c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009642:	b29a      	uxth	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4a5b      	ldr	r2, [pc, #364]	; (80097b8 <HAL_I2C_Mem_Read+0x228>)
 800964c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800964e:	88f8      	ldrh	r0, [r7, #6]
 8009650:	893a      	ldrh	r2, [r7, #8]
 8009652:	8979      	ldrh	r1, [r7, #10]
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	4603      	mov	r3, r0
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fba2 	bl	8009da8 <I2C_RequestMemoryRead>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e1b0      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d113      	bne.n	800969e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	623b      	str	r3, [r7, #32]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	e184      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d11b      	bne.n	80096de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b6:	2300      	movs	r3, #0
 80096b8:	61fb      	str	r3, [r7, #28]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	61fb      	str	r3, [r7, #28]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e164      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d11b      	bne.n	800971e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009706:	2300      	movs	r3, #0
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	e144      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800971e:	2300      	movs	r3, #0
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009734:	e138      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973a:	2b03      	cmp	r3, #3
 800973c:	f200 80f1 	bhi.w	8009922 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009744:	2b01      	cmp	r3, #1
 8009746:	d123      	bne.n	8009790 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 fd6b 	bl	800a228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e139      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009778:	3b01      	subs	r3, #1
 800977a:	b29a      	uxth	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800978e:	e10b      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009794:	2b02      	cmp	r3, #2
 8009796:	d14e      	bne.n	8009836 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	2200      	movs	r2, #0
 80097a0:	4906      	ldr	r1, [pc, #24]	; (80097bc <HAL_I2C_Mem_Read+0x22c>)
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fbe8 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d008      	beq.n	80097c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e10e      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
 80097b2:	bf00      	nop
 80097b4:	00100002 	.word	0x00100002
 80097b8:	ffff0000 	.word	0xffff0000
 80097bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	b2d2      	uxtb	r2, r2
 800980e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981e:	3b01      	subs	r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982a:	b29b      	uxth	r3, r3
 800982c:	3b01      	subs	r3, #1
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009834:	e0b8      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	2200      	movs	r2, #0
 800983e:	4966      	ldr	r1, [pc, #408]	; (80099d8 <HAL_I2C_Mem_Read+0x448>)
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fb99 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e0bf      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800985e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691a      	ldr	r2, [r3, #16]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987c:	3b01      	subs	r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	2200      	movs	r2, #0
 800989a:	494f      	ldr	r1, [pc, #316]	; (80099d8 <HAL_I2C_Mem_Read+0x448>)
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fb6b 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e091      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d8:	3b01      	subs	r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800990a:	3b01      	subs	r3, #1
 800990c:	b29a      	uxth	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009916:	b29b      	uxth	r3, r3
 8009918:	3b01      	subs	r3, #1
 800991a:	b29a      	uxth	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009920:	e042      	b.n	80099a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fc7e 	bl	800a228 <I2C_WaitOnRXNEFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e04c      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995e:	b29b      	uxth	r3, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b04      	cmp	r3, #4
 8009974:	d118      	bne.n	80099a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009992:	3b01      	subs	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800999e:	b29b      	uxth	r3, r3
 80099a0:	3b01      	subs	r3, #1
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f47f aec2 	bne.w	8009736 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e000      	b.n	80099d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80099ce:	2302      	movs	r3, #2
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3728      	adds	r7, #40	; 0x28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	00010004 	.word	0x00010004

080099dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	607a      	str	r2, [r7, #4]
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	460b      	mov	r3, r1
 80099ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d006      	beq.n	8009a06 <I2C_MasterRequestWrite+0x2a>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d003      	beq.n	8009a06 <I2C_MasterRequestWrite+0x2a>
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a04:	d108      	bne.n	8009a18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	e00b      	b.n	8009a30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	2b12      	cmp	r3, #18
 8009a1e:	d107      	bne.n	8009a30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 fa9b 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00d      	beq.n	8009a64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a56:	d103      	bne.n	8009a60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e035      	b.n	8009ad0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a6c:	d108      	bne.n	8009a80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a6e:	897b      	ldrh	r3, [r7, #10]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	461a      	mov	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a7c:	611a      	str	r2, [r3, #16]
 8009a7e:	e01b      	b.n	8009ab8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a80:	897b      	ldrh	r3, [r7, #10]
 8009a82:	11db      	asrs	r3, r3, #7
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	f003 0306 	and.w	r3, r3, #6
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f063 030f 	orn	r3, r3, #15
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	490e      	ldr	r1, [pc, #56]	; (8009ad8 <I2C_MasterRequestWrite+0xfc>)
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 fac1 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e010      	b.n	8009ad0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009aae:	897b      	ldrh	r3, [r7, #10]
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4907      	ldr	r1, [pc, #28]	; (8009adc <I2C_MasterRequestWrite+0x100>)
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fab1 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	00010008 	.word	0x00010008
 8009adc:	00010002 	.word	0x00010002

08009ae0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	607a      	str	r2, [r7, #4]
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	460b      	mov	r3, r1
 8009aee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d006      	beq.n	8009b1a <I2C_MasterRequestRead+0x3a>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d003      	beq.n	8009b1a <I2C_MasterRequestRead+0x3a>
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b18:	d108      	bne.n	8009b2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e00b      	b.n	8009b44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	2b11      	cmp	r3, #17
 8009b32:	d107      	bne.n	8009b44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 fa11 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6a:	d103      	bne.n	8009b74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e079      	b.n	8009c6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b80:	d108      	bne.n	8009b94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b82:	897b      	ldrh	r3, [r7, #10]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	611a      	str	r2, [r3, #16]
 8009b92:	e05f      	b.n	8009c54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b94:	897b      	ldrh	r3, [r7, #10]
 8009b96:	11db      	asrs	r3, r3, #7
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f003 0306 	and.w	r3, r3, #6
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f063 030f 	orn	r3, r3, #15
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4930      	ldr	r1, [pc, #192]	; (8009c74 <I2C_MasterRequestRead+0x194>)
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fa37 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e054      	b.n	8009c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009bc2:	897b      	ldrh	r3, [r7, #10]
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	4929      	ldr	r1, [pc, #164]	; (8009c78 <I2C_MasterRequestRead+0x198>)
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fa27 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e044      	b.n	8009c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 f9af 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2e:	d103      	bne.n	8009c38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e017      	b.n	8009c6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c3c:	897b      	ldrh	r3, [r7, #10]
 8009c3e:	11db      	asrs	r3, r3, #7
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0306 	and.w	r3, r3, #6
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f063 030e 	orn	r3, r3, #14
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4907      	ldr	r1, [pc, #28]	; (8009c78 <I2C_MasterRequestRead+0x198>)
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f9e3 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e000      	b.n	8009c6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	00010008 	.word	0x00010008
 8009c78:	00010002 	.word	0x00010002

08009c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	817b      	strh	r3, [r7, #10]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	813b      	strh	r3, [r7, #8]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f960 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00d      	beq.n	8009cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ccc:	d103      	bne.n	8009cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e05f      	b.n	8009d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cda:	897b      	ldrh	r3, [r7, #10]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	6a3a      	ldr	r2, [r7, #32]
 8009cee:	492d      	ldr	r1, [pc, #180]	; (8009da4 <I2C_RequestMemoryWrite+0x128>)
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f998 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e04c      	b.n	8009d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d18:	6a39      	ldr	r1, [r7, #32]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fa02 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d107      	bne.n	8009d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e02b      	b.n	8009d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d42:	88fb      	ldrh	r3, [r7, #6]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d105      	bne.n	8009d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d48:	893b      	ldrh	r3, [r7, #8]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	611a      	str	r2, [r3, #16]
 8009d52:	e021      	b.n	8009d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d54:	893b      	ldrh	r3, [r7, #8]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d64:	6a39      	ldr	r1, [r7, #32]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 f9dc 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00d      	beq.n	8009d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d107      	bne.n	8009d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e005      	b.n	8009d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d8e:	893b      	ldrh	r3, [r7, #8]
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	00010002 	.word	0x00010002

08009da8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	817b      	strh	r3, [r7, #10]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	813b      	strh	r3, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f8c2 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e08:	d103      	bne.n	8009e12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e0aa      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e16:	897b      	ldrh	r3, [r7, #10]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	6a3a      	ldr	r2, [r7, #32]
 8009e2a:	4952      	ldr	r1, [pc, #328]	; (8009f74 <I2C_RequestMemoryRead+0x1cc>)
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 f8fa 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e097      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e54:	6a39      	ldr	r1, [r7, #32]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 f964 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00d      	beq.n	8009e7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d107      	bne.n	8009e7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e076      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d105      	bne.n	8009e90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e84:	893b      	ldrh	r3, [r7, #8]
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	611a      	str	r2, [r3, #16]
 8009e8e:	e021      	b.n	8009ed4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e90:	893b      	ldrh	r3, [r7, #8]
 8009e92:	0a1b      	lsrs	r3, r3, #8
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea0:	6a39      	ldr	r1, [r7, #32]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 f93e 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00d      	beq.n	8009eca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d107      	bne.n	8009ec6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e050      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009eca:	893b      	ldrh	r3, [r7, #8]
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed6:	6a39      	ldr	r1, [r7, #32]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f923 	bl	800a124 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00d      	beq.n	8009f00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d107      	bne.n	8009efc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e035      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f82b 	bl	8009f78 <I2C_WaitOnFlagUntilTimeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00d      	beq.n	8009f44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f36:	d103      	bne.n	8009f40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e013      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f44:	897b      	ldrh	r3, [r7, #10]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	6a3a      	ldr	r2, [r7, #32]
 8009f58:	4906      	ldr	r1, [pc, #24]	; (8009f74 <I2C_RequestMemoryRead+0x1cc>)
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f863 	bl	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e000      	b.n	8009f6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	00010002 	.word	0x00010002

08009f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	4613      	mov	r3, r2
 8009f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f88:	e025      	b.n	8009fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f90:	d021      	beq.n	8009fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f92:	f7fc fcf5 	bl	8006980 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d302      	bcc.n	8009fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d116      	bne.n	8009fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	f043 0220 	orr.w	r2, r3, #32
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e023      	b.n	800a01e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	0c1b      	lsrs	r3, r3, #16
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10d      	bne.n	8009ffc <I2C_WaitOnFlagUntilTimeout+0x84>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	43da      	mvns	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4013      	ands	r3, r2
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bf0c      	ite	eq
 8009ff2:	2301      	moveq	r3, #1
 8009ff4:	2300      	movne	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	e00c      	b.n	800a016 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	43da      	mvns	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	4013      	ands	r3, r2
 800a008:	b29b      	uxth	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bf0c      	ite	eq
 800a00e:	2301      	moveq	r3, #1
 800a010:	2300      	movne	r3, #0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	461a      	mov	r2, r3
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d0b6      	beq.n	8009f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a034:	e051      	b.n	800a0da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a044:	d123      	bne.n	800a08e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a054:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a05e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2220      	movs	r2, #32
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f043 0204 	orr.w	r2, r3, #4
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e046      	b.n	800a11c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a094:	d021      	beq.n	800a0da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a096:	f7fc fc73 	bl	8006980 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d302      	bcc.n	800a0ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d116      	bne.n	800a0da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	f043 0220 	orr.w	r2, r3, #32
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e020      	b.n	800a11c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	0c1b      	lsrs	r3, r3, #16
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d10c      	bne.n	800a0fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	43da      	mvns	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bf14      	ite	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	2300      	moveq	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	e00b      	b.n	800a116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	43da      	mvns	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4013      	ands	r3, r2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d18d      	bne.n	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a130:	e02d      	b.n	800a18e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 f8ce 	bl	800a2d4 <I2C_IsAcknowledgeFailed>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e02d      	b.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a148:	d021      	beq.n	800a18e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14a:	f7fc fc19 	bl	8006980 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d116      	bne.n	800a18e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	f043 0220 	orr.w	r2, r3, #32
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e007      	b.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a198:	2b80      	cmp	r3, #128	; 0x80
 800a19a:	d1ca      	bne.n	800a132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a1b2:	e02d      	b.n	800a210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f88d 	bl	800a2d4 <I2C_IsAcknowledgeFailed>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e02d      	b.n	800a220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ca:	d021      	beq.n	800a210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1cc:	f7fc fbd8 	bl	8006980 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d302      	bcc.n	800a1e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d116      	bne.n	800a210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fc:	f043 0220 	orr.w	r2, r3, #32
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e007      	b.n	800a220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d1ca      	bne.n	800a1b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a234:	e042      	b.n	800a2bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b10      	cmp	r3, #16
 800a242:	d119      	bne.n	800a278 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0210 	mvn.w	r2, #16
 800a24c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2220      	movs	r2, #32
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e029      	b.n	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a278:	f7fc fb82 	bl	8006980 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	429a      	cmp	r2, r3
 800a286:	d302      	bcc.n	800a28e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d116      	bne.n	800a2bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2220      	movs	r2, #32
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a8:	f043 0220 	orr.w	r2, r3, #32
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e007      	b.n	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	d1b5      	bne.n	800a236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ea:	d11b      	bne.n	800a324 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a2f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	f043 0204 	orr.w	r2, r3, #4
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e000      	b.n	800a326 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e128      	b.n	800a598 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a90      	ldr	r2, [pc, #576]	; (800a5a0 <HAL_I2S_Init+0x26c>)
 800a35e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7f7 ff19 	bl	8002198 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6812      	ldr	r2, [r2, #0]
 800a378:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a37c:	f023 030f 	bic.w	r3, r3, #15
 800a380:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2202      	movs	r2, #2
 800a388:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d060      	beq.n	800a454 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d102      	bne.n	800a3a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800a39a:	2310      	movs	r3, #16
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e001      	b.n	800a3a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d802      	bhi.n	800a3b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	f001 f9a0 	bl	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c2:	d125      	bne.n	800a410 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d010      	beq.n	800a3ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e8:	3305      	adds	r3, #5
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	e01f      	b.n	800a42e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	461a      	mov	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40a:	3305      	adds	r3, #5
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	e00e      	b.n	800a42e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	fbb2 f2f3 	udiv	r2, r2, r3
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	461a      	mov	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	3305      	adds	r3, #5
 800a42c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	4a5c      	ldr	r2, [pc, #368]	; (800a5a4 <HAL_I2S_Init+0x270>)
 800a432:	fba2 2303 	umull	r2, r3, r2, r3
 800a436:	08db      	lsrs	r3, r3, #3
 800a438:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	085b      	lsrs	r3, r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	e003      	b.n	800a45c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800a454:	2302      	movs	r3, #2
 800a456:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d902      	bls.n	800a468 <HAL_I2S_Init+0x134>
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2bff      	cmp	r3, #255	; 0xff
 800a466:	d907      	bls.n	800a478 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46c:	f043 0210 	orr.w	r2, r3, #16
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e08f      	b.n	800a598 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	ea42 0103 	orr.w	r1, r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	430a      	orrs	r2, r1
 800a48a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a496:	f023 030f 	bic.w	r3, r3, #15
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6851      	ldr	r1, [r2, #4]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6892      	ldr	r2, [r2, #8]
 800a4a2:	4311      	orrs	r1, r2
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68d2      	ldr	r2, [r2, #12]
 800a4a8:	4311      	orrs	r1, r2
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6992      	ldr	r2, [r2, #24]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d161      	bne.n	800a588 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a38      	ldr	r2, [pc, #224]	; (800a5a8 <HAL_I2S_Init+0x274>)
 800a4c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a37      	ldr	r2, [pc, #220]	; (800a5ac <HAL_I2S_Init+0x278>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d101      	bne.n	800a4d8 <HAL_I2S_Init+0x1a4>
 800a4d4:	4b36      	ldr	r3, [pc, #216]	; (800a5b0 <HAL_I2S_Init+0x27c>)
 800a4d6:	e001      	b.n	800a4dc <HAL_I2S_Init+0x1a8>
 800a4d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6812      	ldr	r2, [r2, #0]
 800a4e2:	4932      	ldr	r1, [pc, #200]	; (800a5ac <HAL_I2S_Init+0x278>)
 800a4e4:	428a      	cmp	r2, r1
 800a4e6:	d101      	bne.n	800a4ec <HAL_I2S_Init+0x1b8>
 800a4e8:	4a31      	ldr	r2, [pc, #196]	; (800a5b0 <HAL_I2S_Init+0x27c>)
 800a4ea:	e001      	b.n	800a4f0 <HAL_I2S_Init+0x1bc>
 800a4ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800a4f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a4f4:	f023 030f 	bic.w	r3, r3, #15
 800a4f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a2b      	ldr	r2, [pc, #172]	; (800a5ac <HAL_I2S_Init+0x278>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d101      	bne.n	800a508 <HAL_I2S_Init+0x1d4>
 800a504:	4b2a      	ldr	r3, [pc, #168]	; (800a5b0 <HAL_I2S_Init+0x27c>)
 800a506:	e001      	b.n	800a50c <HAL_I2S_Init+0x1d8>
 800a508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a50c:	2202      	movs	r2, #2
 800a50e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a25      	ldr	r2, [pc, #148]	; (800a5ac <HAL_I2S_Init+0x278>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d101      	bne.n	800a51e <HAL_I2S_Init+0x1ea>
 800a51a:	4b25      	ldr	r3, [pc, #148]	; (800a5b0 <HAL_I2S_Init+0x27c>)
 800a51c:	e001      	b.n	800a522 <HAL_I2S_Init+0x1ee>
 800a51e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52e:	d003      	beq.n	800a538 <HAL_I2S_Init+0x204>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800a538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a53c:	613b      	str	r3, [r7, #16]
 800a53e:	e001      	b.n	800a544 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800a540:	2300      	movs	r3, #0
 800a542:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a54e:	4313      	orrs	r3, r2
 800a550:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a558:	4313      	orrs	r3, r2
 800a55a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a562:	4313      	orrs	r3, r2
 800a564:	b29a      	uxth	r2, r3
 800a566:	897b      	ldrh	r3, [r7, #10]
 800a568:	4313      	orrs	r3, r2
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a570:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <HAL_I2S_Init+0x278>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d101      	bne.n	800a580 <HAL_I2S_Init+0x24c>
 800a57c:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <HAL_I2S_Init+0x27c>)
 800a57e:	e001      	b.n	800a584 <HAL_I2S_Init+0x250>
 800a580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a584:	897a      	ldrh	r2, [r7, #10]
 800a586:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3720      	adds	r7, #32
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	0800a6ab 	.word	0x0800a6ab
 800a5a4:	cccccccd 	.word	0xcccccccd
 800a5a8:	0800a7c1 	.word	0x0800a7c1
 800a5ac:	40003800 	.word	0x40003800
 800a5b0:	40003400 	.word	0x40003400

0800a5b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	881a      	ldrh	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	1c9a      	adds	r2, r3, #2
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a612:	b29b      	uxth	r3, r3
 800a614:	3b01      	subs	r3, #1
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a620:	b29b      	uxth	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10e      	bne.n	800a644 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a634:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff ffb8 	bl	800a5b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	b292      	uxth	r2, r2
 800a660:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	1c9a      	adds	r2, r3, #2
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10e      	bne.n	800a6a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a692:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ff93 	bl	800a5c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d13a      	bne.n	800a73c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d109      	bne.n	800a6e4 <I2S_IRQHandler+0x3a>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6da:	2b40      	cmp	r3, #64	; 0x40
 800a6dc:	d102      	bne.n	800a6e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ffb4 	bl	800a64c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ea:	2b40      	cmp	r3, #64	; 0x40
 800a6ec:	d126      	bne.n	800a73c <I2S_IRQHandler+0x92>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b20      	cmp	r3, #32
 800a6fa:	d11f      	bne.n	800a73c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a70a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	613b      	str	r3, [r7, #16]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72e:	f043 0202 	orr.w	r2, r3, #2
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff ff50 	bl	800a5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b03      	cmp	r3, #3
 800a746:	d136      	bne.n	800a7b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d109      	bne.n	800a766 <I2S_IRQHandler+0xbc>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75c:	2b80      	cmp	r3, #128	; 0x80
 800a75e:	d102      	bne.n	800a766 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff ff45 	bl	800a5f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d122      	bne.n	800a7b6 <I2S_IRQHandler+0x10c>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b20      	cmp	r3, #32
 800a77c:	d11b      	bne.n	800a7b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a78c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a8:	f043 0204 	orr.w	r2, r3, #4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff13 	bl	800a5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4aa2      	ldr	r2, [pc, #648]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d101      	bne.n	800a7de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a7da:	4ba2      	ldr	r3, [pc, #648]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a7dc:	e001      	b.n	800a7e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a7de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a9b      	ldr	r2, [pc, #620]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d101      	bne.n	800a7fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a7f8:	4b9a      	ldr	r3, [pc, #616]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a7fa:	e001      	b.n	800a800 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a7fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a80c:	d004      	beq.n	800a818 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 8099 	bne.w	800a94a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d107      	bne.n	800a832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f925 	bl	800aa7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d107      	bne.n	800a84c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9c8 	bl	800abdc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d13a      	bne.n	800a8cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d035      	beq.n	800a8cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a7e      	ldr	r2, [pc, #504]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d101      	bne.n	800a86e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a86a:	4b7e      	ldr	r3, [pc, #504]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a86c:	e001      	b.n	800a872 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a86e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4979      	ldr	r1, [pc, #484]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a87a:	428b      	cmp	r3, r1
 800a87c:	d101      	bne.n	800a882 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a87e:	4b79      	ldr	r3, [pc, #484]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a880:	e001      	b.n	800a886 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a88a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a89a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	f043 0202 	orr.w	r2, r3, #2
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe88 	bl	800a5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f003 0308 	and.w	r3, r3, #8
 800a8d2:	2b08      	cmp	r3, #8
 800a8d4:	f040 80be 	bne.w	800aa54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 80b8 	beq.w	800aa54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a8f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a59      	ldr	r2, [pc, #356]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d101      	bne.n	800a902 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a8fe:	4b59      	ldr	r3, [pc, #356]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a900:	e001      	b.n	800a906 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4954      	ldr	r1, [pc, #336]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a90e:	428b      	cmp	r3, r1
 800a910:	d101      	bne.n	800a916 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a912:	4b54      	ldr	r3, [pc, #336]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a914:	e001      	b.n	800a91a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a91a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a91e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a920:	2300      	movs	r3, #0
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	60bb      	str	r3, [r7, #8]
 800a92c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93a:	f043 0204 	orr.w	r2, r3, #4
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff fe4a 	bl	800a5dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a948:	e084      	b.n	800aa54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b02      	cmp	r3, #2
 800a952:	d107      	bne.n	800a964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f8be 	bl	800aae0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d107      	bne.n	800a97e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8fd 	bl	800ab78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d12f      	bne.n	800a9e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d02a      	beq.n	800a9e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a9a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a2e      	ldr	r2, [pc, #184]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d101      	bne.n	800a9b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a9ac:	4b2d      	ldr	r3, [pc, #180]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a9ae:	e001      	b.n	800a9b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a9b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4929      	ldr	r1, [pc, #164]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a9bc:	428b      	cmp	r3, r1
 800a9be:	d101      	bne.n	800a9c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a9c0:	4b28      	ldr	r3, [pc, #160]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a9c2:	e001      	b.n	800a9c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a9c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a9c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9da:	f043 0202 	orr.w	r2, r3, #2
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff fdfa 	bl	800a5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b08      	cmp	r3, #8
 800a9f0:	d131      	bne.n	800aa56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d02c      	beq.n	800aa56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a17      	ldr	r2, [pc, #92]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d101      	bne.n	800aa0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800aa06:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800aa08:	e001      	b.n	800aa0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800aa0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4912      	ldr	r1, [pc, #72]	; (800aa60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800aa16:	428b      	cmp	r3, r1
 800aa18:	d101      	bne.n	800aa1e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800aa1a:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800aa1c:	e001      	b.n	800aa22 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800aa1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800aa22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aa26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800aa36:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa44:	f043 0204 	orr.w	r2, r3, #4
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff fdc5 	bl	800a5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800aa52:	e000      	b.n	800aa56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800aa54:	bf00      	nop
}
 800aa56:	bf00      	nop
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	40003800 	.word	0x40003800
 800aa64:	40003400 	.word	0x40003400

0800aa68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	1c99      	adds	r1, r3, #2
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6251      	str	r1, [r2, #36]	; 0x24
 800aa8e:	881a      	ldrh	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d113      	bne.n	800aad6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aabc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff ffc9 	bl	800aa68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	1c99      	adds	r1, r3, #2
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6251      	str	r1, [r2, #36]	; 0x24
 800aaf2:	8819      	ldrh	r1, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a1d      	ldr	r2, [pc, #116]	; (800ab70 <I2SEx_TxISR_I2SExt+0x90>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d101      	bne.n	800ab02 <I2SEx_TxISR_I2SExt+0x22>
 800aafe:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <I2SEx_TxISR_I2SExt+0x94>)
 800ab00:	e001      	b.n	800ab06 <I2SEx_TxISR_I2SExt+0x26>
 800ab02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab06:	460a      	mov	r2, r1
 800ab08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	3b01      	subs	r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d121      	bne.n	800ab66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a12      	ldr	r2, [pc, #72]	; (800ab70 <I2SEx_TxISR_I2SExt+0x90>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d101      	bne.n	800ab30 <I2SEx_TxISR_I2SExt+0x50>
 800ab2c:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <I2SEx_TxISR_I2SExt+0x94>)
 800ab2e:	e001      	b.n	800ab34 <I2SEx_TxISR_I2SExt+0x54>
 800ab30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	490d      	ldr	r1, [pc, #52]	; (800ab70 <I2SEx_TxISR_I2SExt+0x90>)
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	d101      	bne.n	800ab44 <I2SEx_TxISR_I2SExt+0x64>
 800ab40:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <I2SEx_TxISR_I2SExt+0x94>)
 800ab42:	e001      	b.n	800ab48 <I2SEx_TxISR_I2SExt+0x68>
 800ab44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ab4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff ff81 	bl	800aa68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	40003800 	.word	0x40003800
 800ab74:	40003400 	.word	0x40003400

0800ab78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68d8      	ldr	r0, [r3, #12]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	1c99      	adds	r1, r3, #2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ab90:	b282      	uxth	r2, r0
 800ab92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d113      	bne.n	800abd4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800abba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff ff4a 	bl	800aa68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a20      	ldr	r2, [pc, #128]	; (800ac6c <I2SEx_RxISR_I2SExt+0x90>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d101      	bne.n	800abf2 <I2SEx_RxISR_I2SExt+0x16>
 800abee:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <I2SEx_RxISR_I2SExt+0x94>)
 800abf0:	e001      	b.n	800abf6 <I2SEx_RxISR_I2SExt+0x1a>
 800abf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800abf6:	68d8      	ldr	r0, [r3, #12]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfc:	1c99      	adds	r1, r3, #2
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ac02:	b282      	uxth	r2, r0
 800ac04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d121      	bne.n	800ac62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a12      	ldr	r2, [pc, #72]	; (800ac6c <I2SEx_RxISR_I2SExt+0x90>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d101      	bne.n	800ac2c <I2SEx_RxISR_I2SExt+0x50>
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <I2SEx_RxISR_I2SExt+0x94>)
 800ac2a:	e001      	b.n	800ac30 <I2SEx_RxISR_I2SExt+0x54>
 800ac2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	490d      	ldr	r1, [pc, #52]	; (800ac6c <I2SEx_RxISR_I2SExt+0x90>)
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	d101      	bne.n	800ac40 <I2SEx_RxISR_I2SExt+0x64>
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <I2SEx_RxISR_I2SExt+0x94>)
 800ac3e:	e001      	b.n	800ac44 <I2SEx_RxISR_I2SExt+0x68>
 800ac40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ac48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ff03 	bl	800aa68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	40003800 	.word	0x40003800
 800ac70:	40003400 	.word	0x40003400

0800ac74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e264      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d075      	beq.n	800ad7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac92:	4ba3      	ldr	r3, [pc, #652]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 030c 	and.w	r3, r3, #12
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	d00c      	beq.n	800acb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac9e:	4ba0      	ldr	r3, [pc, #640]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d112      	bne.n	800acd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acaa:	4b9d      	ldr	r3, [pc, #628]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acb6:	d10b      	bne.n	800acd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acb8:	4b99      	ldr	r3, [pc, #612]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d05b      	beq.n	800ad7c <HAL_RCC_OscConfig+0x108>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d157      	bne.n	800ad7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e23f      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd8:	d106      	bne.n	800ace8 <HAL_RCC_OscConfig+0x74>
 800acda:	4b91      	ldr	r3, [pc, #580]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a90      	ldr	r2, [pc, #576]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ace0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	e01d      	b.n	800ad24 <HAL_RCC_OscConfig+0xb0>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf0:	d10c      	bne.n	800ad0c <HAL_RCC_OscConfig+0x98>
 800acf2:	4b8b      	ldr	r3, [pc, #556]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a8a      	ldr	r2, [pc, #552]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800acf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	4b88      	ldr	r3, [pc, #544]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a87      	ldr	r2, [pc, #540]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	e00b      	b.n	800ad24 <HAL_RCC_OscConfig+0xb0>
 800ad0c:	4b84      	ldr	r3, [pc, #528]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a83      	ldr	r2, [pc, #524]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	4b81      	ldr	r3, [pc, #516]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a80      	ldr	r2, [pc, #512]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d013      	beq.n	800ad54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad2c:	f7fb fe28 	bl	8006980 <HAL_GetTick>
 800ad30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad32:	e008      	b.n	800ad46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad34:	f7fb fe24 	bl	8006980 <HAL_GetTick>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b64      	cmp	r3, #100	; 0x64
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e204      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad46:	4b76      	ldr	r3, [pc, #472]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0f0      	beq.n	800ad34 <HAL_RCC_OscConfig+0xc0>
 800ad52:	e014      	b.n	800ad7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad54:	f7fb fe14 	bl	8006980 <HAL_GetTick>
 800ad58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad5a:	e008      	b.n	800ad6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad5c:	f7fb fe10 	bl	8006980 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	2b64      	cmp	r3, #100	; 0x64
 800ad68:	d901      	bls.n	800ad6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e1f0      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad6e:	4b6c      	ldr	r3, [pc, #432]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1f0      	bne.n	800ad5c <HAL_RCC_OscConfig+0xe8>
 800ad7a:	e000      	b.n	800ad7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d063      	beq.n	800ae52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad8a:	4b65      	ldr	r3, [pc, #404]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 030c 	and.w	r3, r3, #12
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00b      	beq.n	800adae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad96:	4b62      	ldr	r3, [pc, #392]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d11c      	bne.n	800addc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ada2:	4b5f      	ldr	r3, [pc, #380]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d116      	bne.n	800addc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adae:	4b5c      	ldr	r3, [pc, #368]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <HAL_RCC_OscConfig+0x152>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e1c4      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adc6:	4b56      	ldr	r3, [pc, #344]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4952      	ldr	r1, [pc, #328]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800add6:	4313      	orrs	r3, r2
 800add8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adda:	e03a      	b.n	800ae52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d020      	beq.n	800ae26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ade4:	4b4f      	ldr	r3, [pc, #316]	; (800af24 <HAL_RCC_OscConfig+0x2b0>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adea:	f7fb fdc9 	bl	8006980 <HAL_GetTick>
 800adee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adf2:	f7fb fdc5 	bl	8006980 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e1a5      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae04:	4b46      	ldr	r3, [pc, #280]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0f0      	beq.n	800adf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae10:	4b43      	ldr	r3, [pc, #268]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	4940      	ldr	r1, [pc, #256]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	600b      	str	r3, [r1, #0]
 800ae24:	e015      	b.n	800ae52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae26:	4b3f      	ldr	r3, [pc, #252]	; (800af24 <HAL_RCC_OscConfig+0x2b0>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2c:	f7fb fda8 	bl	8006980 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae34:	f7fb fda4 	bl	8006980 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e184      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae46:	4b36      	ldr	r3, [pc, #216]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f0      	bne.n	800ae34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d030      	beq.n	800aec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae66:	4b30      	ldr	r3, [pc, #192]	; (800af28 <HAL_RCC_OscConfig+0x2b4>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae6c:	f7fb fd88 	bl	8006980 <HAL_GetTick>
 800ae70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae72:	e008      	b.n	800ae86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae74:	f7fb fd84 	bl	8006980 <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d901      	bls.n	800ae86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e164      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae86:	4b26      	ldr	r3, [pc, #152]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800ae88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0f0      	beq.n	800ae74 <HAL_RCC_OscConfig+0x200>
 800ae92:	e015      	b.n	800aec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <HAL_RCC_OscConfig+0x2b4>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae9a:	f7fb fd71 	bl	8006980 <HAL_GetTick>
 800ae9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aea0:	e008      	b.n	800aeb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aea2:	f7fb fd6d 	bl	8006980 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d901      	bls.n	800aeb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e14d      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeb4:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aeb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f0      	bne.n	800aea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80a0 	beq.w	800b00e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aece:	2300      	movs	r3, #0
 800aed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10f      	bne.n	800aefe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aede:	2300      	movs	r3, #0
 800aee0:	60bb      	str	r3, [r7, #8]
 800aee2:	4b0f      	ldr	r3, [pc, #60]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	4a0e      	ldr	r2, [pc, #56]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeec:	6413      	str	r3, [r2, #64]	; 0x40
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <HAL_RCC_OscConfig+0x2ac>)
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aef6:	60bb      	str	r3, [r7, #8]
 800aef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aefa:	2301      	movs	r3, #1
 800aefc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aefe:	4b0b      	ldr	r3, [pc, #44]	; (800af2c <HAL_RCC_OscConfig+0x2b8>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af06:	2b00      	cmp	r3, #0
 800af08:	d121      	bne.n	800af4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af0a:	4b08      	ldr	r3, [pc, #32]	; (800af2c <HAL_RCC_OscConfig+0x2b8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a07      	ldr	r2, [pc, #28]	; (800af2c <HAL_RCC_OscConfig+0x2b8>)
 800af10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af16:	f7fb fd33 	bl	8006980 <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af1c:	e011      	b.n	800af42 <HAL_RCC_OscConfig+0x2ce>
 800af1e:	bf00      	nop
 800af20:	40023800 	.word	0x40023800
 800af24:	42470000 	.word	0x42470000
 800af28:	42470e80 	.word	0x42470e80
 800af2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af30:	f7fb fd26 	bl	8006980 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d901      	bls.n	800af42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e106      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af42:	4b85      	ldr	r3, [pc, #532]	; (800b158 <HAL_RCC_OscConfig+0x4e4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0f0      	beq.n	800af30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d106      	bne.n	800af64 <HAL_RCC_OscConfig+0x2f0>
 800af56:	4b81      	ldr	r3, [pc, #516]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5a:	4a80      	ldr	r2, [pc, #512]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	6713      	str	r3, [r2, #112]	; 0x70
 800af62:	e01c      	b.n	800af9e <HAL_RCC_OscConfig+0x32a>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	2b05      	cmp	r3, #5
 800af6a:	d10c      	bne.n	800af86 <HAL_RCC_OscConfig+0x312>
 800af6c:	4b7b      	ldr	r3, [pc, #492]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af70:	4a7a      	ldr	r2, [pc, #488]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af72:	f043 0304 	orr.w	r3, r3, #4
 800af76:	6713      	str	r3, [r2, #112]	; 0x70
 800af78:	4b78      	ldr	r3, [pc, #480]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	4a77      	ldr	r2, [pc, #476]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	6713      	str	r3, [r2, #112]	; 0x70
 800af84:	e00b      	b.n	800af9e <HAL_RCC_OscConfig+0x32a>
 800af86:	4b75      	ldr	r3, [pc, #468]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	4a74      	ldr	r2, [pc, #464]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af8c:	f023 0301 	bic.w	r3, r3, #1
 800af90:	6713      	str	r3, [r2, #112]	; 0x70
 800af92:	4b72      	ldr	r3, [pc, #456]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af96:	4a71      	ldr	r2, [pc, #452]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800af98:	f023 0304 	bic.w	r3, r3, #4
 800af9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d015      	beq.n	800afd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afa6:	f7fb fceb 	bl	8006980 <HAL_GetTick>
 800afaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afac:	e00a      	b.n	800afc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afae:	f7fb fce7 	bl	8006980 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e0c5      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afc4:	4b65      	ldr	r3, [pc, #404]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0ee      	beq.n	800afae <HAL_RCC_OscConfig+0x33a>
 800afd0:	e014      	b.n	800affc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afd2:	f7fb fcd5 	bl	8006980 <HAL_GetTick>
 800afd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afd8:	e00a      	b.n	800aff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afda:	f7fb fcd1 	bl	8006980 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe8:	4293      	cmp	r3, r2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e0af      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aff0:	4b5a      	ldr	r3, [pc, #360]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800aff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1ee      	bne.n	800afda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d105      	bne.n	800b00e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b002:	4b56      	ldr	r3, [pc, #344]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	4a55      	ldr	r2, [pc, #340]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b00c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 809b 	beq.w	800b14e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b018:	4b50      	ldr	r3, [pc, #320]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	f003 030c 	and.w	r3, r3, #12
 800b020:	2b08      	cmp	r3, #8
 800b022:	d05c      	beq.n	800b0de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d141      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b02c:	4b4c      	ldr	r3, [pc, #304]	; (800b160 <HAL_RCC_OscConfig+0x4ec>)
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b032:	f7fb fca5 	bl	8006980 <HAL_GetTick>
 800b036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b038:	e008      	b.n	800b04c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b03a:	f7fb fca1 	bl	8006980 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	2b02      	cmp	r3, #2
 800b046:	d901      	bls.n	800b04c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e081      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b04c:	4b43      	ldr	r3, [pc, #268]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1f0      	bne.n	800b03a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	69da      	ldr	r2, [r3, #28]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	019b      	lsls	r3, r3, #6
 800b068:	431a      	orrs	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	3b01      	subs	r3, #1
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	431a      	orrs	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	061b      	lsls	r3, r3, #24
 800b07c:	4937      	ldr	r1, [pc, #220]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCC_OscConfig+0x4ec>)
 800b084:	2201      	movs	r2, #1
 800b086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b088:	f7fb fc7a 	bl	8006980 <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b090:	f7fb fc76 	bl	8006980 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e056      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0a2:	4b2e      	ldr	r3, [pc, #184]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0f0      	beq.n	800b090 <HAL_RCC_OscConfig+0x41c>
 800b0ae:	e04e      	b.n	800b14e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <HAL_RCC_OscConfig+0x4ec>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0b6:	f7fb fc63 	bl	8006980 <HAL_GetTick>
 800b0ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0bc:	e008      	b.n	800b0d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0be:	f7fb fc5f 	bl	8006980 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d901      	bls.n	800b0d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e03f      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0d0:	4b22      	ldr	r3, [pc, #136]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f0      	bne.n	800b0be <HAL_RCC_OscConfig+0x44a>
 800b0dc:	e037      	b.n	800b14e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e032      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b0ea:	4b1c      	ldr	r3, [pc, #112]	; (800b15c <HAL_RCC_OscConfig+0x4e8>)
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d028      	beq.n	800b14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b102:	429a      	cmp	r2, r3
 800b104:	d121      	bne.n	800b14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b110:	429a      	cmp	r2, r3
 800b112:	d11a      	bne.n	800b14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b11a:	4013      	ands	r3, r2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b120:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b122:	4293      	cmp	r3, r2
 800b124:	d111      	bne.n	800b14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	3b01      	subs	r3, #1
 800b134:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b136:	429a      	cmp	r2, r3
 800b138:	d107      	bne.n	800b14a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b146:	429a      	cmp	r2, r3
 800b148:	d001      	beq.n	800b14e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e000      	b.n	800b150 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	40007000 	.word	0x40007000
 800b15c:	40023800 	.word	0x40023800
 800b160:	42470060 	.word	0x42470060

0800b164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e0cc      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b178:	4b68      	ldr	r3, [pc, #416]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0307 	and.w	r3, r3, #7
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	429a      	cmp	r2, r3
 800b184:	d90c      	bls.n	800b1a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b186:	4b65      	ldr	r3, [pc, #404]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b18e:	4b63      	ldr	r3, [pc, #396]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0307 	and.w	r3, r3, #7
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d001      	beq.n	800b1a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0b8      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0302 	and.w	r3, r3, #2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d020      	beq.n	800b1ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1b8:	4b59      	ldr	r3, [pc, #356]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4a58      	ldr	r2, [pc, #352]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b1c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d005      	beq.n	800b1dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1d0:	4b53      	ldr	r3, [pc, #332]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	4a52      	ldr	r2, [pc, #328]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1dc:	4b50      	ldr	r3, [pc, #320]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	494d      	ldr	r1, [pc, #308]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d044      	beq.n	800b284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d107      	bne.n	800b212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b202:	4b47      	ldr	r3, [pc, #284]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d119      	bne.n	800b242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e07f      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d003      	beq.n	800b222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d107      	bne.n	800b232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b222:	4b3f      	ldr	r3, [pc, #252]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d109      	bne.n	800b242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e06f      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b232:	4b3b      	ldr	r3, [pc, #236]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e067      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b242:	4b37      	ldr	r3, [pc, #220]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f023 0203 	bic.w	r2, r3, #3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	4934      	ldr	r1, [pc, #208]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b250:	4313      	orrs	r3, r2
 800b252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b254:	f7fb fb94 	bl	8006980 <HAL_GetTick>
 800b258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b25a:	e00a      	b.n	800b272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b25c:	f7fb fb90 	bl	8006980 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	f241 3288 	movw	r2, #5000	; 0x1388
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e04f      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b272:	4b2b      	ldr	r3, [pc, #172]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 020c 	and.w	r2, r3, #12
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	429a      	cmp	r2, r3
 800b282:	d1eb      	bne.n	800b25c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b284:	4b25      	ldr	r3, [pc, #148]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0307 	and.w	r3, r3, #7
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d20c      	bcs.n	800b2ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b292:	4b22      	ldr	r3, [pc, #136]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	b2d2      	uxtb	r2, r2
 800b298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b29a:	4b20      	ldr	r3, [pc, #128]	; (800b31c <HAL_RCC_ClockConfig+0x1b8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d001      	beq.n	800b2ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e032      	b.n	800b312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d008      	beq.n	800b2ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2b8:	4b19      	ldr	r3, [pc, #100]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	4916      	ldr	r1, [pc, #88]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d009      	beq.n	800b2ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2d6:	4b12      	ldr	r3, [pc, #72]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	490e      	ldr	r1, [pc, #56]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2ea:	f000 f821 	bl	800b330 <HAL_RCC_GetSysClockFreq>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	091b      	lsrs	r3, r3, #4
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	490a      	ldr	r1, [pc, #40]	; (800b324 <HAL_RCC_ClockConfig+0x1c0>)
 800b2fc:	5ccb      	ldrb	r3, [r1, r3]
 800b2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b302:	4a09      	ldr	r2, [pc, #36]	; (800b328 <HAL_RCC_ClockConfig+0x1c4>)
 800b304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b306:	4b09      	ldr	r3, [pc, #36]	; (800b32c <HAL_RCC_ClockConfig+0x1c8>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fb faf4 	bl	80068f8 <HAL_InitTick>

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	40023c00 	.word	0x40023c00
 800b320:	40023800 	.word	0x40023800
 800b324:	08011344 	.word	0x08011344
 800b328:	20000008 	.word	0x20000008
 800b32c:	200001e4 	.word	0x200001e4

0800b330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	607b      	str	r3, [r7, #4]
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	2300      	movs	r3, #0
 800b342:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b348:	4b67      	ldr	r3, [pc, #412]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f003 030c 	and.w	r3, r3, #12
 800b350:	2b08      	cmp	r3, #8
 800b352:	d00d      	beq.n	800b370 <HAL_RCC_GetSysClockFreq+0x40>
 800b354:	2b08      	cmp	r3, #8
 800b356:	f200 80bd 	bhi.w	800b4d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <HAL_RCC_GetSysClockFreq+0x34>
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d003      	beq.n	800b36a <HAL_RCC_GetSysClockFreq+0x3a>
 800b362:	e0b7      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b364:	4b61      	ldr	r3, [pc, #388]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b366:	60bb      	str	r3, [r7, #8]
       break;
 800b368:	e0b7      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b36a:	4b61      	ldr	r3, [pc, #388]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800b36c:	60bb      	str	r3, [r7, #8]
      break;
 800b36e:	e0b4      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b370:	4b5d      	ldr	r3, [pc, #372]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b378:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b37a:	4b5b      	ldr	r3, [pc, #364]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d04d      	beq.n	800b422 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b386:	4b58      	ldr	r3, [pc, #352]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	099b      	lsrs	r3, r3, #6
 800b38c:	461a      	mov	r2, r3
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b396:	f04f 0100 	mov.w	r1, #0
 800b39a:	ea02 0800 	and.w	r8, r2, r0
 800b39e:	ea03 0901 	and.w	r9, r3, r1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	014b      	lsls	r3, r1, #5
 800b3b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b3b4:	0142      	lsls	r2, r0, #5
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	ebb0 0008 	subs.w	r0, r0, r8
 800b3be:	eb61 0109 	sbc.w	r1, r1, r9
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	018b      	lsls	r3, r1, #6
 800b3cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b3d0:	0182      	lsls	r2, r0, #6
 800b3d2:	1a12      	subs	r2, r2, r0
 800b3d4:	eb63 0301 	sbc.w	r3, r3, r1
 800b3d8:	f04f 0000 	mov.w	r0, #0
 800b3dc:	f04f 0100 	mov.w	r1, #0
 800b3e0:	00d9      	lsls	r1, r3, #3
 800b3e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3e6:	00d0      	lsls	r0, r2, #3
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	eb12 0208 	adds.w	r2, r2, r8
 800b3f0:	eb43 0309 	adc.w	r3, r3, r9
 800b3f4:	f04f 0000 	mov.w	r0, #0
 800b3f8:	f04f 0100 	mov.w	r1, #0
 800b3fc:	0259      	lsls	r1, r3, #9
 800b3fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b402:	0250      	lsls	r0, r2, #9
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4610      	mov	r0, r2
 800b40a:	4619      	mov	r1, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	461a      	mov	r2, r3
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	f7f5 fbbc 	bl	8000b90 <__aeabi_uldivmod>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4613      	mov	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e04a      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b422:	4b31      	ldr	r3, [pc, #196]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	461a      	mov	r2, r3
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b432:	f04f 0100 	mov.w	r1, #0
 800b436:	ea02 0400 	and.w	r4, r2, r0
 800b43a:	ea03 0501 	and.w	r5, r3, r1
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f04f 0200 	mov.w	r2, #0
 800b446:	f04f 0300 	mov.w	r3, #0
 800b44a:	014b      	lsls	r3, r1, #5
 800b44c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b450:	0142      	lsls	r2, r0, #5
 800b452:	4610      	mov	r0, r2
 800b454:	4619      	mov	r1, r3
 800b456:	1b00      	subs	r0, r0, r4
 800b458:	eb61 0105 	sbc.w	r1, r1, r5
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	f04f 0300 	mov.w	r3, #0
 800b464:	018b      	lsls	r3, r1, #6
 800b466:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b46a:	0182      	lsls	r2, r0, #6
 800b46c:	1a12      	subs	r2, r2, r0
 800b46e:	eb63 0301 	sbc.w	r3, r3, r1
 800b472:	f04f 0000 	mov.w	r0, #0
 800b476:	f04f 0100 	mov.w	r1, #0
 800b47a:	00d9      	lsls	r1, r3, #3
 800b47c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b480:	00d0      	lsls	r0, r2, #3
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	1912      	adds	r2, r2, r4
 800b488:	eb45 0303 	adc.w	r3, r5, r3
 800b48c:	f04f 0000 	mov.w	r0, #0
 800b490:	f04f 0100 	mov.w	r1, #0
 800b494:	0299      	lsls	r1, r3, #10
 800b496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b49a:	0290      	lsls	r0, r2, #10
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f04f 0300 	mov.w	r3, #0
 800b4ac:	f7f5 fb70 	bl	8000b90 <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b4b8:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	0c1b      	lsrs	r3, r3, #16
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d0:	60bb      	str	r3, [r7, #8]
      break;
 800b4d2:	e002      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b4d6:	60bb      	str	r3, [r7, #8]
      break;
 800b4d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4da:	68bb      	ldr	r3, [r7, #8]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4e6:	bf00      	nop
 800b4e8:	40023800 	.word	0x40023800
 800b4ec:	00f42400 	.word	0x00f42400
 800b4f0:	007a1200 	.word	0x007a1200

0800b4f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4f8:	4b03      	ldr	r3, [pc, #12]	; (800b508 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000008 	.word	0x20000008

0800b50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b510:	f7ff fff0 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800b514:	4602      	mov	r2, r0
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	0a9b      	lsrs	r3, r3, #10
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	4903      	ldr	r1, [pc, #12]	; (800b530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b522:	5ccb      	ldrb	r3, [r1, r3]
 800b524:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b528:	4618      	mov	r0, r3
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	40023800 	.word	0x40023800
 800b530:	08011354 	.word	0x08011354

0800b534 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d105      	bne.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d035      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b55c:	4b62      	ldr	r3, [pc, #392]	; (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b562:	f7fb fa0d 	bl	8006980 <HAL_GetTick>
 800b566:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b568:	e008      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b56a:	f7fb fa09 	bl	8006980 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b02      	cmp	r3, #2
 800b576:	d901      	bls.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e0b0      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b57c:	4b5b      	ldr	r3, [pc, #364]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f0      	bne.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	019a      	lsls	r2, r3, #6
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	071b      	lsls	r3, r3, #28
 800b594:	4955      	ldr	r1, [pc, #340]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b596:	4313      	orrs	r3, r2
 800b598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b59c:	4b52      	ldr	r3, [pc, #328]	; (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b5a2:	f7fb f9ed 	bl	8006980 <HAL_GetTick>
 800b5a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5a8:	e008      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b5aa:	f7fb f9e9 	bl	8006980 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e090      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5bc:	4b4b      	ldr	r3, [pc, #300]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0f0      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 8083 	beq.w	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	4b44      	ldr	r3, [pc, #272]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	4a43      	ldr	r2, [pc, #268]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b5e6:	4b41      	ldr	r3, [pc, #260]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b5f2:	4b3f      	ldr	r3, [pc, #252]	; (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a3e      	ldr	r2, [pc, #248]	; (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b5f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b5fe:	f7fb f9bf 	bl	8006980 <HAL_GetTick>
 800b602:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b604:	e008      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b606:	f7fb f9bb 	bl	8006980 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d901      	bls.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e062      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b618:	4b35      	ldr	r3, [pc, #212]	; (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0f0      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b624:	4b31      	ldr	r3, [pc, #196]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b62c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d02f      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d028      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b642:	4b2a      	ldr	r3, [pc, #168]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b64a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b64c:	4b29      	ldr	r3, [pc, #164]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b652:	4b28      	ldr	r3, [pc, #160]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b658:	4a24      	ldr	r2, [pc, #144]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b65e:	4b23      	ldr	r3, [pc, #140]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b01      	cmp	r3, #1
 800b668:	d114      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b66a:	f7fb f989 	bl	8006980 <HAL_GetTick>
 800b66e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b670:	e00a      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b672:	f7fb f985 	bl	8006980 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b680:	4293      	cmp	r3, r2
 800b682:	d901      	bls.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e02a      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b688:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0ee      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b69c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6a0:	d10d      	bne.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b6a2:	4b12      	ldr	r3, [pc, #72]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6b6:	490d      	ldr	r1, [pc, #52]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	608b      	str	r3, [r1, #8]
 800b6bc:	e005      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	4a0a      	ldr	r2, [pc, #40]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b6c8:	6093      	str	r3, [r2, #8]
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6d6:	4905      	ldr	r1, [pc, #20]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	42470068 	.word	0x42470068
 800b6ec:	40023800 	.word	0x40023800
 800b6f0:	40007000 	.word	0x40007000
 800b6f4:	42470e40 	.word	0x42470e40

0800b6f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d13e      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b716:	4b23      	ldr	r3, [pc, #140]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d12f      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b72c:	4b1e      	ldr	r3, [pc, #120]	; (800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b72e:	617b      	str	r3, [r7, #20]
          break;
 800b730:	e02f      	b.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b732:	4b1c      	ldr	r3, [pc, #112]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b73a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b73e:	d108      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b740:	4b18      	ldr	r3, [pc, #96]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b748:	4a18      	ldr	r2, [pc, #96]	; (800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	e007      	b.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b752:	4b14      	ldr	r3, [pc, #80]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b75a:	4a15      	ldr	r2, [pc, #84]	; (800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b760:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b762:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b768:	099b      	lsrs	r3, r3, #6
 800b76a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	fb02 f303 	mul.w	r3, r2, r3
 800b774:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b776:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b77c:	0f1b      	lsrs	r3, r3, #28
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	617b      	str	r3, [r7, #20]
          break;
 800b78a:	e002      	b.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
          break;
 800b790:	bf00      	nop
        }
      }
      break;
 800b792:	bf00      	nop
    }
  }
  return frequency;
 800b794:	697b      	ldr	r3, [r7, #20]
}
 800b796:	4618      	mov	r0, r3
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40023800 	.word	0x40023800
 800b7a8:	00bb8000 	.word	0x00bb8000
 800b7ac:	007a1200 	.word	0x007a1200
 800b7b0:	00f42400 	.word	0x00f42400

0800b7b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e01c      	b.n	800b800 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	795b      	ldrb	r3, [r3, #5]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7f6 fd66 	bl	80022a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0204 	orr.w	r2, r2, #4
 800b7f0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	791b      	ldrb	r3, [r3, #4]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d101      	bne.n	800b822 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b81e:	2302      	movs	r3, #2
 800b820:	e03d      	b.n	800b89e <HAL_RNG_GenerateRandomNumber+0x96>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	795b      	ldrb	r3, [r3, #5]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d12c      	bne.n	800b88c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2202      	movs	r2, #2
 800b836:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b838:	f7fb f8a2 	bl	8006980 <HAL_GetTick>
 800b83c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b83e:	e011      	b.n	800b864 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b840:	f7fb f89e 	bl	8006980 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d90a      	bls.n	800b864 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e01c      	b.n	800b89e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d1e6      	bne.n	800b840 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	715a      	strb	r2, [r3, #5]
 800b88a:	e004      	b.n	800b896 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2204      	movs	r2, #4
 800b890:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	711a      	strb	r2, [r3, #4]

  return status;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ffa7 	bl	800b808 <HAL_RNG_GenerateRandomNumber>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d102      	bne.n	800b8c6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	e000      	b.n	800b8c8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800b8c6:	2300      	movs	r3, #0
  }
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e07b      	b.n	800b9da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d108      	bne.n	800b8fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8f2:	d009      	beq.n	800b908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	61da      	str	r2, [r3, #28]
 800b8fa:	e005      	b.n	800b908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d106      	bne.n	800b928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7f6 fce2 	bl	80022ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b93e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b950:	431a      	orrs	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	431a      	orrs	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	431a      	orrs	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	69db      	ldr	r3, [r3, #28]
 800b97e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a1b      	ldr	r3, [r3, #32]
 800b988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b98c:	ea42 0103 	orr.w	r1, r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	0c1b      	lsrs	r3, r3, #16
 800b9a6:	f003 0104 	and.w	r1, r3, #4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	f003 0210 	and.w	r2, r3, #16
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69da      	ldr	r2, [r3, #28]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b088      	sub	sp, #32
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	603b      	str	r3, [r7, #0]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_SPI_Transmit+0x22>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e126      	b.n	800bc52 <HAL_SPI_Transmit+0x270>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba0c:	f7fa ffb8 	bl	8006980 <HAL_GetTick>
 800ba10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d002      	beq.n	800ba28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
 800ba24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba26:	e10b      	b.n	800bc40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <HAL_SPI_Transmit+0x52>
 800ba2e:	88fb      	ldrh	r3, [r7, #6]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba38:	e102      	b.n	800bc40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2203      	movs	r2, #3
 800ba3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	88fa      	ldrh	r2, [r7, #6]
 800ba52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	88fa      	ldrh	r2, [r7, #6]
 800ba58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba80:	d10f      	bne.n	800baa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baac:	2b40      	cmp	r3, #64	; 0x40
 800baae:	d007      	beq.n	800bac0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800babe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bac8:	d14b      	bne.n	800bb62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d002      	beq.n	800bad8 <HAL_SPI_Transmit+0xf6>
 800bad2:	8afb      	ldrh	r3, [r7, #22]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d13e      	bne.n	800bb56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800badc:	881a      	ldrh	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	1c9a      	adds	r2, r3, #2
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bafc:	e02b      	b.n	800bb56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d112      	bne.n	800bb32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb10:	881a      	ldrh	r2, [r3, #0]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1c:	1c9a      	adds	r2, r3, #2
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb30:	e011      	b.n	800bb56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb32:	f7fa ff25 	bl	8006980 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d803      	bhi.n	800bb4a <HAL_SPI_Transmit+0x168>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb48:	d102      	bne.n	800bb50 <HAL_SPI_Transmit+0x16e>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d102      	bne.n	800bb56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb54:	e074      	b.n	800bc40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1ce      	bne.n	800bafe <HAL_SPI_Transmit+0x11c>
 800bb60:	e04c      	b.n	800bbfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <HAL_SPI_Transmit+0x18e>
 800bb6a:	8afb      	ldrh	r3, [r7, #22]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d140      	bne.n	800bbf2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	330c      	adds	r3, #12
 800bb7a:	7812      	ldrb	r2, [r2, #0]
 800bb7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bb96:	e02c      	b.n	800bbf2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d113      	bne.n	800bbce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	330c      	adds	r3, #12
 800bbb0:	7812      	ldrb	r2, [r2, #0]
 800bbb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	86da      	strh	r2, [r3, #54]	; 0x36
 800bbcc:	e011      	b.n	800bbf2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbce:	f7fa fed7 	bl	8006980 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d803      	bhi.n	800bbe6 <HAL_SPI_Transmit+0x204>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbe4:	d102      	bne.n	800bbec <HAL_SPI_Transmit+0x20a>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bbf0:	e026      	b.n	800bc40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1cd      	bne.n	800bb98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbfc:	69ba      	ldr	r2, [r7, #24]
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 fbcb 	bl	800c39c <SPI_EndRxTxTransaction>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	613b      	str	r3, [r7, #16]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	613b      	str	r3, [r7, #16]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d002      	beq.n	800bc3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	77fb      	strb	r3, [r7, #31]
 800bc3c:	e000      	b.n	800bc40 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bc3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc50:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3720      	adds	r7, #32
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b088      	sub	sp, #32
 800bc5e:	af02      	add	r7, sp, #8
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	603b      	str	r3, [r7, #0]
 800bc66:	4613      	mov	r3, r2
 800bc68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc76:	d112      	bne.n	800bc9e <HAL_SPI_Receive+0x44>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10e      	bne.n	800bc9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2204      	movs	r2, #4
 800bc84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc88:	88fa      	ldrh	r2, [r7, #6]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 f8f1 	bl	800be7c <HAL_SPI_TransmitReceive>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	e0ea      	b.n	800be74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d101      	bne.n	800bcac <HAL_SPI_Receive+0x52>
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e0e3      	b.n	800be74 <HAL_SPI_Receive+0x21a>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcb4:	f7fa fe64 	bl	8006980 <HAL_GetTick>
 800bcb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d002      	beq.n	800bccc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcca:	e0ca      	b.n	800be62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d002      	beq.n	800bcd8 <HAL_SPI_Receive+0x7e>
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d102      	bne.n	800bcde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcdc:	e0c1      	b.n	800be62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2204      	movs	r2, #4
 800bce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	88fa      	ldrh	r2, [r7, #6]
 800bcf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	88fa      	ldrh	r2, [r7, #6]
 800bcfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd24:	d10f      	bne.n	800bd46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd50:	2b40      	cmp	r3, #64	; 0x40
 800bd52:	d007      	beq.n	800bd64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d162      	bne.n	800be32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd6c:	e02e      	b.n	800bdcc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d115      	bne.n	800bda8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f103 020c 	add.w	r2, r3, #12
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bda6:	e011      	b.n	800bdcc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bda8:	f7fa fdea 	bl	8006980 <HAL_GetTick>
 800bdac:	4602      	mov	r2, r0
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d803      	bhi.n	800bdc0 <HAL_SPI_Receive+0x166>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdbe:	d102      	bne.n	800bdc6 <HAL_SPI_Receive+0x16c>
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bdca:	e04a      	b.n	800be62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1cb      	bne.n	800bd6e <HAL_SPI_Receive+0x114>
 800bdd6:	e031      	b.n	800be3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d113      	bne.n	800be0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf0:	b292      	uxth	r2, r2
 800bdf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be02:	b29b      	uxth	r3, r3
 800be04:	3b01      	subs	r3, #1
 800be06:	b29a      	uxth	r2, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be0c:	e011      	b.n	800be32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be0e:	f7fa fdb7 	bl	8006980 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d803      	bhi.n	800be26 <HAL_SPI_Receive+0x1cc>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be24:	d102      	bne.n	800be2c <HAL_SPI_Receive+0x1d2>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d102      	bne.n	800be32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800be2c:	2303      	movs	r3, #3
 800be2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800be30:	e017      	b.n	800be62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be36:	b29b      	uxth	r3, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1cd      	bne.n	800bdd8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 fa45 	bl	800c2d0 <SPI_EndRxTransaction>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2220      	movs	r2, #32
 800be50:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	2b00      	cmp	r3, #0
 800be58:	d002      	beq.n	800be60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]
 800be5e:	e000      	b.n	800be62 <HAL_SPI_Receive+0x208>
  }

error :
 800be60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08c      	sub	sp, #48	; 0x30
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be8a:	2301      	movs	r3, #1
 800be8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d101      	bne.n	800bea2 <HAL_SPI_TransmitReceive+0x26>
 800be9e:	2302      	movs	r3, #2
 800bea0:	e18a      	b.n	800c1b8 <HAL_SPI_TransmitReceive+0x33c>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beaa:	f7fa fd69 	bl	8006980 <HAL_GetTick>
 800beae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800beb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bec0:	887b      	ldrh	r3, [r7, #2]
 800bec2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d00f      	beq.n	800beec <HAL_SPI_TransmitReceive+0x70>
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bed2:	d107      	bne.n	800bee4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <HAL_SPI_TransmitReceive+0x68>
 800bedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d003      	beq.n	800beec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bee4:	2302      	movs	r3, #2
 800bee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800beea:	e15b      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <HAL_SPI_TransmitReceive+0x82>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <HAL_SPI_TransmitReceive+0x82>
 800bef8:	887b      	ldrh	r3, [r7, #2]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d103      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf04:	e14e      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d003      	beq.n	800bf1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2205      	movs	r2, #5
 800bf16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	887a      	ldrh	r2, [r7, #2]
 800bf2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	887a      	ldrh	r2, [r7, #2]
 800bf30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	887a      	ldrh	r2, [r7, #2]
 800bf3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	887a      	ldrh	r2, [r7, #2]
 800bf42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5a:	2b40      	cmp	r3, #64	; 0x40
 800bf5c:	d007      	beq.n	800bf6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf76:	d178      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <HAL_SPI_TransmitReceive+0x10a>
 800bf80:	8b7b      	ldrh	r3, [r7, #26]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d166      	bne.n	800c054 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	881a      	ldrh	r2, [r3, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	1c9a      	adds	r2, r3, #2
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfaa:	e053      	b.n	800c054 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d11b      	bne.n	800bff2 <HAL_SPI_TransmitReceive+0x176>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d016      	beq.n	800bff2 <HAL_SPI_TransmitReceive+0x176>
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d113      	bne.n	800bff2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfce:	881a      	ldrh	r2, [r3, #0]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfda:	1c9a      	adds	r2, r3, #2
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d119      	bne.n	800c034 <HAL_SPI_TransmitReceive+0x1b8>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d014      	beq.n	800c034 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c014:	b292      	uxth	r2, r2
 800c016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01c:	1c9a      	adds	r2, r3, #2
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c026:	b29b      	uxth	r3, r3
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c030:	2301      	movs	r3, #1
 800c032:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c034:	f7fa fca4 	bl	8006980 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c040:	429a      	cmp	r2, r3
 800c042:	d807      	bhi.n	800c054 <HAL_SPI_TransmitReceive+0x1d8>
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c04a:	d003      	beq.n	800c054 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c052:	e0a7      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c058:	b29b      	uxth	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1a6      	bne.n	800bfac <HAL_SPI_TransmitReceive+0x130>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c062:	b29b      	uxth	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1a1      	bne.n	800bfac <HAL_SPI_TransmitReceive+0x130>
 800c068:	e07c      	b.n	800c164 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <HAL_SPI_TransmitReceive+0x1fc>
 800c072:	8b7b      	ldrh	r3, [r7, #26]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d16b      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	330c      	adds	r3, #12
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c094:	b29b      	uxth	r3, r3
 800c096:	3b01      	subs	r3, #1
 800c098:	b29a      	uxth	r2, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c09e:	e057      	b.n	800c150 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f003 0302 	and.w	r3, r3, #2
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d11c      	bne.n	800c0e8 <HAL_SPI_TransmitReceive+0x26c>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d017      	beq.n	800c0e8 <HAL_SPI_TransmitReceive+0x26c>
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d114      	bne.n	800c0e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	330c      	adds	r3, #12
 800c0c8:	7812      	ldrb	r2, [r2, #0]
 800c0ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d119      	bne.n	800c12a <HAL_SPI_TransmitReceive+0x2ae>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d014      	beq.n	800c12a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68da      	ldr	r2, [r3, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	1c5a      	adds	r2, r3, #1
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	3b01      	subs	r3, #1
 800c120:	b29a      	uxth	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c126:	2301      	movs	r3, #1
 800c128:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c12a:	f7fa fc29 	bl	8006980 <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c136:	429a      	cmp	r2, r3
 800c138:	d803      	bhi.n	800c142 <HAL_SPI_TransmitReceive+0x2c6>
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c140:	d102      	bne.n	800c148 <HAL_SPI_TransmitReceive+0x2cc>
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c148:	2303      	movs	r3, #3
 800c14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c14e:	e029      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c154:	b29b      	uxth	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1a2      	bne.n	800c0a0 <HAL_SPI_TransmitReceive+0x224>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d19d      	bne.n	800c0a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 f917 	bl	800c39c <SPI_EndRxTxTransaction>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d006      	beq.n	800c182 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c180:	e010      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	e000      	b.n	800c1a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c1a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c1b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3730      	adds	r7, #48	; 0x30
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	603b      	str	r3, [r7, #0]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c1d0:	f7fa fbd6 	bl	8006980 <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	1a9b      	subs	r3, r3, r2
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	4413      	add	r3, r2
 800c1de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1e0:	f7fa fbce 	bl	8006980 <HAL_GetTick>
 800c1e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1e6:	4b39      	ldr	r3, [pc, #228]	; (800c2cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	015b      	lsls	r3, r3, #5
 800c1ec:	0d1b      	lsrs	r3, r3, #20
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	fb02 f303 	mul.w	r3, r2, r3
 800c1f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1f6:	e054      	b.n	800c2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1fe:	d050      	beq.n	800c2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c200:	f7fa fbbe 	bl	8006980 <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d902      	bls.n	800c216 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d13d      	bne.n	800c292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c22e:	d111      	bne.n	800c254 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c238:	d004      	beq.n	800c244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c242:	d107      	bne.n	800c254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c25c:	d10f      	bne.n	800c27e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c27c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c28e:	2303      	movs	r3, #3
 800c290:	e017      	b.n	800c2c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	689a      	ldr	r2, [r3, #8]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	bf0c      	ite	eq
 800c2b2:	2301      	moveq	r3, #1
 800c2b4:	2300      	movne	r3, #0
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	79fb      	ldrb	r3, [r7, #7]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d19b      	bne.n	800c1f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000008 	.word	0x20000008

0800c2d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2e4:	d111      	bne.n	800c30a <SPI_EndRxTransaction+0x3a>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2ee:	d004      	beq.n	800c2fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2f8:	d107      	bne.n	800c30a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c308:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c312:	d12a      	bne.n	800c36a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c31c:	d012      	beq.n	800c344 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2200      	movs	r2, #0
 800c326:	2180      	movs	r1, #128	; 0x80
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f7ff ff49 	bl	800c1c0 <SPI_WaitFlagStateUntilTimeout>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d02d      	beq.n	800c390 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c338:	f043 0220 	orr.w	r2, r3, #32
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e026      	b.n	800c392 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2200      	movs	r2, #0
 800c34c:	2101      	movs	r1, #1
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7ff ff36 	bl	800c1c0 <SPI_WaitFlagStateUntilTimeout>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d01a      	beq.n	800c390 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35e:	f043 0220 	orr.w	r2, r3, #32
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	e013      	b.n	800c392 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2200      	movs	r2, #0
 800c372:	2101      	movs	r1, #1
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff ff23 	bl	800c1c0 <SPI_WaitFlagStateUntilTimeout>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c384:	f043 0220 	orr.w	r2, r3, #32
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e000      	b.n	800c392 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af02      	add	r7, sp, #8
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3a8:	4b1b      	ldr	r3, [pc, #108]	; (800c418 <SPI_EndRxTxTransaction+0x7c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a1b      	ldr	r2, [pc, #108]	; (800c41c <SPI_EndRxTxTransaction+0x80>)
 800c3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b2:	0d5b      	lsrs	r3, r3, #21
 800c3b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3b8:	fb02 f303 	mul.w	r3, r2, r3
 800c3bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3c6:	d112      	bne.n	800c3ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	2180      	movs	r1, #128	; 0x80
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f7ff fef4 	bl	800c1c0 <SPI_WaitFlagStateUntilTimeout>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d016      	beq.n	800c40c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	f043 0220 	orr.w	r2, r3, #32
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e00f      	b.n	800c40e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c404:	2b80      	cmp	r3, #128	; 0x80
 800c406:	d0f2      	beq.n	800c3ee <SPI_EndRxTxTransaction+0x52>
 800c408:	e000      	b.n	800c40c <SPI_EndRxTxTransaction+0x70>
        break;
 800c40a:	bf00      	nop
  }

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20000008 	.word	0x20000008
 800c41c:	165e9f81 	.word	0x165e9f81

0800c420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e041      	b.n	800c4b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7f6 f836 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2202      	movs	r2, #2
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3304      	adds	r3, #4
 800c45c:	4619      	mov	r1, r3
 800c45e:	4610      	mov	r0, r2
 800c460:	f000 fd68 	bl	800cf34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d001      	beq.n	800c4d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e04e      	b.n	800c576 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a23      	ldr	r2, [pc, #140]	; (800c584 <HAL_TIM_Base_Start_IT+0xc4>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d022      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c502:	d01d      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a1f      	ldr	r2, [pc, #124]	; (800c588 <HAL_TIM_Base_Start_IT+0xc8>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d018      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a1e      	ldr	r2, [pc, #120]	; (800c58c <HAL_TIM_Base_Start_IT+0xcc>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d013      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a1c      	ldr	r2, [pc, #112]	; (800c590 <HAL_TIM_Base_Start_IT+0xd0>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00e      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a1b      	ldr	r2, [pc, #108]	; (800c594 <HAL_TIM_Base_Start_IT+0xd4>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d009      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a19      	ldr	r2, [pc, #100]	; (800c598 <HAL_TIM_Base_Start_IT+0xd8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d004      	beq.n	800c540 <HAL_TIM_Base_Start_IT+0x80>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a18      	ldr	r2, [pc, #96]	; (800c59c <HAL_TIM_Base_Start_IT+0xdc>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d111      	bne.n	800c564 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b06      	cmp	r3, #6
 800c550:	d010      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f042 0201 	orr.w	r2, r2, #1
 800c560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c562:	e007      	b.n	800c574 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f042 0201 	orr.w	r2, r2, #1
 800c572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	40010000 	.word	0x40010000
 800c588:	40000400 	.word	0x40000400
 800c58c:	40000800 	.word	0x40000800
 800c590:	40000c00 	.word	0x40000c00
 800c594:	40010400 	.word	0x40010400
 800c598:	40014000 	.word	0x40014000
 800c59c:	40001800 	.word	0x40001800

0800c5a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <HAL_TIM_OC_Start_IT+0x24>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	bf14      	ite	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	2300      	moveq	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	e022      	b.n	800c60a <HAL_TIM_OC_Start_IT+0x6a>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d109      	bne.n	800c5de <HAL_TIM_OC_Start_IT+0x3e>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	bf14      	ite	ne
 800c5d6:	2301      	movne	r3, #1
 800c5d8:	2300      	moveq	r3, #0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	e015      	b.n	800c60a <HAL_TIM_OC_Start_IT+0x6a>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d109      	bne.n	800c5f8 <HAL_TIM_OC_Start_IT+0x58>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	bf14      	ite	ne
 800c5f0:	2301      	movne	r3, #1
 800c5f2:	2300      	moveq	r3, #0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	e008      	b.n	800c60a <HAL_TIM_OC_Start_IT+0x6a>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b01      	cmp	r3, #1
 800c602:	bf14      	ite	ne
 800c604:	2301      	movne	r3, #1
 800c606:	2300      	moveq	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e0c2      	b.n	800c798 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d104      	bne.n	800c622 <HAL_TIM_OC_Start_IT+0x82>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2202      	movs	r2, #2
 800c61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c620:	e013      	b.n	800c64a <HAL_TIM_OC_Start_IT+0xaa>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b04      	cmp	r3, #4
 800c626:	d104      	bne.n	800c632 <HAL_TIM_OC_Start_IT+0x92>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c630:	e00b      	b.n	800c64a <HAL_TIM_OC_Start_IT+0xaa>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b08      	cmp	r3, #8
 800c636:	d104      	bne.n	800c642 <HAL_TIM_OC_Start_IT+0xa2>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c640:	e003      	b.n	800c64a <HAL_TIM_OC_Start_IT+0xaa>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2202      	movs	r2, #2
 800c646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b0c      	cmp	r3, #12
 800c64e:	d841      	bhi.n	800c6d4 <HAL_TIM_OC_Start_IT+0x134>
 800c650:	a201      	add	r2, pc, #4	; (adr r2, 800c658 <HAL_TIM_OC_Start_IT+0xb8>)
 800c652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c656:	bf00      	nop
 800c658:	0800c68d 	.word	0x0800c68d
 800c65c:	0800c6d5 	.word	0x0800c6d5
 800c660:	0800c6d5 	.word	0x0800c6d5
 800c664:	0800c6d5 	.word	0x0800c6d5
 800c668:	0800c69f 	.word	0x0800c69f
 800c66c:	0800c6d5 	.word	0x0800c6d5
 800c670:	0800c6d5 	.word	0x0800c6d5
 800c674:	0800c6d5 	.word	0x0800c6d5
 800c678:	0800c6b1 	.word	0x0800c6b1
 800c67c:	0800c6d5 	.word	0x0800c6d5
 800c680:	0800c6d5 	.word	0x0800c6d5
 800c684:	0800c6d5 	.word	0x0800c6d5
 800c688:	0800c6c3 	.word	0x0800c6c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0202 	orr.w	r2, r2, #2
 800c69a:	60da      	str	r2, [r3, #12]
      break;
 800c69c:	e01b      	b.n	800c6d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68da      	ldr	r2, [r3, #12]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f042 0204 	orr.w	r2, r2, #4
 800c6ac:	60da      	str	r2, [r3, #12]
      break;
 800c6ae:	e012      	b.n	800c6d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68da      	ldr	r2, [r3, #12]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f042 0208 	orr.w	r2, r2, #8
 800c6be:	60da      	str	r2, [r3, #12]
      break;
 800c6c0:	e009      	b.n	800c6d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68da      	ldr	r2, [r3, #12]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f042 0210 	orr.w	r2, r2, #16
 800c6d0:	60da      	str	r2, [r3, #12]
      break;
 800c6d2:	e000      	b.n	800c6d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800c6d4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 ff12 	bl	800d508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a2d      	ldr	r2, [pc, #180]	; (800c7a0 <HAL_TIM_OC_Start_IT+0x200>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d004      	beq.n	800c6f8 <HAL_TIM_OC_Start_IT+0x158>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a2c      	ldr	r2, [pc, #176]	; (800c7a4 <HAL_TIM_OC_Start_IT+0x204>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d101      	bne.n	800c6fc <HAL_TIM_OC_Start_IT+0x15c>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e000      	b.n	800c6fe <HAL_TIM_OC_Start_IT+0x15e>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a22      	ldr	r2, [pc, #136]	; (800c7a0 <HAL_TIM_OC_Start_IT+0x200>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d022      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c724:	d01d      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a1f      	ldr	r2, [pc, #124]	; (800c7a8 <HAL_TIM_OC_Start_IT+0x208>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d018      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a1d      	ldr	r2, [pc, #116]	; (800c7ac <HAL_TIM_OC_Start_IT+0x20c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d013      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a1c      	ldr	r2, [pc, #112]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x210>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d00e      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a16      	ldr	r2, [pc, #88]	; (800c7a4 <HAL_TIM_OC_Start_IT+0x204>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d009      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a18      	ldr	r2, [pc, #96]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x214>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d004      	beq.n	800c762 <HAL_TIM_OC_Start_IT+0x1c2>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a16      	ldr	r2, [pc, #88]	; (800c7b8 <HAL_TIM_OC_Start_IT+0x218>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d111      	bne.n	800c786 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f003 0307 	and.w	r3, r3, #7
 800c76c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2b06      	cmp	r3, #6
 800c772:	d010      	beq.n	800c796 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f042 0201 	orr.w	r2, r2, #1
 800c782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c784:	e007      	b.n	800c796 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f042 0201 	orr.w	r2, r2, #1
 800c794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	40010000 	.word	0x40010000
 800c7a4:	40010400 	.word	0x40010400
 800c7a8:	40000400 	.word	0x40000400
 800c7ac:	40000800 	.word	0x40000800
 800c7b0:	40000c00 	.word	0x40000c00
 800c7b4:	40014000 	.word	0x40014000
 800c7b8:	40001800 	.word	0x40001800

0800c7bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e041      	b.n	800c852 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f839 	bl	800c85a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f000 fb9a 	bl	800cf34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	e097      	b.n	800c9b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d106      	bne.n	800c89c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7f5 fdc6 	bl	8002428 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2202      	movs	r2, #2
 800c8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6812      	ldr	r2, [r2, #0]
 800c8ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8b2:	f023 0307 	bic.w	r3, r3, #7
 800c8b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f000 fb36 	bl	800cf34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8f0:	f023 0303 	bic.w	r3, r3, #3
 800c8f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	689a      	ldr	r2, [r3, #8]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	021b      	lsls	r3, r3, #8
 800c900:	4313      	orrs	r3, r2
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c90e:	f023 030c 	bic.w	r3, r3, #12
 800c912:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c91a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c91e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	69db      	ldr	r3, [r3, #28]
 800c928:	021b      	lsls	r3, r3, #8
 800c92a:	4313      	orrs	r3, r2
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	4313      	orrs	r3, r2
 800c930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	011a      	lsls	r2, r3, #4
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	031b      	lsls	r3, r3, #12
 800c93e:	4313      	orrs	r3, r2
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	4313      	orrs	r3, r2
 800c944:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c94c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c954:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	4313      	orrs	r3, r2
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	4313      	orrs	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	f003 0302 	and.w	r3, r3, #2
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d122      	bne.n	800ca16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d11b      	bne.n	800ca16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f06f 0202 	mvn.w	r2, #2
 800c9e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	f003 0303 	and.w	r3, r3, #3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fa7b 	bl	800cef8 <HAL_TIM_IC_CaptureCallback>
 800ca02:	e005      	b.n	800ca10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa6d 	bl	800cee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fa7e 	bl	800cf0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	f003 0304 	and.w	r3, r3, #4
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	d122      	bne.n	800ca6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f003 0304 	and.w	r3, r3, #4
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d11b      	bne.n	800ca6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f06f 0204 	mvn.w	r2, #4
 800ca3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fa51 	bl	800cef8 <HAL_TIM_IC_CaptureCallback>
 800ca56:	e005      	b.n	800ca64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fa43 	bl	800cee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fa54 	bl	800cf0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	f003 0308 	and.w	r3, r3, #8
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d122      	bne.n	800cabe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f003 0308 	and.w	r3, r3, #8
 800ca82:	2b08      	cmp	r3, #8
 800ca84:	d11b      	bne.n	800cabe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f06f 0208 	mvn.w	r2, #8
 800ca8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2204      	movs	r2, #4
 800ca94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	69db      	ldr	r3, [r3, #28]
 800ca9c:	f003 0303 	and.w	r3, r3, #3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa27 	bl	800cef8 <HAL_TIM_IC_CaptureCallback>
 800caaa:	e005      	b.n	800cab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fa19 	bl	800cee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa2a 	bl	800cf0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b10      	cmp	r3, #16
 800caca:	d122      	bne.n	800cb12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f003 0310 	and.w	r3, r3, #16
 800cad6:	2b10      	cmp	r3, #16
 800cad8:	d11b      	bne.n	800cb12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f06f 0210 	mvn.w	r2, #16
 800cae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2208      	movs	r2, #8
 800cae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d003      	beq.n	800cb00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f9fd 	bl	800cef8 <HAL_TIM_IC_CaptureCallback>
 800cafe:	e005      	b.n	800cb0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f9ef 	bl	800cee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fa00 	bl	800cf0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d10e      	bne.n	800cb3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d107      	bne.n	800cb3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f06f 0201 	mvn.w	r2, #1
 800cb36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f9c9 	bl	800ced0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb48:	2b80      	cmp	r3, #128	; 0x80
 800cb4a:	d10e      	bne.n	800cb6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb56:	2b80      	cmp	r3, #128	; 0x80
 800cb58:	d107      	bne.n	800cb6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fd7b 	bl	800d660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb74:	2b40      	cmp	r3, #64	; 0x40
 800cb76:	d10e      	bne.n	800cb96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb82:	2b40      	cmp	r3, #64	; 0x40
 800cb84:	d107      	bne.n	800cb96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f9c5 	bl	800cf20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b20      	cmp	r3, #32
 800cba2:	d10e      	bne.n	800cbc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b20      	cmp	r3, #32
 800cbb0:	d107      	bne.n	800cbc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f06f 0220 	mvn.w	r2, #32
 800cbba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fd45 	bl	800d64c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d101      	bne.n	800cbe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e0ac      	b.n	800cd40 <HAL_TIM_PWM_ConfigChannel+0x174>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b0c      	cmp	r3, #12
 800cbf2:	f200 809f 	bhi.w	800cd34 <HAL_TIM_PWM_ConfigChannel+0x168>
 800cbf6:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfc:	0800cc31 	.word	0x0800cc31
 800cc00:	0800cd35 	.word	0x0800cd35
 800cc04:	0800cd35 	.word	0x0800cd35
 800cc08:	0800cd35 	.word	0x0800cd35
 800cc0c:	0800cc71 	.word	0x0800cc71
 800cc10:	0800cd35 	.word	0x0800cd35
 800cc14:	0800cd35 	.word	0x0800cd35
 800cc18:	0800cd35 	.word	0x0800cd35
 800cc1c:	0800ccb3 	.word	0x0800ccb3
 800cc20:	0800cd35 	.word	0x0800cd35
 800cc24:	0800cd35 	.word	0x0800cd35
 800cc28:	0800cd35 	.word	0x0800cd35
 800cc2c:	0800ccf3 	.word	0x0800ccf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68b9      	ldr	r1, [r7, #8]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 fa1c 	bl	800d074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	699a      	ldr	r2, [r3, #24]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0208 	orr.w	r2, r2, #8
 800cc4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f022 0204 	bic.w	r2, r2, #4
 800cc5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6999      	ldr	r1, [r3, #24]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	691a      	ldr	r2, [r3, #16]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	430a      	orrs	r2, r1
 800cc6c:	619a      	str	r2, [r3, #24]
      break;
 800cc6e:	e062      	b.n	800cd36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68b9      	ldr	r1, [r7, #8]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 fa6c 	bl	800d154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	699a      	ldr	r2, [r3, #24]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6999      	ldr	r1, [r3, #24]
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	021a      	lsls	r2, r3, #8
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	619a      	str	r2, [r3, #24]
      break;
 800ccb0:	e041      	b.n	800cd36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f000 fac1 	bl	800d240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	69da      	ldr	r2, [r3, #28]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f042 0208 	orr.w	r2, r2, #8
 800cccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f022 0204 	bic.w	r2, r2, #4
 800ccdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69d9      	ldr	r1, [r3, #28]
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	691a      	ldr	r2, [r3, #16]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	61da      	str	r2, [r3, #28]
      break;
 800ccf0:	e021      	b.n	800cd36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68b9      	ldr	r1, [r7, #8]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fb15 	bl	800d328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	69da      	ldr	r2, [r3, #28]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69da      	ldr	r2, [r3, #28]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	69d9      	ldr	r1, [r3, #28]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	021a      	lsls	r2, r3, #8
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	61da      	str	r2, [r3, #28]
      break;
 800cd32:	e000      	b.n	800cd36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800cd34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIM_ConfigClockSource+0x18>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e0b3      	b.n	800cec8 <HAL_TIM_ConfigClockSource+0x180>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd98:	d03e      	beq.n	800ce18 <HAL_TIM_ConfigClockSource+0xd0>
 800cd9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd9e:	f200 8087 	bhi.w	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda6:	f000 8085 	beq.w	800ceb4 <HAL_TIM_ConfigClockSource+0x16c>
 800cdaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdae:	d87f      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdb0:	2b70      	cmp	r3, #112	; 0x70
 800cdb2:	d01a      	beq.n	800cdea <HAL_TIM_ConfigClockSource+0xa2>
 800cdb4:	2b70      	cmp	r3, #112	; 0x70
 800cdb6:	d87b      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdb8:	2b60      	cmp	r3, #96	; 0x60
 800cdba:	d050      	beq.n	800ce5e <HAL_TIM_ConfigClockSource+0x116>
 800cdbc:	2b60      	cmp	r3, #96	; 0x60
 800cdbe:	d877      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdc0:	2b50      	cmp	r3, #80	; 0x50
 800cdc2:	d03c      	beq.n	800ce3e <HAL_TIM_ConfigClockSource+0xf6>
 800cdc4:	2b50      	cmp	r3, #80	; 0x50
 800cdc6:	d873      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdc8:	2b40      	cmp	r3, #64	; 0x40
 800cdca:	d058      	beq.n	800ce7e <HAL_TIM_ConfigClockSource+0x136>
 800cdcc:	2b40      	cmp	r3, #64	; 0x40
 800cdce:	d86f      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdd0:	2b30      	cmp	r3, #48	; 0x30
 800cdd2:	d064      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0x156>
 800cdd4:	2b30      	cmp	r3, #48	; 0x30
 800cdd6:	d86b      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	d060      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0x156>
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d867      	bhi.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d05c      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0x156>
 800cde4:	2b10      	cmp	r3, #16
 800cde6:	d05a      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cde8:	e062      	b.n	800ceb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	6899      	ldr	r1, [r3, #8]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	f000 fb65 	bl	800d4c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	609a      	str	r2, [r3, #8]
      break;
 800ce16:	e04e      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	6899      	ldr	r1, [r3, #8]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f000 fb4e 	bl	800d4c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	689a      	ldr	r2, [r3, #8]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce3a:	609a      	str	r2, [r3, #8]
      break;
 800ce3c:	e03b      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6818      	ldr	r0, [r3, #0]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	6859      	ldr	r1, [r3, #4]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f000 fac2 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2150      	movs	r1, #80	; 0x50
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fb1b 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800ce5c:	e02b      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6818      	ldr	r0, [r3, #0]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	6859      	ldr	r1, [r3, #4]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f000 fae1 	bl	800d432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2160      	movs	r1, #96	; 0x60
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fb0b 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800ce7c:	e01b      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	6859      	ldr	r1, [r3, #4]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f000 faa2 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2140      	movs	r1, #64	; 0x40
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fafb 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800ce9c:	e00b      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4619      	mov	r1, r3
 800cea8:	4610      	mov	r0, r2
 800ceaa:	f000 faf2 	bl	800d492 <TIM_ITRx_SetConfig>
        break;
 800ceae:	e002      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ceb0:	bf00      	nop
 800ceb2:	e000      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ceb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a40      	ldr	r2, [pc, #256]	; (800d048 <TIM_Base_SetConfig+0x114>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d013      	beq.n	800cf74 <TIM_Base_SetConfig+0x40>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf52:	d00f      	beq.n	800cf74 <TIM_Base_SetConfig+0x40>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a3d      	ldr	r2, [pc, #244]	; (800d04c <TIM_Base_SetConfig+0x118>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d00b      	beq.n	800cf74 <TIM_Base_SetConfig+0x40>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a3c      	ldr	r2, [pc, #240]	; (800d050 <TIM_Base_SetConfig+0x11c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d007      	beq.n	800cf74 <TIM_Base_SetConfig+0x40>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a3b      	ldr	r2, [pc, #236]	; (800d054 <TIM_Base_SetConfig+0x120>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d003      	beq.n	800cf74 <TIM_Base_SetConfig+0x40>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a3a      	ldr	r2, [pc, #232]	; (800d058 <TIM_Base_SetConfig+0x124>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d108      	bne.n	800cf86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a2f      	ldr	r2, [pc, #188]	; (800d048 <TIM_Base_SetConfig+0x114>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d02b      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf94:	d027      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a2c      	ldr	r2, [pc, #176]	; (800d04c <TIM_Base_SetConfig+0x118>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d023      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a2b      	ldr	r2, [pc, #172]	; (800d050 <TIM_Base_SetConfig+0x11c>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d01f      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a2a      	ldr	r2, [pc, #168]	; (800d054 <TIM_Base_SetConfig+0x120>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d01b      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a29      	ldr	r2, [pc, #164]	; (800d058 <TIM_Base_SetConfig+0x124>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d017      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a28      	ldr	r2, [pc, #160]	; (800d05c <TIM_Base_SetConfig+0x128>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d013      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4a27      	ldr	r2, [pc, #156]	; (800d060 <TIM_Base_SetConfig+0x12c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d00f      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4a26      	ldr	r2, [pc, #152]	; (800d064 <TIM_Base_SetConfig+0x130>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d00b      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a25      	ldr	r2, [pc, #148]	; (800d068 <TIM_Base_SetConfig+0x134>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d007      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a24      	ldr	r2, [pc, #144]	; (800d06c <TIM_Base_SetConfig+0x138>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d003      	beq.n	800cfe6 <TIM_Base_SetConfig+0xb2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a23      	ldr	r2, [pc, #140]	; (800d070 <TIM_Base_SetConfig+0x13c>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d108      	bne.n	800cff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	4313      	orrs	r3, r2
 800d004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	689a      	ldr	r2, [r3, #8]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a0a      	ldr	r2, [pc, #40]	; (800d048 <TIM_Base_SetConfig+0x114>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d003      	beq.n	800d02c <TIM_Base_SetConfig+0xf8>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <TIM_Base_SetConfig+0x124>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d103      	bne.n	800d034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	691a      	ldr	r2, [r3, #16]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	615a      	str	r2, [r3, #20]
}
 800d03a:	bf00      	nop
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	40010000 	.word	0x40010000
 800d04c:	40000400 	.word	0x40000400
 800d050:	40000800 	.word	0x40000800
 800d054:	40000c00 	.word	0x40000c00
 800d058:	40010400 	.word	0x40010400
 800d05c:	40014000 	.word	0x40014000
 800d060:	40014400 	.word	0x40014400
 800d064:	40014800 	.word	0x40014800
 800d068:	40001800 	.word	0x40001800
 800d06c:	40001c00 	.word	0x40001c00
 800d070:	40002000 	.word	0x40002000

0800d074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	f023 0201 	bic.w	r2, r3, #1
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0303 	bic.w	r3, r3, #3
 800d0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f023 0302 	bic.w	r3, r3, #2
 800d0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a20      	ldr	r2, [pc, #128]	; (800d14c <TIM_OC1_SetConfig+0xd8>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d003      	beq.n	800d0d8 <TIM_OC1_SetConfig+0x64>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a1f      	ldr	r2, [pc, #124]	; (800d150 <TIM_OC1_SetConfig+0xdc>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d10c      	bne.n	800d0f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f023 0308 	bic.w	r3, r3, #8
 800d0de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f023 0304 	bic.w	r3, r3, #4
 800d0f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a15      	ldr	r2, [pc, #84]	; (800d14c <TIM_OC1_SetConfig+0xd8>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d003      	beq.n	800d102 <TIM_OC1_SetConfig+0x8e>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a14      	ldr	r2, [pc, #80]	; (800d150 <TIM_OC1_SetConfig+0xdc>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d111      	bne.n	800d126 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	4313      	orrs	r3, r2
 800d11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4313      	orrs	r3, r2
 800d124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	621a      	str	r2, [r3, #32]
}
 800d140:	bf00      	nop
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	40010000 	.word	0x40010000
 800d150:	40010400 	.word	0x40010400

0800d154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d154:	b480      	push	{r7}
 800d156:	b087      	sub	sp, #28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	f023 0210 	bic.w	r2, r3, #16
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	4313      	orrs	r3, r2
 800d196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f023 0320 	bic.w	r3, r3, #32
 800d19e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a22      	ldr	r2, [pc, #136]	; (800d238 <TIM_OC2_SetConfig+0xe4>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d003      	beq.n	800d1bc <TIM_OC2_SetConfig+0x68>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a21      	ldr	r2, [pc, #132]	; (800d23c <TIM_OC2_SetConfig+0xe8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d10d      	bne.n	800d1d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	011b      	lsls	r3, r3, #4
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a17      	ldr	r2, [pc, #92]	; (800d238 <TIM_OC2_SetConfig+0xe4>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d003      	beq.n	800d1e8 <TIM_OC2_SetConfig+0x94>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a16      	ldr	r2, [pc, #88]	; (800d23c <TIM_OC2_SetConfig+0xe8>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d113      	bne.n	800d210 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	621a      	str	r2, [r3, #32]
}
 800d22a:	bf00      	nop
 800d22c:	371c      	adds	r7, #28
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	40010000 	.word	0x40010000
 800d23c:	40010400 	.word	0x40010400

0800d240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	021b      	lsls	r3, r3, #8
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	4313      	orrs	r3, r2
 800d294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a21      	ldr	r2, [pc, #132]	; (800d320 <TIM_OC3_SetConfig+0xe0>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d003      	beq.n	800d2a6 <TIM_OC3_SetConfig+0x66>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a20      	ldr	r2, [pc, #128]	; (800d324 <TIM_OC3_SetConfig+0xe4>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d10d      	bne.n	800d2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a16      	ldr	r2, [pc, #88]	; (800d320 <TIM_OC3_SetConfig+0xe0>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d003      	beq.n	800d2d2 <TIM_OC3_SetConfig+0x92>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a15      	ldr	r2, [pc, #84]	; (800d324 <TIM_OC3_SetConfig+0xe4>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d113      	bne.n	800d2fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	011b      	lsls	r3, r3, #4
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	011b      	lsls	r3, r3, #4
 800d2f4:	693a      	ldr	r2, [r7, #16]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	621a      	str	r2, [r3, #32]
}
 800d314:	bf00      	nop
 800d316:	371c      	adds	r7, #28
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	40010000 	.word	0x40010000
 800d324:	40010400 	.word	0x40010400

0800d328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d328:	b480      	push	{r7}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a1b      	ldr	r3, [r3, #32]
 800d342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	021b      	lsls	r3, r3, #8
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	4313      	orrs	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	031b      	lsls	r3, r3, #12
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a12      	ldr	r2, [pc, #72]	; (800d3cc <TIM_OC4_SetConfig+0xa4>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d003      	beq.n	800d390 <TIM_OC4_SetConfig+0x68>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a11      	ldr	r2, [pc, #68]	; (800d3d0 <TIM_OC4_SetConfig+0xa8>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d109      	bne.n	800d3a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	019b      	lsls	r3, r3, #6
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	621a      	str	r2, [r3, #32]
}
 800d3be:	bf00      	nop
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	40010000 	.word	0x40010000
 800d3d0:	40010400 	.word	0x40010400

0800d3d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	f023 0201 	bic.w	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	011b      	lsls	r3, r3, #4
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	4313      	orrs	r3, r2
 800d408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f023 030a 	bic.w	r3, r3, #10
 800d410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4313      	orrs	r3, r2
 800d418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	621a      	str	r2, [r3, #32]
}
 800d426:	bf00      	nop
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d432:	b480      	push	{r7}
 800d434:	b087      	sub	sp, #28
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	f023 0210 	bic.w	r2, r3, #16
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d45c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	031b      	lsls	r3, r3, #12
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	4313      	orrs	r3, r2
 800d466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d46e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	4313      	orrs	r3, r2
 800d478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	621a      	str	r2, [r3, #32]
}
 800d486:	bf00      	nop
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	f043 0307 	orr.w	r3, r3, #7
 800d4b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	609a      	str	r2, [r3, #8]
}
 800d4bc:	bf00      	nop
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	021a      	lsls	r2, r3, #8
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	609a      	str	r2, [r3, #8]
}
 800d4fc:	bf00      	nop
 800d4fe:	371c      	adds	r7, #28
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f003 031f 	and.w	r3, r3, #31
 800d51a:	2201      	movs	r2, #1
 800d51c:	fa02 f303 	lsl.w	r3, r2, r3
 800d520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6a1a      	ldr	r2, [r3, #32]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	43db      	mvns	r3, r3
 800d52a:	401a      	ands	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6a1a      	ldr	r2, [r3, #32]
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f003 031f 	and.w	r3, r3, #31
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	fa01 f303 	lsl.w	r3, r1, r3
 800d540:	431a      	orrs	r2, r3
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	621a      	str	r2, [r3, #32]
}
 800d546:	bf00      	nop
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
	...

0800d554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d564:	2b01      	cmp	r3, #1
 800d566:	d101      	bne.n	800d56c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d568:	2302      	movs	r3, #2
 800d56a:	e05a      	b.n	800d622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2202      	movs	r2, #2
 800d578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a21      	ldr	r2, [pc, #132]	; (800d630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d022      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5b8:	d01d      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a1d      	ldr	r2, [pc, #116]	; (800d634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d018      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a1b      	ldr	r2, [pc, #108]	; (800d638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d013      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a1a      	ldr	r2, [pc, #104]	; (800d63c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d00e      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a18      	ldr	r2, [pc, #96]	; (800d640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d009      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a17      	ldr	r2, [pc, #92]	; (800d644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d004      	beq.n	800d5f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a15      	ldr	r2, [pc, #84]	; (800d648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d10c      	bne.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	4313      	orrs	r3, r2
 800d606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	40010000 	.word	0x40010000
 800d634:	40000400 	.word	0x40000400
 800d638:	40000800 	.word	0x40000800
 800d63c:	40000c00 	.word	0x40000c00
 800d640:	40010400 	.word	0x40010400
 800d644:	40014000 	.word	0x40014000
 800d648:	40001800 	.word	0x40001800

0800d64c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d668:	bf00      	nop
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d674:	b084      	sub	sp, #16
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	f107 001c 	add.w	r0, r7, #28
 800d682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d122      	bne.n	800d6d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d6a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d105      	bne.n	800d6c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f94a 	bl	800d960 <USB_CoreReset>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
 800d6d0:	e01a      	b.n	800d708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f93e 	bl	800d960 <USB_CoreReset>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d106      	bne.n	800d6fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d6fa:	e005      	b.n	800d708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d10b      	bne.n	800d726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f043 0206 	orr.w	r2, r3, #6
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f043 0220 	orr.w	r2, r3, #32
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d732:	b004      	add	sp, #16
 800d734:	4770      	bx	lr

0800d736 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f043 0201 	orr.w	r2, r3, #1
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f023 0201 	bic.w	r2, r3, #1
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	460b      	mov	r3, r1
 800d784:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d792:	78fb      	ldrb	r3, [r7, #3]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d106      	bne.n	800d7a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	60da      	str	r2, [r3, #12]
 800d7a4:	e00b      	b.n	800d7be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	60da      	str	r2, [r3, #12]
 800d7b8:	e001      	b.n	800d7be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e003      	b.n	800d7c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d7be:	2032      	movs	r0, #50	; 0x32
 800d7c0:	f7f9 f8ea 	bl	8006998 <HAL_Delay>

  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
	...

0800d7d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	019b      	lsls	r3, r3, #6
 800d7e2:	f043 0220 	orr.w	r2, r3, #32
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4a09      	ldr	r2, [pc, #36]	; (800d818 <USB_FlushTxFifo+0x48>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d901      	bls.n	800d7fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e006      	b.n	800d80a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b20      	cmp	r3, #32
 800d806:	d0f0      	beq.n	800d7ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	00030d40 	.word	0x00030d40

0800d81c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2210      	movs	r2, #16
 800d82c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	3301      	adds	r3, #1
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a09      	ldr	r2, [pc, #36]	; (800d85c <USB_FlushRxFifo+0x40>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d901      	bls.n	800d840 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d83c:	2303      	movs	r3, #3
 800d83e:	e006      	b.n	800d84e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	f003 0310 	and.w	r3, r3, #16
 800d848:	2b10      	cmp	r3, #16
 800d84a:	d0f0      	beq.n	800d82e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	00030d40 	.word	0x00030d40

0800d860 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d860:	b480      	push	{r7}
 800d862:	b089      	sub	sp, #36	; 0x24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	4611      	mov	r1, r2
 800d86c:	461a      	mov	r2, r3
 800d86e:	460b      	mov	r3, r1
 800d870:	71fb      	strb	r3, [r7, #7]
 800d872:	4613      	mov	r3, r2
 800d874:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d87e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d882:	2b00      	cmp	r3, #0
 800d884:	d11a      	bne.n	800d8bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d886:	88bb      	ldrh	r3, [r7, #4]
 800d888:	3303      	adds	r3, #3
 800d88a:	089b      	lsrs	r3, r3, #2
 800d88c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d88e:	2300      	movs	r3, #0
 800d890:	61bb      	str	r3, [r7, #24]
 800d892:	e00f      	b.n	800d8b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	031a      	lsls	r2, r3, #12
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	61bb      	str	r3, [r7, #24]
 800d8b4:	69ba      	ldr	r2, [r7, #24]
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d3eb      	bcc.n	800d894 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3724      	adds	r7, #36	; 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b089      	sub	sp, #36	; 0x24
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	60b9      	str	r1, [r7, #8]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	3303      	adds	r3, #3
 800d8e4:	089b      	lsrs	r3, r3, #2
 800d8e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	61bb      	str	r3, [r7, #24]
 800d8ec:	e00b      	b.n	800d906 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	3301      	adds	r3, #1
 800d904:	61bb      	str	r3, [r7, #24]
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d3ef      	bcc.n	800d8ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d90e:	69fb      	ldr	r3, [r7, #28]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3724      	adds	r7, #36	; 0x24
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	695b      	ldr	r3, [r3, #20]
 800d928:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	4013      	ands	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d934:	68fb      	ldr	r3, [r7, #12]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	f003 0301 	and.w	r3, r3, #1
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
	...

0800d960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3301      	adds	r3, #1
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	4a13      	ldr	r2, [pc, #76]	; (800d9c4 <USB_CoreReset+0x64>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d901      	bls.n	800d97e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d97a:	2303      	movs	r3, #3
 800d97c:	e01b      	b.n	800d9b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	daf2      	bge.n	800d96c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d986:	2300      	movs	r3, #0
 800d988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	f043 0201 	orr.w	r2, r3, #1
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3301      	adds	r3, #1
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <USB_CoreReset+0x64>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d901      	bls.n	800d9a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e006      	b.n	800d9b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d0f0      	beq.n	800d996 <USB_CoreReset+0x36>

  return HAL_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	00030d40 	.word	0x00030d40

0800d9c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b084      	sub	sp, #16
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	f107 001c 	add.w	r0, r7, #28
 800d9d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da16:	2b00      	cmp	r3, #0
 800da18:	d018      	beq.n	800da4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d10a      	bne.n	800da36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da2e:	f043 0304 	orr.w	r3, r3, #4
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	e014      	b.n	800da60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da44:	f023 0304 	bic.w	r3, r3, #4
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	e009      	b.n	800da60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da5a:	f023 0304 	bic.w	r3, r3, #4
 800da5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800da60:	2110      	movs	r1, #16
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff feb4 	bl	800d7d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff fed7 	bl	800d81c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e015      	b.n	800daa0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	015a      	lsls	r2, r3, #5
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	4413      	add	r3, r2
 800da7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da80:	461a      	mov	r2, r3
 800da82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da94:	461a      	mov	r2, r3
 800da96:	2300      	movs	r3, #0
 800da98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3301      	adds	r3, #1
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d3e5      	bcc.n	800da74 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800daa8:	2101      	movs	r1, #1
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 f8ac 	bl	800dc08 <USB_DriveVbus>

  HAL_Delay(200U);
 800dab0:	20c8      	movs	r0, #200	; 0xc8
 800dab2:	f7f8 ff71 	bl	8006998 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dac2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00b      	beq.n	800dae8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a14      	ldr	r2, [pc, #80]	; (800db2c <USB_HostInit+0x164>)
 800dadc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a13      	ldr	r2, [pc, #76]	; (800db30 <USB_HostInit+0x168>)
 800dae2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800dae6:	e009      	b.n	800dafc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2280      	movs	r2, #128	; 0x80
 800daec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a10      	ldr	r2, [pc, #64]	; (800db34 <USB_HostInit+0x16c>)
 800daf2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a10      	ldr	r2, [pc, #64]	; (800db38 <USB_HostInit+0x170>)
 800daf8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d105      	bne.n	800db0e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	f043 0210 	orr.w	r2, r3, #16
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	699a      	ldr	r2, [r3, #24]
 800db12:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <USB_HostInit+0x174>)
 800db14:	4313      	orrs	r3, r2
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db26:	b004      	add	sp, #16
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	01000200 	.word	0x01000200
 800db30:	00e00300 	.word	0x00e00300
 800db34:	00600080 	.word	0x00600080
 800db38:	004000e0 	.word	0x004000e0
 800db3c:	a3200008 	.word	0xa3200008

0800db40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db5e:	f023 0303 	bic.w	r3, r3, #3
 800db62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	68f9      	ldr	r1, [r7, #12]
 800db74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800db78:	4313      	orrs	r3, r2
 800db7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d107      	bne.n	800db92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db88:	461a      	mov	r2, r3
 800db8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800db8e:	6053      	str	r3, [r2, #4]
 800db90:	e009      	b.n	800dba6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800db92:	78fb      	ldrb	r3, [r7, #3]
 800db94:	2b02      	cmp	r3, #2
 800db96:	d106      	bne.n	800dba6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db9e:	461a      	mov	r2, r3
 800dba0:	f241 7370 	movw	r3, #6000	; 0x1770
 800dba4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dbd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dbde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbe2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dbe4:	2064      	movs	r0, #100	; 0x64
 800dbe6:	f7f8 fed7 	bl	8006998 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dbf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbf6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800dbf8:	200a      	movs	r0, #10
 800dbfa:	f7f8 fecd 	bl	8006998 <HAL_Delay>

  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dc2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d109      	bne.n	800dc4c <USB_DriveVbus+0x44>
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d106      	bne.n	800dc4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc56:	d109      	bne.n	800dc6c <USB_DriveVbus+0x64>
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	0c5b      	lsrs	r3, r3, #17
 800dc98:	f003 0303 	and.w	r3, r3, #3
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	b29b      	uxth	r3, r3
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
	...

0800dccc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4603      	mov	r3, r0
 800dcdc:	70fb      	strb	r3, [r7, #3]
 800dcde:	460b      	mov	r3, r1
 800dce0:	70bb      	strb	r3, [r7, #2]
 800dce2:	4613      	mov	r3, r2
 800dce4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800dcee:	78fb      	ldrb	r3, [r7, #3]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dd02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d87e      	bhi.n	800de08 <USB_HC_Init+0x13c>
 800dd0a:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <USB_HC_Init+0x44>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800dd21 	.word	0x0800dd21
 800dd14:	0800ddcb 	.word	0x0800ddcb
 800dd18:	0800dd21 	.word	0x0800dd21
 800dd1c:	0800dd8d 	.word	0x0800dd8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	f240 439d 	movw	r3, #1181	; 0x49d
 800dd32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dd34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	da10      	bge.n	800dd5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	78fa      	ldrb	r2, [r7, #3]
 800dd4c:	0151      	lsls	r1, r2, #5
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	440a      	add	r2, r1
 800dd52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd5a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800dd5c:	e057      	b.n	800de0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d051      	beq.n	800de0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	015a      	lsls	r2, r3, #5
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	4413      	add	r3, r2
 800dd72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	78fa      	ldrb	r2, [r7, #3]
 800dd7a:	0151      	lsls	r1, r2, #5
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	440a      	add	r2, r1
 800dd80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dd88:	60d3      	str	r3, [r2, #12]
      break;
 800dd8a:	e040      	b.n	800de0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd8c:	78fb      	ldrb	r3, [r7, #3]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd98:	461a      	mov	r2, r3
 800dd9a:	f240 639d 	movw	r3, #1693	; 0x69d
 800dd9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dda0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	da34      	bge.n	800de12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dda8:	78fb      	ldrb	r3, [r7, #3]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	78fa      	ldrb	r2, [r7, #3]
 800ddb8:	0151      	lsls	r1, r2, #5
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	440a      	add	r2, r1
 800ddbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ddc8:	e023      	b.n	800de12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	015a      	lsls	r2, r3, #5
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f240 2325 	movw	r3, #549	; 0x225
 800dddc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ddde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	da17      	bge.n	800de16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dde6:	78fb      	ldrb	r3, [r7, #3]
 800dde8:	015a      	lsls	r2, r3, #5
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	4413      	add	r3, r2
 800ddee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	78fa      	ldrb	r2, [r7, #3]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800de04:	60d3      	str	r3, [r2, #12]
      }
      break;
 800de06:	e006      	b.n	800de16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	77fb      	strb	r3, [r7, #31]
      break;
 800de0c:	e004      	b.n	800de18 <USB_HC_Init+0x14c>
      break;
 800de0e:	bf00      	nop
 800de10:	e002      	b.n	800de18 <USB_HC_Init+0x14c>
      break;
 800de12:	bf00      	nop
 800de14:	e000      	b.n	800de18 <USB_HC_Init+0x14c>
      break;
 800de16:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de1e:	699a      	ldr	r2, [r3, #24]
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	f003 030f 	and.w	r3, r3, #15
 800de26:	2101      	movs	r1, #1
 800de28:	fa01 f303 	lsl.w	r3, r1, r3
 800de2c:	6939      	ldr	r1, [r7, #16]
 800de2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800de32:	4313      	orrs	r3, r2
 800de34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800de42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de46:	2b00      	cmp	r3, #0
 800de48:	da03      	bge.n	800de52 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800de4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de4e:	61bb      	str	r3, [r7, #24]
 800de50:	e001      	b.n	800de56 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ff0f 	bl	800dc7a <USB_GetHostSpeed>
 800de5c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800de5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de62:	2b02      	cmp	r3, #2
 800de64:	d106      	bne.n	800de74 <USB_HC_Init+0x1a8>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d003      	beq.n	800de74 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800de6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	e001      	b.n	800de78 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800de74:	2300      	movs	r3, #0
 800de76:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de78:	787b      	ldrb	r3, [r7, #1]
 800de7a:	059b      	lsls	r3, r3, #22
 800de7c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800de80:	78bb      	ldrb	r3, [r7, #2]
 800de82:	02db      	lsls	r3, r3, #11
 800de84:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de88:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800de8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de8e:	049b      	lsls	r3, r3, #18
 800de90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800de94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800de96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800de9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	0159      	lsls	r1, r3, #5
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	440b      	add	r3, r1
 800deaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800deb4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800deb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800deba:	2b03      	cmp	r3, #3
 800debc:	d10f      	bne.n	800dede <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800debe:	78fb      	ldrb	r3, [r7, #3]
 800dec0:	015a      	lsls	r2, r3, #5
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	4413      	add	r3, r2
 800dec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	78fa      	ldrb	r2, [r7, #3]
 800dece:	0151      	lsls	r1, r2, #5
 800ded0:	693a      	ldr	r2, [r7, #16]
 800ded2:	440a      	add	r2, r1
 800ded4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ded8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dedc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dede:	7ffb      	ldrb	r3, [r7, #31]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08c      	sub	sp, #48	; 0x30
 800deec:	af02      	add	r7, sp, #8
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	4613      	mov	r3, r2
 800def4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	785b      	ldrb	r3, [r3, #1]
 800defe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800df00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d02d      	beq.n	800df6e <USB_HC_StartXfer+0x86>
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	791b      	ldrb	r3, [r3, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d129      	bne.n	800df6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d117      	bne.n	800df50 <USB_HC_StartXfer+0x68>
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	79db      	ldrb	r3, [r3, #7]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <USB_HC_StartXfer+0x48>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	79db      	ldrb	r3, [r3, #7]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d10f      	bne.n	800df50 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	015a      	lsls	r2, r3, #5
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	4413      	add	r3, r2
 800df38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	0151      	lsls	r1, r2, #5
 800df42:	6a3a      	ldr	r2, [r7, #32]
 800df44:	440a      	add	r2, r1
 800df46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df4e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800df50:	79fb      	ldrb	r3, [r7, #7]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <USB_HC_StartXfer+0x86>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	795b      	ldrb	r3, [r3, #5]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d107      	bne.n	800df6e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	785b      	ldrb	r3, [r3, #1]
 800df62:	4619      	mov	r1, r3
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 fa2f 	bl	800e3c8 <USB_DoPing>
      return HAL_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	e0f8      	b.n	800e160 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d018      	beq.n	800dfa8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	8912      	ldrh	r2, [r2, #8]
 800df7e:	4413      	add	r3, r2
 800df80:	3b01      	subs	r3, #1
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	8912      	ldrh	r2, [r2, #8]
 800df86:	fbb3 f3f2 	udiv	r3, r3, r2
 800df8a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800df8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800df8e:	8b7b      	ldrh	r3, [r7, #26]
 800df90:	429a      	cmp	r2, r3
 800df92:	d90b      	bls.n	800dfac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800df94:	8b7b      	ldrh	r3, [r7, #26]
 800df96:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	8912      	ldrh	r2, [r2, #8]
 800df9e:	fb02 f203 	mul.w	r2, r2, r3
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	611a      	str	r2, [r3, #16]
 800dfa6:	e001      	b.n	800dfac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	78db      	ldrb	r3, [r3, #3]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d007      	beq.n	800dfc4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	8912      	ldrh	r2, [r2, #8]
 800dfba:	fb02 f203 	mul.w	r2, r2, r3
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	611a      	str	r2, [r3, #16]
 800dfc2:	e003      	b.n	800dfcc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	695a      	ldr	r2, [r3, #20]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfd6:	04d9      	lsls	r1, r3, #19
 800dfd8:	4b63      	ldr	r3, [pc, #396]	; (800e168 <USB_HC_StartXfer+0x280>)
 800dfda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfdc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	7a9b      	ldrb	r3, [r3, #10]
 800dfe2:	075b      	lsls	r3, r3, #29
 800dfe4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfe8:	69f9      	ldr	r1, [r7, #28]
 800dfea:	0148      	lsls	r0, r1, #5
 800dfec:	6a39      	ldr	r1, [r7, #32]
 800dfee:	4401      	add	r1, r0
 800dff0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dff4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dff6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d009      	beq.n	800e012 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	68d9      	ldr	r1, [r3, #12]
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	015a      	lsls	r2, r3, #5
 800e006:	6a3b      	ldr	r3, [r7, #32]
 800e008:	4413      	add	r3, r2
 800e00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e00e:	460a      	mov	r2, r1
 800e010:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f003 0301 	and.w	r3, r3, #1
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bf0c      	ite	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	2300      	movne	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	4413      	add	r3, r2
 800e032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	69fa      	ldr	r2, [r7, #28]
 800e03a:	0151      	lsls	r1, r2, #5
 800e03c:	6a3a      	ldr	r2, [r7, #32]
 800e03e:	440a      	add	r2, r1
 800e040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e044:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e048:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	4413      	add	r3, r2
 800e052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	7e7b      	ldrb	r3, [r7, #25]
 800e05a:	075b      	lsls	r3, r3, #29
 800e05c:	69f9      	ldr	r1, [r7, #28]
 800e05e:	0148      	lsls	r0, r1, #5
 800e060:	6a39      	ldr	r1, [r7, #32]
 800e062:	4401      	add	r1, r0
 800e064:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e068:	4313      	orrs	r3, r2
 800e06a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	015a      	lsls	r2, r3, #5
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	4413      	add	r3, r2
 800e074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e082:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	78db      	ldrb	r3, [r3, #3]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d004      	beq.n	800e096 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	e003      	b.n	800e09e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e09c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e04e      	b.n	800e160 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	78db      	ldrb	r3, [r3, #3]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d149      	bne.n	800e15e <USB_HC_StartXfer+0x276>
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d045      	beq.n	800e15e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	79db      	ldrb	r3, [r3, #7]
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d830      	bhi.n	800e13c <USB_HC_StartXfer+0x254>
 800e0da:	a201      	add	r2, pc, #4	; (adr r2, 800e0e0 <USB_HC_StartXfer+0x1f8>)
 800e0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e0:	0800e0f1 	.word	0x0800e0f1
 800e0e4:	0800e115 	.word	0x0800e115
 800e0e8:	0800e0f1 	.word	0x0800e0f1
 800e0ec:	0800e115 	.word	0x0800e115
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	3303      	adds	r3, #3
 800e0f6:	089b      	lsrs	r3, r3, #2
 800e0f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e0fa:	8afa      	ldrh	r2, [r7, #22]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e100:	b29b      	uxth	r3, r3
 800e102:	429a      	cmp	r2, r3
 800e104:	d91c      	bls.n	800e140 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	f043 0220 	orr.w	r2, r3, #32
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	619a      	str	r2, [r3, #24]
        }
        break;
 800e112:	e015      	b.n	800e140 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	3303      	adds	r3, #3
 800e11a:	089b      	lsrs	r3, r3, #2
 800e11c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e11e:	8afa      	ldrh	r2, [r7, #22]
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d90a      	bls.n	800e144 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	619a      	str	r2, [r3, #24]
        }
        break;
 800e13a:	e003      	b.n	800e144 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e13c:	bf00      	nop
 800e13e:	e002      	b.n	800e146 <USB_HC_StartXfer+0x25e>
        break;
 800e140:	bf00      	nop
 800e142:	e000      	b.n	800e146 <USB_HC_StartXfer+0x25e>
        break;
 800e144:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	68d9      	ldr	r1, [r3, #12]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	785a      	ldrb	r2, [r3, #1]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	b29b      	uxth	r3, r3
 800e154:	2000      	movs	r0, #0
 800e156:	9000      	str	r0, [sp, #0]
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f7ff fb81 	bl	800d860 <USB_WritePacket>
  }

  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3728      	adds	r7, #40	; 0x28
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	1ff80000 	.word	0x1ff80000

0800e16c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	b29b      	uxth	r3, r3
}
 800e182:	4618      	mov	r0, r3
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e18e:	b480      	push	{r7}
 800e190:	b089      	sub	sp, #36	; 0x24
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	460b      	mov	r3, r1
 800e198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e19e:	78fb      	ldrb	r3, [r7, #3]
 800e1a0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	015a      	lsls	r2, r3, #5
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	0c9b      	lsrs	r3, r3, #18
 800e1b6:	f003 0303 	and.w	r3, r3, #3
 800e1ba:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	0fdb      	lsrs	r3, r3, #31
 800e1cc:	f003 0301 	and.w	r3, r3, #1
 800e1d0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b20      	cmp	r3, #32
 800e1dc:	d104      	bne.n	800e1e8 <USB_HC_Halt+0x5a>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d101      	bne.n	800e1e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	e0e8      	b.n	800e3ba <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <USB_HC_Halt+0x66>
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d173      	bne.n	800e2dc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	0151      	lsls	r1, r2, #5
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	440a      	add	r2, r1
 800e20a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e20e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e212:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f003 0320 	and.w	r3, r3, #32
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f040 80cb 	bne.w	800e3b8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d143      	bne.n	800e2b6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	015a      	lsls	r2, r3, #5
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	4413      	add	r3, r2
 800e236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	697a      	ldr	r2, [r7, #20]
 800e23e:	0151      	lsls	r1, r2, #5
 800e240:	69ba      	ldr	r2, [r7, #24]
 800e242:	440a      	add	r2, r1
 800e244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e24c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	4413      	add	r3, r2
 800e256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	697a      	ldr	r2, [r7, #20]
 800e25e:	0151      	lsls	r1, r2, #5
 800e260:	69ba      	ldr	r2, [r7, #24]
 800e262:	440a      	add	r2, r1
 800e264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e26c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	015a      	lsls	r2, r3, #5
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	4413      	add	r3, r2
 800e276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	0151      	lsls	r1, r2, #5
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	440a      	add	r2, r1
 800e284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e28c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	3301      	adds	r3, #1
 800e292:	61fb      	str	r3, [r7, #28]
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e29a:	d81d      	bhi.n	800e2d8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2b2:	d0ec      	beq.n	800e28e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2b4:	e080      	b.n	800e3b8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	0151      	lsls	r1, r2, #5
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	440a      	add	r2, r1
 800e2cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e2d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2d6:	e06f      	b.n	800e3b8 <USB_HC_Halt+0x22a>
            break;
 800e2d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2da:	e06d      	b.n	800e3b8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	015a      	lsls	r2, r3, #5
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	697a      	ldr	r2, [r7, #20]
 800e2ec:	0151      	lsls	r1, r2, #5
 800e2ee:	69ba      	ldr	r2, [r7, #24]
 800e2f0:	440a      	add	r2, r1
 800e2f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d143      	bne.n	800e394 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	4413      	add	r3, r2
 800e314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	0151      	lsls	r1, r2, #5
 800e31e:	69ba      	ldr	r2, [r7, #24]
 800e320:	440a      	add	r2, r1
 800e322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e32a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	4413      	add	r3, r2
 800e334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	0151      	lsls	r1, r2, #5
 800e33e:	69ba      	ldr	r2, [r7, #24]
 800e340:	440a      	add	r2, r1
 800e342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e34a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	015a      	lsls	r2, r3, #5
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	4413      	add	r3, r2
 800e354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	0151      	lsls	r1, r2, #5
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	440a      	add	r2, r1
 800e362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e366:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e36a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	3301      	adds	r3, #1
 800e370:	61fb      	str	r3, [r7, #28]
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e378:	d81d      	bhi.n	800e3b6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	015a      	lsls	r2, r3, #5
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	4413      	add	r3, r2
 800e382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e38c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e390:	d0ec      	beq.n	800e36c <USB_HC_Halt+0x1de>
 800e392:	e011      	b.n	800e3b8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	0151      	lsls	r1, r2, #5
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	e000      	b.n	800e3b8 <USB_HC_Halt+0x22a>
          break;
 800e3b6:	bf00      	nop
    }
  }

  return HAL_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3724      	adds	r7, #36	; 0x24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e3d8:	78fb      	ldrb	r3, [r7, #3]
 800e3da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	04da      	lsls	r2, r3, #19
 800e3e4:	4b15      	ldr	r3, [pc, #84]	; (800e43c <USB_DoPing+0x74>)
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	0151      	lsls	r1, r2, #5
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	440a      	add	r2, r1
 800e3f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4413      	add	r3, r2
 800e402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e410:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e418:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	015a      	lsls	r2, r3, #5
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	4413      	add	r3, r2
 800e422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e426:	461a      	mov	r2, r3
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	371c      	adds	r7, #28
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	1ff80000 	.word	0x1ff80000

0800e440 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e44c:	2300      	movs	r3, #0
 800e44e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff f981 	bl	800d758 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e456:	2110      	movs	r1, #16
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff f9b9 	bl	800d7d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7ff f9dc 	bl	800d81c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e464:	2300      	movs	r3, #0
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	e01f      	b.n	800e4aa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	015a      	lsls	r2, r3, #5
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	4413      	add	r3, r2
 800e472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e480:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e488:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e490:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	015a      	lsls	r2, r3, #5
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	4413      	add	r3, r2
 800e49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e49e:	461a      	mov	r2, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	613b      	str	r3, [r7, #16]
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2b0f      	cmp	r3, #15
 800e4ae:	d9dc      	bls.n	800e46a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	613b      	str	r3, [r7, #16]
 800e4b4:	e034      	b.n	800e520 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	015a      	lsls	r2, r3, #5
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	4413      	add	r3, r2
 800e4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e4d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4dc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	015a      	lsls	r2, r3, #5
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	617b      	str	r3, [r7, #20]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e4fc:	d80c      	bhi.n	800e518 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	015a      	lsls	r2, r3, #5
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	4413      	add	r3, r2
 800e506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e514:	d0ec      	beq.n	800e4f0 <USB_StopHost+0xb0>
 800e516:	e000      	b.n	800e51a <USB_StopHost+0xda>
        break;
 800e518:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3301      	adds	r3, #1
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b0f      	cmp	r3, #15
 800e524:	d9c7      	bls.n	800e4b6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e52c:	461a      	mov	r2, r3
 800e52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e532:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e53a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff f8fa 	bl	800d736 <USB_EnableGlobalInt>

  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e54c:	b590      	push	{r4, r7, lr}
 800e54e:	b089      	sub	sp, #36	; 0x24
 800e550:	af04      	add	r7, sp, #16
 800e552:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e554:	2301      	movs	r3, #1
 800e556:	2202      	movs	r2, #2
 800e558:	2102      	movs	r1, #2
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fc66 	bl	800ee2c <USBH_FindInterface>
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2bff      	cmp	r3, #255	; 0xff
 800e568:	d002      	beq.n	800e570 <USBH_CDC_InterfaceInit+0x24>
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d901      	bls.n	800e574 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e570:	2302      	movs	r3, #2
 800e572:	e13d      	b.n	800e7f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fc3b 	bl	800edf4 <USBH_SelectInterface>
 800e57e:	4603      	mov	r3, r0
 800e580:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e582:	7bbb      	ldrb	r3, [r7, #14]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e588:	2302      	movs	r3, #2
 800e58a:	e131      	b.n	800e7f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e592:	2050      	movs	r0, #80	; 0x50
 800e594:	f002 f9da 	bl	801094c <malloc>
 800e598:	4603      	mov	r3, r0
 800e59a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d101      	bne.n	800e5b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	e11f      	b.n	800e7f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e5b0:	2250      	movs	r2, #80	; 0x50
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	68b8      	ldr	r0, [r7, #8]
 800e5b6:	f002 f9e7 	bl	8010988 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	211a      	movs	r1, #26
 800e5c0:	fb01 f303 	mul.w	r3, r1, r3
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	da15      	bge.n	800e5fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	211a      	movs	r1, #26
 800e5d8:	fb01 f303 	mul.w	r3, r1, r3
 800e5dc:	4413      	add	r3, r2
 800e5de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e5e2:	781a      	ldrb	r2, [r3, #0]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	211a      	movs	r1, #26
 800e5ee:	fb01 f303 	mul.w	r3, r1, r3
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e5f8:	881a      	ldrh	r2, [r3, #0]
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	785b      	ldrb	r3, [r3, #1]
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f001 fe32 	bl	801026e <USBH_AllocPipe>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	7819      	ldrb	r1, [r3, #0]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	7858      	ldrb	r0, [r3, #1]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	8952      	ldrh	r2, [r2, #10]
 800e62a:	9202      	str	r2, [sp, #8]
 800e62c:	2203      	movs	r2, #3
 800e62e:	9201      	str	r2, [sp, #4]
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4623      	mov	r3, r4
 800e634:	4602      	mov	r2, r0
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f001 fdea 	bl	8010210 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2200      	movs	r2, #0
 800e642:	4619      	mov	r1, r3
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f002 f8f0 	bl	801082a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e64a:	2300      	movs	r3, #0
 800e64c:	2200      	movs	r2, #0
 800e64e:	210a      	movs	r1, #10
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fbeb 	bl	800ee2c <USBH_FindInterface>
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	2bff      	cmp	r3, #255	; 0xff
 800e65e:	d002      	beq.n	800e666 <USBH_CDC_InterfaceInit+0x11a>
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d901      	bls.n	800e66a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e666:	2302      	movs	r3, #2
 800e668:	e0c2      	b.n	800e7f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	211a      	movs	r1, #26
 800e670:	fb01 f303 	mul.w	r3, r1, r3
 800e674:	4413      	add	r3, r2
 800e676:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	b25b      	sxtb	r3, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	da16      	bge.n	800e6b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	211a      	movs	r1, #26
 800e688:	fb01 f303 	mul.w	r3, r1, r3
 800e68c:	4413      	add	r3, r2
 800e68e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e692:	781a      	ldrb	r2, [r3, #0]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e698:	7bfb      	ldrb	r3, [r7, #15]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	211a      	movs	r1, #26
 800e69e:	fb01 f303 	mul.w	r3, r1, r3
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e6a8:	881a      	ldrh	r2, [r3, #0]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	835a      	strh	r2, [r3, #26]
 800e6ae:	e015      	b.n	800e6dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	211a      	movs	r1, #26
 800e6b6:	fb01 f303 	mul.w	r3, r1, r3
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e6c6:	7bfb      	ldrb	r3, [r7, #15]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	211a      	movs	r1, #26
 800e6cc:	fb01 f303 	mul.w	r3, r1, r3
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e6d6:	881a      	ldrh	r2, [r3, #0]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	211a      	movs	r1, #26
 800e6e2:	fb01 f303 	mul.w	r3, r1, r3
 800e6e6:	4413      	add	r3, r2
 800e6e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	b25b      	sxtb	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da16      	bge.n	800e722 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	211a      	movs	r1, #26
 800e6fa:	fb01 f303 	mul.w	r3, r1, r3
 800e6fe:	4413      	add	r3, r2
 800e700:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e704:	781a      	ldrb	r2, [r3, #0]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	211a      	movs	r1, #26
 800e710:	fb01 f303 	mul.w	r3, r1, r3
 800e714:	4413      	add	r3, r2
 800e716:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e71a:	881a      	ldrh	r2, [r3, #0]
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	835a      	strh	r2, [r3, #26]
 800e720:	e015      	b.n	800e74e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	211a      	movs	r1, #26
 800e728:	fb01 f303 	mul.w	r3, r1, r3
 800e72c:	4413      	add	r3, r2
 800e72e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e732:	781a      	ldrb	r2, [r3, #0]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e738:	7bfb      	ldrb	r3, [r7, #15]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	211a      	movs	r1, #26
 800e73e:	fb01 f303 	mul.w	r3, r1, r3
 800e742:	4413      	add	r3, r2
 800e744:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e748:	881a      	ldrh	r2, [r3, #0]
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	7b9b      	ldrb	r3, [r3, #14]
 800e752:	4619      	mov	r1, r3
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f001 fd8a 	bl	801026e <USBH_AllocPipe>
 800e75a:	4603      	mov	r3, r0
 800e75c:	461a      	mov	r2, r3
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	7bdb      	ldrb	r3, [r3, #15]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f001 fd80 	bl	801026e <USBH_AllocPipe>
 800e76e:	4603      	mov	r3, r0
 800e770:	461a      	mov	r2, r3
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	7b59      	ldrb	r1, [r3, #13]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	7b98      	ldrb	r0, [r3, #14]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	8b12      	ldrh	r2, [r2, #24]
 800e78e:	9202      	str	r2, [sp, #8]
 800e790:	2202      	movs	r2, #2
 800e792:	9201      	str	r2, [sp, #4]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	4623      	mov	r3, r4
 800e798:	4602      	mov	r2, r0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f001 fd38 	bl	8010210 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	7b19      	ldrb	r1, [r3, #12]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	7bd8      	ldrb	r0, [r3, #15]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	8b52      	ldrh	r2, [r2, #26]
 800e7b8:	9202      	str	r2, [sp, #8]
 800e7ba:	2202      	movs	r2, #2
 800e7bc:	9201      	str	r2, [sp, #4]
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	4623      	mov	r3, r4
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f001 fd23 	bl	8010210 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	7b5b      	ldrb	r3, [r3, #13]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f002 f825 	bl	801082a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	7b1b      	ldrb	r3, [r3, #12]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f002 f81e 	bl	801082a <USBH_LL_SetToggle>

  return USBH_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd90      	pop	{r4, r7, pc}

0800e7f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00e      	beq.n	800e830 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f001 fd18 	bl	801024e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f001 fd43 	bl	80102b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	7b1b      	ldrb	r3, [r3, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00e      	beq.n	800e856 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	7b1b      	ldrb	r3, [r3, #12]
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f001 fd05 	bl	801024e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	7b1b      	ldrb	r3, [r3, #12]
 800e848:	4619      	mov	r1, r3
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f001 fd30 	bl	80102b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	7b5b      	ldrb	r3, [r3, #13]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00e      	beq.n	800e87c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	7b5b      	ldrb	r3, [r3, #13]
 800e862:	4619      	mov	r1, r3
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f001 fcf2 	bl	801024e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	7b5b      	ldrb	r3, [r3, #13]
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 fd1d 	bl	80102b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e882:	69db      	ldr	r3, [r3, #28]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00b      	beq.n	800e8a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e88e:	69db      	ldr	r3, [r3, #28]
 800e890:	4618      	mov	r0, r3
 800e892:	f002 f863 	bl	801095c <free>
    phost->pActiveClass->pData = 0U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e89c:	2200      	movs	r2, #0
 800e89e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	3340      	adds	r3, #64	; 0x40
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f8b1 	bl	800ea2a <GetLineCoding>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8d8:	2102      	movs	r1, #2
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e8de:	7afb      	ldrb	r3, [r7, #11]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d877      	bhi.n	800e9fc <USBH_CDC_Process+0x114>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <USBH_CDC_Process+0x2c>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e929 	.word	0x0800e929
 800e918:	0800e92f 	.word	0x0800e92f
 800e91c:	0800e95f 	.word	0x0800e95f
 800e920:	0800e9d3 	.word	0x0800e9d3
 800e924:	0800e9e1 	.word	0x0800e9e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e928:	2300      	movs	r3, #0
 800e92a:	73fb      	strb	r3, [r7, #15]
      break;
 800e92c:	e06d      	b.n	800ea0a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e932:	4619      	mov	r1, r3
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f897 	bl	800ea68 <SetLineCoding>
 800e93a:	4603      	mov	r3, r0
 800e93c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2202      	movs	r2, #2
 800e948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e94c:	e058      	b.n	800ea00 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d055      	beq.n	800ea00 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2204      	movs	r2, #4
 800e958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e95c:	e050      	b.n	800ea00 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	3340      	adds	r3, #64	; 0x40
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f860 	bl	800ea2a <GetLineCoding>
 800e96a:	4603      	mov	r3, r0
 800e96c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e96e:	7bbb      	ldrb	r3, [r7, #14]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d126      	bne.n	800e9c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e986:	791b      	ldrb	r3, [r3, #4]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d13b      	bne.n	800ea04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e996:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e998:	429a      	cmp	r2, r3
 800e99a:	d133      	bne.n	800ea04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d12b      	bne.n	800ea04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d124      	bne.n	800ea04 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f958 	bl	800ec70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e9c0:	e020      	b.n	800ea04 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d01d      	beq.n	800ea04 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2204      	movs	r2, #4
 800e9cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e9d0:	e018      	b.n	800ea04 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f867 	bl	800eaa6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f8da 	bl	800eb92 <CDC_ProcessReception>
      break;
 800e9de:	e014      	b.n	800ea0a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 ffe3 	bl	800f9ae <USBH_ClrFeature>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e9ec:	7bbb      	ldrb	r3, [r7, #14]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d10a      	bne.n	800ea08 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e9fa:	e005      	b.n	800ea08 <USBH_CDC_Process+0x120>

    default:
      break;
 800e9fc:	bf00      	nop
 800e9fe:	e004      	b.n	800ea0a <USBH_CDC_Process+0x122>
      break;
 800ea00:	bf00      	nop
 800ea02:	e002      	b.n	800ea0a <USBH_CDC_Process+0x122>
      break;
 800ea04:	bf00      	nop
 800ea06:	e000      	b.n	800ea0a <USBH_CDC_Process+0x122>
      break;
 800ea08:	bf00      	nop

  }

  return status;
 800ea0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	22a1      	movs	r2, #161	; 0xa1
 800ea38:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2221      	movs	r2, #33	; 0x21
 800ea3e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2207      	movs	r2, #7
 800ea50:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	2207      	movs	r2, #7
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f001 f988 	bl	800fd6e <USBH_CtlReq>
 800ea5e:	4603      	mov	r3, r0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2221      	movs	r2, #33	; 0x21
 800ea76:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2207      	movs	r2, #7
 800ea8e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2207      	movs	r2, #7
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f001 f969 	bl	800fd6e <USBH_CtlReq>
 800ea9c:	4603      	mov	r3, r0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b086      	sub	sp, #24
 800eaaa:	af02      	add	r7, sp, #8
 800eaac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d002      	beq.n	800eacc <CDC_ProcessTransmission+0x26>
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d023      	beq.n	800eb12 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800eaca:	e05e      	b.n	800eb8a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	8b12      	ldrh	r2, [r2, #24]
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d90b      	bls.n	800eaf0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	69d9      	ldr	r1, [r3, #28]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	8b1a      	ldrh	r2, [r3, #24]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	7b5b      	ldrb	r3, [r3, #13]
 800eae4:	2001      	movs	r0, #1
 800eae6:	9000      	str	r0, [sp, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f001 fb4e 	bl	801018a <USBH_BulkSendData>
 800eaee:	e00b      	b.n	800eb08 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	7b5b      	ldrb	r3, [r3, #13]
 800eafe:	2001      	movs	r0, #1
 800eb00:	9000      	str	r0, [sp, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 fb41 	bl	801018a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb10:	e03b      	b.n	800eb8a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	7b5b      	ldrb	r3, [r3, #13]
 800eb16:	4619      	mov	r1, r3
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f001 fe65 	bl	80107e8 <USBH_LL_GetURBState>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800eb22:	7afb      	ldrb	r3, [r7, #11]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d128      	bne.n	800eb7a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	8b12      	ldrh	r2, [r2, #24]
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d90e      	bls.n	800eb52 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	8b12      	ldrh	r2, [r2, #24]
 800eb3c:	1a9a      	subs	r2, r3, r2
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	8b12      	ldrh	r2, [r2, #24]
 800eb4a:	441a      	add	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	61da      	str	r2, [r3, #28]
 800eb50:	e002      	b.n	800eb58 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d004      	beq.n	800eb6a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb68:	e00e      	b.n	800eb88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f868 	bl	800ec48 <USBH_CDC_TransmitCallback>
      break;
 800eb78:	e006      	b.n	800eb88 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800eb7a:	7afb      	ldrb	r3, [r7, #11]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d103      	bne.n	800eb88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb88:	bf00      	nop
  }
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b086      	sub	sp, #24
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eba0:	69db      	ldr	r3, [r3, #28]
 800eba2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eba4:	2300      	movs	r3, #0
 800eba6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebae:	2b03      	cmp	r3, #3
 800ebb0:	d002      	beq.n	800ebb8 <CDC_ProcessReception+0x26>
 800ebb2:	2b04      	cmp	r3, #4
 800ebb4:	d00e      	beq.n	800ebd4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ebb6:	e043      	b.n	800ec40 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	6a19      	ldr	r1, [r3, #32]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	8b5a      	ldrh	r2, [r3, #26]
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	7b1b      	ldrb	r3, [r3, #12]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f001 fb05 	bl	80101d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2204      	movs	r2, #4
 800ebce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ebd2:	e035      	b.n	800ec40 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	7b1b      	ldrb	r3, [r3, #12]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 fe04 	bl	80107e8 <USBH_LL_GetURBState>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ebe4:	7cfb      	ldrb	r3, [r7, #19]
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d129      	bne.n	800ec3e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	7b1b      	ldrb	r3, [r3, #12]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f001 fd67 	bl	80106c4 <USBH_LL_GetLastXferSize>
 800ebf6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d016      	beq.n	800ec30 <CDC_ProcessReception+0x9e>
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	461a      	mov	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d910      	bls.n	800ec30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	1ad2      	subs	r2, r2, r3
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	6a1a      	ldr	r2, [r3, #32]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	441a      	add	r2, r3
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2203      	movs	r2, #3
 800ec2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ec2e:	e006      	b.n	800ec3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f80f 	bl	800ec5c <USBH_CDC_ReceiveCallback>
      break;
 800ec3e:	bf00      	nop
  }
}
 800ec40:	bf00      	nop
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ec98:	2302      	movs	r3, #2
 800ec9a:	e029      	b.n	800ecf0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	79fa      	ldrb	r2, [r7, #7]
 800eca0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f000 f81f 	bl	800ecf8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d003      	beq.n	800ece8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f001 fc37 	bl	801055c <USBH_LL_Init>

  return USBH_OK;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed04:	2300      	movs	r3, #0
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	e009      	b.n	800ed1e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	33e0      	adds	r3, #224	; 0xe0
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	2200      	movs	r2, #0
 800ed16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	60fb      	str	r3, [r7, #12]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b0e      	cmp	r3, #14
 800ed22:	d9f2      	bls.n	800ed0a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ed24:	2300      	movs	r3, #0
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	e009      	b.n	800ed3e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ed34:	2200      	movs	r2, #0
 800ed36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	60fb      	str	r3, [r7, #12]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed44:	d3f1      	bcc.n	800ed2a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2240      	movs	r2, #64	; 0x40
 800ed6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d016      	beq.n	800ede2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d10e      	bne.n	800eddc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800edc4:	1c59      	adds	r1, r3, #1
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	33de      	adds	r3, #222	; 0xde
 800edd0:	6839      	ldr	r1, [r7, #0]
 800edd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73fb      	strb	r3, [r7, #15]
 800edda:	e004      	b.n	800ede6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eddc:	2302      	movs	r3, #2
 800edde:	73fb      	strb	r3, [r7, #15]
 800ede0:	e001      	b.n	800ede6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ede2:	2302      	movs	r3, #2
 800ede4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	460b      	mov	r3, r1
 800edfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ee0a:	78fa      	ldrb	r2, [r7, #3]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d204      	bcs.n	800ee1a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	78fa      	ldrb	r2, [r7, #3]
 800ee14:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ee18:	e001      	b.n	800ee1e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	4608      	mov	r0, r1
 800ee36:	4611      	mov	r1, r2
 800ee38:	461a      	mov	r2, r3
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	70fb      	strb	r3, [r7, #3]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	70bb      	strb	r3, [r7, #2]
 800ee42:	4613      	mov	r3, r2
 800ee44:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ee46:	2300      	movs	r3, #0
 800ee48:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ee54:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ee56:	e025      	b.n	800eea4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ee58:	7dfb      	ldrb	r3, [r7, #23]
 800ee5a:	221a      	movs	r2, #26
 800ee5c:	fb02 f303 	mul.w	r3, r2, r3
 800ee60:	3308      	adds	r3, #8
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	4413      	add	r3, r2
 800ee66:	3302      	adds	r3, #2
 800ee68:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	795b      	ldrb	r3, [r3, #5]
 800ee6e:	78fa      	ldrb	r2, [r7, #3]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d002      	beq.n	800ee7a <USBH_FindInterface+0x4e>
 800ee74:	78fb      	ldrb	r3, [r7, #3]
 800ee76:	2bff      	cmp	r3, #255	; 0xff
 800ee78:	d111      	bne.n	800ee9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ee7e:	78ba      	ldrb	r2, [r7, #2]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d002      	beq.n	800ee8a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee84:	78bb      	ldrb	r3, [r7, #2]
 800ee86:	2bff      	cmp	r3, #255	; 0xff
 800ee88:	d109      	bne.n	800ee9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee8e:	787a      	ldrb	r2, [r7, #1]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d002      	beq.n	800ee9a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ee94:	787b      	ldrb	r3, [r7, #1]
 800ee96:	2bff      	cmp	r3, #255	; 0xff
 800ee98:	d101      	bne.n	800ee9e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ee9a:	7dfb      	ldrb	r3, [r7, #23]
 800ee9c:	e006      	b.n	800eeac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ee9e:	7dfb      	ldrb	r3, [r7, #23]
 800eea0:	3301      	adds	r3, #1
 800eea2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eea4:	7dfb      	ldrb	r3, [r7, #23]
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d9d6      	bls.n	800ee58 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eeaa:	23ff      	movs	r3, #255	; 0xff
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	371c      	adds	r7, #28
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f001 fb87 	bl	80105d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800eec6:	2101      	movs	r1, #1
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 fca0 	bl	801080e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af04      	add	r7, sp, #16
 800eede:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eee0:	2302      	movs	r3, #2
 800eee2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eee4:	2300      	movs	r3, #0
 800eee6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d102      	bne.n	800eefa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2203      	movs	r2, #3
 800eef8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b0b      	cmp	r3, #11
 800ef02:	f200 81b3 	bhi.w	800f26c <USBH_Process+0x394>
 800ef06:	a201      	add	r2, pc, #4	; (adr r2, 800ef0c <USBH_Process+0x34>)
 800ef08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0c:	0800ef3d 	.word	0x0800ef3d
 800ef10:	0800ef6f 	.word	0x0800ef6f
 800ef14:	0800efd7 	.word	0x0800efd7
 800ef18:	0800f207 	.word	0x0800f207
 800ef1c:	0800f26d 	.word	0x0800f26d
 800ef20:	0800f07b 	.word	0x0800f07b
 800ef24:	0800f1ad 	.word	0x0800f1ad
 800ef28:	0800f0b1 	.word	0x0800f0b1
 800ef2c:	0800f0d1 	.word	0x0800f0d1
 800ef30:	0800f0f1 	.word	0x0800f0f1
 800ef34:	0800f11f 	.word	0x0800f11f
 800ef38:	0800f1ef 	.word	0x0800f1ef
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 8193 	beq.w	800f270 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ef50:	20c8      	movs	r0, #200	; 0xc8
 800ef52:	f001 fc9a 	bl	801088a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f001 fb99 	bl	801068e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ef6c:	e180      	b.n	800f270 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d107      	bne.n	800ef88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef86:	e182      	b.n	800f28e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef92:	d914      	bls.n	800efbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800efaa:	2b03      	cmp	r3, #3
 800efac:	d903      	bls.n	800efb6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	220d      	movs	r2, #13
 800efb2:	701a      	strb	r2, [r3, #0]
      break;
 800efb4:	e16b      	b.n	800f28e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
      break;
 800efbc:	e167      	b.n	800f28e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800efc4:	f103 020a 	add.w	r2, r3, #10
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800efce:	200a      	movs	r0, #10
 800efd0:	f001 fc5b 	bl	801088a <USBH_Delay>
      break;
 800efd4:	e15b      	b.n	800f28e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d005      	beq.n	800efec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efe6:	2104      	movs	r1, #4
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800efec:	2064      	movs	r0, #100	; 0x64
 800efee:	f001 fc4c 	bl	801088a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f001 fb24 	bl	8010640 <USBH_LL_GetSpeed>
 800eff8:	4603      	mov	r3, r0
 800effa:	461a      	mov	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2205      	movs	r2, #5
 800f006:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f008:	2100      	movs	r1, #0
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f001 f92f 	bl	801026e <USBH_AllocPipe>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f018:	2180      	movs	r1, #128	; 0x80
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 f927 	bl	801026e <USBH_AllocPipe>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	7919      	ldrb	r1, [r3, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f03c:	b292      	uxth	r2, r2
 800f03e:	9202      	str	r2, [sp, #8]
 800f040:	2200      	movs	r2, #0
 800f042:	9201      	str	r2, [sp, #4]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	4603      	mov	r3, r0
 800f048:	2280      	movs	r2, #128	; 0x80
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f001 f8e0 	bl	8010210 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	7959      	ldrb	r1, [r3, #5]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f064:	b292      	uxth	r2, r2
 800f066:	9202      	str	r2, [sp, #8]
 800f068:	2200      	movs	r2, #0
 800f06a:	9201      	str	r2, [sp, #4]
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	4603      	mov	r3, r0
 800f070:	2200      	movs	r2, #0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f001 f8cc 	bl	8010210 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f078:	e109      	b.n	800f28e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 f90c 	bl	800f298 <USBH_HandleEnum>
 800f080:	4603      	mov	r3, r0
 800f082:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f084:	7bbb      	ldrb	r3, [r7, #14]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f040 80f3 	bne.w	800f274 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d103      	bne.n	800f0a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2208      	movs	r2, #8
 800f0a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f0a6:	e0e5      	b.n	800f274 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2207      	movs	r2, #7
 800f0ac:	701a      	strb	r2, [r3, #0]
      break;
 800f0ae:	e0e1      	b.n	800f274 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f000 80de 	beq.w	800f278 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2208      	movs	r2, #8
 800f0cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f0ce:	e0d3      	b.n	800f278 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	4619      	mov	r1, r3
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fc20 	bl	800f920 <USBH_SetCfg>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f040 80ca 	bne.w	800f27c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2209      	movs	r2, #9
 800f0ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f0ee:	e0c5      	b.n	800f27c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f0f6:	f003 0320 	and.w	r3, r3, #32
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00b      	beq.n	800f116 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f0fe:	2101      	movs	r1, #1
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 fc30 	bl	800f966 <USBH_SetFeature>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f040 80b9 	bne.w	800f280 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	220a      	movs	r2, #10
 800f112:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f114:	e0b4      	b.n	800f280 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	220a      	movs	r2, #10
 800f11a:	701a      	strb	r2, [r3, #0]
      break;
 800f11c:	e0b0      	b.n	800f280 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 80ad 	beq.w	800f284 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]
 800f136:	e016      	b.n	800f166 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f138:	7bfa      	ldrb	r2, [r7, #15]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	32de      	adds	r2, #222	; 0xde
 800f13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f142:	791a      	ldrb	r2, [r3, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d108      	bne.n	800f160 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f14e:	7bfa      	ldrb	r2, [r7, #15]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	32de      	adds	r2, #222	; 0xde
 800f154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f15e:	e005      	b.n	800f16c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f160:	7bfb      	ldrb	r3, [r7, #15]
 800f162:	3301      	adds	r3, #1
 800f164:	73fb      	strb	r3, [r7, #15]
 800f166:	7bfb      	ldrb	r3, [r7, #15]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d0e5      	beq.n	800f138 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f172:	2b00      	cmp	r3, #0
 800f174:	d016      	beq.n	800f1a4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	4798      	blx	r3
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d109      	bne.n	800f19c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2206      	movs	r2, #6
 800f18c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f194:	2103      	movs	r1, #3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f19a:	e073      	b.n	800f284 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	220d      	movs	r2, #13
 800f1a0:	701a      	strb	r2, [r3, #0]
      break;
 800f1a2:	e06f      	b.n	800f284 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	220d      	movs	r2, #13
 800f1a8:	701a      	strb	r2, [r3, #0]
      break;
 800f1aa:	e06b      	b.n	800f284 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d017      	beq.n	800f1e6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	4798      	blx	r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d103      	bne.n	800f1d6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	220b      	movs	r2, #11
 800f1d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1d4:	e058      	b.n	800f288 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d154      	bne.n	800f288 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	220d      	movs	r2, #13
 800f1e2:	701a      	strb	r2, [r3, #0]
      break;
 800f1e4:	e050      	b.n	800f288 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	220d      	movs	r2, #13
 800f1ea:	701a      	strb	r2, [r3, #0]
      break;
 800f1ec:	e04c      	b.n	800f288 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d049      	beq.n	800f28c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	4798      	blx	r3
      }
      break;
 800f204:	e042      	b.n	800f28c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7ff fd72 	bl	800ecf8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d009      	beq.n	800f232 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d005      	beq.n	800f248 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f242:	2105      	movs	r1, #5
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	d107      	bne.n	800f264 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff fe2b 	bl	800eeb8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f262:	e014      	b.n	800f28e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f001 f9b5 	bl	80105d4 <USBH_LL_Start>
      break;
 800f26a:	e010      	b.n	800f28e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f26c:	bf00      	nop
 800f26e:	e00e      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f270:	bf00      	nop
 800f272:	e00c      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f274:	bf00      	nop
 800f276:	e00a      	b.n	800f28e <USBH_Process+0x3b6>
    break;
 800f278:	bf00      	nop
 800f27a:	e008      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f27c:	bf00      	nop
 800f27e:	e006      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f280:	bf00      	nop
 800f282:	e004      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f284:	bf00      	nop
 800f286:	e002      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f288:	bf00      	nop
 800f28a:	e000      	b.n	800f28e <USBH_Process+0x3b6>
      break;
 800f28c:	bf00      	nop
  }
  return USBH_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b088      	sub	sp, #32
 800f29c:	af04      	add	r7, sp, #16
 800f29e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	785b      	ldrb	r3, [r3, #1]
 800f2ac:	2b07      	cmp	r3, #7
 800f2ae:	f200 81c1 	bhi.w	800f634 <USBH_HandleEnum+0x39c>
 800f2b2:	a201      	add	r2, pc, #4	; (adr r2, 800f2b8 <USBH_HandleEnum+0x20>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f2d9 	.word	0x0800f2d9
 800f2bc:	0800f397 	.word	0x0800f397
 800f2c0:	0800f401 	.word	0x0800f401
 800f2c4:	0800f48f 	.word	0x0800f48f
 800f2c8:	0800f4f9 	.word	0x0800f4f9
 800f2cc:	0800f569 	.word	0x0800f569
 800f2d0:	0800f5af 	.word	0x0800f5af
 800f2d4:	0800f5f5 	.word	0x0800f5f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f2d8:	2108      	movs	r1, #8
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fa50 	bl	800f780 <USBH_Get_DevDesc>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d130      	bne.n	800f34c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7919      	ldrb	r1, [r3, #4]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f30e:	b292      	uxth	r2, r2
 800f310:	9202      	str	r2, [sp, #8]
 800f312:	2200      	movs	r2, #0
 800f314:	9201      	str	r2, [sp, #4]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	4603      	mov	r3, r0
 800f31a:	2280      	movs	r2, #128	; 0x80
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 ff77 	bl	8010210 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	7959      	ldrb	r1, [r3, #5]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f336:	b292      	uxth	r2, r2
 800f338:	9202      	str	r2, [sp, #8]
 800f33a:	2200      	movs	r2, #0
 800f33c:	9201      	str	r2, [sp, #4]
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	4603      	mov	r3, r0
 800f342:	2200      	movs	r2, #0
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 ff63 	bl	8010210 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f34a:	e175      	b.n	800f638 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	2b03      	cmp	r3, #3
 800f350:	f040 8172 	bne.w	800f638 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f35a:	3301      	adds	r3, #1
 800f35c:	b2da      	uxtb	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f36a:	2b03      	cmp	r3, #3
 800f36c:	d903      	bls.n	800f376 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	220d      	movs	r2, #13
 800f372:	701a      	strb	r2, [r3, #0]
      break;
 800f374:	e160      	b.n	800f638 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	795b      	ldrb	r3, [r3, #5]
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 ff97 	bl	80102b0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	791b      	ldrb	r3, [r3, #4]
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 ff91 	bl	80102b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	701a      	strb	r2, [r3, #0]
      break;
 800f394:	e150      	b.n	800f638 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f396:	2112      	movs	r1, #18
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f9f1 	bl	800f780 <USBH_Get_DevDesc>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f3a2:	7bbb      	ldrb	r3, [r7, #14]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d103      	bne.n	800f3b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2202      	movs	r2, #2
 800f3ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f3ae:	e145      	b.n	800f63c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	2b03      	cmp	r3, #3
 800f3b4:	f040 8142 	bne.w	800f63c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3be:	3301      	adds	r3, #1
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d903      	bls.n	800f3da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	220d      	movs	r2, #13
 800f3d6:	701a      	strb	r2, [r3, #0]
      break;
 800f3d8:	e130      	b.n	800f63c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	795b      	ldrb	r3, [r3, #5]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 ff65 	bl	80102b0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	791b      	ldrb	r3, [r3, #4]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 ff5f 	bl	80102b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
      break;
 800f3fe:	e11d      	b.n	800f63c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f400:	2101      	movs	r1, #1
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fa68 	bl	800f8d8 <USBH_SetAddress>
 800f408:	4603      	mov	r3, r0
 800f40a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f40c:	7bbb      	ldrb	r3, [r7, #14]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d132      	bne.n	800f478 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f412:	2002      	movs	r0, #2
 800f414:	f001 fa39 	bl	801088a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2203      	movs	r2, #3
 800f424:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	7919      	ldrb	r1, [r3, #4]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f43a:	b292      	uxth	r2, r2
 800f43c:	9202      	str	r2, [sp, #8]
 800f43e:	2200      	movs	r2, #0
 800f440:	9201      	str	r2, [sp, #4]
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	4603      	mov	r3, r0
 800f446:	2280      	movs	r2, #128	; 0x80
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fee1 	bl	8010210 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	7959      	ldrb	r1, [r3, #5]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f462:	b292      	uxth	r2, r2
 800f464:	9202      	str	r2, [sp, #8]
 800f466:	2200      	movs	r2, #0
 800f468:	9201      	str	r2, [sp, #4]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4603      	mov	r3, r0
 800f46e:	2200      	movs	r2, #0
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 fecd 	bl	8010210 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f476:	e0e3      	b.n	800f640 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f478:	7bbb      	ldrb	r3, [r7, #14]
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	f040 80e0 	bne.w	800f640 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	220d      	movs	r2, #13
 800f484:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	705a      	strb	r2, [r3, #1]
      break;
 800f48c:	e0d8      	b.n	800f640 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f48e:	2109      	movs	r1, #9
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f99d 	bl	800f7d0 <USBH_Get_CfgDesc>
 800f496:	4603      	mov	r3, r0
 800f498:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f49a:	7bbb      	ldrb	r3, [r7, #14]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d103      	bne.n	800f4a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2204      	movs	r2, #4
 800f4a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f4a6:	e0cd      	b.n	800f644 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4a8:	7bbb      	ldrb	r3, [r7, #14]
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	f040 80ca 	bne.w	800f644 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d903      	bls.n	800f4d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	220d      	movs	r2, #13
 800f4ce:	701a      	strb	r2, [r3, #0]
      break;
 800f4d0:	e0b8      	b.n	800f644 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	795b      	ldrb	r3, [r3, #5]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fee9 	bl	80102b0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	791b      	ldrb	r3, [r3, #4]
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fee3 	bl	80102b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	701a      	strb	r2, [r3, #0]
      break;
 800f4f6:	e0a5      	b.n	800f644 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 f965 	bl	800f7d0 <USBH_Get_CfgDesc>
 800f506:	4603      	mov	r3, r0
 800f508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d103      	bne.n	800f518 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2205      	movs	r2, #5
 800f514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f516:	e097      	b.n	800f648 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	f040 8094 	bne.w	800f648 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f526:	3301      	adds	r3, #1
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f536:	2b03      	cmp	r3, #3
 800f538:	d903      	bls.n	800f542 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	220d      	movs	r2, #13
 800f53e:	701a      	strb	r2, [r3, #0]
      break;
 800f540:	e082      	b.n	800f648 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	795b      	ldrb	r3, [r3, #5]
 800f546:	4619      	mov	r1, r3
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 feb1 	bl	80102b0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	791b      	ldrb	r3, [r3, #4]
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 feab 	bl	80102b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	701a      	strb	r2, [r3, #0]
      break;
 800f566:	e06f      	b.n	800f648 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d019      	beq.n	800f5a6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f57e:	23ff      	movs	r3, #255	; 0xff
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f949 	bl	800f818 <USBH_Get_StringDesc>
 800f586:	4603      	mov	r3, r0
 800f588:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f58a:	7bbb      	ldrb	r3, [r7, #14]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d103      	bne.n	800f598 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2206      	movs	r2, #6
 800f594:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f596:	e059      	b.n	800f64c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f598:	7bbb      	ldrb	r3, [r7, #14]
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d156      	bne.n	800f64c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2206      	movs	r2, #6
 800f5a2:	705a      	strb	r2, [r3, #1]
      break;
 800f5a4:	e052      	b.n	800f64c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2206      	movs	r2, #6
 800f5aa:	705a      	strb	r2, [r3, #1]
      break;
 800f5ac:	e04e      	b.n	800f64c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d019      	beq.n	800f5ec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5c4:	23ff      	movs	r3, #255	; 0xff
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f926 	bl	800f818 <USBH_Get_StringDesc>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d103      	bne.n	800f5de <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2207      	movs	r2, #7
 800f5da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f5dc:	e038      	b.n	800f650 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	2b03      	cmp	r3, #3
 800f5e2:	d135      	bne.n	800f650 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2207      	movs	r2, #7
 800f5e8:	705a      	strb	r2, [r3, #1]
      break;
 800f5ea:	e031      	b.n	800f650 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2207      	movs	r2, #7
 800f5f0:	705a      	strb	r2, [r3, #1]
      break;
 800f5f2:	e02d      	b.n	800f650 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d017      	beq.n	800f62e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f60a:	23ff      	movs	r3, #255	; 0xff
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f000 f903 	bl	800f818 <USBH_Get_StringDesc>
 800f612:	4603      	mov	r3, r0
 800f614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f616:	7bbb      	ldrb	r3, [r7, #14]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f620:	e018      	b.n	800f654 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f622:	7bbb      	ldrb	r3, [r7, #14]
 800f624:	2b03      	cmp	r3, #3
 800f626:	d115      	bne.n	800f654 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
      break;
 800f62c:	e012      	b.n	800f654 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	73fb      	strb	r3, [r7, #15]
      break;
 800f632:	e00f      	b.n	800f654 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f634:	bf00      	nop
 800f636:	e00e      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f638:	bf00      	nop
 800f63a:	e00c      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f63c:	bf00      	nop
 800f63e:	e00a      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f640:	bf00      	nop
 800f642:	e008      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f644:	bf00      	nop
 800f646:	e006      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f648:	bf00      	nop
 800f64a:	e004      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f64c:	bf00      	nop
 800f64e:	e002      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f650:	bf00      	nop
 800f652:	e000      	b.n	800f656 <USBH_HandleEnum+0x3be>
      break;
 800f654:	bf00      	nop
  }
  return Status;
 800f656:	7bfb      	ldrb	r3, [r7, #15]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	683a      	ldr	r2, [r7, #0]
 800f66e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f672:	bf00      	nop
 800f674:	370c      	adds	r7, #12
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr

0800f67e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f68c:	1c5a      	adds	r2, r3, #1
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f804 	bl	800f6a2 <USBH_HandleSof>
}
 800f69a:	bf00      	nop
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b0b      	cmp	r3, #11
 800f6b2:	d10a      	bne.n	800f6ca <USBH_HandleSof+0x28>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d005      	beq.n	800f6ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	4798      	blx	r3
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f6e2:	bf00      	nop
}
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f6fe:	bf00      	nop
}
 800f700:	370c      	adds	r7, #12
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr

0800f70a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f70a:	b480      	push	{r7}
 800f70c:	b083      	sub	sp, #12
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2201      	movs	r2, #1
 800f716:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 ff56 	bl	801060a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	791b      	ldrb	r3, [r3, #4]
 800f762:	4619      	mov	r1, r3
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 fda3 	bl	80102b0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	795b      	ldrb	r3, [r3, #5]
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 fd9d 	bl	80102b0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af02      	add	r7, sp, #8
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f792:	78fb      	ldrb	r3, [r7, #3]
 800f794:	b29b      	uxth	r3, r3
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	4613      	mov	r3, r2
 800f79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f79e:	2100      	movs	r1, #0
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f000 f864 	bl	800f86e <USBH_GetDescriptor>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	73fb      	strb	r3, [r7, #15]
 800f7aa:	7bfb      	ldrb	r3, [r7, #15]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10a      	bne.n	800f7c6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f7bc:	78fa      	ldrb	r2, [r7, #3]
 800f7be:	b292      	uxth	r2, r2
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	f000 f918 	bl	800f9f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af02      	add	r7, sp, #8
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	460b      	mov	r3, r1
 800f7da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	331c      	adds	r3, #28
 800f7e0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f7e2:	887b      	ldrh	r3, [r7, #2]
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f83d 	bl	800f86e <USBH_GetDescriptor>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	72fb      	strb	r3, [r7, #11]
 800f7f8:	7afb      	ldrb	r3, [r7, #11]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d107      	bne.n	800f80e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f804:	887a      	ldrh	r2, [r7, #2]
 800f806:	68f9      	ldr	r1, [r7, #12]
 800f808:	4618      	mov	r0, r3
 800f80a:	f000 f964 	bl	800fad6 <USBH_ParseCfgDesc>
  }

  return status;
 800f80e:	7afb      	ldrb	r3, [r7, #11]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af02      	add	r7, sp, #8
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	607a      	str	r2, [r7, #4]
 800f822:	461a      	mov	r2, r3
 800f824:	460b      	mov	r3, r1
 800f826:	72fb      	strb	r3, [r7, #11]
 800f828:	4613      	mov	r3, r2
 800f82a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f82c:	7afb      	ldrb	r3, [r7, #11]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f834:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f83c:	893b      	ldrh	r3, [r7, #8]
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	460b      	mov	r3, r1
 800f842:	2100      	movs	r1, #0
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 f812 	bl	800f86e <USBH_GetDescriptor>
 800f84a:	4603      	mov	r3, r0
 800f84c:	75fb      	strb	r3, [r7, #23]
 800f84e:	7dfb      	ldrb	r3, [r7, #23]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d107      	bne.n	800f864 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f85a:	893a      	ldrh	r2, [r7, #8]
 800f85c:	6879      	ldr	r1, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f000 fa37 	bl	800fcd2 <USBH_ParseStringDesc>
  }

  return status;
 800f864:	7dfb      	ldrb	r3, [r7, #23]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b084      	sub	sp, #16
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	607b      	str	r3, [r7, #4]
 800f878:	460b      	mov	r3, r1
 800f87a:	72fb      	strb	r3, [r7, #11]
 800f87c:	4613      	mov	r3, r2
 800f87e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	789b      	ldrb	r3, [r3, #2]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d11c      	bne.n	800f8c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f888:	7afb      	ldrb	r3, [r7, #11]
 800f88a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2206      	movs	r2, #6
 800f898:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	893a      	ldrh	r2, [r7, #8]
 800f89e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f8a0:	893b      	ldrh	r3, [r7, #8]
 800f8a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f8a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8aa:	d104      	bne.n	800f8b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f240 4209 	movw	r2, #1033	; 0x409
 800f8b2:	829a      	strh	r2, [r3, #20]
 800f8b4:	e002      	b.n	800f8bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	8b3a      	ldrh	r2, [r7, #24]
 800f8c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f8c2:	8b3b      	ldrh	r3, [r7, #24]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	6879      	ldr	r1, [r7, #4]
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f000 fa50 	bl	800fd6e <USBH_CtlReq>
 800f8ce:	4603      	mov	r3, r0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	789b      	ldrb	r3, [r3, #2]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d10f      	bne.n	800f90c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2205      	movs	r2, #5
 800f8f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f8f8:	78fb      	ldrb	r3, [r7, #3]
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f90c:	2200      	movs	r2, #0
 800f90e:	2100      	movs	r1, #0
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fa2c 	bl	800fd6e <USBH_CtlReq>
 800f916:	4603      	mov	r3, r0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d10e      	bne.n	800f952 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2209      	movs	r2, #9
 800f93e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	887a      	ldrh	r2, [r7, #2]
 800f944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f952:	2200      	movs	r2, #0
 800f954:	2100      	movs	r1, #0
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fa09 	bl	800fd6e <USBH_CtlReq>
 800f95c:	4603      	mov	r3, r0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	460b      	mov	r3, r1
 800f970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	789b      	ldrb	r3, [r3, #2]
 800f976:	2b01      	cmp	r3, #1
 800f978:	d10f      	bne.n	800f99a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2203      	movs	r2, #3
 800f984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f986:	78fb      	ldrb	r3, [r7, #3]
 800f988:	b29a      	uxth	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2200      	movs	r2, #0
 800f992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f99a:	2200      	movs	r2, #0
 800f99c:	2100      	movs	r1, #0
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f9e5 	bl	800fd6e <USBH_CtlReq>
 800f9a4:	4603      	mov	r3, r0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	789b      	ldrb	r3, [r3, #2]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d10f      	bne.n	800f9e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f9c1 	bl	800fd6e <USBH_CtlReq>
 800f9ec:	4603      	mov	r3, r0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f9f6:	b480      	push	{r7}
 800f9f8:	b085      	sub	sp, #20
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	4613      	mov	r3, r2
 800fa02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	781a      	ldrb	r2, [r3, #0]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	785a      	ldrb	r2, [r3, #1]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	3302      	adds	r3, #2
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	3303      	adds	r3, #3
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	021b      	lsls	r3, r3, #8
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	791a      	ldrb	r2, [r3, #4]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	795a      	ldrb	r2, [r3, #5]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	799a      	ldrb	r2, [r3, #6]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	79da      	ldrb	r2, [r3, #7]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800fa50:	88fb      	ldrh	r3, [r7, #6]
 800fa52:	2b08      	cmp	r3, #8
 800fa54:	d939      	bls.n	800faca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	3308      	adds	r3, #8
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	3309      	adds	r3, #9
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	021b      	lsls	r3, r3, #8
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	330a      	adds	r3, #10
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	330b      	adds	r3, #11
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	021b      	lsls	r3, r3, #8
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	4313      	orrs	r3, r2
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	330c      	adds	r3, #12
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	330d      	adds	r3, #13
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	021b      	lsls	r3, r3, #8
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4313      	orrs	r3, r2
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	7b9a      	ldrb	r2, [r3, #14]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	7bda      	ldrb	r2, [r3, #15]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	7c1a      	ldrb	r2, [r3, #16]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	7c5a      	ldrb	r2, [r3, #17]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	745a      	strb	r2, [r3, #17]
  }
}
 800faca:	bf00      	nop
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b08a      	sub	sp, #40	; 0x28
 800fada:	af00      	add	r7, sp, #0
 800fadc:	60f8      	str	r0, [r7, #12]
 800fade:	60b9      	str	r1, [r7, #8]
 800fae0:	4613      	mov	r3, r2
 800fae2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fae8:	2300      	movs	r3, #0
 800faea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800faee:	2300      	movs	r3, #0
 800faf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	781a      	ldrb	r2, [r3, #0]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	785a      	ldrb	r2, [r3, #1]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	3302      	adds	r3, #2
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	3303      	adds	r3, #3
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	021b      	lsls	r3, r3, #8
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	791a      	ldrb	r2, [r3, #4]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	795a      	ldrb	r2, [r3, #5]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	799a      	ldrb	r2, [r3, #6]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	79da      	ldrb	r2, [r3, #7]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	7a1a      	ldrb	r2, [r3, #8]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fb4c:	88fb      	ldrh	r3, [r7, #6]
 800fb4e:	2b09      	cmp	r3, #9
 800fb50:	d95f      	bls.n	800fc12 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fb52:	2309      	movs	r3, #9
 800fb54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fb56:	2300      	movs	r3, #0
 800fb58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fb5a:	e051      	b.n	800fc00 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fb5c:	f107 0316 	add.w	r3, r7, #22
 800fb60:	4619      	mov	r1, r3
 800fb62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb64:	f000 f8e8 	bl	800fd38 <USBH_GetNextDesc>
 800fb68:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	785b      	ldrb	r3, [r3, #1]
 800fb6e:	2b04      	cmp	r3, #4
 800fb70:	d146      	bne.n	800fc00 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fb72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb76:	221a      	movs	r2, #26
 800fb78:	fb02 f303 	mul.w	r3, r2, r3
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4413      	add	r3, r2
 800fb82:	3302      	adds	r3, #2
 800fb84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fb86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb88:	69f8      	ldr	r0, [r7, #28]
 800fb8a:	f000 f846 	bl	800fc1a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fb94:	2300      	movs	r3, #0
 800fb96:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fb98:	e022      	b.n	800fbe0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fb9a:	f107 0316 	add.w	r3, r7, #22
 800fb9e:	4619      	mov	r1, r3
 800fba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fba2:	f000 f8c9 	bl	800fd38 <USBH_GetNextDesc>
 800fba6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	785b      	ldrb	r3, [r3, #1]
 800fbac:	2b05      	cmp	r3, #5
 800fbae:	d117      	bne.n	800fbe0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fbb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fbb8:	3201      	adds	r2, #1
 800fbba:	00d2      	lsls	r2, r2, #3
 800fbbc:	211a      	movs	r1, #26
 800fbbe:	fb01 f303 	mul.w	r3, r1, r3
 800fbc2:	4413      	add	r3, r2
 800fbc4:	3308      	adds	r3, #8
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	4413      	add	r3, r2
 800fbca:	3304      	adds	r3, #4
 800fbcc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800fbce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbd0:	69b8      	ldr	r0, [r7, #24]
 800fbd2:	f000 f851 	bl	800fc78 <USBH_ParseEPDesc>
            ep_ix++;
 800fbd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fbda:	3301      	adds	r3, #1
 800fbdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	791b      	ldrb	r3, [r3, #4]
 800fbe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d204      	bcs.n	800fbf6 <USBH_ParseCfgDesc+0x120>
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	885a      	ldrh	r2, [r3, #2]
 800fbf0:	8afb      	ldrh	r3, [r7, #22]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d8d1      	bhi.n	800fb9a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fbf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fc00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d804      	bhi.n	800fc12 <USBH_ParseCfgDesc+0x13c>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	885a      	ldrh	r2, [r3, #2]
 800fc0c:	8afb      	ldrh	r3, [r7, #22]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d8a4      	bhi.n	800fb5c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fc12:	bf00      	nop
 800fc14:	3728      	adds	r7, #40	; 0x28
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	781a      	ldrb	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	785a      	ldrb	r2, [r3, #1]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	789a      	ldrb	r2, [r3, #2]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	78da      	ldrb	r2, [r3, #3]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	791a      	ldrb	r2, [r3, #4]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	795a      	ldrb	r2, [r3, #5]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	799a      	ldrb	r2, [r3, #6]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	79da      	ldrb	r2, [r3, #7]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	7a1a      	ldrb	r2, [r3, #8]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	721a      	strb	r2, [r3, #8]
}
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781a      	ldrb	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	785a      	ldrb	r2, [r3, #1]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	789a      	ldrb	r2, [r3, #2]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	78da      	ldrb	r2, [r3, #3]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	3304      	adds	r3, #4
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	3305      	adds	r3, #5
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	021b      	lsls	r3, r3, #8
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	799a      	ldrb	r2, [r3, #6]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	719a      	strb	r2, [r3, #6]
}
 800fcc6:	bf00      	nop
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b087      	sub	sp, #28
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	60f8      	str	r0, [r7, #12]
 800fcda:	60b9      	str	r1, [r7, #8]
 800fcdc:	4613      	mov	r3, r2
 800fcde:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	3301      	adds	r3, #1
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d120      	bne.n	800fd2c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	1e9a      	subs	r2, r3, #2
 800fcf0:	88fb      	ldrh	r3, [r7, #6]
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	bf28      	it	cs
 800fcf6:	4613      	movcs	r3, r2
 800fcf8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	3302      	adds	r3, #2
 800fcfe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fd00:	2300      	movs	r3, #0
 800fd02:	82fb      	strh	r3, [r7, #22]
 800fd04:	e00b      	b.n	800fd1e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fd06:	8afb      	ldrh	r3, [r7, #22]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	781a      	ldrb	r2, [r3, #0]
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	3301      	adds	r3, #1
 800fd16:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fd18:	8afb      	ldrh	r3, [r7, #22]
 800fd1a:	3302      	adds	r3, #2
 800fd1c:	82fb      	strh	r3, [r7, #22]
 800fd1e:	8afa      	ldrh	r2, [r7, #22]
 800fd20:	8abb      	ldrh	r3, [r7, #20]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d3ef      	bcc.n	800fd06 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]
  }
}
 800fd2c:	bf00      	nop
 800fd2e:	371c      	adds	r7, #28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	881a      	ldrh	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	4413      	add	r3, r2
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fd60:	68fb      	ldr	r3, [r7, #12]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b086      	sub	sp, #24
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	60f8      	str	r0, [r7, #12]
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	4613      	mov	r3, r2
 800fd7a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	789b      	ldrb	r3, [r3, #2]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d002      	beq.n	800fd8e <USBH_CtlReq+0x20>
 800fd88:	2b02      	cmp	r3, #2
 800fd8a:	d00f      	beq.n	800fdac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fd8c:	e027      	b.n	800fdde <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	88fa      	ldrh	r2, [r7, #6]
 800fd98:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2202      	movs	r2, #2
 800fda4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fda6:	2301      	movs	r3, #1
 800fda8:	75fb      	strb	r3, [r7, #23]
      break;
 800fdaa:	e018      	b.n	800fdde <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f000 f81b 	bl	800fde8 <USBH_HandleControl>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d002      	beq.n	800fdc2 <USBH_CtlReq+0x54>
 800fdbc:	7dfb      	ldrb	r3, [r7, #23]
 800fdbe:	2b03      	cmp	r3, #3
 800fdc0:	d106      	bne.n	800fdd0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	761a      	strb	r2, [r3, #24]
      break;
 800fdce:	e005      	b.n	800fddc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fdd0:	7dfb      	ldrb	r3, [r7, #23]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d102      	bne.n	800fddc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	709a      	strb	r2, [r3, #2]
      break;
 800fddc:	bf00      	nop
  }
  return status;
 800fdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3718      	adds	r7, #24
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af02      	add	r7, sp, #8
 800fdee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7e1b      	ldrb	r3, [r3, #24]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	2b0a      	cmp	r3, #10
 800fe00:	f200 8156 	bhi.w	80100b0 <USBH_HandleControl+0x2c8>
 800fe04:	a201      	add	r2, pc, #4	; (adr r2, 800fe0c <USBH_HandleControl+0x24>)
 800fe06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0a:	bf00      	nop
 800fe0c:	0800fe39 	.word	0x0800fe39
 800fe10:	0800fe53 	.word	0x0800fe53
 800fe14:	0800febd 	.word	0x0800febd
 800fe18:	0800fee3 	.word	0x0800fee3
 800fe1c:	0800ff1b 	.word	0x0800ff1b
 800fe20:	0800ff45 	.word	0x0800ff45
 800fe24:	0800ff97 	.word	0x0800ff97
 800fe28:	0800ffb9 	.word	0x0800ffb9
 800fe2c:	0800fff5 	.word	0x0800fff5
 800fe30:	0801001b 	.word	0x0801001b
 800fe34:	08010059 	.word	0x08010059
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f103 0110 	add.w	r1, r3, #16
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	795b      	ldrb	r3, [r3, #5]
 800fe42:	461a      	mov	r2, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f943 	bl	80100d0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	761a      	strb	r2, [r3, #24]
      break;
 800fe50:	e139      	b.n	80100c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	795b      	ldrb	r3, [r3, #5]
 800fe56:	4619      	mov	r1, r3
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 fcc5 	bl	80107e8 <USBH_LL_GetURBState>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe62:	7bbb      	ldrb	r3, [r7, #14]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d11e      	bne.n	800fea6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7c1b      	ldrb	r3, [r3, #16]
 800fe6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fe70:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	8adb      	ldrh	r3, [r3, #22]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00a      	beq.n	800fe90 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fe7a:	7b7b      	ldrb	r3, [r7, #13]
 800fe7c:	2b80      	cmp	r3, #128	; 0x80
 800fe7e:	d103      	bne.n	800fe88 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2203      	movs	r2, #3
 800fe84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe86:	e115      	b.n	80100b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2205      	movs	r2, #5
 800fe8c:	761a      	strb	r2, [r3, #24]
      break;
 800fe8e:	e111      	b.n	80100b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fe90:	7b7b      	ldrb	r3, [r7, #13]
 800fe92:	2b80      	cmp	r3, #128	; 0x80
 800fe94:	d103      	bne.n	800fe9e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2209      	movs	r2, #9
 800fe9a:	761a      	strb	r2, [r3, #24]
      break;
 800fe9c:	e10a      	b.n	80100b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2207      	movs	r2, #7
 800fea2:	761a      	strb	r2, [r3, #24]
      break;
 800fea4:	e106      	b.n	80100b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	2b04      	cmp	r3, #4
 800feaa:	d003      	beq.n	800feb4 <USBH_HandleControl+0xcc>
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	2b02      	cmp	r3, #2
 800feb0:	f040 8100 	bne.w	80100b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	220b      	movs	r2, #11
 800feb8:	761a      	strb	r2, [r3, #24]
      break;
 800feba:	e0fb      	b.n	80100b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6899      	ldr	r1, [r3, #8]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	899a      	ldrh	r2, [r3, #12]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	791b      	ldrb	r3, [r3, #4]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f93a 	bl	801014e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2204      	movs	r2, #4
 800fede:	761a      	strb	r2, [r3, #24]
      break;
 800fee0:	e0f1      	b.n	80100c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	791b      	ldrb	r3, [r3, #4]
 800fee6:	4619      	mov	r1, r3
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 fc7d 	bl	80107e8 <USBH_LL_GetURBState>
 800feee:	4603      	mov	r3, r0
 800fef0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fef2:	7bbb      	ldrb	r3, [r7, #14]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d102      	bne.n	800fefe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2209      	movs	r2, #9
 800fefc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fefe:	7bbb      	ldrb	r3, [r7, #14]
 800ff00:	2b05      	cmp	r3, #5
 800ff02:	d102      	bne.n	800ff0a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ff04:	2303      	movs	r3, #3
 800ff06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff08:	e0d6      	b.n	80100b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	2b04      	cmp	r3, #4
 800ff0e:	f040 80d3 	bne.w	80100b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	220b      	movs	r2, #11
 800ff16:	761a      	strb	r2, [r3, #24]
      break;
 800ff18:	e0ce      	b.n	80100b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6899      	ldr	r1, [r3, #8]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	899a      	ldrh	r2, [r3, #12]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	795b      	ldrb	r3, [r3, #5]
 800ff26:	2001      	movs	r0, #1
 800ff28:	9000      	str	r0, [sp, #0]
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f8ea 	bl	8010104 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2206      	movs	r2, #6
 800ff40:	761a      	strb	r2, [r3, #24]
      break;
 800ff42:	e0c0      	b.n	80100c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	795b      	ldrb	r3, [r3, #5]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 fc4c 	bl	80107e8 <USBH_LL_GetURBState>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ff54:	7bbb      	ldrb	r3, [r7, #14]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d103      	bne.n	800ff62 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2207      	movs	r2, #7
 800ff5e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff60:	e0ac      	b.n	80100bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ff62:	7bbb      	ldrb	r3, [r7, #14]
 800ff64:	2b05      	cmp	r3, #5
 800ff66:	d105      	bne.n	800ff74 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	220c      	movs	r2, #12
 800ff6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	73fb      	strb	r3, [r7, #15]
      break;
 800ff72:	e0a3      	b.n	80100bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d103      	bne.n	800ff82 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2205      	movs	r2, #5
 800ff7e:	761a      	strb	r2, [r3, #24]
      break;
 800ff80:	e09c      	b.n	80100bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
 800ff84:	2b04      	cmp	r3, #4
 800ff86:	f040 8099 	bne.w	80100bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	220b      	movs	r2, #11
 800ff8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ff90:	2302      	movs	r3, #2
 800ff92:	73fb      	strb	r3, [r7, #15]
      break;
 800ff94:	e092      	b.n	80100bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	791b      	ldrb	r3, [r3, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f8d5 	bl	801014e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2208      	movs	r2, #8
 800ffb4:	761a      	strb	r2, [r3, #24]

      break;
 800ffb6:	e086      	b.n	80100c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	791b      	ldrb	r3, [r3, #4]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fc12 	bl	80107e8 <USBH_LL_GetURBState>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ffc8:	7bbb      	ldrb	r3, [r7, #14]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d105      	bne.n	800ffda <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	220d      	movs	r2, #13
 800ffd2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ffd8:	e072      	b.n	80100c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	2b04      	cmp	r3, #4
 800ffde:	d103      	bne.n	800ffe8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	220b      	movs	r2, #11
 800ffe4:	761a      	strb	r2, [r3, #24]
      break;
 800ffe6:	e06b      	b.n	80100c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ffe8:	7bbb      	ldrb	r3, [r7, #14]
 800ffea:	2b05      	cmp	r3, #5
 800ffec:	d168      	bne.n	80100c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ffee:	2303      	movs	r3, #3
 800fff0:	73fb      	strb	r3, [r7, #15]
      break;
 800fff2:	e065      	b.n	80100c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	795b      	ldrb	r3, [r3, #5]
 800fff8:	2201      	movs	r2, #1
 800fffa:	9200      	str	r2, [sp, #0]
 800fffc:	2200      	movs	r2, #0
 800fffe:	2100      	movs	r1, #0
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 f87f 	bl	8010104 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801000c:	b29a      	uxth	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	220a      	movs	r2, #10
 8010016:	761a      	strb	r2, [r3, #24]
      break;
 8010018:	e055      	b.n	80100c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	795b      	ldrb	r3, [r3, #5]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fbe1 	bl	80107e8 <USBH_LL_GetURBState>
 8010026:	4603      	mov	r3, r0
 8010028:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801002a:	7bbb      	ldrb	r3, [r7, #14]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d105      	bne.n	801003c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	220d      	movs	r2, #13
 8010038:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801003a:	e043      	b.n	80100c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801003c:	7bbb      	ldrb	r3, [r7, #14]
 801003e:	2b02      	cmp	r3, #2
 8010040:	d103      	bne.n	801004a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2209      	movs	r2, #9
 8010046:	761a      	strb	r2, [r3, #24]
      break;
 8010048:	e03c      	b.n	80100c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801004a:	7bbb      	ldrb	r3, [r7, #14]
 801004c:	2b04      	cmp	r3, #4
 801004e:	d139      	bne.n	80100c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	220b      	movs	r2, #11
 8010054:	761a      	strb	r2, [r3, #24]
      break;
 8010056:	e035      	b.n	80100c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7e5b      	ldrb	r3, [r3, #25]
 801005c:	3301      	adds	r3, #1
 801005e:	b2da      	uxtb	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	765a      	strb	r2, [r3, #25]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	7e5b      	ldrb	r3, [r3, #25]
 8010068:	2b02      	cmp	r3, #2
 801006a:	d806      	bhi.n	801007a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2201      	movs	r2, #1
 8010076:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010078:	e025      	b.n	80100c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010080:	2106      	movs	r1, #6
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	795b      	ldrb	r3, [r3, #5]
 8010090:	4619      	mov	r1, r3
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f90c 	bl	80102b0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	791b      	ldrb	r3, [r3, #4]
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f906 	bl	80102b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80100aa:	2302      	movs	r3, #2
 80100ac:	73fb      	strb	r3, [r7, #15]
      break;
 80100ae:	e00a      	b.n	80100c6 <USBH_HandleControl+0x2de>

    default:
      break;
 80100b0:	bf00      	nop
 80100b2:	e008      	b.n	80100c6 <USBH_HandleControl+0x2de>
      break;
 80100b4:	bf00      	nop
 80100b6:	e006      	b.n	80100c6 <USBH_HandleControl+0x2de>
      break;
 80100b8:	bf00      	nop
 80100ba:	e004      	b.n	80100c6 <USBH_HandleControl+0x2de>
      break;
 80100bc:	bf00      	nop
 80100be:	e002      	b.n	80100c6 <USBH_HandleControl+0x2de>
      break;
 80100c0:	bf00      	nop
 80100c2:	e000      	b.n	80100c6 <USBH_HandleControl+0x2de>
      break;
 80100c4:	bf00      	nop
  }

  return status;
 80100c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b088      	sub	sp, #32
 80100d4:	af04      	add	r7, sp, #16
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	4613      	mov	r3, r2
 80100dc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80100de:	79f9      	ldrb	r1, [r7, #7]
 80100e0:	2300      	movs	r3, #0
 80100e2:	9303      	str	r3, [sp, #12]
 80100e4:	2308      	movs	r3, #8
 80100e6:	9302      	str	r3, [sp, #8]
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	2300      	movs	r3, #0
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	2300      	movs	r3, #0
 80100f2:	2200      	movs	r2, #0
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f000 fb46 	bl	8010786 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b088      	sub	sp, #32
 8010108:	af04      	add	r7, sp, #16
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	4611      	mov	r1, r2
 8010110:	461a      	mov	r2, r3
 8010112:	460b      	mov	r3, r1
 8010114:	80fb      	strh	r3, [r7, #6]
 8010116:	4613      	mov	r3, r2
 8010118:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010120:	2b00      	cmp	r3, #0
 8010122:	d001      	beq.n	8010128 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010124:	2300      	movs	r3, #0
 8010126:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010128:	7979      	ldrb	r1, [r7, #5]
 801012a:	7e3b      	ldrb	r3, [r7, #24]
 801012c:	9303      	str	r3, [sp, #12]
 801012e:	88fb      	ldrh	r3, [r7, #6]
 8010130:	9302      	str	r3, [sp, #8]
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	2301      	movs	r3, #1
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	2300      	movs	r3, #0
 801013c:	2200      	movs	r2, #0
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f000 fb21 	bl	8010786 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010144:	2300      	movs	r3, #0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b088      	sub	sp, #32
 8010152:	af04      	add	r7, sp, #16
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	4611      	mov	r1, r2
 801015a:	461a      	mov	r2, r3
 801015c:	460b      	mov	r3, r1
 801015e:	80fb      	strh	r3, [r7, #6]
 8010160:	4613      	mov	r3, r2
 8010162:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010164:	7979      	ldrb	r1, [r7, #5]
 8010166:	2300      	movs	r3, #0
 8010168:	9303      	str	r3, [sp, #12]
 801016a:	88fb      	ldrh	r3, [r7, #6]
 801016c:	9302      	str	r3, [sp, #8]
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	2301      	movs	r3, #1
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	2300      	movs	r3, #0
 8010178:	2201      	movs	r2, #1
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f000 fb03 	bl	8010786 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010180:	2300      	movs	r3, #0

}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b088      	sub	sp, #32
 801018e:	af04      	add	r7, sp, #16
 8010190:	60f8      	str	r0, [r7, #12]
 8010192:	60b9      	str	r1, [r7, #8]
 8010194:	4611      	mov	r1, r2
 8010196:	461a      	mov	r2, r3
 8010198:	460b      	mov	r3, r1
 801019a:	80fb      	strh	r3, [r7, #6]
 801019c:	4613      	mov	r3, r2
 801019e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80101aa:	2300      	movs	r3, #0
 80101ac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101ae:	7979      	ldrb	r1, [r7, #5]
 80101b0:	7e3b      	ldrb	r3, [r7, #24]
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	88fb      	ldrh	r3, [r7, #6]
 80101b6:	9302      	str	r3, [sp, #8]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	9301      	str	r3, [sp, #4]
 80101bc:	2301      	movs	r3, #1
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	2302      	movs	r3, #2
 80101c2:	2200      	movs	r2, #0
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	f000 fade 	bl	8010786 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af04      	add	r7, sp, #16
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4611      	mov	r1, r2
 80101e0:	461a      	mov	r2, r3
 80101e2:	460b      	mov	r3, r1
 80101e4:	80fb      	strh	r3, [r7, #6]
 80101e6:	4613      	mov	r3, r2
 80101e8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101ea:	7979      	ldrb	r1, [r7, #5]
 80101ec:	2300      	movs	r3, #0
 80101ee:	9303      	str	r3, [sp, #12]
 80101f0:	88fb      	ldrh	r3, [r7, #6]
 80101f2:	9302      	str	r3, [sp, #8]
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	2301      	movs	r3, #1
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	2302      	movs	r3, #2
 80101fe:	2201      	movs	r2, #1
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f000 fac0 	bl	8010786 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b086      	sub	sp, #24
 8010214:	af04      	add	r7, sp, #16
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	4608      	mov	r0, r1
 801021a:	4611      	mov	r1, r2
 801021c:	461a      	mov	r2, r3
 801021e:	4603      	mov	r3, r0
 8010220:	70fb      	strb	r3, [r7, #3]
 8010222:	460b      	mov	r3, r1
 8010224:	70bb      	strb	r3, [r7, #2]
 8010226:	4613      	mov	r3, r2
 8010228:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801022a:	7878      	ldrb	r0, [r7, #1]
 801022c:	78ba      	ldrb	r2, [r7, #2]
 801022e:	78f9      	ldrb	r1, [r7, #3]
 8010230:	8b3b      	ldrh	r3, [r7, #24]
 8010232:	9302      	str	r3, [sp, #8]
 8010234:	7d3b      	ldrb	r3, [r7, #20]
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	7c3b      	ldrb	r3, [r7, #16]
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	4603      	mov	r3, r0
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fa53 	bl	80106ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	460b      	mov	r3, r1
 8010258:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801025a:	78fb      	ldrb	r3, [r7, #3]
 801025c:	4619      	mov	r1, r3
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fa72 	bl	8010748 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b084      	sub	sp, #16
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
 8010276:	460b      	mov	r3, r1
 8010278:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f836 	bl	80102ec <USBH_GetFreePipe>
 8010280:	4603      	mov	r3, r0
 8010282:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010284:	89fb      	ldrh	r3, [r7, #14]
 8010286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801028a:	4293      	cmp	r3, r2
 801028c:	d00a      	beq.n	80102a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801028e:	78fa      	ldrb	r2, [r7, #3]
 8010290:	89fb      	ldrh	r3, [r7, #14]
 8010292:	f003 030f 	and.w	r3, r3, #15
 8010296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801029a:	6879      	ldr	r1, [r7, #4]
 801029c:	33e0      	adds	r3, #224	; 0xe0
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	440b      	add	r3, r1
 80102a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80102a4:	89fb      	ldrh	r3, [r7, #14]
 80102a6:	b2db      	uxtb	r3, r3
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80102bc:	78fb      	ldrb	r3, [r7, #3]
 80102be:	2b0a      	cmp	r3, #10
 80102c0:	d80d      	bhi.n	80102de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80102c2:	78fb      	ldrb	r3, [r7, #3]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	33e0      	adds	r3, #224	; 0xe0
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4413      	add	r3, r2
 80102cc:	685a      	ldr	r2, [r3, #4]
 80102ce:	78fb      	ldrb	r3, [r7, #3]
 80102d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80102d4:	6879      	ldr	r1, [r7, #4]
 80102d6:	33e0      	adds	r3, #224	; 0xe0
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	440b      	add	r3, r1
 80102dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80102de:	2300      	movs	r3, #0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b085      	sub	sp, #20
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80102f4:	2300      	movs	r3, #0
 80102f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
 80102fc:	e00f      	b.n	801031e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80102fe:	7bfb      	ldrb	r3, [r7, #15]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	33e0      	adds	r3, #224	; 0xe0
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801030e:	2b00      	cmp	r3, #0
 8010310:	d102      	bne.n	8010318 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	b29b      	uxth	r3, r3
 8010316:	e007      	b.n	8010328 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	3301      	adds	r3, #1
 801031c:	73fb      	strb	r3, [r7, #15]
 801031e:	7bfb      	ldrb	r3, [r7, #15]
 8010320:	2b0a      	cmp	r3, #10
 8010322:	d9ec      	bls.n	80102fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010324:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010338:	2201      	movs	r2, #1
 801033a:	490e      	ldr	r1, [pc, #56]	; (8010374 <MX_USB_HOST_Init+0x40>)
 801033c:	480e      	ldr	r0, [pc, #56]	; (8010378 <MX_USB_HOST_Init+0x44>)
 801033e:	f7fe fca1 	bl	800ec84 <USBH_Init>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010348:	f7f1 fe50 	bl	8001fec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801034c:	490b      	ldr	r1, [pc, #44]	; (801037c <MX_USB_HOST_Init+0x48>)
 801034e:	480a      	ldr	r0, [pc, #40]	; (8010378 <MX_USB_HOST_Init+0x44>)
 8010350:	f7fe fd26 	bl	800eda0 <USBH_RegisterClass>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801035a:	f7f1 fe47 	bl	8001fec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801035e:	4806      	ldr	r0, [pc, #24]	; (8010378 <MX_USB_HOST_Init+0x44>)
 8010360:	f7fe fdaa 	bl	800eeb8 <USBH_Start>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801036a:	f7f1 fe3f 	bl	8001fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801036e:	bf00      	nop
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08010395 	.word	0x08010395
 8010378:	200006b8 	.word	0x200006b8
 801037c:	200001ec 	.word	0x200001ec

08010380 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010384:	4802      	ldr	r0, [pc, #8]	; (8010390 <MX_USB_HOST_Process+0x10>)
 8010386:	f7fe fda7 	bl	800eed8 <USBH_Process>
}
 801038a:	bf00      	nop
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	200006b8 	.word	0x200006b8

08010394 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80103a0:	78fb      	ldrb	r3, [r7, #3]
 80103a2:	3b01      	subs	r3, #1
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d819      	bhi.n	80103dc <USBH_UserProcess+0x48>
 80103a8:	a201      	add	r2, pc, #4	; (adr r2, 80103b0 <USBH_UserProcess+0x1c>)
 80103aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ae:	bf00      	nop
 80103b0:	080103dd 	.word	0x080103dd
 80103b4:	080103cd 	.word	0x080103cd
 80103b8:	080103dd 	.word	0x080103dd
 80103bc:	080103d5 	.word	0x080103d5
 80103c0:	080103c5 	.word	0x080103c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80103c4:	4b09      	ldr	r3, [pc, #36]	; (80103ec <USBH_UserProcess+0x58>)
 80103c6:	2203      	movs	r2, #3
 80103c8:	701a      	strb	r2, [r3, #0]
  break;
 80103ca:	e008      	b.n	80103de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <USBH_UserProcess+0x58>)
 80103ce:	2202      	movs	r2, #2
 80103d0:	701a      	strb	r2, [r3, #0]
  break;
 80103d2:	e004      	b.n	80103de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <USBH_UserProcess+0x58>)
 80103d6:	2201      	movs	r2, #1
 80103d8:	701a      	strb	r2, [r3, #0]
  break;
 80103da:	e000      	b.n	80103de <USBH_UserProcess+0x4a>

  default:
  break;
 80103dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103de:	bf00      	nop
 80103e0:	370c      	adds	r7, #12
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	200002b5 	.word	0x200002b5

080103f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08a      	sub	sp, #40	; 0x28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	2200      	movs	r2, #0
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	605a      	str	r2, [r3, #4]
 8010402:	609a      	str	r2, [r3, #8]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010410:	d147      	bne.n	80104a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010412:	2300      	movs	r3, #0
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	4b25      	ldr	r3, [pc, #148]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 8010418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801041a:	4a24      	ldr	r2, [pc, #144]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	6313      	str	r3, [r2, #48]	; 0x30
 8010422:	4b22      	ldr	r3, [pc, #136]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 8010424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010426:	f003 0301 	and.w	r3, r3, #1
 801042a:	613b      	str	r3, [r7, #16]
 801042c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801042e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010434:	2300      	movs	r3, #0
 8010436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010438:	2300      	movs	r3, #0
 801043a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801043c:	f107 0314 	add.w	r3, r7, #20
 8010440:	4619      	mov	r1, r3
 8010442:	481b      	ldr	r0, [pc, #108]	; (80104b0 <HAL_HCD_MspInit+0xc0>)
 8010444:	f7f6 fbde 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010448:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801044c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801044e:	2302      	movs	r3, #2
 8010450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010452:	2300      	movs	r3, #0
 8010454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010456:	2300      	movs	r3, #0
 8010458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801045a:	230a      	movs	r3, #10
 801045c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801045e:	f107 0314 	add.w	r3, r7, #20
 8010462:	4619      	mov	r1, r3
 8010464:	4812      	ldr	r0, [pc, #72]	; (80104b0 <HAL_HCD_MspInit+0xc0>)
 8010466:	f7f6 fbcd 	bl	8006c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 801046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801046e:	4a0f      	ldr	r2, [pc, #60]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 8010470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010474:	6353      	str	r3, [r2, #52]	; 0x34
 8010476:	2300      	movs	r3, #0
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	4b0c      	ldr	r3, [pc, #48]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 801047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801047e:	4a0b      	ldr	r2, [pc, #44]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 8010480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010484:	6453      	str	r3, [r2, #68]	; 0x44
 8010486:	4b09      	ldr	r3, [pc, #36]	; (80104ac <HAL_HCD_MspInit+0xbc>)
 8010488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801048a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010492:	2200      	movs	r2, #0
 8010494:	2100      	movs	r1, #0
 8010496:	2043      	movs	r0, #67	; 0x43
 8010498:	f7f6 fb7d 	bl	8006b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801049c:	2043      	movs	r0, #67	; 0x43
 801049e:	f7f6 fb96 	bl	8006bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80104a2:	bf00      	nop
 80104a4:	3728      	adds	r7, #40	; 0x28
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	40023800 	.word	0x40023800
 80104b0:	40020000 	.word	0x40020000

080104b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7ff f8db 	bl	800f67e <USBH_LL_IncTimer>
}
 80104c8:	bf00      	nop
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff f913 	bl	800f70a <USBH_LL_Connect>
}
 80104e4:	bf00      	nop
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff f91c 	bl	800f738 <USBH_LL_Disconnect>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
 8010514:	4613      	mov	r3, r2
 8010516:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f8cd 	bl	800f6d2 <USBH_LL_PortEnabled>
}
 8010538:	bf00      	nop
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff f8cd 	bl	800f6ee <USBH_LL_PortDisabled>
}
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801056a:	2b01      	cmp	r3, #1
 801056c:	d12a      	bne.n	80105c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801056e:	4a18      	ldr	r2, [pc, #96]	; (80105d0 <USBH_LL_Init+0x74>)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4a15      	ldr	r2, [pc, #84]	; (80105d0 <USBH_LL_Init+0x74>)
 801057a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801057e:	4b14      	ldr	r3, [pc, #80]	; (80105d0 <USBH_LL_Init+0x74>)
 8010580:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010584:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010586:	4b12      	ldr	r3, [pc, #72]	; (80105d0 <USBH_LL_Init+0x74>)
 8010588:	2208      	movs	r2, #8
 801058a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801058c:	4b10      	ldr	r3, [pc, #64]	; (80105d0 <USBH_LL_Init+0x74>)
 801058e:	2201      	movs	r2, #1
 8010590:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010592:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <USBH_LL_Init+0x74>)
 8010594:	2200      	movs	r2, #0
 8010596:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010598:	4b0d      	ldr	r3, [pc, #52]	; (80105d0 <USBH_LL_Init+0x74>)
 801059a:	2202      	movs	r2, #2
 801059c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801059e:	4b0c      	ldr	r3, [pc, #48]	; (80105d0 <USBH_LL_Init+0x74>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80105a4:	480a      	ldr	r0, [pc, #40]	; (80105d0 <USBH_LL_Init+0x74>)
 80105a6:	f7f6 fd2d 	bl	8007004 <HAL_HCD_Init>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80105b0:	f7f1 fd1c 	bl	8001fec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80105b4:	4806      	ldr	r0, [pc, #24]	; (80105d0 <USBH_LL_Init+0x74>)
 80105b6:	f7f7 f909 	bl	80077cc <HAL_HCD_GetCurrentFrame>
 80105ba:	4603      	mov	r3, r0
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff f84e 	bl	800f660 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	20000a90 	.word	0x20000a90

080105d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f7 f878 	bl	80076e0 <HAL_HCD_Start>
 80105f0:	4603      	mov	r3, r0
 80105f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f952 	bl	80108a0 <USBH_Get_USB_Status>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010600:	7bbb      	ldrb	r3, [r7, #14]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b084      	sub	sp, #16
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010612:	2300      	movs	r3, #0
 8010614:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010620:	4618      	mov	r0, r3
 8010622:	f7f7 f880 	bl	8007726 <HAL_HCD_Stop>
 8010626:	4603      	mov	r3, r0
 8010628:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801062a:	7bfb      	ldrb	r3, [r7, #15]
 801062c:	4618      	mov	r0, r3
 801062e:	f000 f937 	bl	80108a0 <USBH_Get_USB_Status>
 8010632:	4603      	mov	r3, r0
 8010634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010636:	7bbb      	ldrb	r3, [r7, #14]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010648:	2301      	movs	r3, #1
 801064a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010652:	4618      	mov	r0, r3
 8010654:	f7f7 f8c8 	bl	80077e8 <HAL_HCD_GetCurrentSpeed>
 8010658:	4603      	mov	r3, r0
 801065a:	2b02      	cmp	r3, #2
 801065c:	d00c      	beq.n	8010678 <USBH_LL_GetSpeed+0x38>
 801065e:	2b02      	cmp	r3, #2
 8010660:	d80d      	bhi.n	801067e <USBH_LL_GetSpeed+0x3e>
 8010662:	2b00      	cmp	r3, #0
 8010664:	d002      	beq.n	801066c <USBH_LL_GetSpeed+0x2c>
 8010666:	2b01      	cmp	r3, #1
 8010668:	d003      	beq.n	8010672 <USBH_LL_GetSpeed+0x32>
 801066a:	e008      	b.n	801067e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
    break;
 8010670:	e008      	b.n	8010684 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010672:	2301      	movs	r3, #1
 8010674:	73fb      	strb	r3, [r7, #15]
    break;
 8010676:	e005      	b.n	8010684 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010678:	2302      	movs	r3, #2
 801067a:	73fb      	strb	r3, [r7, #15]
    break;
 801067c:	e002      	b.n	8010684 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801067e:	2301      	movs	r3, #1
 8010680:	73fb      	strb	r3, [r7, #15]
    break;
 8010682:	bf00      	nop
  }
  return  speed;
 8010684:	7bfb      	ldrb	r3, [r7, #15]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b084      	sub	sp, #16
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010696:	2300      	movs	r3, #0
 8010698:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7f7 f85b 	bl	8007760 <HAL_HCD_ResetPort>
 80106aa:	4603      	mov	r3, r0
 80106ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 f8f5 	bl	80108a0 <USBH_Get_USB_Status>
 80106b6:	4603      	mov	r3, r0
 80106b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106d6:	78fa      	ldrb	r2, [r7, #3]
 80106d8:	4611      	mov	r1, r2
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f7 f862 	bl	80077a4 <HAL_HCD_HC_GetXferCount>
 80106e0:	4603      	mov	r3, r0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106ea:	b590      	push	{r4, r7, lr}
 80106ec:	b089      	sub	sp, #36	; 0x24
 80106ee:	af04      	add	r7, sp, #16
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	4608      	mov	r0, r1
 80106f4:	4611      	mov	r1, r2
 80106f6:	461a      	mov	r2, r3
 80106f8:	4603      	mov	r3, r0
 80106fa:	70fb      	strb	r3, [r7, #3]
 80106fc:	460b      	mov	r3, r1
 80106fe:	70bb      	strb	r3, [r7, #2]
 8010700:	4613      	mov	r3, r2
 8010702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010712:	787c      	ldrb	r4, [r7, #1]
 8010714:	78ba      	ldrb	r2, [r7, #2]
 8010716:	78f9      	ldrb	r1, [r7, #3]
 8010718:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801071a:	9302      	str	r3, [sp, #8]
 801071c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010720:	9301      	str	r3, [sp, #4]
 8010722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	4623      	mov	r3, r4
 801072a:	f7f6 fccd 	bl	80070c8 <HAL_HCD_HC_Init>
 801072e:	4603      	mov	r3, r0
 8010730:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	4618      	mov	r0, r3
 8010736:	f000 f8b3 	bl	80108a0 <USBH_Get_USB_Status>
 801073a:	4603      	mov	r3, r0
 801073c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801073e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}

08010748 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	460b      	mov	r3, r1
 8010752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010754:	2300      	movs	r3, #0
 8010756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010758:	2300      	movs	r3, #0
 801075a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010762:	78fa      	ldrb	r2, [r7, #3]
 8010764:	4611      	mov	r1, r2
 8010766:	4618      	mov	r0, r3
 8010768:	f7f6 fd3d 	bl	80071e6 <HAL_HCD_HC_Halt>
 801076c:	4603      	mov	r3, r0
 801076e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010770:	7bfb      	ldrb	r3, [r7, #15]
 8010772:	4618      	mov	r0, r3
 8010774:	f000 f894 	bl	80108a0 <USBH_Get_USB_Status>
 8010778:	4603      	mov	r3, r0
 801077a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801077c:	7bbb      	ldrb	r3, [r7, #14]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010786:	b590      	push	{r4, r7, lr}
 8010788:	b089      	sub	sp, #36	; 0x24
 801078a:	af04      	add	r7, sp, #16
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	4608      	mov	r0, r1
 8010790:	4611      	mov	r1, r2
 8010792:	461a      	mov	r2, r3
 8010794:	4603      	mov	r3, r0
 8010796:	70fb      	strb	r3, [r7, #3]
 8010798:	460b      	mov	r3, r1
 801079a:	70bb      	strb	r3, [r7, #2]
 801079c:	4613      	mov	r3, r2
 801079e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107a4:	2300      	movs	r3, #0
 80107a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80107ae:	787c      	ldrb	r4, [r7, #1]
 80107b0:	78ba      	ldrb	r2, [r7, #2]
 80107b2:	78f9      	ldrb	r1, [r7, #3]
 80107b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107b8:	9303      	str	r3, [sp, #12]
 80107ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107bc:	9302      	str	r3, [sp, #8]
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	9301      	str	r3, [sp, #4]
 80107c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	4623      	mov	r3, r4
 80107ca:	f7f6 fd2f 	bl	800722c <HAL_HCD_HC_SubmitRequest>
 80107ce:	4603      	mov	r3, r0
 80107d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f000 f863 	bl	80108a0 <USBH_Get_USB_Status>
 80107da:	4603      	mov	r3, r0
 80107dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107de:	7bbb      	ldrb	r3, [r7, #14]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3714      	adds	r7, #20
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd90      	pop	{r4, r7, pc}

080107e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	460b      	mov	r3, r1
 80107f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107fa:	78fa      	ldrb	r2, [r7, #3]
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f6 ffbc 	bl	800777c <HAL_HCD_HC_GetURBState>
 8010804:	4603      	mov	r3, r0
}
 8010806:	4618      	mov	r0, r3
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b082      	sub	sp, #8
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	460b      	mov	r3, r1
 8010818:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801081a:	20c8      	movs	r0, #200	; 0xc8
 801081c:	f7f6 f8bc 	bl	8006998 <HAL_Delay>
  return USBH_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801082a:	b480      	push	{r7}
 801082c:	b085      	sub	sp, #20
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	70fb      	strb	r3, [r7, #3]
 8010836:	4613      	mov	r3, r2
 8010838:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010840:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010842:	78fb      	ldrb	r3, [r7, #3]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	212c      	movs	r1, #44	; 0x2c
 8010848:	fb01 f303 	mul.w	r3, r1, r3
 801084c:	4413      	add	r3, r2
 801084e:	333b      	adds	r3, #59	; 0x3b
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d009      	beq.n	801086a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010856:	78fb      	ldrb	r3, [r7, #3]
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	212c      	movs	r1, #44	; 0x2c
 801085c:	fb01 f303 	mul.w	r3, r1, r3
 8010860:	4413      	add	r3, r2
 8010862:	3354      	adds	r3, #84	; 0x54
 8010864:	78ba      	ldrb	r2, [r7, #2]
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	e008      	b.n	801087c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801086a:	78fb      	ldrb	r3, [r7, #3]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	212c      	movs	r1, #44	; 0x2c
 8010870:	fb01 f303 	mul.w	r3, r1, r3
 8010874:	4413      	add	r3, r2
 8010876:	3355      	adds	r3, #85	; 0x55
 8010878:	78ba      	ldrb	r2, [r7, #2]
 801087a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3714      	adds	r7, #20
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr

0801088a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801088a:	b580      	push	{r7, lr}
 801088c:	b082      	sub	sp, #8
 801088e:	af00      	add	r7, sp, #0
 8010890:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7f6 f880 	bl	8006998 <HAL_Delay>
}
 8010898:	bf00      	nop
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d817      	bhi.n	80108e4 <USBH_Get_USB_Status+0x44>
 80108b4:	a201      	add	r2, pc, #4	; (adr r2, 80108bc <USBH_Get_USB_Status+0x1c>)
 80108b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ba:	bf00      	nop
 80108bc:	080108cd 	.word	0x080108cd
 80108c0:	080108d3 	.word	0x080108d3
 80108c4:	080108d9 	.word	0x080108d9
 80108c8:	080108df 	.word	0x080108df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]
    break;
 80108d0:	e00b      	b.n	80108ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108d2:	2302      	movs	r3, #2
 80108d4:	73fb      	strb	r3, [r7, #15]
    break;
 80108d6:	e008      	b.n	80108ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108d8:	2301      	movs	r3, #1
 80108da:	73fb      	strb	r3, [r7, #15]
    break;
 80108dc:	e005      	b.n	80108ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108de:	2302      	movs	r3, #2
 80108e0:	73fb      	strb	r3, [r7, #15]
    break;
 80108e2:	e002      	b.n	80108ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108e4:	2302      	movs	r3, #2
 80108e6:	73fb      	strb	r3, [r7, #15]
    break;
 80108e8:	bf00      	nop
  }
  return usb_status;
 80108ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3714      	adds	r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <__errno>:
 80108f8:	4b01      	ldr	r3, [pc, #4]	; (8010900 <__errno+0x8>)
 80108fa:	6818      	ldr	r0, [r3, #0]
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	2000020c 	.word	0x2000020c

08010904 <__libc_init_array>:
 8010904:	b570      	push	{r4, r5, r6, lr}
 8010906:	4d0d      	ldr	r5, [pc, #52]	; (801093c <__libc_init_array+0x38>)
 8010908:	4c0d      	ldr	r4, [pc, #52]	; (8010940 <__libc_init_array+0x3c>)
 801090a:	1b64      	subs	r4, r4, r5
 801090c:	10a4      	asrs	r4, r4, #2
 801090e:	2600      	movs	r6, #0
 8010910:	42a6      	cmp	r6, r4
 8010912:	d109      	bne.n	8010928 <__libc_init_array+0x24>
 8010914:	4d0b      	ldr	r5, [pc, #44]	; (8010944 <__libc_init_array+0x40>)
 8010916:	4c0c      	ldr	r4, [pc, #48]	; (8010948 <__libc_init_array+0x44>)
 8010918:	f000 fc78 	bl	801120c <_init>
 801091c:	1b64      	subs	r4, r4, r5
 801091e:	10a4      	asrs	r4, r4, #2
 8010920:	2600      	movs	r6, #0
 8010922:	42a6      	cmp	r6, r4
 8010924:	d105      	bne.n	8010932 <__libc_init_array+0x2e>
 8010926:	bd70      	pop	{r4, r5, r6, pc}
 8010928:	f855 3b04 	ldr.w	r3, [r5], #4
 801092c:	4798      	blx	r3
 801092e:	3601      	adds	r6, #1
 8010930:	e7ee      	b.n	8010910 <__libc_init_array+0xc>
 8010932:	f855 3b04 	ldr.w	r3, [r5], #4
 8010936:	4798      	blx	r3
 8010938:	3601      	adds	r6, #1
 801093a:	e7f2      	b.n	8010922 <__libc_init_array+0x1e>
 801093c:	08011808 	.word	0x08011808
 8010940:	08011808 	.word	0x08011808
 8010944:	08011808 	.word	0x08011808
 8010948:	0801180c 	.word	0x0801180c

0801094c <malloc>:
 801094c:	4b02      	ldr	r3, [pc, #8]	; (8010958 <malloc+0xc>)
 801094e:	4601      	mov	r1, r0
 8010950:	6818      	ldr	r0, [r3, #0]
 8010952:	f000 b871 	b.w	8010a38 <_malloc_r>
 8010956:	bf00      	nop
 8010958:	2000020c 	.word	0x2000020c

0801095c <free>:
 801095c:	4b02      	ldr	r3, [pc, #8]	; (8010968 <free+0xc>)
 801095e:	4601      	mov	r1, r0
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	f000 b819 	b.w	8010998 <_free_r>
 8010966:	bf00      	nop
 8010968:	2000020c 	.word	0x2000020c

0801096c <memcpy>:
 801096c:	440a      	add	r2, r1
 801096e:	4291      	cmp	r1, r2
 8010970:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010974:	d100      	bne.n	8010978 <memcpy+0xc>
 8010976:	4770      	bx	lr
 8010978:	b510      	push	{r4, lr}
 801097a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801097e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010982:	4291      	cmp	r1, r2
 8010984:	d1f9      	bne.n	801097a <memcpy+0xe>
 8010986:	bd10      	pop	{r4, pc}

08010988 <memset>:
 8010988:	4402      	add	r2, r0
 801098a:	4603      	mov	r3, r0
 801098c:	4293      	cmp	r3, r2
 801098e:	d100      	bne.n	8010992 <memset+0xa>
 8010990:	4770      	bx	lr
 8010992:	f803 1b01 	strb.w	r1, [r3], #1
 8010996:	e7f9      	b.n	801098c <memset+0x4>

08010998 <_free_r>:
 8010998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801099a:	2900      	cmp	r1, #0
 801099c:	d048      	beq.n	8010a30 <_free_r+0x98>
 801099e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109a2:	9001      	str	r0, [sp, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f1a1 0404 	sub.w	r4, r1, #4
 80109aa:	bfb8      	it	lt
 80109ac:	18e4      	addlt	r4, r4, r3
 80109ae:	f000 f8c1 	bl	8010b34 <__malloc_lock>
 80109b2:	4a20      	ldr	r2, [pc, #128]	; (8010a34 <_free_r+0x9c>)
 80109b4:	9801      	ldr	r0, [sp, #4]
 80109b6:	6813      	ldr	r3, [r2, #0]
 80109b8:	4615      	mov	r5, r2
 80109ba:	b933      	cbnz	r3, 80109ca <_free_r+0x32>
 80109bc:	6063      	str	r3, [r4, #4]
 80109be:	6014      	str	r4, [r2, #0]
 80109c0:	b003      	add	sp, #12
 80109c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109c6:	f000 b8bb 	b.w	8010b40 <__malloc_unlock>
 80109ca:	42a3      	cmp	r3, r4
 80109cc:	d90b      	bls.n	80109e6 <_free_r+0x4e>
 80109ce:	6821      	ldr	r1, [r4, #0]
 80109d0:	1862      	adds	r2, r4, r1
 80109d2:	4293      	cmp	r3, r2
 80109d4:	bf04      	itt	eq
 80109d6:	681a      	ldreq	r2, [r3, #0]
 80109d8:	685b      	ldreq	r3, [r3, #4]
 80109da:	6063      	str	r3, [r4, #4]
 80109dc:	bf04      	itt	eq
 80109de:	1852      	addeq	r2, r2, r1
 80109e0:	6022      	streq	r2, [r4, #0]
 80109e2:	602c      	str	r4, [r5, #0]
 80109e4:	e7ec      	b.n	80109c0 <_free_r+0x28>
 80109e6:	461a      	mov	r2, r3
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	b10b      	cbz	r3, 80109f0 <_free_r+0x58>
 80109ec:	42a3      	cmp	r3, r4
 80109ee:	d9fa      	bls.n	80109e6 <_free_r+0x4e>
 80109f0:	6811      	ldr	r1, [r2, #0]
 80109f2:	1855      	adds	r5, r2, r1
 80109f4:	42a5      	cmp	r5, r4
 80109f6:	d10b      	bne.n	8010a10 <_free_r+0x78>
 80109f8:	6824      	ldr	r4, [r4, #0]
 80109fa:	4421      	add	r1, r4
 80109fc:	1854      	adds	r4, r2, r1
 80109fe:	42a3      	cmp	r3, r4
 8010a00:	6011      	str	r1, [r2, #0]
 8010a02:	d1dd      	bne.n	80109c0 <_free_r+0x28>
 8010a04:	681c      	ldr	r4, [r3, #0]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	6053      	str	r3, [r2, #4]
 8010a0a:	4421      	add	r1, r4
 8010a0c:	6011      	str	r1, [r2, #0]
 8010a0e:	e7d7      	b.n	80109c0 <_free_r+0x28>
 8010a10:	d902      	bls.n	8010a18 <_free_r+0x80>
 8010a12:	230c      	movs	r3, #12
 8010a14:	6003      	str	r3, [r0, #0]
 8010a16:	e7d3      	b.n	80109c0 <_free_r+0x28>
 8010a18:	6825      	ldr	r5, [r4, #0]
 8010a1a:	1961      	adds	r1, r4, r5
 8010a1c:	428b      	cmp	r3, r1
 8010a1e:	bf04      	itt	eq
 8010a20:	6819      	ldreq	r1, [r3, #0]
 8010a22:	685b      	ldreq	r3, [r3, #4]
 8010a24:	6063      	str	r3, [r4, #4]
 8010a26:	bf04      	itt	eq
 8010a28:	1949      	addeq	r1, r1, r5
 8010a2a:	6021      	streq	r1, [r4, #0]
 8010a2c:	6054      	str	r4, [r2, #4]
 8010a2e:	e7c7      	b.n	80109c0 <_free_r+0x28>
 8010a30:	b003      	add	sp, #12
 8010a32:	bd30      	pop	{r4, r5, pc}
 8010a34:	200002b8 	.word	0x200002b8

08010a38 <_malloc_r>:
 8010a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3a:	1ccd      	adds	r5, r1, #3
 8010a3c:	f025 0503 	bic.w	r5, r5, #3
 8010a40:	3508      	adds	r5, #8
 8010a42:	2d0c      	cmp	r5, #12
 8010a44:	bf38      	it	cc
 8010a46:	250c      	movcc	r5, #12
 8010a48:	2d00      	cmp	r5, #0
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	db01      	blt.n	8010a52 <_malloc_r+0x1a>
 8010a4e:	42a9      	cmp	r1, r5
 8010a50:	d903      	bls.n	8010a5a <_malloc_r+0x22>
 8010a52:	230c      	movs	r3, #12
 8010a54:	6033      	str	r3, [r6, #0]
 8010a56:	2000      	movs	r0, #0
 8010a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a5a:	f000 f86b 	bl	8010b34 <__malloc_lock>
 8010a5e:	4921      	ldr	r1, [pc, #132]	; (8010ae4 <_malloc_r+0xac>)
 8010a60:	680a      	ldr	r2, [r1, #0]
 8010a62:	4614      	mov	r4, r2
 8010a64:	b99c      	cbnz	r4, 8010a8e <_malloc_r+0x56>
 8010a66:	4f20      	ldr	r7, [pc, #128]	; (8010ae8 <_malloc_r+0xb0>)
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	b923      	cbnz	r3, 8010a76 <_malloc_r+0x3e>
 8010a6c:	4621      	mov	r1, r4
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f000 f83c 	bl	8010aec <_sbrk_r>
 8010a74:	6038      	str	r0, [r7, #0]
 8010a76:	4629      	mov	r1, r5
 8010a78:	4630      	mov	r0, r6
 8010a7a:	f000 f837 	bl	8010aec <_sbrk_r>
 8010a7e:	1c43      	adds	r3, r0, #1
 8010a80:	d123      	bne.n	8010aca <_malloc_r+0x92>
 8010a82:	230c      	movs	r3, #12
 8010a84:	6033      	str	r3, [r6, #0]
 8010a86:	4630      	mov	r0, r6
 8010a88:	f000 f85a 	bl	8010b40 <__malloc_unlock>
 8010a8c:	e7e3      	b.n	8010a56 <_malloc_r+0x1e>
 8010a8e:	6823      	ldr	r3, [r4, #0]
 8010a90:	1b5b      	subs	r3, r3, r5
 8010a92:	d417      	bmi.n	8010ac4 <_malloc_r+0x8c>
 8010a94:	2b0b      	cmp	r3, #11
 8010a96:	d903      	bls.n	8010aa0 <_malloc_r+0x68>
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	441c      	add	r4, r3
 8010a9c:	6025      	str	r5, [r4, #0]
 8010a9e:	e004      	b.n	8010aaa <_malloc_r+0x72>
 8010aa0:	6863      	ldr	r3, [r4, #4]
 8010aa2:	42a2      	cmp	r2, r4
 8010aa4:	bf0c      	ite	eq
 8010aa6:	600b      	streq	r3, [r1, #0]
 8010aa8:	6053      	strne	r3, [r2, #4]
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 f848 	bl	8010b40 <__malloc_unlock>
 8010ab0:	f104 000b 	add.w	r0, r4, #11
 8010ab4:	1d23      	adds	r3, r4, #4
 8010ab6:	f020 0007 	bic.w	r0, r0, #7
 8010aba:	1ac2      	subs	r2, r0, r3
 8010abc:	d0cc      	beq.n	8010a58 <_malloc_r+0x20>
 8010abe:	1a1b      	subs	r3, r3, r0
 8010ac0:	50a3      	str	r3, [r4, r2]
 8010ac2:	e7c9      	b.n	8010a58 <_malloc_r+0x20>
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	6864      	ldr	r4, [r4, #4]
 8010ac8:	e7cc      	b.n	8010a64 <_malloc_r+0x2c>
 8010aca:	1cc4      	adds	r4, r0, #3
 8010acc:	f024 0403 	bic.w	r4, r4, #3
 8010ad0:	42a0      	cmp	r0, r4
 8010ad2:	d0e3      	beq.n	8010a9c <_malloc_r+0x64>
 8010ad4:	1a21      	subs	r1, r4, r0
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f000 f808 	bl	8010aec <_sbrk_r>
 8010adc:	3001      	adds	r0, #1
 8010ade:	d1dd      	bne.n	8010a9c <_malloc_r+0x64>
 8010ae0:	e7cf      	b.n	8010a82 <_malloc_r+0x4a>
 8010ae2:	bf00      	nop
 8010ae4:	200002b8 	.word	0x200002b8
 8010ae8:	200002bc 	.word	0x200002bc

08010aec <_sbrk_r>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	4d06      	ldr	r5, [pc, #24]	; (8010b08 <_sbrk_r+0x1c>)
 8010af0:	2300      	movs	r3, #0
 8010af2:	4604      	mov	r4, r0
 8010af4:	4608      	mov	r0, r1
 8010af6:	602b      	str	r3, [r5, #0]
 8010af8:	f7f1 fdb4 	bl	8002664 <_sbrk>
 8010afc:	1c43      	adds	r3, r0, #1
 8010afe:	d102      	bne.n	8010b06 <_sbrk_r+0x1a>
 8010b00:	682b      	ldr	r3, [r5, #0]
 8010b02:	b103      	cbz	r3, 8010b06 <_sbrk_r+0x1a>
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	bd38      	pop	{r3, r4, r5, pc}
 8010b08:	20000d94 	.word	0x20000d94

08010b0c <strncat>:
 8010b0c:	b530      	push	{r4, r5, lr}
 8010b0e:	4604      	mov	r4, r0
 8010b10:	7825      	ldrb	r5, [r4, #0]
 8010b12:	4623      	mov	r3, r4
 8010b14:	3401      	adds	r4, #1
 8010b16:	2d00      	cmp	r5, #0
 8010b18:	d1fa      	bne.n	8010b10 <strncat+0x4>
 8010b1a:	3a01      	subs	r2, #1
 8010b1c:	d304      	bcc.n	8010b28 <strncat+0x1c>
 8010b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b22:	f803 4b01 	strb.w	r4, [r3], #1
 8010b26:	b904      	cbnz	r4, 8010b2a <strncat+0x1e>
 8010b28:	bd30      	pop	{r4, r5, pc}
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d1f5      	bne.n	8010b1a <strncat+0xe>
 8010b2e:	701a      	strb	r2, [r3, #0]
 8010b30:	e7f3      	b.n	8010b1a <strncat+0xe>
	...

08010b34 <__malloc_lock>:
 8010b34:	4801      	ldr	r0, [pc, #4]	; (8010b3c <__malloc_lock+0x8>)
 8010b36:	f000 b809 	b.w	8010b4c <__retarget_lock_acquire_recursive>
 8010b3a:	bf00      	nop
 8010b3c:	20000d9c 	.word	0x20000d9c

08010b40 <__malloc_unlock>:
 8010b40:	4801      	ldr	r0, [pc, #4]	; (8010b48 <__malloc_unlock+0x8>)
 8010b42:	f000 b804 	b.w	8010b4e <__retarget_lock_release_recursive>
 8010b46:	bf00      	nop
 8010b48:	20000d9c 	.word	0x20000d9c

08010b4c <__retarget_lock_acquire_recursive>:
 8010b4c:	4770      	bx	lr

08010b4e <__retarget_lock_release_recursive>:
 8010b4e:	4770      	bx	lr

08010b50 <atan>:
 8010b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	ec55 4b10 	vmov	r4, r5, d0
 8010b58:	4bc3      	ldr	r3, [pc, #780]	; (8010e68 <atan+0x318>)
 8010b5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010b5e:	429e      	cmp	r6, r3
 8010b60:	46ab      	mov	fp, r5
 8010b62:	dd18      	ble.n	8010b96 <atan+0x46>
 8010b64:	4bc1      	ldr	r3, [pc, #772]	; (8010e6c <atan+0x31c>)
 8010b66:	429e      	cmp	r6, r3
 8010b68:	dc01      	bgt.n	8010b6e <atan+0x1e>
 8010b6a:	d109      	bne.n	8010b80 <atan+0x30>
 8010b6c:	b144      	cbz	r4, 8010b80 <atan+0x30>
 8010b6e:	4622      	mov	r2, r4
 8010b70:	462b      	mov	r3, r5
 8010b72:	4620      	mov	r0, r4
 8010b74:	4629      	mov	r1, r5
 8010b76:	f7ef fb2d 	bl	80001d4 <__adddf3>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	460d      	mov	r5, r1
 8010b7e:	e006      	b.n	8010b8e <atan+0x3e>
 8010b80:	f1bb 0f00 	cmp.w	fp, #0
 8010b84:	f300 8131 	bgt.w	8010dea <atan+0x29a>
 8010b88:	a59b      	add	r5, pc, #620	; (adr r5, 8010df8 <atan+0x2a8>)
 8010b8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b8e:	ec45 4b10 	vmov	d0, r4, r5
 8010b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b96:	4bb6      	ldr	r3, [pc, #728]	; (8010e70 <atan+0x320>)
 8010b98:	429e      	cmp	r6, r3
 8010b9a:	dc14      	bgt.n	8010bc6 <atan+0x76>
 8010b9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010ba0:	429e      	cmp	r6, r3
 8010ba2:	dc0d      	bgt.n	8010bc0 <atan+0x70>
 8010ba4:	a396      	add	r3, pc, #600	; (adr r3, 8010e00 <atan+0x2b0>)
 8010ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010baa:	ee10 0a10 	vmov	r0, s0
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f7ef fb10 	bl	80001d4 <__adddf3>
 8010bb4:	4baf      	ldr	r3, [pc, #700]	; (8010e74 <atan+0x324>)
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f7ef ff52 	bl	8000a60 <__aeabi_dcmpgt>
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d1e6      	bne.n	8010b8e <atan+0x3e>
 8010bc0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010bc4:	e02b      	b.n	8010c1e <atan+0xce>
 8010bc6:	f000 f963 	bl	8010e90 <fabs>
 8010bca:	4bab      	ldr	r3, [pc, #684]	; (8010e78 <atan+0x328>)
 8010bcc:	429e      	cmp	r6, r3
 8010bce:	ec55 4b10 	vmov	r4, r5, d0
 8010bd2:	f300 80bf 	bgt.w	8010d54 <atan+0x204>
 8010bd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010bda:	429e      	cmp	r6, r3
 8010bdc:	f300 80a0 	bgt.w	8010d20 <atan+0x1d0>
 8010be0:	ee10 2a10 	vmov	r2, s0
 8010be4:	ee10 0a10 	vmov	r0, s0
 8010be8:	462b      	mov	r3, r5
 8010bea:	4629      	mov	r1, r5
 8010bec:	f7ef faf2 	bl	80001d4 <__adddf3>
 8010bf0:	4ba0      	ldr	r3, [pc, #640]	; (8010e74 <atan+0x324>)
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f7ef faec 	bl	80001d0 <__aeabi_dsub>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c02:	4620      	mov	r0, r4
 8010c04:	4629      	mov	r1, r5
 8010c06:	f7ef fae5 	bl	80001d4 <__adddf3>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	4630      	mov	r0, r6
 8010c10:	4639      	mov	r1, r7
 8010c12:	f7ef fdbf 	bl	8000794 <__aeabi_ddiv>
 8010c16:	f04f 0a00 	mov.w	sl, #0
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	460d      	mov	r5, r1
 8010c1e:	4622      	mov	r2, r4
 8010c20:	462b      	mov	r3, r5
 8010c22:	4620      	mov	r0, r4
 8010c24:	4629      	mov	r1, r5
 8010c26:	f7ef fc8b 	bl	8000540 <__aeabi_dmul>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	4680      	mov	r8, r0
 8010c30:	4689      	mov	r9, r1
 8010c32:	f7ef fc85 	bl	8000540 <__aeabi_dmul>
 8010c36:	a374      	add	r3, pc, #464	; (adr r3, 8010e08 <atan+0x2b8>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	460f      	mov	r7, r1
 8010c40:	f7ef fc7e 	bl	8000540 <__aeabi_dmul>
 8010c44:	a372      	add	r3, pc, #456	; (adr r3, 8010e10 <atan+0x2c0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	f7ef fac3 	bl	80001d4 <__adddf3>
 8010c4e:	4632      	mov	r2, r6
 8010c50:	463b      	mov	r3, r7
 8010c52:	f7ef fc75 	bl	8000540 <__aeabi_dmul>
 8010c56:	a370      	add	r3, pc, #448	; (adr r3, 8010e18 <atan+0x2c8>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef faba 	bl	80001d4 <__adddf3>
 8010c60:	4632      	mov	r2, r6
 8010c62:	463b      	mov	r3, r7
 8010c64:	f7ef fc6c 	bl	8000540 <__aeabi_dmul>
 8010c68:	a36d      	add	r3, pc, #436	; (adr r3, 8010e20 <atan+0x2d0>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	f7ef fab1 	bl	80001d4 <__adddf3>
 8010c72:	4632      	mov	r2, r6
 8010c74:	463b      	mov	r3, r7
 8010c76:	f7ef fc63 	bl	8000540 <__aeabi_dmul>
 8010c7a:	a36b      	add	r3, pc, #428	; (adr r3, 8010e28 <atan+0x2d8>)
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	f7ef faa8 	bl	80001d4 <__adddf3>
 8010c84:	4632      	mov	r2, r6
 8010c86:	463b      	mov	r3, r7
 8010c88:	f7ef fc5a 	bl	8000540 <__aeabi_dmul>
 8010c8c:	a368      	add	r3, pc, #416	; (adr r3, 8010e30 <atan+0x2e0>)
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	f7ef fa9f 	bl	80001d4 <__adddf3>
 8010c96:	4642      	mov	r2, r8
 8010c98:	464b      	mov	r3, r9
 8010c9a:	f7ef fc51 	bl	8000540 <__aeabi_dmul>
 8010c9e:	a366      	add	r3, pc, #408	; (adr r3, 8010e38 <atan+0x2e8>)
 8010ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4689      	mov	r9, r1
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef fc48 	bl	8000540 <__aeabi_dmul>
 8010cb0:	a363      	add	r3, pc, #396	; (adr r3, 8010e40 <atan+0x2f0>)
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	f7ef fa8b 	bl	80001d0 <__aeabi_dsub>
 8010cba:	4632      	mov	r2, r6
 8010cbc:	463b      	mov	r3, r7
 8010cbe:	f7ef fc3f 	bl	8000540 <__aeabi_dmul>
 8010cc2:	a361      	add	r3, pc, #388	; (adr r3, 8010e48 <atan+0x2f8>)
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	f7ef fa82 	bl	80001d0 <__aeabi_dsub>
 8010ccc:	4632      	mov	r2, r6
 8010cce:	463b      	mov	r3, r7
 8010cd0:	f7ef fc36 	bl	8000540 <__aeabi_dmul>
 8010cd4:	a35e      	add	r3, pc, #376	; (adr r3, 8010e50 <atan+0x300>)
 8010cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cda:	f7ef fa79 	bl	80001d0 <__aeabi_dsub>
 8010cde:	4632      	mov	r2, r6
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	f7ef fc2d 	bl	8000540 <__aeabi_dmul>
 8010ce6:	a35c      	add	r3, pc, #368	; (adr r3, 8010e58 <atan+0x308>)
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	f7ef fa70 	bl	80001d0 <__aeabi_dsub>
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	463b      	mov	r3, r7
 8010cf4:	f7ef fc24 	bl	8000540 <__aeabi_dmul>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4640      	mov	r0, r8
 8010cfe:	4649      	mov	r1, r9
 8010d00:	f7ef fa68 	bl	80001d4 <__adddf3>
 8010d04:	4622      	mov	r2, r4
 8010d06:	462b      	mov	r3, r5
 8010d08:	f7ef fc1a 	bl	8000540 <__aeabi_dmul>
 8010d0c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	d14b      	bne.n	8010dae <atan+0x25e>
 8010d16:	4620      	mov	r0, r4
 8010d18:	4629      	mov	r1, r5
 8010d1a:	f7ef fa59 	bl	80001d0 <__aeabi_dsub>
 8010d1e:	e72c      	b.n	8010b7a <atan+0x2a>
 8010d20:	ee10 0a10 	vmov	r0, s0
 8010d24:	4b53      	ldr	r3, [pc, #332]	; (8010e74 <atan+0x324>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	4629      	mov	r1, r5
 8010d2a:	f7ef fa51 	bl	80001d0 <__aeabi_dsub>
 8010d2e:	4b51      	ldr	r3, [pc, #324]	; (8010e74 <atan+0x324>)
 8010d30:	4606      	mov	r6, r0
 8010d32:	460f      	mov	r7, r1
 8010d34:	2200      	movs	r2, #0
 8010d36:	4620      	mov	r0, r4
 8010d38:	4629      	mov	r1, r5
 8010d3a:	f7ef fa4b 	bl	80001d4 <__adddf3>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	4630      	mov	r0, r6
 8010d44:	4639      	mov	r1, r7
 8010d46:	f7ef fd25 	bl	8000794 <__aeabi_ddiv>
 8010d4a:	f04f 0a01 	mov.w	sl, #1
 8010d4e:	4604      	mov	r4, r0
 8010d50:	460d      	mov	r5, r1
 8010d52:	e764      	b.n	8010c1e <atan+0xce>
 8010d54:	4b49      	ldr	r3, [pc, #292]	; (8010e7c <atan+0x32c>)
 8010d56:	429e      	cmp	r6, r3
 8010d58:	da1d      	bge.n	8010d96 <atan+0x246>
 8010d5a:	ee10 0a10 	vmov	r0, s0
 8010d5e:	4b48      	ldr	r3, [pc, #288]	; (8010e80 <atan+0x330>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	4629      	mov	r1, r5
 8010d64:	f7ef fa34 	bl	80001d0 <__aeabi_dsub>
 8010d68:	4b45      	ldr	r3, [pc, #276]	; (8010e80 <atan+0x330>)
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	460f      	mov	r7, r1
 8010d6e:	2200      	movs	r2, #0
 8010d70:	4620      	mov	r0, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef fbe4 	bl	8000540 <__aeabi_dmul>
 8010d78:	4b3e      	ldr	r3, [pc, #248]	; (8010e74 <atan+0x324>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f7ef fa2a 	bl	80001d4 <__adddf3>
 8010d80:	4602      	mov	r2, r0
 8010d82:	460b      	mov	r3, r1
 8010d84:	4630      	mov	r0, r6
 8010d86:	4639      	mov	r1, r7
 8010d88:	f7ef fd04 	bl	8000794 <__aeabi_ddiv>
 8010d8c:	f04f 0a02 	mov.w	sl, #2
 8010d90:	4604      	mov	r4, r0
 8010d92:	460d      	mov	r5, r1
 8010d94:	e743      	b.n	8010c1e <atan+0xce>
 8010d96:	462b      	mov	r3, r5
 8010d98:	ee10 2a10 	vmov	r2, s0
 8010d9c:	4939      	ldr	r1, [pc, #228]	; (8010e84 <atan+0x334>)
 8010d9e:	2000      	movs	r0, #0
 8010da0:	f7ef fcf8 	bl	8000794 <__aeabi_ddiv>
 8010da4:	f04f 0a03 	mov.w	sl, #3
 8010da8:	4604      	mov	r4, r0
 8010daa:	460d      	mov	r5, r1
 8010dac:	e737      	b.n	8010c1e <atan+0xce>
 8010dae:	4b36      	ldr	r3, [pc, #216]	; (8010e88 <atan+0x338>)
 8010db0:	4e36      	ldr	r6, [pc, #216]	; (8010e8c <atan+0x33c>)
 8010db2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010db6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010dba:	e9da 2300 	ldrd	r2, r3, [sl]
 8010dbe:	f7ef fa07 	bl	80001d0 <__aeabi_dsub>
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	462b      	mov	r3, r5
 8010dc6:	f7ef fa03 	bl	80001d0 <__aeabi_dsub>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010dd2:	f7ef f9fd 	bl	80001d0 <__aeabi_dsub>
 8010dd6:	f1bb 0f00 	cmp.w	fp, #0
 8010dda:	4604      	mov	r4, r0
 8010ddc:	460d      	mov	r5, r1
 8010dde:	f6bf aed6 	bge.w	8010b8e <atan+0x3e>
 8010de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010de6:	461d      	mov	r5, r3
 8010de8:	e6d1      	b.n	8010b8e <atan+0x3e>
 8010dea:	a51d      	add	r5, pc, #116	; (adr r5, 8010e60 <atan+0x310>)
 8010dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010df0:	e6cd      	b.n	8010b8e <atan+0x3e>
 8010df2:	bf00      	nop
 8010df4:	f3af 8000 	nop.w
 8010df8:	54442d18 	.word	0x54442d18
 8010dfc:	bff921fb 	.word	0xbff921fb
 8010e00:	8800759c 	.word	0x8800759c
 8010e04:	7e37e43c 	.word	0x7e37e43c
 8010e08:	e322da11 	.word	0xe322da11
 8010e0c:	3f90ad3a 	.word	0x3f90ad3a
 8010e10:	24760deb 	.word	0x24760deb
 8010e14:	3fa97b4b 	.word	0x3fa97b4b
 8010e18:	a0d03d51 	.word	0xa0d03d51
 8010e1c:	3fb10d66 	.word	0x3fb10d66
 8010e20:	c54c206e 	.word	0xc54c206e
 8010e24:	3fb745cd 	.word	0x3fb745cd
 8010e28:	920083ff 	.word	0x920083ff
 8010e2c:	3fc24924 	.word	0x3fc24924
 8010e30:	5555550d 	.word	0x5555550d
 8010e34:	3fd55555 	.word	0x3fd55555
 8010e38:	2c6a6c2f 	.word	0x2c6a6c2f
 8010e3c:	bfa2b444 	.word	0xbfa2b444
 8010e40:	52defd9a 	.word	0x52defd9a
 8010e44:	3fadde2d 	.word	0x3fadde2d
 8010e48:	af749a6d 	.word	0xaf749a6d
 8010e4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010e50:	fe231671 	.word	0xfe231671
 8010e54:	3fbc71c6 	.word	0x3fbc71c6
 8010e58:	9998ebc4 	.word	0x9998ebc4
 8010e5c:	3fc99999 	.word	0x3fc99999
 8010e60:	54442d18 	.word	0x54442d18
 8010e64:	3ff921fb 	.word	0x3ff921fb
 8010e68:	440fffff 	.word	0x440fffff
 8010e6c:	7ff00000 	.word	0x7ff00000
 8010e70:	3fdbffff 	.word	0x3fdbffff
 8010e74:	3ff00000 	.word	0x3ff00000
 8010e78:	3ff2ffff 	.word	0x3ff2ffff
 8010e7c:	40038000 	.word	0x40038000
 8010e80:	3ff80000 	.word	0x3ff80000
 8010e84:	bff00000 	.word	0xbff00000
 8010e88:	080117b0 	.word	0x080117b0
 8010e8c:	08011790 	.word	0x08011790

08010e90 <fabs>:
 8010e90:	ec51 0b10 	vmov	r0, r1, d0
 8010e94:	ee10 2a10 	vmov	r2, s0
 8010e98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e9c:	ec43 2b10 	vmov	d0, r2, r3
 8010ea0:	4770      	bx	lr

08010ea2 <atan2>:
 8010ea2:	f000 b835 	b.w	8010f10 <__ieee754_atan2>
	...

08010ea8 <sqrt>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	ed2d 8b02 	vpush	{d8}
 8010eae:	ec55 4b10 	vmov	r4, r5, d0
 8010eb2:	f000 f8f7 	bl	80110a4 <__ieee754_sqrt>
 8010eb6:	4b15      	ldr	r3, [pc, #84]	; (8010f0c <sqrt+0x64>)
 8010eb8:	eeb0 8a40 	vmov.f32	s16, s0
 8010ebc:	eef0 8a60 	vmov.f32	s17, s1
 8010ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	d019      	beq.n	8010efc <sqrt+0x54>
 8010ec8:	4622      	mov	r2, r4
 8010eca:	462b      	mov	r3, r5
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef fdd0 	bl	8000a74 <__aeabi_dcmpun>
 8010ed4:	b990      	cbnz	r0, 8010efc <sqrt+0x54>
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4620      	mov	r0, r4
 8010edc:	4629      	mov	r1, r5
 8010ede:	f7ef fda1 	bl	8000a24 <__aeabi_dcmplt>
 8010ee2:	b158      	cbz	r0, 8010efc <sqrt+0x54>
 8010ee4:	f7ff fd08 	bl	80108f8 <__errno>
 8010ee8:	2321      	movs	r3, #33	; 0x21
 8010eea:	6003      	str	r3, [r0, #0]
 8010eec:	2200      	movs	r2, #0
 8010eee:	2300      	movs	r3, #0
 8010ef0:	4610      	mov	r0, r2
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	f7ef fc4e 	bl	8000794 <__aeabi_ddiv>
 8010ef8:	ec41 0b18 	vmov	d8, r0, r1
 8010efc:	eeb0 0a48 	vmov.f32	s0, s16
 8010f00:	eef0 0a68 	vmov.f32	s1, s17
 8010f04:	ecbd 8b02 	vpop	{d8}
 8010f08:	bd38      	pop	{r3, r4, r5, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20000270 	.word	0x20000270

08010f10 <__ieee754_atan2>:
 8010f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f14:	ec57 6b11 	vmov	r6, r7, d1
 8010f18:	4273      	negs	r3, r6
 8010f1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80110a0 <__ieee754_atan2+0x190>
 8010f1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010f22:	4333      	orrs	r3, r6
 8010f24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f28:	4573      	cmp	r3, lr
 8010f2a:	ec51 0b10 	vmov	r0, r1, d0
 8010f2e:	ee11 8a10 	vmov	r8, s2
 8010f32:	d80a      	bhi.n	8010f4a <__ieee754_atan2+0x3a>
 8010f34:	4244      	negs	r4, r0
 8010f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f3a:	4304      	orrs	r4, r0
 8010f3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010f40:	4574      	cmp	r4, lr
 8010f42:	ee10 9a10 	vmov	r9, s0
 8010f46:	468c      	mov	ip, r1
 8010f48:	d907      	bls.n	8010f5a <__ieee754_atan2+0x4a>
 8010f4a:	4632      	mov	r2, r6
 8010f4c:	463b      	mov	r3, r7
 8010f4e:	f7ef f941 	bl	80001d4 <__adddf3>
 8010f52:	ec41 0b10 	vmov	d0, r0, r1
 8010f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f62:	4334      	orrs	r4, r6
 8010f64:	d103      	bne.n	8010f6e <__ieee754_atan2+0x5e>
 8010f66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f6a:	f7ff bdf1 	b.w	8010b50 <atan>
 8010f6e:	17bc      	asrs	r4, r7, #30
 8010f70:	f004 0402 	and.w	r4, r4, #2
 8010f74:	ea53 0909 	orrs.w	r9, r3, r9
 8010f78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010f7c:	d107      	bne.n	8010f8e <__ieee754_atan2+0x7e>
 8010f7e:	2c02      	cmp	r4, #2
 8010f80:	d060      	beq.n	8011044 <__ieee754_atan2+0x134>
 8010f82:	2c03      	cmp	r4, #3
 8010f84:	d1e5      	bne.n	8010f52 <__ieee754_atan2+0x42>
 8010f86:	a142      	add	r1, pc, #264	; (adr r1, 8011090 <__ieee754_atan2+0x180>)
 8010f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f8c:	e7e1      	b.n	8010f52 <__ieee754_atan2+0x42>
 8010f8e:	ea52 0808 	orrs.w	r8, r2, r8
 8010f92:	d106      	bne.n	8010fa2 <__ieee754_atan2+0x92>
 8010f94:	f1bc 0f00 	cmp.w	ip, #0
 8010f98:	da5f      	bge.n	801105a <__ieee754_atan2+0x14a>
 8010f9a:	a13f      	add	r1, pc, #252	; (adr r1, 8011098 <__ieee754_atan2+0x188>)
 8010f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fa0:	e7d7      	b.n	8010f52 <__ieee754_atan2+0x42>
 8010fa2:	4572      	cmp	r2, lr
 8010fa4:	d10f      	bne.n	8010fc6 <__ieee754_atan2+0xb6>
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010fac:	d107      	bne.n	8010fbe <__ieee754_atan2+0xae>
 8010fae:	2c02      	cmp	r4, #2
 8010fb0:	d84c      	bhi.n	801104c <__ieee754_atan2+0x13c>
 8010fb2:	4b35      	ldr	r3, [pc, #212]	; (8011088 <__ieee754_atan2+0x178>)
 8010fb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010fb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010fbc:	e7c9      	b.n	8010f52 <__ieee754_atan2+0x42>
 8010fbe:	2c02      	cmp	r4, #2
 8010fc0:	d848      	bhi.n	8011054 <__ieee754_atan2+0x144>
 8010fc2:	4b32      	ldr	r3, [pc, #200]	; (801108c <__ieee754_atan2+0x17c>)
 8010fc4:	e7f6      	b.n	8010fb4 <__ieee754_atan2+0xa4>
 8010fc6:	4573      	cmp	r3, lr
 8010fc8:	d0e4      	beq.n	8010f94 <__ieee754_atan2+0x84>
 8010fca:	1a9b      	subs	r3, r3, r2
 8010fcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010fd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010fd4:	da1e      	bge.n	8011014 <__ieee754_atan2+0x104>
 8010fd6:	2f00      	cmp	r7, #0
 8010fd8:	da01      	bge.n	8010fde <__ieee754_atan2+0xce>
 8010fda:	323c      	adds	r2, #60	; 0x3c
 8010fdc:	db1e      	blt.n	801101c <__ieee754_atan2+0x10c>
 8010fde:	4632      	mov	r2, r6
 8010fe0:	463b      	mov	r3, r7
 8010fe2:	f7ef fbd7 	bl	8000794 <__aeabi_ddiv>
 8010fe6:	ec41 0b10 	vmov	d0, r0, r1
 8010fea:	f7ff ff51 	bl	8010e90 <fabs>
 8010fee:	f7ff fdaf 	bl	8010b50 <atan>
 8010ff2:	ec51 0b10 	vmov	r0, r1, d0
 8010ff6:	2c01      	cmp	r4, #1
 8010ff8:	d013      	beq.n	8011022 <__ieee754_atan2+0x112>
 8010ffa:	2c02      	cmp	r4, #2
 8010ffc:	d015      	beq.n	801102a <__ieee754_atan2+0x11a>
 8010ffe:	2c00      	cmp	r4, #0
 8011000:	d0a7      	beq.n	8010f52 <__ieee754_atan2+0x42>
 8011002:	a319      	add	r3, pc, #100	; (adr r3, 8011068 <__ieee754_atan2+0x158>)
 8011004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011008:	f7ef f8e2 	bl	80001d0 <__aeabi_dsub>
 801100c:	a318      	add	r3, pc, #96	; (adr r3, 8011070 <__ieee754_atan2+0x160>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	e014      	b.n	801103e <__ieee754_atan2+0x12e>
 8011014:	a118      	add	r1, pc, #96	; (adr r1, 8011078 <__ieee754_atan2+0x168>)
 8011016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801101a:	e7ec      	b.n	8010ff6 <__ieee754_atan2+0xe6>
 801101c:	2000      	movs	r0, #0
 801101e:	2100      	movs	r1, #0
 8011020:	e7e9      	b.n	8010ff6 <__ieee754_atan2+0xe6>
 8011022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011026:	4619      	mov	r1, r3
 8011028:	e793      	b.n	8010f52 <__ieee754_atan2+0x42>
 801102a:	a30f      	add	r3, pc, #60	; (adr r3, 8011068 <__ieee754_atan2+0x158>)
 801102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011030:	f7ef f8ce 	bl	80001d0 <__aeabi_dsub>
 8011034:	4602      	mov	r2, r0
 8011036:	460b      	mov	r3, r1
 8011038:	a10d      	add	r1, pc, #52	; (adr r1, 8011070 <__ieee754_atan2+0x160>)
 801103a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801103e:	f7ef f8c7 	bl	80001d0 <__aeabi_dsub>
 8011042:	e786      	b.n	8010f52 <__ieee754_atan2+0x42>
 8011044:	a10a      	add	r1, pc, #40	; (adr r1, 8011070 <__ieee754_atan2+0x160>)
 8011046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801104a:	e782      	b.n	8010f52 <__ieee754_atan2+0x42>
 801104c:	a10c      	add	r1, pc, #48	; (adr r1, 8011080 <__ieee754_atan2+0x170>)
 801104e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011052:	e77e      	b.n	8010f52 <__ieee754_atan2+0x42>
 8011054:	2000      	movs	r0, #0
 8011056:	2100      	movs	r1, #0
 8011058:	e77b      	b.n	8010f52 <__ieee754_atan2+0x42>
 801105a:	a107      	add	r1, pc, #28	; (adr r1, 8011078 <__ieee754_atan2+0x168>)
 801105c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011060:	e777      	b.n	8010f52 <__ieee754_atan2+0x42>
 8011062:	bf00      	nop
 8011064:	f3af 8000 	nop.w
 8011068:	33145c07 	.word	0x33145c07
 801106c:	3ca1a626 	.word	0x3ca1a626
 8011070:	54442d18 	.word	0x54442d18
 8011074:	400921fb 	.word	0x400921fb
 8011078:	54442d18 	.word	0x54442d18
 801107c:	3ff921fb 	.word	0x3ff921fb
 8011080:	54442d18 	.word	0x54442d18
 8011084:	3fe921fb 	.word	0x3fe921fb
 8011088:	080117d0 	.word	0x080117d0
 801108c:	080117e8 	.word	0x080117e8
 8011090:	54442d18 	.word	0x54442d18
 8011094:	c00921fb 	.word	0xc00921fb
 8011098:	54442d18 	.word	0x54442d18
 801109c:	bff921fb 	.word	0xbff921fb
 80110a0:	7ff00000 	.word	0x7ff00000

080110a4 <__ieee754_sqrt>:
 80110a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a8:	ec55 4b10 	vmov	r4, r5, d0
 80110ac:	4e56      	ldr	r6, [pc, #344]	; (8011208 <__ieee754_sqrt+0x164>)
 80110ae:	43ae      	bics	r6, r5
 80110b0:	ee10 0a10 	vmov	r0, s0
 80110b4:	ee10 3a10 	vmov	r3, s0
 80110b8:	4629      	mov	r1, r5
 80110ba:	462a      	mov	r2, r5
 80110bc:	d110      	bne.n	80110e0 <__ieee754_sqrt+0x3c>
 80110be:	ee10 2a10 	vmov	r2, s0
 80110c2:	462b      	mov	r3, r5
 80110c4:	f7ef fa3c 	bl	8000540 <__aeabi_dmul>
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7ef f880 	bl	80001d4 <__adddf3>
 80110d4:	4604      	mov	r4, r0
 80110d6:	460d      	mov	r5, r1
 80110d8:	ec45 4b10 	vmov	d0, r4, r5
 80110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e0:	2d00      	cmp	r5, #0
 80110e2:	dc10      	bgt.n	8011106 <__ieee754_sqrt+0x62>
 80110e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110e8:	4330      	orrs	r0, r6
 80110ea:	d0f5      	beq.n	80110d8 <__ieee754_sqrt+0x34>
 80110ec:	b15d      	cbz	r5, 8011106 <__ieee754_sqrt+0x62>
 80110ee:	ee10 2a10 	vmov	r2, s0
 80110f2:	462b      	mov	r3, r5
 80110f4:	ee10 0a10 	vmov	r0, s0
 80110f8:	f7ef f86a 	bl	80001d0 <__aeabi_dsub>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	f7ef fb48 	bl	8000794 <__aeabi_ddiv>
 8011104:	e7e6      	b.n	80110d4 <__ieee754_sqrt+0x30>
 8011106:	1509      	asrs	r1, r1, #20
 8011108:	d076      	beq.n	80111f8 <__ieee754_sqrt+0x154>
 801110a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801110e:	07ce      	lsls	r6, r1, #31
 8011110:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011114:	bf5e      	ittt	pl
 8011116:	0fda      	lsrpl	r2, r3, #31
 8011118:	005b      	lslpl	r3, r3, #1
 801111a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801111e:	0fda      	lsrs	r2, r3, #31
 8011120:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011124:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011128:	2000      	movs	r0, #0
 801112a:	106d      	asrs	r5, r5, #1
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	f04f 0e16 	mov.w	lr, #22
 8011132:	4684      	mov	ip, r0
 8011134:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011138:	eb0c 0401 	add.w	r4, ip, r1
 801113c:	4294      	cmp	r4, r2
 801113e:	bfde      	ittt	le
 8011140:	1b12      	suble	r2, r2, r4
 8011142:	eb04 0c01 	addle.w	ip, r4, r1
 8011146:	1840      	addle	r0, r0, r1
 8011148:	0052      	lsls	r2, r2, #1
 801114a:	f1be 0e01 	subs.w	lr, lr, #1
 801114e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011152:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801115a:	d1ed      	bne.n	8011138 <__ieee754_sqrt+0x94>
 801115c:	4671      	mov	r1, lr
 801115e:	2720      	movs	r7, #32
 8011160:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011164:	4562      	cmp	r2, ip
 8011166:	eb04 060e 	add.w	r6, r4, lr
 801116a:	dc02      	bgt.n	8011172 <__ieee754_sqrt+0xce>
 801116c:	d113      	bne.n	8011196 <__ieee754_sqrt+0xf2>
 801116e:	429e      	cmp	r6, r3
 8011170:	d811      	bhi.n	8011196 <__ieee754_sqrt+0xf2>
 8011172:	2e00      	cmp	r6, #0
 8011174:	eb06 0e04 	add.w	lr, r6, r4
 8011178:	da43      	bge.n	8011202 <__ieee754_sqrt+0x15e>
 801117a:	f1be 0f00 	cmp.w	lr, #0
 801117e:	db40      	blt.n	8011202 <__ieee754_sqrt+0x15e>
 8011180:	f10c 0801 	add.w	r8, ip, #1
 8011184:	eba2 020c 	sub.w	r2, r2, ip
 8011188:	429e      	cmp	r6, r3
 801118a:	bf88      	it	hi
 801118c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8011190:	1b9b      	subs	r3, r3, r6
 8011192:	4421      	add	r1, r4
 8011194:	46c4      	mov	ip, r8
 8011196:	0052      	lsls	r2, r2, #1
 8011198:	3f01      	subs	r7, #1
 801119a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801119e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80111a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80111a6:	d1dd      	bne.n	8011164 <__ieee754_sqrt+0xc0>
 80111a8:	4313      	orrs	r3, r2
 80111aa:	d006      	beq.n	80111ba <__ieee754_sqrt+0x116>
 80111ac:	1c4c      	adds	r4, r1, #1
 80111ae:	bf13      	iteet	ne
 80111b0:	3101      	addne	r1, #1
 80111b2:	3001      	addeq	r0, #1
 80111b4:	4639      	moveq	r1, r7
 80111b6:	f021 0101 	bicne.w	r1, r1, #1
 80111ba:	1043      	asrs	r3, r0, #1
 80111bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111c0:	0849      	lsrs	r1, r1, #1
 80111c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111c6:	07c2      	lsls	r2, r0, #31
 80111c8:	bf48      	it	mi
 80111ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80111ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80111d2:	460c      	mov	r4, r1
 80111d4:	463d      	mov	r5, r7
 80111d6:	e77f      	b.n	80110d8 <__ieee754_sqrt+0x34>
 80111d8:	0ada      	lsrs	r2, r3, #11
 80111da:	3815      	subs	r0, #21
 80111dc:	055b      	lsls	r3, r3, #21
 80111de:	2a00      	cmp	r2, #0
 80111e0:	d0fa      	beq.n	80111d8 <__ieee754_sqrt+0x134>
 80111e2:	02d7      	lsls	r7, r2, #11
 80111e4:	d50a      	bpl.n	80111fc <__ieee754_sqrt+0x158>
 80111e6:	f1c1 0420 	rsb	r4, r1, #32
 80111ea:	fa23 f404 	lsr.w	r4, r3, r4
 80111ee:	1e4d      	subs	r5, r1, #1
 80111f0:	408b      	lsls	r3, r1
 80111f2:	4322      	orrs	r2, r4
 80111f4:	1b41      	subs	r1, r0, r5
 80111f6:	e788      	b.n	801110a <__ieee754_sqrt+0x66>
 80111f8:	4608      	mov	r0, r1
 80111fa:	e7f0      	b.n	80111de <__ieee754_sqrt+0x13a>
 80111fc:	0052      	lsls	r2, r2, #1
 80111fe:	3101      	adds	r1, #1
 8011200:	e7ef      	b.n	80111e2 <__ieee754_sqrt+0x13e>
 8011202:	46e0      	mov	r8, ip
 8011204:	e7be      	b.n	8011184 <__ieee754_sqrt+0xe0>
 8011206:	bf00      	nop
 8011208:	7ff00000 	.word	0x7ff00000

0801120c <_init>:
 801120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120e:	bf00      	nop
 8011210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011212:	bc08      	pop	{r3}
 8011214:	469e      	mov	lr, r3
 8011216:	4770      	bx	lr

08011218 <_fini>:
 8011218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801121a:	bf00      	nop
 801121c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801121e:	bc08      	pop	{r3}
 8011220:	469e      	mov	lr, r3
 8011222:	4770      	bx	lr
