
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c76c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c8f4  0800c8f4  0001c8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce58  0800ce58  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce60  0800ce60  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ce68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  200001d8  0800d040  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  0800d040  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251cc  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0f  00000000  00000000  000453d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  0004a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  0004bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b08  00000000  00000000  0004d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b41  00000000  00000000  00072dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d689d  00000000  00000000  00096901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d19e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  0016d1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c8dc 	.word	0x0800c8dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800c8dc 	.word	0x0800c8dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00c f919 	bl	800c714 <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000020c 	.word	0x2000020c

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f003 f9c3 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f003 f9bd 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f003 f9b7 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f003 f9b1 	bl	8003910 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f003 f994 	bl	80038e0 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f003 f9a3 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f003 f99d 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f003 f997 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f003 f991 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f003 f974 	bl	80038e0 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f003 f981 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f003 f97b 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f003 f95e 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f003 f96b 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f003 f965 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f003 f948 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f003 f955 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f003 f94f 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f003 f932 	bl	80038e0 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f003 f93f 	bl	8003910 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f003 f939 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f003 f933 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f003 f92d 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f003 f927 	bl	8003910 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f003 f90a 	bl	80038e0 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f003 f919 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f003 f913 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f003 f90d 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f003 f907 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f003 f8ea 	bl	80038e0 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f003 f8f7 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f003 f8f1 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f003 f8d4 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f003 f8e1 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f003 f8db 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f003 f8be 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f003 f8cb 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f003 f8c5 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f003 f8a8 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f003 f8b5 	bl	8003910 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f003 f8af 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f003 f8a9 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f003 f8a3 	bl	8003910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f003 f89d 	bl	8003910 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f003 f880 	bl	80038e0 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f003 f88f 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f003 f889 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f003 f883 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f003 f87d 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f003 f860 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f003 f86d 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f003 f867 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f003 f84a 	bl	80038e0 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f003 f857 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f003 f851 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f003 f834 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f003 f841 	bl	8003910 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f003 f83b 	bl	8003910 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f003 f81e 	bl	80038e0 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f003 f82b 	bl	8003910 <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f002 fcbf 	bl	8003258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f843 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 faf5 	bl	8000ecc <MX_GPIO_Init>
  MX_I2S3_Init();
 80008e2:	f000 f929 	bl	8000b38 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e6:	f000 f96b 	bl	8000bc0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ea:	f00b fbd1 	bl	800c090 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa2b 	bl	8000d48 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008f2:	f000 f99b 	bl	8000c2c <MX_SPI2_Init>
  MX_RNG_Init();
 80008f6:	f000 f94f 	bl	8000b98 <MX_RNG_Init>
  MX_TIM3_Init();
 80008fa:	f000 fa73 	bl	8000de4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fe:	f000 f9cb 	bl	8000c98 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000902:	f000 f8eb 	bl	8000adc <MX_I2C3_Init>
  MX_I2C2_Init();
 8000906:	f000 f8bb 	bl	8000a80 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8ad 	bl	8000a68 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 fa0d 	bl	8001d2c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fbb0 	bl	8002078 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f9a9 	bl	8001c70 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fbaa 	bl	8002078 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f002 fa71 	bl	8002e10 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fba2 	bl	8002078 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <main+0x8c>)
 8000936:	f007 fc71 	bl	800821c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <main+0x8c>)
 800093e:	f007 fcdd 	bl	80082fc <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <main+0x90>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]





    detect_all_sensors();
 8000948:	f002 faac 	bl	8002ea4 <detect_all_sensors>


    int g = 999;
 800094c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000950:	603b      	str	r3, [r7, #0]
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 8000952:	f001 fcdb 	bl	800230c <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000956:	f00b fbc1 	bl	800c0dc <MX_USB_HOST_Process>
	 menu();
 800095a:	e7fa      	b.n	8000952 <main+0x82>
 800095c:	20000334 	.word	0x20000334
 8000960:	2000020c 	.word	0x2000020c

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b098      	sub	sp, #96	; 0x60
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096e:	2230      	movs	r2, #48	; 0x30
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00b fece 	bl	800c714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <SystemClock_Config+0xfc>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a30      	ldr	r2, [pc, #192]	; (8000a60 <SystemClock_Config+0xfc>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <SystemClock_Config+0xfc>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <SystemClock_Config+0x100>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <SystemClock_Config+0x100>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <SystemClock_Config+0x100>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e2:	2308      	movs	r3, #8
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fb01 	bl	8007000 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a04:	f000 fbca 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2105      	movs	r1, #5
 8000a26:	4618      	mov	r0, r3
 8000a28:	f006 fd62 	bl	80074f0 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a32:	f000 fbb3 	bl	800119c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a3a:	23c0      	movs	r3, #192	; 0xc0
 8000a3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4618      	mov	r0, r3
 8000a48:	f006 ff3a 	bl	80078c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a52:	f000 fba3 	bl	800119c <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3760      	adds	r7, #96	; 0x60
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	201c      	movs	r0, #28
 8000a72:	f002 fd62 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a76:	201c      	movs	r0, #28
 8000a78:	f002 fd7b 	bl	8003572 <HAL_NVIC_EnableIRQ>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C2_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C2_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C2_Init+0x50>)
 8000abe:	f004 fcbf 	bl	8005440 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fb68 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200002e0 	.word	0x200002e0
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C3_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C3_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C3_Init+0x50>)
 8000b1a:	f004 fc91 	bl	8005440 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fb3a 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000234 	.word	0x20000234
 8000b30:	40005c00 	.word	0x40005c00
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <MX_I2S3_Init+0x58>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <MX_I2S3_Init+0x5c>)
 8000b62:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_I2S3_Init+0x54>)
 8000b78:	f005 fda2 	bl	80066c0 <HAL_I2S_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b82:	f000 fb0b 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000474 	.word	0x20000474
 8000b90:	40003c00 	.word	0x40003c00
 8000b94:	00017700 	.word	0x00017700

08000b98 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_RNG_Init+0x20>)
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <MX_RNG_Init+0x24>)
 8000ba0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_RNG_Init+0x20>)
 8000ba4:	f006 ffcc 	bl	8007b40 <HAL_RNG_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000bae:	f000 faf5 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200003c4 	.word	0x200003c4
 8000bbc:	50060800 	.word	0x50060800

08000bc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <MX_SPI1_Init+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_SPI1_Init+0x64>)
 8000c12:	f007 f823 	bl	8007c5c <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f000 fabe 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200003d4 	.word	0x200003d4
 8000c28:	40013000 	.word	0x40013000

08000c2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <MX_SPI2_Init+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c78:	220a      	movs	r2, #10
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_SPI2_Init+0x64>)
 8000c7e:	f006 ffed 	bl	8007c5c <HAL_SPI_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c88:	f000 fa88 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000288 	.word	0x20000288
 8000c94:	40003800 	.word	0x40003800

08000c98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2224      	movs	r2, #36	; 0x24
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00b fd34 	bl	800c714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <MX_TIM1_Init+0xac>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000d0c:	f007 fc5d 	bl	80085ca <HAL_TIM_Encoder_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d16:	f000 fa41 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM1_Init+0xa8>)
 8000d28:	f008 fac2 	bl	80092b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d32:	f000 fa33 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000037c 	.word	0x2000037c
 8000d44:	40010000 	.word	0x40010000

08000d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d6e:	f240 3247 	movw	r2, #839	; 0x347
 8000d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8e:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d90:	f007 f9f4 	bl	800817c <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d9a:	f000 f9ff 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dac:	f007 fe7a 	bl	8008aa4 <HAL_TIM_ConfigClockSource>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000db6:	f000 f9f1 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dc8:	f008 fa72 	bl	80092b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dd2:	f000 f9e3 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000042c 	.word	0x2000042c

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e16:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <MX_TIM3_Init+0xe4>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e1c:	f640 0233 	movw	r2, #2099	; 0x833
 8000e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e3e:	f007 f99d 	bl	800817c <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e48:	f000 f9a8 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481a      	ldr	r0, [pc, #104]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e5a:	f007 fe23 	bl	8008aa4 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e64:	f000 f99a 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e6a:	f007 fb55 	bl	8008518 <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 f992 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4619      	mov	r1, r3
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000e88:	f008 fa12 	bl	80092b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e92:	f000 f983 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM3_Init+0xe0>)
 8000eae:	f007 fd3b 	bl	8008928 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb8:	f000 f970 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3738      	adds	r7, #56	; 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000334 	.word	0x20000334
 8000ec8:	40000400 	.word	0x40000400

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4ba6      	ldr	r3, [pc, #664]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4aa5      	ldr	r2, [pc, #660]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4ba3      	ldr	r3, [pc, #652]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	4b9f      	ldr	r3, [pc, #636]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a9e      	ldr	r2, [pc, #632]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b9c      	ldr	r3, [pc, #624]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b98      	ldr	r3, [pc, #608]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a97      	ldr	r2, [pc, #604]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b91      	ldr	r3, [pc, #580]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a90      	ldr	r2, [pc, #576]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a89      	ldr	r2, [pc, #548]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b87      	ldr	r3, [pc, #540]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b83      	ldr	r3, [pc, #524]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a82      	ldr	r2, [pc, #520]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b80      	ldr	r3, [pc, #512]	; (8001180 <MX_GPIO_Init+0x2b4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	217c      	movs	r1, #124	; 0x7c
 8000f8e:	487d      	ldr	r0, [pc, #500]	; (8001184 <MX_GPIO_Init+0x2b8>)
 8000f90:	f002 fcbe 	bl	8003910 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	487b      	ldr	r0, [pc, #492]	; (8001188 <MX_GPIO_Init+0x2bc>)
 8000f9a:	f002 fcb9 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000fa4:	4879      	ldr	r0, [pc, #484]	; (800118c <MX_GPIO_Init+0x2c0>)
 8000fa6:	f002 fcb3 	bl	8003910 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000fb0:	4875      	ldr	r0, [pc, #468]	; (8001188 <MX_GPIO_Init+0x2bc>)
 8000fb2:	f002 fcad 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000fbc:	4874      	ldr	r0, [pc, #464]	; (8001190 <MX_GPIO_Init+0x2c4>)
 8000fbe:	f002 fca7 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000fc2:	2374      	movs	r3, #116	; 0x74
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	486a      	ldr	r0, [pc, #424]	; (8001184 <MX_GPIO_Init+0x2b8>)
 8000fda:	f002 fae5 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4863      	ldr	r0, [pc, #396]	; (8001184 <MX_GPIO_Init+0x2b8>)
 8000ff6:	f002 fad7 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	485e      	ldr	r0, [pc, #376]	; (8001188 <MX_GPIO_Init+0x2bc>)
 8001010:	f002 faca 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001014:	f640 0341 	movw	r3, #2113	; 0x841
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4856      	ldr	r0, [pc, #344]	; (8001188 <MX_GPIO_Init+0x2bc>)
 800102e:	f002 fabb 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001042:	2305      	movs	r3, #5
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	484e      	ldr	r0, [pc, #312]	; (8001188 <MX_GPIO_Init+0x2bc>)
 800104e:	f002 faab 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	2301      	movs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <MX_GPIO_Init+0x2c8>)
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	484c      	ldr	r0, [pc, #304]	; (8001198 <MX_GPIO_Init+0x2cc>)
 8001066:	f002 fa9f 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800106a:	2304      	movs	r3, #4
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <MX_GPIO_Init+0x2c4>)
 800107e:	f002 fa93 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001082:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	483b      	ldr	r0, [pc, #236]	; (8001184 <MX_GPIO_Init+0x2b8>)
 8001098:	f002 fa86 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 800109c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4837      	ldr	r0, [pc, #220]	; (8001190 <MX_GPIO_Init+0x2c4>)
 80010b2:	f002 fa79 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80010b6:	f64f 7310 	movw	r3, #65296	; 0xff10
 80010ba:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	482f      	ldr	r0, [pc, #188]	; (800118c <MX_GPIO_Init+0x2c0>)
 80010d0:	f002 fa6a 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d4:	2320      	movs	r3, #32
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4829      	ldr	r0, [pc, #164]	; (800118c <MX_GPIO_Init+0x2c0>)
 80010e8:	f002 fa5e 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <MX_GPIO_Init+0x2c4>)
 8001104:	f002 fa50 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001108:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_GPIO_Init+0x2c4>)
 8001122:	f002 fa41 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_GPIO_Init+0x2c4>)
 8001144:	f002 fa30 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <MX_GPIO_Init+0x2b8>)
 800115c:	f002 fa24 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_GPIO_Init+0x2c8>)
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_GPIO_Init+0x2b8>)
 8001174:	f002 fa18 	bl	80035a8 <HAL_GPIO_Init>

}
 8001178:	bf00      	nop
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40021000 	.word	0x40021000
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40020400 	.word	0x40020400
 8001194:	10120000 	.word	0x10120000
 8001198:	40020000 	.word	0x40020000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_MspInit+0x5c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_MspInit+0x5c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_MspInit+0x5c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x5c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_MspInit+0x5c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f002 f99c 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2005      	movs	r0, #5
 80011f2:	f002 f9a2 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011f6:	2005      	movs	r0, #5
 80011f8:	f002 f9bb 	bl	8003572 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a42      	ldr	r2, [pc, #264]	; (8001330 <HAL_I2C_MspInit+0x128>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12d      	bne.n	8001286 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a40      	ldr	r2, [pc, #256]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001258:	2304      	movs	r3, #4
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4835      	ldr	r0, [pc, #212]	; (8001338 <HAL_I2C_MspInit+0x130>)
 8001264:	f002 f9a0 	bl	80035a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001284:	e050      	b.n	8001328 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2c      	ldr	r2, [pc, #176]	; (800133c <HAL_I2C_MspInit+0x134>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d14b      	bne.n	8001328 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012da:	2304      	movs	r3, #4
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <HAL_I2C_MspInit+0x138>)
 80012e6:	f002 f95f 	bl	80035a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012fc:	2304      	movs	r3, #4
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	480f      	ldr	r0, [pc, #60]	; (8001344 <HAL_I2C_MspInit+0x13c>)
 8001308:	f002 f94e 	bl	80035a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 8001316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_I2C_MspInit+0x12c>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40005800 	.word	0x40005800
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	40005c00 	.word	0x40005c00
 8001340:	40020800 	.word	0x40020800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a28      	ldr	r2, [pc, #160]	; (8001408 <HAL_I2S_MspInit+0xc0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d14a      	bne.n	8001400 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_I2S_MspInit+0xc4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_I2S_MspInit+0xc4>)
 8001374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_I2S_MspInit+0xc4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_I2S_MspInit+0xc4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_I2S_MspInit+0xc4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_I2S_MspInit+0xc4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_I2S_MspInit+0xc4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <HAL_I2S_MspInit+0xc4>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_I2S_MspInit+0xc4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013be:	2310      	movs	r3, #16
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ce:	2306      	movs	r3, #6
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <HAL_I2S_MspInit+0xc8>)
 80013da:	f002 f8e5 	bl	80035a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013de:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f0:	2306      	movs	r3, #6
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <HAL_I2S_MspInit+0xcc>)
 80013fc:	f002 f8d4 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40003c00 	.word	0x40003c00
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020800 	.word	0x40020800

08001418 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_RNG_MspInit+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10d      	bne.n	8001446 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RNG_MspInit+0x40>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_RNG_MspInit+0x40>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6353      	str	r3, [r2, #52]	; 0x34
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_RNG_MspInit+0x40>)
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	50060800 	.word	0x50060800
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a41      	ldr	r2, [pc, #260]	; (8001580 <HAL_SPI_MspInit+0x124>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12c      	bne.n	80014d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	482d      	ldr	r0, [pc, #180]	; (8001588 <HAL_SPI_MspInit+0x12c>)
 80014d2:	f002 f869 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014d6:	e04f      	b.n	8001578 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <HAL_SPI_MspInit+0x130>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d14a      	bne.n	8001578 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_SPI_MspInit+0x128>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <HAL_SPI_MspInit+0x128>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_SPI_MspInit+0x128>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001536:	2304      	movs	r3, #4
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001546:	2305      	movs	r3, #5
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <HAL_SPI_MspInit+0x134>)
 8001552:	f002 f829 	bl	80035a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001556:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001568:	2305      	movs	r3, #5
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <HAL_SPI_MspInit+0x138>)
 8001574:	f002 f818 	bl	80035a8 <HAL_GPIO_Init>
}
 8001578:	bf00      	nop
 800157a:	3730      	adds	r7, #48	; 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40013000 	.word	0x40013000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40003800 	.word	0x40003800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_TIM_Encoder_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_TIM_Encoder_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80015f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001610:	f001 ffca 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010000 	.word	0x40010000
 8001620:	40023800 	.word	0x40023800
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d10e      	bne.n	8001658 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001656:	e01a      	b.n	800168e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_TIM_Base_MspInit+0x74>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d115      	bne.n	800168e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x70>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201d      	movs	r0, #29
 8001684:	f001 ff59 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001688:	201d      	movs	r0, #29
 800168a:	f001 ff72 	bl	8003572 <HAL_NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40000400 	.word	0x40000400

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f001 fe06 	bl	80032fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170c:	481b      	ldr	r0, [pc, #108]	; (800177c <TIM2_IRQHandler+0x78>)
 800170e:	f002 f918 	bl	8003942 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <TIM2_IRQHandler+0x7c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d111      	bne.n	800173e <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <TIM2_IRQHandler+0x80>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2bc8      	cmp	r3, #200	; 0xc8
 8001720:	dc0a      	bgt.n	8001738 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <TIM2_IRQHandler+0x80>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <TIM2_IRQHandler+0x84>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <TIM2_IRQHandler+0x80>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <TIM2_IRQHandler+0x80>)
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e002      	b.n	800173e <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <TIM2_IRQHandler+0x7c>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <TIM2_IRQHandler+0x7c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d114      	bne.n	8001770 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <TIM2_IRQHandler+0x80>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b63      	cmp	r3, #99	; 0x63
 800174c:	dd0a      	ble.n	8001764 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <TIM2_IRQHandler+0x80>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <TIM2_IRQHandler+0x84>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <TIM2_IRQHandler+0x80>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <TIM2_IRQHandler+0x80>)
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e005      	b.n	8001770 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <TIM2_IRQHandler+0x7c>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
		  i = 100;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <TIM2_IRQHandler+0x80>)
 800176c:	2264      	movs	r2, #100	; 0x64
 800176e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <TIM2_IRQHandler+0x84>)
 8001772:	f006 ffd0 	bl	8008716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020c00 	.word	0x40020c00
 8001780:	200001f4 	.word	0x200001f4
 8001784:	20000000 	.word	0x20000000
 8001788:	2000042c 	.word	0x2000042c

0800178c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <TIM3_IRQHandler+0x1c>)
 8001796:	f002 f8d4 	bl	8003942 <HAL_GPIO_TogglePin>
  read_digits();
 800179a:	f7fe fe91 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <TIM3_IRQHandler+0x20>)
 80017a0:	f006 ffb9 	bl	8008716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	20000334 	.word	0x20000334

080017b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <OTG_FS_IRQHandler+0x10>)
 80017b6:	f002 fb49 	bl	8003e4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200008c8 	.word	0x200008c8

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f00a ff54 	bl	800c6a0 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20020000 	.word	0x20020000
 8001824:	00000400 	.word	0x00000400
 8001828:	200001f8 	.word	0x200001f8
 800182c:	20000be0 	.word	0x20000be0

08001830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	4603      	mov	r3, r0
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
 800186e:	4613      	mov	r3, r2
 8001870:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	f1c3 0301 	rsb	r3, r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800188c:	e061      	b.n	8001952 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e018      	b.n	80018ca <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	b298      	uxth	r0, r3
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	883a      	ldrh	r2, [r7, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f000 fc0b 	bl	80020c4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b298      	uxth	r0, r3
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	883a      	ldrh	r2, [r7, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 fc00 	bl	80020c4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3301      	adds	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	88fa      	ldrh	r2, [r7, #6]
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	4413      	add	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dde0      	ble.n	8001898 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80018d6:	88fa      	ldrh	r2, [r7, #6]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e018      	b.n	8001912 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b298      	uxth	r0, r3
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	883a      	ldrh	r2, [r7, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f000 fbe7 	bl	80020c4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	b298      	uxth	r0, r3
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	f000 fbdc 	bl	80020c4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	4413      	add	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	429a      	cmp	r2, r3
 800191c:	dde0      	ble.n	80018e0 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	3301      	adds	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3302      	adds	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005a      	lsls	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	dd09      	ble.n	8001952 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	3b01      	subs	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3302      	adds	r3, #2
 8001950:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	429a      	cmp	r2, r3
 8001958:	da99      	bge.n	800188e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	372c      	adds	r7, #44	; 0x2c
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}

08001964 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af02      	add	r7, sp, #8
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	4603      	mov	r3, r0
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	4613      	mov	r3, r2
 8001980:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	2b1f      	cmp	r3, #31
 800198a:	d902      	bls.n	8001992 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	3b20      	subs	r3, #32
 8001990:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001992:	2300      	movs	r3, #0
 8001994:	753b      	strb	r3, [r7, #20]
 8001996:	e012      	b.n	80019be <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8001998:	7dfa      	ldrb	r2, [r7, #23]
 800199a:	7d38      	ldrb	r0, [r7, #20]
 800199c:	7d39      	ldrb	r1, [r7, #20]
 800199e:	4c3b      	ldr	r4, [pc, #236]	; (8001a8c <ILI9341_Draw_Char+0x128>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4423      	add	r3, r4
 80019aa:	4403      	add	r3, r0
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	440b      	add	r3, r1
 80019b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80019b8:	7d3b      	ldrb	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	753b      	strb	r3, [r7, #20]
 80019be:	7d3b      	ldrb	r3, [r7, #20]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d9e9      	bls.n	8001998 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	b299      	uxth	r1, r3
 80019c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ca:	461a      	mov	r2, r3
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	b29c      	uxth	r4, r3
 80019da:	88b8      	ldrh	r0, [r7, #4]
 80019dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4623      	mov	r3, r4
 80019e2:	f000 fc37 	bl	8002254 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	757b      	strb	r3, [r7, #21]
 80019ea:	e046      	b.n	8001a7a <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	75bb      	strb	r3, [r7, #22]
 80019f0:	e03d      	b.n	8001a6e <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80019f2:	7d7b      	ldrb	r3, [r7, #21]
 80019f4:	f107 0218 	add.w	r2, r7, #24
 80019f8:	4413      	add	r3, r2
 80019fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80019fe:	461a      	mov	r2, r3
 8001a00:	7dbb      	ldrb	r3, [r7, #22]
 8001a02:	fa42 f303 	asr.w	r3, r2, r3
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d02c      	beq.n	8001a68 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8001a0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10f      	bne.n	8001a34 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001a14:	7d7b      	ldrb	r3, [r7, #21]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f000 fb49 	bl	80020c4 <ILI9341_Draw_Pixel>
 8001a32:	e019      	b.n	8001a68 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a3a:	fb12 f303 	smulbb	r3, r2, r3
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	b298      	uxth	r0, r3
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	7dbb      	ldrb	r3, [r7, #22]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001a50:	fb11 f303 	smulbb	r3, r1, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001a5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4623      	mov	r3, r4
 8001a64:	f000 fbf6 	bl	8002254 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001a68:	7dbb      	ldrb	r3, [r7, #22]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	75bb      	strb	r3, [r7, #22]
 8001a6e:	7dbb      	ldrb	r3, [r7, #22]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d9be      	bls.n	80019f2 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001a74:	7d7b      	ldrb	r3, [r7, #21]
 8001a76:	3301      	adds	r3, #1
 8001a78:	757b      	strb	r3, [r7, #21]
 8001a7a:	7d7b      	ldrb	r3, [r7, #21]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d9b5      	bls.n	80019ec <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800ca24 	.word	0x0800ca24

08001a90 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	727b      	strb	r3, [r7, #9]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8001aaa:	e016      	b.n	8001ada <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60fa      	str	r2, [r7, #12]
 8001ab2:	7818      	ldrb	r0, [r3, #0]
 8001ab4:	88fc      	ldrh	r4, [r7, #6]
 8001ab6:	7a7a      	ldrb	r2, [r7, #9]
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	8c3b      	ldrh	r3, [r7, #32]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	f7ff ff4e 	bl	8001964 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001ac8:	8c3b      	ldrh	r3, [r7, #32]
 8001aca:	461a      	mov	r2, r3
 8001acc:	0052      	lsls	r2, r2, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	897b      	ldrh	r3, [r7, #10]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e4      	bne.n	8001aac <ILI9341_Draw_Text+0x1c>
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}

08001aec <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001af0:	2200      	movs	r2, #0
 8001af2:	2110      	movs	r1, #16
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <ILI9341_SPI_Init+0x14>)
 8001af6:	f001 ff0b 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001b0e:	1df9      	adds	r1, r7, #7
 8001b10:	2301      	movs	r3, #1
 8001b12:	2201      	movs	r2, #1
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <ILI9341_SPI_Send+0x20>)
 8001b16:	f006 f92a 	bl	8007d6e <HAL_SPI_Transmit>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000288 	.word	0x20000288

08001b28 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2110      	movs	r1, #16
 8001b36:	480a      	ldr	r0, [pc, #40]	; (8001b60 <ILI9341_Write_Command+0x38>)
 8001b38:	f001 feea 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <ILI9341_Write_Command+0x38>)
 8001b42:	f001 fee5 	bl	8003910 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ffdb 	bl	8001b04 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2110      	movs	r1, #16
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <ILI9341_Write_Command+0x38>)
 8001b54:	f001 fedc 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000

08001b64 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <ILI9341_Write_Data+0x38>)
 8001b74:	f001 fecc 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <ILI9341_Write_Data+0x38>)
 8001b7e:	f001 fec7 	bl	8003910 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ffbd 	bl	8001b04 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <ILI9341_Write_Data+0x38>)
 8001b90:	f001 febe 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	80fb      	strh	r3, [r7, #6]
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80bb      	strh	r3, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001bbe:	202a      	movs	r0, #42	; 0x2a
 8001bc0:	f7ff ffb2 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc9 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffc4 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ffbd 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffb8 	bl	8001b64 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001bf4:	202b      	movs	r0, #43	; 0x2b
 8001bf6:	f7ff ff97 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ffae 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ffa9 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ffa2 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001c20:	883b      	ldrh	r3, [r7, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff9d 	bl	8001b64 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	f7ff ff7c 	bl	8001b28 <ILI9341_Write_Command>
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	480a      	ldr	r0, [pc, #40]	; (8001c6c <ILI9341_Reset+0x34>)
 8001c42:	f001 fe65 	bl	8003910 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c46:	20c8      	movs	r0, #200	; 0xc8
 8001c48:	f001 fb78 	bl	800333c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <ILI9341_Reset+0x34>)
 8001c52:	f001 fe5d 	bl	8003910 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c56:	20c8      	movs	r0, #200	; 0xc8
 8001c58:	f001 fb70 	bl	800333c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2120      	movs	r1, #32
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <ILI9341_Reset+0x34>)
 8001c62:	f001 fe55 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001c7e:	2036      	movs	r0, #54	; 0x36
 8001c80:	f7ff ff52 	bl	8001b28 <ILI9341_Write_Command>
HAL_Delay(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f001 fb59 	bl	800333c <HAL_Delay>
	
switch(screen_rotation) 
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d837      	bhi.n	8001d00 <ILI9341_Set_Rotation+0x90>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <ILI9341_Set_Rotation+0x28>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cbf 	.word	0x08001cbf
 8001ca0:	08001cd5 	.word	0x08001cd5
 8001ca4:	08001ceb 	.word	0x08001ceb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001ca8:	2048      	movs	r0, #72	; 0x48
 8001caa:	f7ff ff5b 	bl	8001b64 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <ILI9341_Set_Rotation+0x9c>)
 8001cb0:	22f0      	movs	r2, #240	; 0xf0
 8001cb2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <ILI9341_Set_Rotation+0xa0>)
 8001cb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cba:	801a      	strh	r2, [r3, #0]
			break;
 8001cbc:	e021      	b.n	8001d02 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001cbe:	2028      	movs	r0, #40	; 0x28
 8001cc0:	f7ff ff50 	bl	8001b64 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <ILI9341_Set_Rotation+0x9c>)
 8001cc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <ILI9341_Set_Rotation+0xa0>)
 8001cce:	22f0      	movs	r2, #240	; 0xf0
 8001cd0:	801a      	strh	r2, [r3, #0]
			break;
 8001cd2:	e016      	b.n	8001d02 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001cd4:	2088      	movs	r0, #136	; 0x88
 8001cd6:	f7ff ff45 	bl	8001b64 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <ILI9341_Set_Rotation+0x9c>)
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <ILI9341_Set_Rotation+0xa0>)
 8001ce2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ce6:	801a      	strh	r2, [r3, #0]
			break;
 8001ce8:	e00b      	b.n	8001d02 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001cea:	20e8      	movs	r0, #232	; 0xe8
 8001cec:	f7ff ff3a 	bl	8001b64 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <ILI9341_Set_Rotation+0x9c>)
 8001cf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <ILI9341_Set_Rotation+0xa0>)
 8001cfa:	22f0      	movs	r2, #240	; 0xf0
 8001cfc:	801a      	strh	r2, [r3, #0]
			break;
 8001cfe:	e000      	b.n	8001d02 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001d00:	bf00      	nop
	}
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000000a 	.word	0x2000000a
 8001d10:	20000008 	.word	0x20000008

08001d14 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <ILI9341_Enable+0x14>)
 8001d1e:	f001 fdf7 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001d30:	f7ff fff0 	bl	8001d14 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001d34:	f7ff feda 	bl	8001aec <ILI9341_SPI_Init>
ILI9341_Reset();
 8001d38:	f7ff ff7e 	bl	8001c38 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff fef3 	bl	8001b28 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d46:	f001 faf9 	bl	800333c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001d4a:	20cb      	movs	r0, #203	; 0xcb
 8001d4c:	f7ff feec 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001d50:	2039      	movs	r0, #57	; 0x39
 8001d52:	f7ff ff07 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001d56:	202c      	movs	r0, #44	; 0x2c
 8001d58:	f7ff ff04 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ff01 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001d62:	2034      	movs	r0, #52	; 0x34
 8001d64:	f7ff fefe 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f7ff fefb 	bl	8001b64 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001d6e:	20cf      	movs	r0, #207	; 0xcf
 8001d70:	f7ff feda 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fef5 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001d7a:	20c1      	movs	r0, #193	; 0xc1
 8001d7c:	f7ff fef2 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001d80:	2030      	movs	r0, #48	; 0x30
 8001d82:	f7ff feef 	bl	8001b64 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001d86:	20e8      	movs	r0, #232	; 0xe8
 8001d88:	f7ff fece 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001d8c:	2085      	movs	r0, #133	; 0x85
 8001d8e:	f7ff fee9 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fee6 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001d98:	2078      	movs	r0, #120	; 0x78
 8001d9a:	f7ff fee3 	bl	8001b64 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001d9e:	20ea      	movs	r0, #234	; 0xea
 8001da0:	f7ff fec2 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fedd 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff feda 	bl	8001b64 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001db0:	20ed      	movs	r0, #237	; 0xed
 8001db2:	f7ff feb9 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f7ff fed4 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f7ff fed1 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001dc2:	2012      	movs	r0, #18
 8001dc4:	f7ff fece 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001dc8:	2081      	movs	r0, #129	; 0x81
 8001dca:	f7ff fecb 	bl	8001b64 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001dce:	20f7      	movs	r0, #247	; 0xf7
 8001dd0:	f7ff feaa 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001dd4:	2020      	movs	r0, #32
 8001dd6:	f7ff fec5 	bl	8001b64 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001dda:	20c0      	movs	r0, #192	; 0xc0
 8001ddc:	f7ff fea4 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001de0:	2023      	movs	r0, #35	; 0x23
 8001de2:	f7ff febf 	bl	8001b64 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001de6:	20c1      	movs	r0, #193	; 0xc1
 8001de8:	f7ff fe9e 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001dec:	2010      	movs	r0, #16
 8001dee:	f7ff feb9 	bl	8001b64 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001df2:	20c5      	movs	r0, #197	; 0xc5
 8001df4:	f7ff fe98 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001df8:	203e      	movs	r0, #62	; 0x3e
 8001dfa:	f7ff feb3 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001dfe:	2028      	movs	r0, #40	; 0x28
 8001e00:	f7ff feb0 	bl	8001b64 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001e04:	20c7      	movs	r0, #199	; 0xc7
 8001e06:	f7ff fe8f 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001e0a:	2086      	movs	r0, #134	; 0x86
 8001e0c:	f7ff feaa 	bl	8001b64 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001e10:	2036      	movs	r0, #54	; 0x36
 8001e12:	f7ff fe89 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001e16:	2048      	movs	r0, #72	; 0x48
 8001e18:	f7ff fea4 	bl	8001b64 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001e1c:	203a      	movs	r0, #58	; 0x3a
 8001e1e:	f7ff fe83 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001e22:	2055      	movs	r0, #85	; 0x55
 8001e24:	f7ff fe9e 	bl	8001b64 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001e28:	20b1      	movs	r0, #177	; 0xb1
 8001e2a:	f7ff fe7d 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fe98 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001e34:	2018      	movs	r0, #24
 8001e36:	f7ff fe95 	bl	8001b64 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001e3a:	20b6      	movs	r0, #182	; 0xb6
 8001e3c:	f7ff fe74 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001e40:	2008      	movs	r0, #8
 8001e42:	f7ff fe8f 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001e46:	2082      	movs	r0, #130	; 0x82
 8001e48:	f7ff fe8c 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001e4c:	2027      	movs	r0, #39	; 0x27
 8001e4e:	f7ff fe89 	bl	8001b64 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001e52:	20f2      	movs	r0, #242	; 0xf2
 8001e54:	f7ff fe68 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fe83 	bl	8001b64 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001e5e:	2026      	movs	r0, #38	; 0x26
 8001e60:	f7ff fe62 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff fe7d 	bl	8001b64 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001e6a:	20e0      	movs	r0, #224	; 0xe0
 8001e6c:	f7ff fe5c 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001e70:	200f      	movs	r0, #15
 8001e72:	f7ff fe77 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e76:	2031      	movs	r0, #49	; 0x31
 8001e78:	f7ff fe74 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001e7c:	202b      	movs	r0, #43	; 0x2b
 8001e7e:	f7ff fe71 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f7ff fe6e 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e88:	200e      	movs	r0, #14
 8001e8a:	f7ff fe6b 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e8e:	2008      	movs	r0, #8
 8001e90:	f7ff fe68 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001e94:	204e      	movs	r0, #78	; 0x4e
 8001e96:	f7ff fe65 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001e9a:	20f1      	movs	r0, #241	; 0xf1
 8001e9c:	f7ff fe62 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001ea0:	2037      	movs	r0, #55	; 0x37
 8001ea2:	f7ff fe5f 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001ea6:	2007      	movs	r0, #7
 8001ea8:	f7ff fe5c 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff fe59 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f7ff fe56 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001eb8:	200e      	movs	r0, #14
 8001eba:	f7ff fe53 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001ebe:	2009      	movs	r0, #9
 8001ec0:	f7ff fe50 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fe4d 	bl	8001b64 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001eca:	20e1      	movs	r0, #225	; 0xe1
 8001ecc:	f7ff fe2c 	bl	8001b28 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fe47 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ed6:	200e      	movs	r0, #14
 8001ed8:	f7ff fe44 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001edc:	2014      	movs	r0, #20
 8001ede:	f7ff fe41 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f7ff fe3e 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001ee8:	2011      	movs	r0, #17
 8001eea:	f7ff fe3b 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001eee:	2007      	movs	r0, #7
 8001ef0:	f7ff fe38 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001ef4:	2031      	movs	r0, #49	; 0x31
 8001ef6:	f7ff fe35 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001efa:	20c1      	movs	r0, #193	; 0xc1
 8001efc:	f7ff fe32 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001f00:	2048      	movs	r0, #72	; 0x48
 8001f02:	f7ff fe2f 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001f06:	2008      	movs	r0, #8
 8001f08:	f7ff fe2c 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f0c:	200f      	movs	r0, #15
 8001f0e:	f7ff fe29 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001f12:	200c      	movs	r0, #12
 8001f14:	f7ff fe26 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001f18:	2031      	movs	r0, #49	; 0x31
 8001f1a:	f7ff fe23 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001f1e:	2036      	movs	r0, #54	; 0x36
 8001f20:	f7ff fe20 	bl	8001b64 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f24:	200f      	movs	r0, #15
 8001f26:	f7ff fe1d 	bl	8001b64 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001f2a:	2011      	movs	r0, #17
 8001f2c:	f7ff fdfc 	bl	8001b28 <ILI9341_Write_Command>
HAL_Delay(120);
 8001f30:	2078      	movs	r0, #120	; 0x78
 8001f32:	f001 fa03 	bl	800333c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001f36:	2029      	movs	r0, #41	; 0x29
 8001f38:	f7ff fdf6 	bl	8001b28 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f7ff fe97 	bl	8001c70 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001f42:	200a      	movs	r0, #10
 8001f44:	f001 f9fa 	bl	800333c <HAL_Delay>
//
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	466b      	mov	r3, sp
 8001f5a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f68:	d202      	bcs.n	8001f70 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e002      	b.n	8001f76 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001f70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f76:	2201      	movs	r2, #1
 8001f78:	2140      	movs	r1, #64	; 0x40
 8001f7a:	483d      	ldr	r0, [pc, #244]	; (8002070 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f7c:	f001 fcc8 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2110      	movs	r1, #16
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f86:	f001 fcc3 	bl	8003910 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001f94:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001f96:	4623      	mov	r3, r4
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	00cb      	lsls	r3, r1, #3
 8001fac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fb0:	00c2      	lsls	r2, r0, #3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	00cb      	lsls	r3, r1, #3
 8001fc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fc6:	00c2      	lsls	r2, r0, #3
 8001fc8:	1de3      	adds	r3, r4, #7
 8001fca:	08db      	lsrs	r3, r3, #3
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	ebad 0d03 	sub.w	sp, sp, r3
 8001fd2:	466b      	mov	r3, sp
 8001fd4:	3300      	adds	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fdc:	e00e      	b.n	8001ffc <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fe8:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3301      	adds	r3, #1
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	b2d1      	uxtb	r1, r2
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	429a      	cmp	r2, r3
 8002002:	d3ec      	bcc.n	8001fde <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	fbb3 f2f2 	udiv	r2, r3, r2
 800201c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201e:	fb01 f202 	mul.w	r2, r1, r2
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002030:	e009      	b.n	8002046 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	b29a      	uxth	r2, r3
 8002038:	230a      	movs	r3, #10
 800203a:	480e      	ldr	r0, [pc, #56]	; (8002074 <ILI9341_Draw_Colour_Burst+0x128>)
 800203c:	f005 fe97 	bl	8007d6e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	3301      	adds	r3, #1
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3f1      	bcc.n	8002032 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	b29a      	uxth	r2, r3
 8002054:	230a      	movs	r3, #10
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <ILI9341_Draw_Colour_Burst+0x128>)
 8002058:	f005 fe89 	bl	8007d6e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2110      	movs	r1, #16
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <ILI9341_Draw_Colour_Burst+0x124>)
 8002062:	f001 fc55 	bl	8003910 <HAL_GPIO_WritePin>
 8002066:	46ad      	mov	sp, r5
}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	20000288 	.word	0x20000288

08002078 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <ILI9341_Fill_Screen+0x44>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <ILI9341_Fill_Screen+0x48>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	2100      	movs	r1, #0
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff fd85 	bl	8001ba0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <ILI9341_Fill_Screen+0x44>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <ILI9341_Fill_Screen+0x48>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	fb03 f302 	mul.w	r3, r3, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff4c 	bl	8001f4c <ILI9341_Draw_Colour_Burst>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000000a 	.word	0x2000000a
 80020c0:	20000008 	.word	0x20000008

080020c4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	460b      	mov	r3, r1
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80020d6:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <ILI9341_Draw_Pixel+0x180>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	429a      	cmp	r2, r3
 80020e0:	f080 80ac 	bcs.w	800223c <ILI9341_Draw_Pixel+0x178>
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <ILI9341_Draw_Pixel+0x184>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	88ba      	ldrh	r2, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f080 80a5 	bcs.w	800223c <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020f2:	2200      	movs	r2, #0
 80020f4:	2140      	movs	r1, #64	; 0x40
 80020f6:	4855      	ldr	r0, [pc, #340]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 80020f8:	f001 fc0a 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2110      	movs	r1, #16
 8002100:	4852      	ldr	r0, [pc, #328]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002102:	f001 fc05 	bl	8003910 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002106:	202a      	movs	r0, #42	; 0x2a
 8002108:	f7ff fcfc 	bl	8001b04 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800210c:	2201      	movs	r2, #1
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	484e      	ldr	r0, [pc, #312]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002112:	f001 fbfd 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002116:	2201      	movs	r2, #1
 8002118:	2110      	movs	r1, #16
 800211a:	484c      	ldr	r0, [pc, #304]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 800211c:	f001 fbf8 	bl	8003910 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002120:	2200      	movs	r2, #0
 8002122:	2110      	movs	r1, #16
 8002124:	4849      	ldr	r0, [pc, #292]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002126:	f001 fbf3 	bl	8003910 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	b29b      	uxth	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	753b      	strb	r3, [r7, #20]
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	757b      	strb	r3, [r7, #21]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	3301      	adds	r3, #1
 800213e:	121b      	asrs	r3, r3, #8
 8002140:	b2db      	uxtb	r3, r3
 8002142:	75bb      	strb	r3, [r7, #22]
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3301      	adds	r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800214e:	f107 0114 	add.w	r1, r7, #20
 8002152:	2301      	movs	r3, #1
 8002154:	2204      	movs	r2, #4
 8002156:	483e      	ldr	r0, [pc, #248]	; (8002250 <ILI9341_Draw_Pixel+0x18c>)
 8002158:	f005 fe09 	bl	8007d6e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2110      	movs	r1, #16
 8002160:	483a      	ldr	r0, [pc, #232]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002162:	f001 fbd5 	bl	8003910 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	4838      	ldr	r0, [pc, #224]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 800216c:	f001 fbd0 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002170:	2200      	movs	r2, #0
 8002172:	2110      	movs	r1, #16
 8002174:	4835      	ldr	r0, [pc, #212]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002176:	f001 fbcb 	bl	8003910 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800217a:	202b      	movs	r0, #43	; 0x2b
 800217c:	f7ff fcc2 	bl	8001b04 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002180:	2201      	movs	r2, #1
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	4831      	ldr	r0, [pc, #196]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002186:	f001 fbc3 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800218a:	2201      	movs	r2, #1
 800218c:	2110      	movs	r1, #16
 800218e:	482f      	ldr	r0, [pc, #188]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002190:	f001 fbbe 	bl	8003910 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	2110      	movs	r1, #16
 8002198:	482c      	ldr	r0, [pc, #176]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 800219a:	f001 fbb9 	bl	8003910 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	743b      	strb	r3, [r7, #16]
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	747b      	strb	r3, [r7, #17]
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	3301      	adds	r3, #1
 80021b2:	121b      	asrs	r3, r3, #8
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	74bb      	strb	r3, [r7, #18]
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80021c2:	f107 0110 	add.w	r1, r7, #16
 80021c6:	2301      	movs	r3, #1
 80021c8:	2204      	movs	r2, #4
 80021ca:	4821      	ldr	r0, [pc, #132]	; (8002250 <ILI9341_Draw_Pixel+0x18c>)
 80021cc:	f005 fdcf 	bl	8007d6e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2110      	movs	r1, #16
 80021d4:	481d      	ldr	r0, [pc, #116]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 80021d6:	f001 fb9b 	bl	8003910 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80021da:	2200      	movs	r2, #0
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	481b      	ldr	r0, [pc, #108]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 80021e0:	f001 fb96 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80021e4:	2200      	movs	r2, #0
 80021e6:	2110      	movs	r1, #16
 80021e8:	4818      	ldr	r0, [pc, #96]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 80021ea:	f001 fb91 	bl	8003910 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	f7ff fc88 	bl	8001b04 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80021f4:	2201      	movs	r2, #1
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	4814      	ldr	r0, [pc, #80]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 80021fa:	f001 fb89 	bl	8003910 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80021fe:	2201      	movs	r2, #1
 8002200:	2110      	movs	r1, #16
 8002202:	4812      	ldr	r0, [pc, #72]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002204:	f001 fb84 	bl	8003910 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2110      	movs	r1, #16
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 800220e:	f001 fb7f 	bl	8003910 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b29b      	uxth	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	733b      	strb	r3, [r7, #12]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002222:	f107 010c 	add.w	r1, r7, #12
 8002226:	2301      	movs	r3, #1
 8002228:	2202      	movs	r2, #2
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <ILI9341_Draw_Pixel+0x18c>)
 800222c:	f005 fd9f 	bl	8007d6e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	2110      	movs	r1, #16
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <ILI9341_Draw_Pixel+0x188>)
 8002236:	f001 fb6b 	bl	8003910 <HAL_GPIO_WritePin>
 800223a:	e000      	b.n	800223e <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800223c:	bf00      	nop
	
}
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000000a 	.word	0x2000000a
 8002248:	20000008 	.word	0x20000008
 800224c:	40021000 	.word	0x40021000
 8002250:	20000288 	.word	0x20000288

08002254 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	80fb      	strh	r3, [r7, #6]
 8002266:	4603      	mov	r3, r0
 8002268:	80bb      	strh	r3, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <ILI9341_Draw_Rectangle+0xb0>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	429a      	cmp	r2, r3
 800227c:	d23d      	bcs.n	80022fa <ILI9341_Draw_Rectangle+0xa6>
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <ILI9341_Draw_Rectangle+0xb4>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	88ba      	ldrh	r2, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d237      	bcs.n	80022fa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4413      	add	r3, r2
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <ILI9341_Draw_Rectangle+0xb0>)
 8002292:	8812      	ldrh	r2, [r2, #0]
 8002294:	b292      	uxth	r2, r2
 8002296:	4293      	cmp	r3, r2
 8002298:	dd05      	ble.n	80022a6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <ILI9341_Draw_Rectangle+0xb0>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80022a6:	88ba      	ldrh	r2, [r7, #4]
 80022a8:	883b      	ldrh	r3, [r7, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a16      	ldr	r2, [pc, #88]	; (8002308 <ILI9341_Draw_Rectangle+0xb4>)
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	b292      	uxth	r2, r2
 80022b2:	4293      	cmp	r3, r2
 80022b4:	dd05      	ble.n	80022c2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <ILI9341_Draw_Rectangle+0xb4>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	4413      	add	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29c      	uxth	r4, r3
 80022ce:	88ba      	ldrh	r2, [r7, #4]
 80022d0:	883b      	ldrh	r3, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29b      	uxth	r3, r3
 80022da:	88b9      	ldrh	r1, [r7, #4]
 80022dc:	88f8      	ldrh	r0, [r7, #6]
 80022de:	4622      	mov	r2, r4
 80022e0:	f7ff fc5e 	bl	8001ba0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80022e4:	883b      	ldrh	r3, [r7, #0]
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	8b3b      	ldrh	r3, [r7, #24]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fe2a 	bl	8001f4c <ILI9341_Draw_Colour_Burst>
 80022f8:	e000      	b.n	80022fc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80022fa:	bf00      	nop
}
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	2000000a 	.word	0x2000000a
 8002308:	20000008 	.word	0x20000008

0800230c <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002312:	4832      	ldr	r0, [pc, #200]	; (80023dc <menu+0xd0>)
 8002314:	f000 fd4a 	bl	8002dac <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002318:	4831      	ldr	r0, [pc, #196]	; (80023e0 <menu+0xd4>)
 800231a:	f000 fd19 	bl	8002d50 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 800231e:	f000 fc4f 	bl	8002bc0 <getPressKey>
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	d04a      	beq.n	80023c2 <menu+0xb6>
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <menu+0xd8>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d043      	beq.n	80023c2 <menu+0xb6>
	   {
			flagPressed = true;
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <menu+0xd8>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d83b      	bhi.n	80023be <menu+0xb2>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <menu+0x40>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	08002361 	.word	0x08002361
 8002350:	08002371 	.word	0x08002371
 8002354:	0800238d 	.word	0x0800238d
 8002358:	080023a9 	.word	0x080023a9
 800235c:	080023b9 	.word	0x080023b9
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002360:	f000 fcea 	bl	8002d38 <Menu_GetCurrentMenu>
 8002364:	4603      	mov	r3, r0
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fcf1 	bl	8002d50 <Menu_Navigate>
					break;
 800236e:	e027      	b.n	80023c0 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <menu+0xdc>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <menu+0xdc>)
 800237a:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 800237c:	f000 fcdc 	bl	8002d38 <Menu_GetCurrentMenu>
 8002380:	4603      	mov	r3, r0
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fce3 	bl	8002d50 <Menu_Navigate>
					break;
 800238a:	e019      	b.n	80023c0 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <menu+0xdc>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <menu+0xdc>)
 8002396:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002398:	f000 fcce 	bl	8002d38 <Menu_GetCurrentMenu>
 800239c:	4603      	mov	r3, r0
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fcd5 	bl	8002d50 <Menu_Navigate>
					break;
 80023a6:	e00b      	b.n	80023c0 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 80023a8:	f000 fcc6 	bl	8002d38 <Menu_GetCurrentMenu>
 80023ac:	4603      	mov	r3, r0
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fccd 	bl	8002d50 <Menu_Navigate>
					break;
 80023b6:	e003      	b.n	80023c0 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 80023b8:	f000 fd0c 	bl	8002dd4 <Menu_EnterCurrentItem>
					break;
 80023bc:	e000      	b.n	80023c0 <menu+0xb4>

			 default:
			  break;
 80023be:	bf00      	nop
			switch(pressed_key)
 80023c0:	e00b      	b.n	80023da <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 80023c2:	f000 fbfd 	bl	8002bc0 <getPressKey>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2bff      	cmp	r3, #255	; 0xff
 80023ca:	d1a8      	bne.n	800231e <menu+0x12>
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <menu+0xd8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0a4      	beq.n	800231e <menu+0x12>
	   {
		   flagPressed = false;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <menu+0xd8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
	  {
 80023da:	e7a0      	b.n	800231e <menu+0x12>
 80023dc:	08002cf1 	.word	0x08002cf1
 80023e0:	0800cc7c 	.word	0x0800cc7c
 80023e4:	20000200 	.word	0x20000200
 80023e8:	20000148 	.word	0x20000148

080023ec <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80023f2:	2300      	movs	r3, #0
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023fe:	226e      	movs	r2, #110	; 0x6e
 8002400:	211e      	movs	r1, #30
 8002402:	4884      	ldr	r0, [pc, #528]	; (8002614 <print_all_top_menu+0x228>)
 8002404:	f7ff fb44 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002408:	2300      	movs	r3, #0
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2302      	movs	r3, #2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002414:	2282      	movs	r2, #130	; 0x82
 8002416:	211e      	movs	r1, #30
 8002418:	487e      	ldr	r0, [pc, #504]	; (8002614 <print_all_top_menu+0x228>)
 800241a:	f7ff fb39 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	2302      	movs	r3, #2
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800242a:	2296      	movs	r2, #150	; 0x96
 800242c:	211e      	movs	r1, #30
 800242e:	4879      	ldr	r0, [pc, #484]	; (8002614 <print_all_top_menu+0x228>)
 8002430:	f7ff fb2e 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002440:	22aa      	movs	r2, #170	; 0xaa
 8002442:	211e      	movs	r1, #30
 8002444:	4873      	ldr	r0, [pc, #460]	; (8002614 <print_all_top_menu+0x228>)
 8002446:	f7ff fb23 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800244a:	2300      	movs	r3, #0
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002456:	22be      	movs	r2, #190	; 0xbe
 8002458:	211e      	movs	r1, #30
 800245a:	486e      	ldr	r0, [pc, #440]	; (8002614 <print_all_top_menu+0x228>)
 800245c:	f7ff fb18 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800246c:	22d2      	movs	r2, #210	; 0xd2
 800246e:	211e      	movs	r1, #30
 8002470:	4868      	ldr	r0, [pc, #416]	; (8002614 <print_all_top_menu+0x228>)
 8002472:	f7ff fb0d 	bl	8001a90 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002476:	2300      	movs	r3, #0
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2302      	movs	r3, #2
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	226e      	movs	r2, #110	; 0x6e
 8002484:	211e      	movs	r1, #30
 8002486:	4864      	ldr	r0, [pc, #400]	; (8002618 <print_all_top_menu+0x22c>)
 8002488:	f7ff fb02 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002498:	2282      	movs	r2, #130	; 0x82
 800249a:	211e      	movs	r1, #30
 800249c:	485f      	ldr	r0, [pc, #380]	; (800261c <print_all_top_menu+0x230>)
 800249e:	f7ff faf7 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 80024a2:	2300      	movs	r3, #0
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2302      	movs	r3, #2
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	2296      	movs	r2, #150	; 0x96
 80024b0:	211e      	movs	r1, #30
 80024b2:	485b      	ldr	r0, [pc, #364]	; (8002620 <print_all_top_menu+0x234>)
 80024b4:	f7ff faec 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 80024b8:	2300      	movs	r3, #0
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2302      	movs	r3, #2
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c4:	22aa      	movs	r2, #170	; 0xaa
 80024c6:	211e      	movs	r1, #30
 80024c8:	4856      	ldr	r0, [pc, #344]	; (8002624 <print_all_top_menu+0x238>)
 80024ca:	f7ff fae1 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 80024ce:	2300      	movs	r3, #0
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2302      	movs	r3, #2
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024da:	22be      	movs	r2, #190	; 0xbe
 80024dc:	211e      	movs	r1, #30
 80024de:	4852      	ldr	r0, [pc, #328]	; (8002628 <print_all_top_menu+0x23c>)
 80024e0:	f7ff fad6 	bl	8001a90 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 80024e4:	4b51      	ldr	r3, [pc, #324]	; (800262c <print_all_top_menu+0x240>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 80024ec:	4b4f      	ldr	r3, [pc, #316]	; (800262c <print_all_top_menu+0x240>)
 80024ee:	2205      	movs	r2, #5
 80024f0:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <print_all_top_menu+0x240>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d902      	bls.n	8002500 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <print_all_top_menu+0x240>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002500:	2300      	movs	r3, #0
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2302      	movs	r3, #2
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250c:	226e      	movs	r2, #110	; 0x6e
 800250e:	2105      	movs	r1, #5
 8002510:	4847      	ldr	r0, [pc, #284]	; (8002630 <print_all_top_menu+0x244>)
 8002512:	f7ff fabd 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002516:	2300      	movs	r3, #0
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	2302      	movs	r3, #2
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002522:	2282      	movs	r2, #130	; 0x82
 8002524:	2105      	movs	r1, #5
 8002526:	4842      	ldr	r0, [pc, #264]	; (8002630 <print_all_top_menu+0x244>)
 8002528:	f7ff fab2 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002538:	2296      	movs	r2, #150	; 0x96
 800253a:	2105      	movs	r1, #5
 800253c:	483c      	ldr	r0, [pc, #240]	; (8002630 <print_all_top_menu+0x244>)
 800253e:	f7ff faa7 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002542:	2300      	movs	r3, #0
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2302      	movs	r3, #2
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254e:	22aa      	movs	r2, #170	; 0xaa
 8002550:	2105      	movs	r1, #5
 8002552:	4837      	ldr	r0, [pc, #220]	; (8002630 <print_all_top_menu+0x244>)
 8002554:	f7ff fa9c 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002564:	22be      	movs	r2, #190	; 0xbe
 8002566:	2105      	movs	r1, #5
 8002568:	4831      	ldr	r0, [pc, #196]	; (8002630 <print_all_top_menu+0x244>)
 800256a:	f7ff fa91 	bl	8001a90 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <print_all_top_menu+0x240>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	2b04      	cmp	r3, #4
 8002576:	d849      	bhi.n	800260c <print_all_top_menu+0x220>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <print_all_top_menu+0x194>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	08002595 	.word	0x08002595
 8002584:	080025ad 	.word	0x080025ad
 8002588:	080025c5 	.word	0x080025c5
 800258c:	080025dd 	.word	0x080025dd
 8002590:	080025f5 	.word	0x080025f5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002594:	2300      	movs	r3, #0
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	2302      	movs	r3, #2
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025a0:	226e      	movs	r2, #110	; 0x6e
 80025a2:	2105      	movs	r1, #5
 80025a4:	4823      	ldr	r0, [pc, #140]	; (8002634 <print_all_top_menu+0x248>)
 80025a6:	f7ff fa73 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80025aa:	e02f      	b.n	800260c <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2302      	movs	r3, #2
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b8:	2282      	movs	r2, #130	; 0x82
 80025ba:	2105      	movs	r1, #5
 80025bc:	481d      	ldr	r0, [pc, #116]	; (8002634 <print_all_top_menu+0x248>)
 80025be:	f7ff fa67 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80025c2:	e023      	b.n	800260c <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80025c4:	2300      	movs	r3, #0
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2302      	movs	r3, #2
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d0:	2296      	movs	r2, #150	; 0x96
 80025d2:	2105      	movs	r1, #5
 80025d4:	4817      	ldr	r0, [pc, #92]	; (8002634 <print_all_top_menu+0x248>)
 80025d6:	f7ff fa5b 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80025da:	e017      	b.n	800260c <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80025dc:	2300      	movs	r3, #0
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	2302      	movs	r3, #2
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e8:	22aa      	movs	r2, #170	; 0xaa
 80025ea:	2105      	movs	r1, #5
 80025ec:	4811      	ldr	r0, [pc, #68]	; (8002634 <print_all_top_menu+0x248>)
 80025ee:	f7ff fa4f 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80025f2:	e00b      	b.n	800260c <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 80025f4:	2300      	movs	r3, #0
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2302      	movs	r3, #2
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002600:	22be      	movs	r2, #190	; 0xbe
 8002602:	2105      	movs	r1, #5
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <print_all_top_menu+0x248>)
 8002606:	f7ff fa43 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 800260a:	bf00      	nop
	}

}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	0800c8f4 	.word	0x0800c8f4
 8002618:	20000010 	.word	0x20000010
 800261c:	2000002e 	.word	0x2000002e
 8002620:	2000004c 	.word	0x2000004c
 8002624:	2000006a 	.word	0x2000006a
 8002628:	20000088 	.word	0x20000088
 800262c:	20000148 	.word	0x20000148
 8002630:	0800c918 	.word	0x0800c918
 8002634:	0800c91c 	.word	0x0800c91c

08002638 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800264a:	226e      	movs	r2, #110	; 0x6e
 800264c:	211e      	movs	r1, #30
 800264e:	4877      	ldr	r0, [pc, #476]	; (800282c <print_all_menu_1_menus+0x1f4>)
 8002650:	f7ff fa1e 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002654:	2300      	movs	r3, #0
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	2302      	movs	r3, #2
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002660:	2282      	movs	r2, #130	; 0x82
 8002662:	211e      	movs	r1, #30
 8002664:	4871      	ldr	r0, [pc, #452]	; (800282c <print_all_menu_1_menus+0x1f4>)
 8002666:	f7ff fa13 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800266a:	2300      	movs	r3, #0
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2302      	movs	r3, #2
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002676:	2296      	movs	r2, #150	; 0x96
 8002678:	211e      	movs	r1, #30
 800267a:	486c      	ldr	r0, [pc, #432]	; (800282c <print_all_menu_1_menus+0x1f4>)
 800267c:	f7ff fa08 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2302      	movs	r3, #2
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800268c:	22aa      	movs	r2, #170	; 0xaa
 800268e:	211e      	movs	r1, #30
 8002690:	4866      	ldr	r0, [pc, #408]	; (800282c <print_all_menu_1_menus+0x1f4>)
 8002692:	f7ff f9fd 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a2:	22be      	movs	r2, #190	; 0xbe
 80026a4:	211e      	movs	r1, #30
 80026a6:	4861      	ldr	r0, [pc, #388]	; (800282c <print_all_menu_1_menus+0x1f4>)
 80026a8:	f7ff f9f2 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80026ac:	2300      	movs	r3, #0
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2302      	movs	r3, #2
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026b8:	22d2      	movs	r2, #210	; 0xd2
 80026ba:	211e      	movs	r1, #30
 80026bc:	485b      	ldr	r0, [pc, #364]	; (800282c <print_all_menu_1_menus+0x1f4>)
 80026be:	f7ff f9e7 	bl	8001a90 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80026c2:	2300      	movs	r3, #0
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2302      	movs	r3, #2
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	226e      	movs	r2, #110	; 0x6e
 80026d0:	2105      	movs	r1, #5
 80026d2:	4857      	ldr	r0, [pc, #348]	; (8002830 <print_all_menu_1_menus+0x1f8>)
 80026d4:	f7ff f9dc 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2302      	movs	r3, #2
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e4:	2282      	movs	r2, #130	; 0x82
 80026e6:	2105      	movs	r1, #5
 80026e8:	4851      	ldr	r0, [pc, #324]	; (8002830 <print_all_menu_1_menus+0x1f8>)
 80026ea:	f7ff f9d1 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80026ee:	2300      	movs	r3, #0
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2302      	movs	r3, #2
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fa:	2296      	movs	r2, #150	; 0x96
 80026fc:	2105      	movs	r1, #5
 80026fe:	484c      	ldr	r0, [pc, #304]	; (8002830 <print_all_menu_1_menus+0x1f8>)
 8002700:	f7ff f9c6 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002704:	2300      	movs	r3, #0
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	2302      	movs	r3, #2
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002710:	22aa      	movs	r2, #170	; 0xaa
 8002712:	2105      	movs	r1, #5
 8002714:	4846      	ldr	r0, [pc, #280]	; (8002830 <print_all_menu_1_menus+0x1f8>)
 8002716:	f7ff f9bb 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800271a:	2300      	movs	r3, #0
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2302      	movs	r3, #2
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002726:	22be      	movs	r2, #190	; 0xbe
 8002728:	2105      	movs	r1, #5
 800272a:	4841      	ldr	r0, [pc, #260]	; (8002830 <print_all_menu_1_menus+0x1f8>)
 800272c:	f7ff f9b0 	bl	8001a90 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 8002730:	2300      	movs	r3, #0
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273c:	226e      	movs	r2, #110	; 0x6e
 800273e:	211e      	movs	r1, #30
 8002740:	483c      	ldr	r0, [pc, #240]	; (8002834 <print_all_menu_1_menus+0x1fc>)
 8002742:	f7ff f9a5 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 8002746:	2300      	movs	r3, #0
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2302      	movs	r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002752:	2282      	movs	r2, #130	; 0x82
 8002754:	211e      	movs	r1, #30
 8002756:	4838      	ldr	r0, [pc, #224]	; (8002838 <print_all_menu_1_menus+0x200>)
 8002758:	f7ff f99a 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002768:	2296      	movs	r2, #150	; 0x96
 800276a:	211e      	movs	r1, #30
 800276c:	4833      	ldr	r0, [pc, #204]	; (800283c <print_all_menu_1_menus+0x204>)
 800276e:	f7ff f98f 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 8002772:	2300      	movs	r3, #0
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2302      	movs	r3, #2
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277e:	22aa      	movs	r2, #170	; 0xaa
 8002780:	211e      	movs	r1, #30
 8002782:	482f      	ldr	r0, [pc, #188]	; (8002840 <print_all_menu_1_menus+0x208>)
 8002784:	f7ff f984 	bl	8001a90 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <print_all_menu_1_menus+0x20c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <print_all_menu_1_menus+0x20c>)
 8002792:	2204      	movs	r2, #4
 8002794:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <print_all_menu_1_menus+0x20c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d902      	bls.n	80027a4 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <print_all_menu_1_menus+0x20c>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <print_all_menu_1_menus+0x20c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d83a      	bhi.n	8002824 <print_all_menu_1_menus+0x1ec>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <print_all_menu_1_menus+0x17c>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027c5 	.word	0x080027c5
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027f5 	.word	0x080027f5
 80027c0:	0800280d 	.word	0x0800280d
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80027c4:	2300      	movs	r3, #0
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	2302      	movs	r3, #2
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027d0:	226e      	movs	r2, #110	; 0x6e
 80027d2:	2105      	movs	r1, #5
 80027d4:	481c      	ldr	r0, [pc, #112]	; (8002848 <print_all_menu_1_menus+0x210>)
 80027d6:	f7ff f95b 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80027da:	e023      	b.n	8002824 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80027dc:	2300      	movs	r3, #0
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2302      	movs	r3, #2
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027e8:	2282      	movs	r2, #130	; 0x82
 80027ea:	2105      	movs	r1, #5
 80027ec:	4816      	ldr	r0, [pc, #88]	; (8002848 <print_all_menu_1_menus+0x210>)
 80027ee:	f7ff f94f 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80027f2:	e017      	b.n	8002824 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80027f4:	2300      	movs	r3, #0
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002800:	2296      	movs	r2, #150	; 0x96
 8002802:	2105      	movs	r1, #5
 8002804:	4810      	ldr	r0, [pc, #64]	; (8002848 <print_all_menu_1_menus+0x210>)
 8002806:	f7ff f943 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 800280a:	e00b      	b.n	8002824 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002818:	22aa      	movs	r2, #170	; 0xaa
 800281a:	2105      	movs	r1, #5
 800281c:	480a      	ldr	r0, [pc, #40]	; (8002848 <print_all_menu_1_menus+0x210>)
 800281e:	f7ff f937 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 8002822:	bf00      	nop
	}
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0800c8f4 	.word	0x0800c8f4
 8002830:	0800c918 	.word	0x0800c918
 8002834:	200000a8 	.word	0x200000a8
 8002838:	200000bc 	.word	0x200000bc
 800283c:	200000d0 	.word	0x200000d0
 8002840:	200000e4 	.word	0x200000e4
 8002844:	20000148 	.word	0x20000148
 8002848:	0800c91c 	.word	0x0800c91c

0800284c <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002852:	2300      	movs	r3, #0
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800285e:	226e      	movs	r2, #110	; 0x6e
 8002860:	211e      	movs	r1, #30
 8002862:	4877      	ldr	r0, [pc, #476]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 8002864:	f7ff f914 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002868:	2300      	movs	r3, #0
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2302      	movs	r3, #2
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002874:	2282      	movs	r2, #130	; 0x82
 8002876:	211e      	movs	r1, #30
 8002878:	4871      	ldr	r0, [pc, #452]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 800287a:	f7ff f909 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800288a:	2296      	movs	r2, #150	; 0x96
 800288c:	211e      	movs	r1, #30
 800288e:	486c      	ldr	r0, [pc, #432]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 8002890:	f7ff f8fe 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002894:	2300      	movs	r3, #0
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	2302      	movs	r3, #2
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028a0:	22aa      	movs	r2, #170	; 0xaa
 80028a2:	211e      	movs	r1, #30
 80028a4:	4866      	ldr	r0, [pc, #408]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 80028a6:	f7ff f8f3 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80028aa:	2300      	movs	r3, #0
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	2302      	movs	r3, #2
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028b6:	22be      	movs	r2, #190	; 0xbe
 80028b8:	211e      	movs	r1, #30
 80028ba:	4861      	ldr	r0, [pc, #388]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 80028bc:	f7ff f8e8 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80028c0:	2300      	movs	r3, #0
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	2302      	movs	r3, #2
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028cc:	22d2      	movs	r2, #210	; 0xd2
 80028ce:	211e      	movs	r1, #30
 80028d0:	485b      	ldr	r0, [pc, #364]	; (8002a40 <print_all_menu_1_1_menus+0x1f4>)
 80028d2:	f7ff f8dd 	bl	8001a90 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e2:	226e      	movs	r2, #110	; 0x6e
 80028e4:	2105      	movs	r1, #5
 80028e6:	4857      	ldr	r0, [pc, #348]	; (8002a44 <print_all_menu_1_1_menus+0x1f8>)
 80028e8:	f7ff f8d2 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80028ec:	2300      	movs	r3, #0
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2302      	movs	r3, #2
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f8:	2282      	movs	r2, #130	; 0x82
 80028fa:	2105      	movs	r1, #5
 80028fc:	4851      	ldr	r0, [pc, #324]	; (8002a44 <print_all_menu_1_1_menus+0x1f8>)
 80028fe:	f7ff f8c7 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290e:	2296      	movs	r2, #150	; 0x96
 8002910:	2105      	movs	r1, #5
 8002912:	484c      	ldr	r0, [pc, #304]	; (8002a44 <print_all_menu_1_1_menus+0x1f8>)
 8002914:	f7ff f8bc 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002918:	2300      	movs	r3, #0
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	2302      	movs	r3, #2
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	22aa      	movs	r2, #170	; 0xaa
 8002926:	2105      	movs	r1, #5
 8002928:	4846      	ldr	r0, [pc, #280]	; (8002a44 <print_all_menu_1_1_menus+0x1f8>)
 800292a:	f7ff f8b1 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800292e:	2300      	movs	r3, #0
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2302      	movs	r3, #2
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800293a:	22be      	movs	r2, #190	; 0xbe
 800293c:	2105      	movs	r1, #5
 800293e:	4841      	ldr	r0, [pc, #260]	; (8002a44 <print_all_menu_1_1_menus+0x1f8>)
 8002940:	f7ff f8a6 	bl	8001a90 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2302      	movs	r3, #2
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002950:	226e      	movs	r2, #110	; 0x6e
 8002952:	211e      	movs	r1, #30
 8002954:	483c      	ldr	r0, [pc, #240]	; (8002a48 <print_all_menu_1_1_menus+0x1fc>)
 8002956:	f7ff f89b 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 800295a:	2300      	movs	r3, #0
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2302      	movs	r3, #2
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002966:	2282      	movs	r2, #130	; 0x82
 8002968:	211e      	movs	r1, #30
 800296a:	4838      	ldr	r0, [pc, #224]	; (8002a4c <print_all_menu_1_1_menus+0x200>)
 800296c:	f7ff f890 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8002970:	2300      	movs	r3, #0
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297c:	2296      	movs	r2, #150	; 0x96
 800297e:	211e      	movs	r1, #30
 8002980:	4833      	ldr	r0, [pc, #204]	; (8002a50 <print_all_menu_1_1_menus+0x204>)
 8002982:	f7ff f885 	bl	8001a90 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002992:	22aa      	movs	r2, #170	; 0xaa
 8002994:	211e      	movs	r1, #30
 8002996:	482f      	ldr	r0, [pc, #188]	; (8002a54 <print_all_menu_1_1_menus+0x208>)
 8002998:	f7ff f87a 	bl	8001a90 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 800299c:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <print_all_menu_1_1_menus+0x20c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <print_all_menu_1_1_menus+0x20c>)
 80029a6:	2204      	movs	r2, #4
 80029a8:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <print_all_menu_1_1_menus+0x20c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d902      	bls.n	80029b8 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <print_all_menu_1_1_menus+0x20c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <print_all_menu_1_1_menus+0x20c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d83a      	bhi.n	8002a38 <print_all_menu_1_1_menus+0x1ec>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <print_all_menu_1_1_menus+0x17c>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	08002a09 	.word	0x08002a09
 80029d4:	08002a21 	.word	0x08002a21
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029e4:	226e      	movs	r2, #110	; 0x6e
 80029e6:	2105      	movs	r1, #5
 80029e8:	481c      	ldr	r0, [pc, #112]	; (8002a5c <print_all_menu_1_1_menus+0x210>)
 80029ea:	f7ff f851 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 80029ee:	e023      	b.n	8002a38 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029fc:	2282      	movs	r2, #130	; 0x82
 80029fe:	2105      	movs	r1, #5
 8002a00:	4816      	ldr	r0, [pc, #88]	; (8002a5c <print_all_menu_1_1_menus+0x210>)
 8002a02:	f7ff f845 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 8002a06:	e017      	b.n	8002a38 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a14:	2296      	movs	r2, #150	; 0x96
 8002a16:	2105      	movs	r1, #5
 8002a18:	4810      	ldr	r0, [pc, #64]	; (8002a5c <print_all_menu_1_1_menus+0x210>)
 8002a1a:	f7ff f839 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 8002a1e:	e00b      	b.n	8002a38 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a2c:	22aa      	movs	r2, #170	; 0xaa
 8002a2e:	2105      	movs	r1, #5
 8002a30:	480a      	ldr	r0, [pc, #40]	; (8002a5c <print_all_menu_1_1_menus+0x210>)
 8002a32:	f7ff f82d 	bl	8001a90 <ILI9341_Draw_Text>
			break;
 8002a36:	bf00      	nop
	}
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800c8f4 	.word	0x0800c8f4
 8002a44:	0800c918 	.word	0x0800c918
 8002a48:	200000f8 	.word	0x200000f8
 8002a4c:	2000010c 	.word	0x2000010c
 8002a50:	20000120 	.word	0x20000120
 8002a54:	20000134 	.word	0x20000134
 8002a58:	20000148 	.word	0x20000148
 8002a5c:	0800c91c 	.word	0x0800c91c

08002a60 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8002a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <tongle_green_led+0x14>)
 8002a6a:	f000 ff6a 	bl	8003942 <HAL_GPIO_TogglePin>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40020c00 	.word	0x40020c00

08002a78 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a82:	4802      	ldr	r0, [pc, #8]	; (8002a8c <RED_LED_ON+0x14>)
 8002a84:	f000 ff44 	bl	8003910 <HAL_GPIO_WritePin>
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40020c00 	.word	0x40020c00

08002a90 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a9a:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <RED_LED_OFF+0x14>)
 8002a9c:	f000 ff38 	bl	8003910 <HAL_GPIO_WritePin>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002abe:	223c      	movs	r2, #60	; 0x3c
 8002ac0:	210a      	movs	r1, #10
 8002ac2:	4838      	ldr	r0, [pc, #224]	; (8002ba4 <Level1Item3_Enter+0xfc>)
 8002ac4:	f7fe ffe4 	bl	8001a90 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad4:	223c      	movs	r2, #60	; 0x3c
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	4833      	ldr	r0, [pc, #204]	; (8002ba8 <Level1Item3_Enter+0x100>)
 8002ada:	f7fe ffd9 	bl	8001a90 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8002ade:	e049      	b.n	8002b74 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8002ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ae4:	4831      	ldr	r0, [pc, #196]	; (8002bac <Level1Item3_Enter+0x104>)
 8002ae6:	f000 fefb 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d019      	beq.n	8002b28 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10b      	bne.n	8002b12 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8002afa:	2300      	movs	r3, #0
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	2302      	movs	r3, #2
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b06:	223c      	movs	r2, #60	; 0x3c
 8002b08:	2196      	movs	r1, #150	; 0x96
 8002b0a:	4829      	ldr	r0, [pc, #164]	; (8002bb0 <Level1Item3_Enter+0x108>)
 8002b0c:	f7fe ffc0 	bl	8001a90 <ILI9341_Draw_Text>
 8002b10:	e00a      	b.n	8002b28 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 8002b12:	2300      	movs	r3, #0
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1e:	223c      	movs	r2, #60	; 0x3c
 8002b20:	2196      	movs	r1, #150	; 0x96
 8002b22:	4824      	ldr	r0, [pc, #144]	; (8002bb4 <Level1Item3_Enter+0x10c>)
 8002b24:	f7fe ffb4 	bl	8001a90 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 8002b28:	f000 f84a 	bl	8002bc0 <getPressKey>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2bff      	cmp	r3, #255	; 0xff
 8002b30:	d016      	beq.n	8002b60 <Level1Item3_Enter+0xb8>
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f083 0301 	eor.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 8002b42:	f000 f83d 	bl	8002bc0 <getPressKey>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d002      	beq.n	8002b52 <Level1Item3_Enter+0xaa>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d003      	beq.n	8002b58 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8002b50:	e005      	b.n	8002b5e <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 8002b52:	f7ff ff91 	bl	8002a78 <RED_LED_ON>
	  	  		  break;
 8002b56:	e002      	b.n	8002b5e <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 8002b58:	f7ff ff9a 	bl	8002a90 <RED_LED_OFF>
	  	  		  break;
 8002b5c:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8002b5e:	e009      	b.n	8002b74 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8002b60:	f000 f82e 	bl	8002bc0 <getPressKey>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d104      	bne.n	8002b74 <Level1Item3_Enter+0xcc>
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8002b70:	2300      	movs	r3, #0
 8002b72:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8002b74:	f000 f824 	bl	8002bc0 <getPressKey>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1b0      	bne.n	8002ae0 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2302      	movs	r3, #2
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8a:	223c      	movs	r2, #60	; 0x3c
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <Level1Item3_Enter+0x110>)
 8002b90:	f7fe ff7e 	bl	8001a90 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8002b94:	4809      	ldr	r0, [pc, #36]	; (8002bbc <Level1Item3_Enter+0x114>)
 8002b96:	f000 f8db 	bl	8002d50 <Menu_Navigate>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	0800c920 	.word	0x0800c920
 8002ba8:	0800c93c 	.word	0x0800c93c
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	0800c948 	.word	0x0800c948
 8002bb4:	0800c94c 	.word	0x0800c94c
 8002bb8:	0800c950 	.word	0x0800c950
 8002bbc:	0800ccd4 	.word	0x0800ccd4

08002bc0 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
	char digit = '\0';
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8002bca:	4a48      	ldr	r2, [pc, #288]	; (8002cec <getPressKey+0x12c>)
 8002bcc:	463b      	mov	r3, r7
 8002bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd2:	6018      	str	r0, [r3, #0]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	8019      	strh	r1, [r3, #0]
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8002be4:	f7fd fcc6 	bl	8000574 <read_one_digit_from_keyboard>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	3b32      	subs	r3, #50	; 0x32
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d875      	bhi.n	8002ce0 <getPressKey+0x120>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <getPressKey+0x3c>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c41 	.word	0x08002c41
 8002c00:	08002ce1 	.word	0x08002ce1
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002cb9 	.word	0x08002cb9
 8002c0c:	08002c91 	.word	0x08002c91
 8002c10:	08002ce1 	.word	0x08002ce1
 8002c14:	08002c69 	.word	0x08002c69
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8002c18:	f107 0117 	add.w	r1, r7, #23
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f009 fe39 	bl	800c898 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c26:	4638      	mov	r0, r7
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	f7fe ff2a 	bl	8001a90 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e050      	b.n	8002ce2 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8002c40:	f107 0117 	add.w	r1, r7, #23
 8002c44:	463b      	mov	r3, r7
 8002c46:	2201      	movs	r2, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fe25 	bl	800c898 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c4e:	4638      	mov	r0, r7
 8002c50:	2300      	movs	r3, #0
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2302      	movs	r3, #2
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f7fe ff16 	bl	8001a90 <ILI9341_Draw_Text>
			return BUTTON_UP;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e03c      	b.n	8002ce2 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8002c68:	f107 0117 	add.w	r1, r7, #23
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f009 fe11 	bl	800c898 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c76:	4638      	mov	r0, r7
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	f7fe ff02 	bl	8001a90 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e028      	b.n	8002ce2 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8002c90:	f107 0117 	add.w	r1, r7, #23
 8002c94:	463b      	mov	r3, r7
 8002c96:	2201      	movs	r2, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f009 fdfd 	bl	800c898 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f7fe feee 	bl	8001a90 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e014      	b.n	8002ce2 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8002cb8:	f107 0117 	add.w	r1, r7, #23
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f009 fde9 	bl	800c898 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	2302      	movs	r3, #2
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f7fe feda 	bl	8001a90 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e000      	b.n	8002ce2 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8002ce0:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	0800c96c 	.word	0x0800c96c

08002cf0 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
	if (Text)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2301      	movs	r3, #1
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0a:	2264      	movs	r2, #100	; 0x64
 8002d0c:	210a      	movs	r1, #10
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <Generic_Write+0x44>)
 8002d10:	f7fe febe 	bl	8001a90 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8002d14:	2300      	movs	r3, #0
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d20:	2264      	movs	r2, #100	; 0x64
 8002d22:	210a      	movs	r1, #10
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fe feb3 	bl	8001a90 <ILI9341_Draw_Text>
	}
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	0800c980 	.word	0x0800c980

08002d38 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <Menu_GetCurrentMenu+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	2000000c 	.word	0x2000000c

08002d50 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <Menu_Navigate+0x50>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d01a      	beq.n	8002d96 <Menu_Navigate+0x46>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d017      	beq.n	8002d96 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <Menu_Navigate+0x54>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <Menu_Navigate+0x58>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <Menu_Navigate+0x58>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <Menu_Navigate+0x54>)
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	3218      	adds	r2, #24
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <Menu_Navigate+0x54>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4798      	blx	r3
 8002d94:	e000      	b.n	8002d98 <Menu_Navigate+0x48>
		return;		// Exit
 8002d96:	bf00      	nop
	}
}
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	0800cc64 	.word	0x0800cc64
 8002da4:	2000000c 	.word	0x2000000c
 8002da8:	200001fc 	.word	0x200001fc

08002dac <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8002db4:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <Menu_SetGenericWriteCallback+0x20>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <Menu_SetGenericWriteCallback+0x24>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ffc6 	bl	8002d50 <Menu_Navigate>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200001fc 	.word	0x200001fc
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <Menu_EnterCurrentItem+0x34>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <Menu_EnterCurrentItem+0x38>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00d      	beq.n	8002e00 <Menu_EnterCurrentItem+0x2c>
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <Menu_EnterCurrentItem+0x34>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <Menu_EnterCurrentItem+0x34>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e000      	b.n	8002e02 <Menu_EnterCurrentItem+0x2e>
		return;
 8002e00:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000000c 	.word	0x2000000c
 8002e0c:	0800cc64 	.word	0x0800cc64

08002e10 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	int i =0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002e1c:	e036      	b.n	8002e8c <speed_test_LCD+0x7c>
	{
		i ++;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e38:	4819      	ldr	r0, [pc, #100]	; (8002ea0 <speed_test_LCD+0x90>)
 8002e3a:	f004 fefa 	bl	8007c32 <HAL_RNG_GetRandomNumber>
 8002e3e:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e44:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <speed_test_LCD+0x90>)
 8002e46:	f004 fef4 	bl	8007c32 <HAL_RNG_GetRandomNumber>
 8002e4a:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e50:	4813      	ldr	r0, [pc, #76]	; (8002ea0 <speed_test_LCD+0x90>)
 8002e52:	f004 feee 	bl	8007c32 <HAL_RNG_GetRandomNumber>
 8002e56:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e5c:	4810      	ldr	r0, [pc, #64]	; (8002ea0 <speed_test_LCD+0x90>)
 8002e5e:	f004 fee8 	bl	8007c32 <HAL_RNG_GetRandomNumber>
 8002e62:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8002e70:	89bb      	ldrh	r3, [r7, #12]
 8002e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e76:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002e78:	897b      	ldrh	r3, [r7, #10]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	897a      	ldrh	r2, [r7, #10]
 8002e84:	89b9      	ldrh	r1, [r7, #12]
 8002e86:	89f8      	ldrh	r0, [r7, #14]
 8002e88:	f7fe fce4 	bl	8001854 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	ddc4      	ble.n	8002e1e <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200003c4 	.word	0x200003c4

08002ea4 <detect_all_sensors>:
}i2c_device;



void detect_all_sensors(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
		detect_bme280();
 8002ea8:	f000 f80e 	bl	8002ec8 <detect_bme280>
		detect_mpu6050();
 8002eac:	f000 f842 	bl	8002f34 <detect_mpu6050>
		detect_apds9960();
 8002eb0:	f000 f91e 	bl	80030f0 <detect_apds9960>
		denect_hmc5883l();
 8002eb4:	f000 f8c0 	bl	8003038 <denect_hmc5883l>
		detect_ms5611();
 8002eb8:	f000 f8ec 	bl	8003094 <detect_ms5611>
		detect_oled_screen();
 8002ebc:	f000 f94e 	bl	800315c <detect_oled_screen>
		detect_ds3231();
 8002ec0:	f000 f972 	bl	80031a8 <detect_ds3231>
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <detect_bme280>:

//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8002ed2:	2376      	movs	r3, #118	; 0x76
 8002ed4:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8002ed6:	23d0      	movs	r3, #208	; 0xd0
 8002ed8:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8002eda:	2360      	movs	r3, #96	; 0x60
 8002edc:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8002ede:	2300      	movs	r3, #0
 8002ee0:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eee:	9302      	str	r3, [sp, #8]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <detect_bme280+0x64>)
 8002efc:	f002 fddc 	bl	8005ab8 <HAL_I2C_Mem_Read>
 8002f00:	4603      	mov	r3, r0
 8002f02:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8002f04:	783b      	ldrb	r3, [r7, #0]
 8002f06:	787a      	ldrb	r2, [r7, #1]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <detect_bme280+0x52>
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <detect_bme280+0x68>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e003      	b.n	8002f22 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <detect_bme280+0x68>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000234 	.word	0x20000234
 8002f30:	200004bc 	.word	0x200004bc

08002f34 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8002f3e:	23d0      	movs	r3, #208	; 0xd0
 8002f40:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8002f42:	2375      	movs	r3, #117	; 0x75
 8002f44:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8002f46:	2368      	movs	r3, #104	; 0x68
 8002f48:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8002f4e:	897a      	ldrh	r2, [r7, #10]
 8002f50:	89b9      	ldrh	r1, [r7, #12]
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	9302      	str	r3, [sp, #8]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2301      	movs	r3, #1
 8002f64:	4832      	ldr	r0, [pc, #200]	; (8003030 <detect_mpu6050+0xfc>)
 8002f66:	f002 fda7 	bl	8005ab8 <HAL_I2C_Mem_Read>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8002f6e:	7a3b      	ldrb	r3, [r7, #8]
 8002f70:	7a7a      	ldrb	r2, [r7, #9]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d106      	bne.n	8002f84 <detect_mpu6050+0x50>
 8002f76:	89fb      	ldrh	r3, [r7, #14]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <detect_mpu6050+0x100>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	705a      	strb	r2, [r3, #1]
 8002f82:	e002      	b.n	8002f8a <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <detect_mpu6050+0x100>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <detect_mpu6050+0x100>)
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04a      	beq.n	8003028 <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8002f96:	89b9      	ldrh	r1, [r7, #12]
 8002f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	226a      	movs	r2, #106	; 0x6a
 8002faa:	4821      	ldr	r0, [pc, #132]	; (8003030 <detect_mpu6050+0xfc>)
 8002fac:	f002 fc8a 	bl	80058c4 <HAL_I2C_Mem_Write>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8002fb8:	89b9      	ldrh	r1, [r7, #12]
 8002fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	1dfb      	adds	r3, r7, #7
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	2237      	movs	r2, #55	; 0x37
 8002fcc:	4818      	ldr	r0, [pc, #96]	; (8003030 <detect_mpu6050+0xfc>)
 8002fce:	f002 fc79 	bl	80058c4 <HAL_I2C_Mem_Write>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8002fda:	89b9      	ldrh	r1, [r7, #12]
 8002fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe0:	9302      	str	r3, [sp, #8]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2301      	movs	r3, #1
 8002fee:	226a      	movs	r2, #106	; 0x6a
 8002ff0:	480f      	ldr	r0, [pc, #60]	; (8003030 <detect_mpu6050+0xfc>)
 8002ff2:	f002 fd61 	bl	8005ab8 <HAL_I2C_Mem_Read>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8002ffe:	89b9      	ldrh	r1, [r7, #12]
 8003000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003004:	9302      	str	r3, [sp, #8]
 8003006:	2301      	movs	r3, #1
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	f107 0308 	add.w	r3, r7, #8
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2301      	movs	r3, #1
 8003012:	2237      	movs	r2, #55	; 0x37
 8003014:	4806      	ldr	r0, [pc, #24]	; (8003030 <detect_mpu6050+0xfc>)
 8003016:	f002 fd4f 	bl	8005ab8 <HAL_I2C_Mem_Read>
 800301a:	4603      	mov	r3, r0
 800301c:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8003024:	f000 f808 	bl	8003038 <denect_hmc5883l>
		}
	}
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200002e0 	.word	0x200002e0
 8003034:	200004bc 	.word	0x200004bc

08003038 <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8003042:	231e      	movs	r3, #30
 8003044:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 8003046:	230a      	movs	r3, #10
 8003048:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 800304e:	88bb      	ldrh	r3, [r7, #4]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	b299      	uxth	r1, r3
 8003054:	887a      	ldrh	r2, [r7, #2]
 8003056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	2301      	movs	r3, #1
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	1c7b      	adds	r3, r7, #1
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2301      	movs	r3, #1
 8003066:	4809      	ldr	r0, [pc, #36]	; (800308c <denect_hmc5883l+0x54>)
 8003068:	f002 fd26 	bl	8005ab8 <HAL_I2C_Mem_Read>
 800306c:	4603      	mov	r3, r0
 800306e:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <denect_hmc5883l+0x58>)
 8003078:	2201      	movs	r2, #1
 800307a:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 800307c:	e002      	b.n	8003084 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <denect_hmc5883l+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	709a      	strb	r2, [r3, #2]
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200002e0 	.word	0x200002e0
 8003090:	200004bc 	.word	0x200004bc

08003094 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 800309e:	2377      	movs	r3, #119	; 0x77
 80030a0:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 80030a2:	2300      	movs	r3, #0
 80030a4:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80030aa:	88bb      	ldrh	r3, [r7, #4]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	b299      	uxth	r1, r3
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b6:	9302      	str	r3, [sp, #8]
 80030b8:	2301      	movs	r3, #1
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	1c7b      	adds	r3, r7, #1
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2301      	movs	r3, #1
 80030c2:	4809      	ldr	r0, [pc, #36]	; (80030e8 <detect_ms5611+0x54>)
 80030c4:	f002 fcf8 	bl	8005ab8 <HAL_I2C_Mem_Read>
 80030c8:	4603      	mov	r3, r0
 80030ca:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <detect_ms5611+0x58>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 80030d8:	e002      	b.n	80030e0 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <detect_ms5611+0x58>)
 80030dc:	2200      	movs	r2, #0
 80030de:	70da      	strb	r2, [r3, #3]
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200002e0 	.word	0x200002e0
 80030ec:	200004bc 	.word	0x200004bc

080030f0 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 80030fa:	2339      	movs	r3, #57	; 0x39
 80030fc:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 80030fe:	2392      	movs	r3, #146	; 0x92
 8003100:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8003102:	23a8      	movs	r3, #168	; 0xa8
 8003104:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800310a:	88bb      	ldrh	r3, [r7, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	b299      	uxth	r1, r3
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2301      	movs	r3, #1
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	463b      	mov	r3, r7
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	480c      	ldr	r0, [pc, #48]	; (8003154 <detect_apds9960+0x64>)
 8003124:	f002 fcc8 	bl	8005ab8 <HAL_I2C_Mem_Read>
 8003128:	4603      	mov	r3, r0
 800312a:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 800312c:	783b      	ldrb	r3, [r7, #0]
 800312e:	787a      	ldrb	r2, [r7, #1]
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <detect_apds9960+0x52>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <detect_apds9960+0x68>)
 800313c:	2201      	movs	r2, #1
 800313e:	711a      	strb	r2, [r3, #4]
 8003140:	e003      	b.n	800314a <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <detect_apds9960+0x68>)
 8003144:	2200      	movs	r2, #0
 8003146:	711a      	strb	r2, [r3, #4]
	}
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200002e0 	.word	0x200002e0
 8003158:	200004bc 	.word	0x200004bc

0800315c <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 800316a:	23ae      	movs	r3, #174	; 0xae
 800316c:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 800316e:	1d3a      	adds	r2, r7, #4
 8003170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2302      	movs	r3, #2
 8003178:	2178      	movs	r1, #120	; 0x78
 800317a:	4809      	ldr	r0, [pc, #36]	; (80031a0 <detect_oled_screen+0x44>)
 800317c:	f002 faa4 	bl	80056c8 <HAL_I2C_Master_Transmit>
 8003180:	4603      	mov	r3, r0
 8003182:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <detect_oled_screen+0x48>)
 800318c:	2201      	movs	r2, #1
 800318e:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8003190:	e002      	b.n	8003198 <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <detect_oled_screen+0x48>)
 8003194:	2200      	movs	r2, #0
 8003196:	715a      	strb	r2, [r3, #5]
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000234 	.word	0x20000234
 80031a4:	200004bc 	.word	0x200004bc

080031a8 <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 80031b2:	2368      	movs	r3, #104	; 0x68
 80031b4:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 80031b6:	2300      	movs	r3, #0
 80031b8:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	b299      	uxth	r1, r3
 80031c4:	887a      	ldrh	r2, [r7, #2]
 80031c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ca:	9302      	str	r3, [sp, #8]
 80031cc:	2301      	movs	r3, #1
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	1c7b      	adds	r3, r7, #1
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2301      	movs	r3, #1
 80031d6:	4809      	ldr	r0, [pc, #36]	; (80031fc <detect_ds3231+0x54>)
 80031d8:	f002 fc6e 	bl	8005ab8 <HAL_I2C_Mem_Read>
 80031dc:	4603      	mov	r3, r0
 80031de:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <detect_ds3231+0x58>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 80031ec:	e002      	b.n	80031f4 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <detect_ds3231+0x58>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	719a      	strb	r2, [r3, #6]
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000234 	.word	0x20000234
 8003200:	200004bc 	.word	0x200004bc

08003204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800323c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003220:	4c0b      	ldr	r4, [pc, #44]	; (8003250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322e:	f7fe faff 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003232:	f009 fa3b 	bl	800c6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003236:	f7fd fb4b 	bl	80008d0 <main>
  bx  lr    
 800323a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800323c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003248:	0800ce68 	.word	0x0800ce68
  ldr r2, =_sbss
 800324c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003250:	20000bdc 	.word	0x20000bdc

08003254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>
	...

08003258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_Init+0x40>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_Init+0x40>)
 800326e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_Init+0x40>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003280:	2003      	movs	r0, #3
 8003282:	f000 f94f 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f808 	bl	800329c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800328c:	f7fd ff8c 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00

0800329c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x54>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x58>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f967 	bl	800358e <HAL_SYSTICK_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00e      	b.n	80032e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d80a      	bhi.n	80032e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d0:	2200      	movs	r2, #0
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032d8:	f000 f92f 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_InitTick+0x5c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000150 	.word	0x20000150
 80032f8:	2000014c 	.word	0x2000014c

080032fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x20>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x24>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_IncTick+0x24>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000150 	.word	0x20000150
 8003320:	200004ec 	.word	0x200004ec

08003324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_GetTick+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200004ec 	.word	0x200004ec

0800333c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff ffee 	bl	8003324 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003354:	d005      	beq.n	8003362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_Delay+0x44>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003362:	bf00      	nop
 8003364:	f7ff ffde 	bl	8003324 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d8f7      	bhi.n	8003364 <HAL_Delay+0x28>
  {
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000150 	.word	0x20000150

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff3e 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff31 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffa2 	bl	80034e0 <SysTick_Config>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e16b      	b.n	800389c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 815a 	bne.w	8003896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b4 	beq.w	8003896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a5f      	ldr	r2, [pc, #380]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_GPIO_Init+0x30c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_GPIO_Init+0x310>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_GPIO_Init+0x314>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <HAL_GPIO_Init+0x226>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_GPIO_Init+0x318>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x222>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_GPIO_Init+0x31c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x21e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_GPIO_Init+0x320>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x21a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_GPIO_Init+0x324>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x216>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_GPIO_Init+0x328>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <HAL_GPIO_Init+0x32c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x20e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_GPIO_Init+0x330>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x20a>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e00e      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b2:	2308      	movs	r3, #8
 80037b4:	e00c      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00a      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ba:	2305      	movs	r3, #5
 80037bc:	e008      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037be:	2304      	movs	r3, #4
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e004      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x228>
 80037ce:	2300      	movs	r3, #0
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f002 0203 	and.w	r2, r2, #3
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4093      	lsls	r3, r2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e0:	4935      	ldr	r1, [pc, #212]	; (80038b8 <HAL_GPIO_Init+0x310>)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_GPIO_Init+0x334>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003812:	4a32      	ldr	r2, [pc, #200]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_GPIO_Init+0x334>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <HAL_GPIO_Init+0x334>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_GPIO_Init+0x334>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_GPIO_Init+0x334>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	f67f ae90 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40020000 	.word	0x40020000
 80038c0:	40020400 	.word	0x40020400
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40021400 	.word	0x40021400
 80038d4:	40021800 	.word	0x40021800
 80038d8:	40021c00 	.word	0x40021c00
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	041a      	lsls	r2, r3, #16
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43d9      	mvns	r1, r3
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	619a      	str	r2, [r3, #24]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003978:	b08f      	sub	sp, #60	; 0x3c
 800397a:	af0a      	add	r7, sp, #40	; 0x28
 800397c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e054      	b.n	8003a32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f008 fbd2 	bl	800c14c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2203      	movs	r2, #3
 80039ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f005 fd74 	bl	80094b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	687e      	ldr	r6, [r7, #4]
 80039d4:	466d      	mov	r5, sp
 80039d6:	f106 0410 	add.w	r4, r6, #16
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ea:	1d33      	adds	r3, r6, #4
 80039ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f005 fcee 	bl	80093d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 fd6b 	bl	80094d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	687e      	ldr	r6, [r7, #4]
 8003a08:	466d      	mov	r5, sp
 8003a0a:	f106 0410 	add.w	r4, r6, #16
 8003a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a1e:	1d33      	adds	r3, r6, #4
 8003a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a22:	6838      	ldr	r0, [r7, #0]
 8003a24:	f005 fe7e 	bl	8009724 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003a3a:	b590      	push	{r4, r7, lr}
 8003a3c:	b089      	sub	sp, #36	; 0x24
 8003a3e:	af04      	add	r7, sp, #16
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	4603      	mov	r3, r0
 8003a4a:	70fb      	strb	r3, [r7, #3]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70bb      	strb	r3, [r7, #2]
 8003a50:	4613      	mov	r3, r2
 8003a52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_HCD_HC_Init+0x28>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e076      	b.n	8003b50 <HAL_HCD_HC_Init+0x116>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	333d      	adds	r3, #61	; 0x3d
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3338      	adds	r3, #56	; 0x38
 8003a8a:	787a      	ldrb	r2, [r7, #1]
 8003a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3340      	adds	r3, #64	; 0x40
 8003a9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3339      	adds	r3, #57	; 0x39
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	333f      	adds	r3, #63	; 0x3f
 8003ac0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ac4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	78ba      	ldrb	r2, [r7, #2]
 8003aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ace:	b2d0      	uxtb	r0, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	333a      	adds	r3, #58	; 0x3a
 8003adc:	4602      	mov	r2, r0
 8003ade:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003ae0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da09      	bge.n	8003afc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	333b      	adds	r3, #59	; 0x3b
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e008      	b.n	8003b0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	333b      	adds	r3, #59	; 0x3b
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333c      	adds	r3, #60	; 0x3c
 8003b1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	787c      	ldrb	r4, [r7, #1]
 8003b28:	78ba      	ldrb	r2, [r7, #2]
 8003b2a:	78f9      	ldrb	r1, [r7, #3]
 8003b2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	f005 ff73 	bl	8009a28 <USB_HC_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd90      	pop	{r4, r7, pc}

08003b58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_HCD_HC_Halt+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e00f      	b.n	8003b96 <HAL_HCD_HC_Halt+0x3e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f006 f9af 	bl	8009eea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	70fb      	strb	r3, [r7, #3]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70bb      	strb	r3, [r7, #2]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	333b      	adds	r3, #59	; 0x3b
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	333f      	adds	r3, #63	; 0x3f
 8003bda:	787a      	ldrb	r2, [r7, #1]
 8003bdc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003bde:	7c3b      	ldrb	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d112      	bne.n	8003c0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3342      	adds	r3, #66	; 0x42
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	333d      	adds	r3, #61	; 0x3d
 8003c04:	7f3a      	ldrb	r2, [r7, #28]
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3342      	adds	r3, #66	; 0x42
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	f200 80c6 	bhi.w	8003db0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003d9d 	.word	0x08003d9d
 8003c34:	08003ca1 	.word	0x08003ca1
 8003c38:	08003d1f 	.word	0x08003d1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003c3c:	7c3b      	ldrb	r3, [r7, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 80b8 	bne.w	8003db4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003c44:	78bb      	ldrb	r3, [r7, #2]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 80b4 	bne.w	8003db4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003c4c:	8b3b      	ldrh	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3355      	adds	r3, #85	; 0x55
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3355      	adds	r3, #85	; 0x55
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3342      	adds	r3, #66	; 0x42
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c8a:	e093      	b.n	8003db4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3342      	adds	r3, #66	; 0x42
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
      break;
 8003c9e:	e089      	b.n	8003db4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ca0:	78bb      	ldrb	r3, [r7, #2]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11d      	bne.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3355      	adds	r3, #85	; 0x55
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3342      	adds	r3, #66	; 0x42
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ccc:	e073      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3342      	adds	r3, #66	; 0x42
 8003cdc:	2202      	movs	r2, #2
 8003cde:	701a      	strb	r2, [r3, #0]
      break;
 8003ce0:	e069      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3354      	adds	r3, #84	; 0x54
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3342      	adds	r3, #66	; 0x42
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
      break;
 8003d08:	e055      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3342      	adds	r3, #66	; 0x42
 8003d18:	2202      	movs	r2, #2
 8003d1a:	701a      	strb	r2, [r3, #0]
      break;
 8003d1c:	e04b      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003d1e:	78bb      	ldrb	r3, [r7, #2]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3355      	adds	r3, #85	; 0x55
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	3342      	adds	r3, #66	; 0x42
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d4a:	e034      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3342      	adds	r3, #66	; 0x42
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	e02a      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3354      	adds	r3, #84	; 0x54
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3342      	adds	r3, #66	; 0x42
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
      break;
 8003d86:	e016      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3342      	adds	r3, #66	; 0x42
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	212c      	movs	r1, #44	; 0x2c
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	3342      	adds	r3, #66	; 0x42
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003db4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3344      	adds	r3, #68	; 0x44
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	8b3a      	ldrh	r2, [r7, #24]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	202c      	movs	r0, #44	; 0x2c
 8003dd0:	fb00 f303 	mul.w	r3, r0, r3
 8003dd4:	440b      	add	r3, r1
 8003dd6:	334c      	adds	r3, #76	; 0x4c
 8003dd8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3360      	adds	r3, #96	; 0x60
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	3350      	adds	r3, #80	; 0x50
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	3339      	adds	r3, #57	; 0x39
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3361      	adds	r3, #97	; 0x61
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	222c      	movs	r2, #44	; 0x2c
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	3338      	adds	r3, #56	; 0x38
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	18d1      	adds	r1, r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f005 ff02 	bl	8009c44 <USB_HC_StartXfer>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop

08003e4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f005 fc1b 	bl	800969e <USB_GetMode>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 80ef 	bne.w	800404e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f005 fbff 	bl	8009678 <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80e5 	beq.w	800404c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f005 fbf6 	bl	8009678 <USB_ReadInterrupts>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e96:	d104      	bne.n	8003ea2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f005 fbe6 	bl	8009678 <USB_ReadInterrupts>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d104      	bne.n	8003ec2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f005 fbd6 	bl	8009678 <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed6:	d104      	bne.n	8003ee2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f005 fbc6 	bl	8009678 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d103      	bne.n	8003efe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2202      	movs	r2, #2
 8003efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f005 fbb8 	bl	8009678 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f12:	d115      	bne.n	8003f40 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f008 f98a 	bl	800c248 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 fcae 	bl	800989c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f005 fb97 	bl	8009678 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f54:	d102      	bne.n	8003f5c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 f9ff 	bl	800535a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f005 fb89 	bl	8009678 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d106      	bne.n	8003f7e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f008 f94d 	bl	800c210 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 fb78 	bl	8009678 <USB_ReadInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d101      	bne.n	8003f96 <HAL_HCD_IRQHandler+0x14a>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_HCD_IRQHandler+0x14c>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d012      	beq.n	8003fc2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0210 	bic.w	r2, r2, #16
 8003faa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 f902 	bl	80051b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0210 	orr.w	r2, r2, #16
 8003fc0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f005 fb56 	bl	8009678 <USB_ReadInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd6:	d13a      	bne.n	800404e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 ff73 	bl	8009ec8 <USB_HC_ReadInterrupt>
 8003fe2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e025      	b.n	8004036 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d018      	beq.n	8004030 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d106      	bne.n	8004024 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8ab 	bl	8004178 <HCD_HC_IN_IRQHandler>
 8004022:	e005      	b.n	8004030 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fcc6 	bl	80049bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3301      	adds	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3d4      	bcc.n	8003fea <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004048:	615a      	str	r2, [r3, #20]
 800404a:	e000      	b.n	800404e <HAL_HCD_IRQHandler+0x202>
      return;
 800404c:	bf00      	nop
    }
  }
}
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_HCD_Start+0x16>
 8004066:	2302      	movs	r3, #2
 8004068:	e013      	b.n	8004092 <HAL_HCD_Start+0x3e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f005 fa0b 	bl	8009492 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f005 fc6e 	bl	8009964 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_HCD_Stop+0x16>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e00d      	b.n	80040cc <HAL_HCD_Stop+0x32>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f006 f86d 	bl	800a19c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f005 fc15 	bl	8009910 <USB_ResetPort>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3360      	adds	r3, #96	; 0x60
 800410a:	781b      	ldrb	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3350      	adds	r3, #80	; 0x50
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f005 fc59 	bl	8009a04 <USB_GetCurrentFrame>
 8004152:	4603      	mov	r3, r0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f005 fc34 	bl	80099d6 <USB_GetHostSpeed>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d119      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2304      	movs	r3, #4
 80041b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]
 80041da:	e101      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d12b      	bne.n	800424c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004200:	461a      	mov	r2, r3
 8004202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004206:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3361      	adds	r3, #97	; 0x61
 8004216:	2207      	movs	r2, #7
 8004218:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	440a      	add	r2, r1
 8004230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f005 fe50 	bl	8009eea <USB_HC_Halt>
 800424a:	e0c9      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d109      	bne.n	8004276 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	2320      	movs	r3, #32
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	e0b4      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d133      	bne.n	80042f4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	212c      	movs	r1, #44	; 0x2c
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3361      	adds	r3, #97	; 0x61
 80042ba:	2205      	movs	r2, #5
 80042bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ca:	461a      	mov	r2, r3
 80042cc:	2310      	movs	r3, #16
 80042ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	2308      	movs	r3, #8
 80042e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f005 fdfc 	bl	8009eea <USB_HC_Halt>
 80042f2:	e075      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d134      	bne.n	8004376 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	440a      	add	r2, r1
 8004322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004326:	f043 0302 	orr.w	r3, r3, #2
 800432a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3361      	adds	r3, #97	; 0x61
 800433a:	2208      	movs	r2, #8
 800433c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	461a      	mov	r2, r3
 800434c:	2310      	movs	r3, #16
 800434e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004362:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f005 fdbb 	bl	8009eea <USB_HC_Halt>
 8004374:	e034      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d129      	bne.n	80043e0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a6:	f043 0302 	orr.w	r3, r3, #2
 80043aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	2206      	movs	r2, #6
 80043bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f005 fd8e 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f6:	d122      	bne.n	800443e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	440a      	add	r2, r1
 800440e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004412:	f043 0302 	orr.w	r3, r3, #2
 8004416:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f005 fd61 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800443a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800443c:	e2ba      	b.n	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 811b 	bne.w	800468c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3348      	adds	r3, #72	; 0x48
 800446c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	0159      	lsls	r1, r3, #5
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	440b      	add	r3, r1
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004480:	1ad2      	subs	r2, r2, r3
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	202c      	movs	r0, #44	; 0x2c
 8004488:	fb00 f303 	mul.w	r3, r0, r3
 800448c:	440b      	add	r3, r1
 800448e:	3350      	adds	r3, #80	; 0x50
 8004490:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	3361      	adds	r3, #97	; 0x61
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	335c      	adds	r3, #92	; 0x5c
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	2301      	movs	r3, #1
 80044c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	333f      	adds	r3, #63	; 0x3f
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	333f      	adds	r3, #63	; 0x3f
 80044ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d121      	bne.n	8004534 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	440a      	add	r2, r1
 8004506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f005 fce5 	bl	8009eea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	461a      	mov	r2, r3
 800452e:	2310      	movs	r3, #16
 8004530:	6093      	str	r3, [r2, #8]
 8004532:	e066      	b.n	8004602 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	333f      	adds	r3, #63	; 0x3f
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d127      	bne.n	8004598 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	440a      	add	r2, r1
 800455e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004566:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3360      	adds	r3, #96	; 0x60
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	b2d9      	uxtb	r1, r3
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	202c      	movs	r0, #44	; 0x2c
 8004584:	fb00 f303 	mul.w	r3, r0, r3
 8004588:	4413      	add	r3, r2
 800458a:	3360      	adds	r3, #96	; 0x60
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f007 fe67 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004596:	e034      	b.n	8004602 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	212c      	movs	r1, #44	; 0x2c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	333f      	adds	r3, #63	; 0x3f
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d12a      	bne.n	8004602 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3360      	adds	r3, #96	; 0x60
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3354      	adds	r3, #84	; 0x54
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2d8      	uxtb	r0, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3354      	adds	r3, #84	; 0x54
 80045e2:	4602      	mov	r2, r0
 80045e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	b2d9      	uxtb	r1, r3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	202c      	movs	r0, #44	; 0x2c
 80045f0:	fb00 f303 	mul.w	r3, r0, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3360      	adds	r3, #96	; 0x60
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f007 fe31 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d12b      	bne.n	8004662 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	202c      	movs	r0, #44	; 0x2c
 8004620:	fb00 f202 	mul.w	r2, r0, r2
 8004624:	440a      	add	r2, r1
 8004626:	3240      	adds	r2, #64	; 0x40
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	fbb3 f3f2 	udiv	r3, r3, r2
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81be 	beq.w	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3354      	adds	r3, #84	; 0x54
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f083 0301 	eor.w	r3, r3, #1
 800464c:	b2d8      	uxtb	r0, r3
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3354      	adds	r3, #84	; 0x54
 800465c:	4602      	mov	r2, r0
 800465e:	701a      	strb	r2, [r3, #0]
}
 8004660:	e1a8      	b.n	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	3354      	adds	r3, #84	; 0x54
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	f083 0301 	eor.w	r3, r3, #1
 8004676:	b2d8      	uxtb	r0, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3354      	adds	r3, #84	; 0x54
 8004686:	4602      	mov	r2, r0
 8004688:	701a      	strb	r2, [r3, #0]
}
 800468a:	e193      	b.n	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b02      	cmp	r3, #2
 80046a0:	f040 8106 	bne.w	80048b0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046be:	f023 0302 	bic.w	r3, r3, #2
 80046c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3361      	adds	r3, #97	; 0x61
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d109      	bne.n	80046ec <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	3360      	adds	r3, #96	; 0x60
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e0c9      	b.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	3361      	adds	r3, #97	; 0x61
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d109      	bne.n	8004714 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3360      	adds	r3, #96	; 0x60
 800470e:	2205      	movs	r2, #5
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e0b5      	b.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3361      	adds	r3, #97	; 0x61
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d009      	beq.n	800473c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3361      	adds	r3, #97	; 0x61
 8004736:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004738:	2b08      	cmp	r3, #8
 800473a:	d150      	bne.n	80047de <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	335c      	adds	r3, #92	; 0x5c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	202c      	movs	r0, #44	; 0x2c
 8004754:	fb00 f303 	mul.w	r3, r0, r3
 8004758:	440b      	add	r3, r1
 800475a:	335c      	adds	r3, #92	; 0x5c
 800475c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	335c      	adds	r3, #92	; 0x5c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d912      	bls.n	8004798 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	335c      	adds	r3, #92	; 0x5c
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	212c      	movs	r1, #44	; 0x2c
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	4413      	add	r3, r2
 8004790:	3360      	adds	r3, #96	; 0x60
 8004792:	2204      	movs	r2, #4
 8004794:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004796:	e073      	b.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	3360      	adds	r3, #96	; 0x60
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047c8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047dc:	e050      	b.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	3361      	adds	r3, #97	; 0x61
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d122      	bne.n	8004838 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	212c      	movs	r1, #44	; 0x2c
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3360      	adds	r3, #96	; 0x60
 8004800:	2202      	movs	r2, #2
 8004802:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800481a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004822:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e023      	b.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3361      	adds	r3, #97	; 0x61
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b07      	cmp	r3, #7
 800484a:	d119      	bne.n	8004880 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	335c      	adds	r3, #92	; 0x5c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	202c      	movs	r0, #44	; 0x2c
 8004864:	fb00 f303 	mul.w	r3, r0, r3
 8004868:	440b      	add	r3, r1
 800486a:	335c      	adds	r3, #92	; 0x5c
 800486c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	3360      	adds	r3, #96	; 0x60
 800487c:	2204      	movs	r2, #4
 800487e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	461a      	mov	r2, r3
 800488e:	2302      	movs	r3, #2
 8004890:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	b2d9      	uxtb	r1, r3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	202c      	movs	r0, #44	; 0x2c
 800489c:	fb00 f303 	mul.w	r3, r0, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3360      	adds	r3, #96	; 0x60
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f007 fcdb 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048ae:	e081      	b.n	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d176      	bne.n	80049b4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	333f      	adds	r3, #63	; 0x3f
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d121      	bne.n	800491e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	335c      	adds	r3, #92	; 0x5c
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	440a      	add	r2, r1
 8004902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f005 fae7 	bl	8009eea <USB_HC_Halt>
 800491c:	e041      	b.n	80049a2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	333f      	adds	r3, #63	; 0x3f
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	333f      	adds	r3, #63	; 0x3f
 8004940:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004942:	2b02      	cmp	r3, #2
 8004944:	d12d      	bne.n	80049a2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	335c      	adds	r3, #92	; 0x5c
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d120      	bne.n	80049a2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3361      	adds	r3, #97	; 0x61
 800496e:	2203      	movs	r2, #3
 8004970:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	440a      	add	r2, r1
 8004988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f005 faa4 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	2310      	movs	r3, #16
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d119      	bne.n	8004a20 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	461a      	mov	r2, r3
 80049fa:	2304      	movs	r3, #4
 80049fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004a1e:	e3c6      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d13e      	bne.n	8004ab4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a42:	461a      	mov	r2, r3
 8004a44:	2320      	movs	r3, #32
 8004a46:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	333d      	adds	r3, #61	; 0x3d
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 83a8 	bne.w	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	333d      	adds	r3, #61	; 0x3d
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3360      	adds	r3, #96	; 0x60
 8004a7e:	2202      	movs	r2, #2
 8004a80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f005 fa1c 	bl	8009eea <USB_HC_Halt>
}
 8004ab2:	e37c      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aca:	d122      	bne.n	8004b12 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f005 f9f7 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b0e:	6093      	str	r3, [r2, #8]
}
 8004b10:	e34d      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d150      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	212c      	movs	r1, #44	; 0x2c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	335c      	adds	r3, #92	; 0x5c
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d111      	bne.n	8004b74 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	333d      	adds	r3, #61	; 0x3d
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2340      	movs	r3, #64	; 0x40
 8004b72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b8e:	f043 0302 	orr.w	r3, r3, #2
 8004b92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f005 f9a3 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3361      	adds	r3, #97	; 0x61
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
}
 8004bc8:	e2f1      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d13c      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3361      	adds	r3, #97	; 0x61
 8004bee:	2204      	movs	r2, #4
 8004bf0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	333d      	adds	r3, #61	; 0x3d
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	335c      	adds	r3, #92	; 0x5c
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 f952 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	2340      	movs	r3, #64	; 0x40
 8004c56:	6093      	str	r3, [r2, #8]
}
 8004c58:	e2a9      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d12a      	bne.n	8004cc6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2308      	movs	r3, #8
 8004c80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9c:	f043 0302 	orr.w	r3, r3, #2
 8004ca0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f005 f91c 	bl	8009eea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3361      	adds	r3, #97	; 0x61
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	e273      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d150      	bne.n	8004d7e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	335c      	adds	r3, #92	; 0x5c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3361      	adds	r3, #97	; 0x61
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	333d      	adds	r3, #61	; 0x3d
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d112      	bne.n	8004d3a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	333c      	adds	r3, #60	; 0x3c
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	212c      	movs	r1, #44	; 0x2c
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	333d      	adds	r3, #61	; 0x3d
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f005 f8c0 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	461a      	mov	r2, r3
 8004d78:	2310      	movs	r3, #16
 8004d7a:	6093      	str	r3, [r2, #8]
}
 8004d7c:	e217      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d174      	bne.n	8004e7e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d121      	bne.n	8004de0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	3361      	adds	r3, #97	; 0x61
 8004daa:	2206      	movs	r2, #6
 8004dac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f005 f886 	bl	8009eea <USB_HC_Halt>
 8004dde:	e044      	b.n	8004e6a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	335c      	adds	r3, #92	; 0x5c
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	202c      	movs	r0, #44	; 0x2c
 8004df8:	fb00 f303 	mul.w	r3, r0, r3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	335c      	adds	r3, #92	; 0x5c
 8004e00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	212c      	movs	r1, #44	; 0x2c
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	335c      	adds	r3, #92	; 0x5c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d920      	bls.n	8004e58 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	335c      	adds	r3, #92	; 0x5c
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3360      	adds	r3, #96	; 0x60
 8004e36:	2204      	movs	r2, #4
 8004e38:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	b2d9      	uxtb	r1, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	202c      	movs	r0, #44	; 0x2c
 8004e44:	fb00 f303 	mul.w	r3, r0, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	3360      	adds	r3, #96	; 0x60
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f007 fa07 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e56:	e008      	b.n	8004e6a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3360      	adds	r3, #96	; 0x60
 8004e66:	2202      	movs	r2, #2
 8004e68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	461a      	mov	r2, r3
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	6093      	str	r3, [r2, #8]
}
 8004e7c:	e197      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d134      	bne.n	8004f00 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 f812 	bl	8009eea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	212c      	movs	r1, #44	; 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3361      	adds	r3, #97	; 0x61
 8004efa:	2208      	movs	r2, #8
 8004efc:	701a      	strb	r2, [r3, #0]
}
 8004efe:	e156      	b.n	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	f040 814b 	bne.w	80051ae <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f32:	f023 0302 	bic.w	r3, r3, #2
 8004f36:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3361      	adds	r3, #97	; 0x61
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d179      	bne.n	8005040 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3360      	adds	r3, #96	; 0x60
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	333f      	adds	r3, #63	; 0x3f
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d00a      	beq.n	8004f88 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	333f      	adds	r3, #63	; 0x3f
 8004f80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	f040 80fc 	bne.w	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d142      	bne.n	8005016 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	334c      	adds	r3, #76	; 0x4c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80ed 	beq.w	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	334c      	adds	r3, #76	; 0x4c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	202c      	movs	r0, #44	; 0x2c
 8004fbc:	fb00 f202 	mul.w	r2, r0, r2
 8004fc0:	440a      	add	r2, r1
 8004fc2:	3240      	adds	r2, #64	; 0x40
 8004fc4:	8812      	ldrh	r2, [r2, #0]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	202c      	movs	r0, #44	; 0x2c
 8004fd0:	fb00 f202 	mul.w	r2, r0, r2
 8004fd4:	440a      	add	r2, r1
 8004fd6:	3240      	adds	r2, #64	; 0x40
 8004fd8:	8812      	ldrh	r2, [r2, #0]
 8004fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80ca 	beq.w	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3355      	adds	r3, #85	; 0x55
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f083 0301 	eor.w	r3, r3, #1
 8005000:	b2d8      	uxtb	r0, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	212c      	movs	r1, #44	; 0x2c
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	4413      	add	r3, r2
 800500e:	3355      	adds	r3, #85	; 0x55
 8005010:	4602      	mov	r2, r0
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e0b4      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	212c      	movs	r1, #44	; 0x2c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	3355      	adds	r3, #85	; 0x55
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2d8      	uxtb	r0, r3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3355      	adds	r3, #85	; 0x55
 800503a:	4602      	mov	r2, r0
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e09f      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	212c      	movs	r1, #44	; 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	3361      	adds	r3, #97	; 0x61
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d109      	bne.n	8005068 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	3360      	adds	r3, #96	; 0x60
 8005062:	2202      	movs	r2, #2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e08b      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	212c      	movs	r1, #44	; 0x2c
 800506e:	fb01 f303 	mul.w	r3, r1, r3
 8005072:	4413      	add	r3, r2
 8005074:	3361      	adds	r3, #97	; 0x61
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d109      	bne.n	8005090 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	3360      	adds	r3, #96	; 0x60
 800508a:	2202      	movs	r2, #2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e077      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	212c      	movs	r1, #44	; 0x2c
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	3361      	adds	r3, #97	; 0x61
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	d109      	bne.n	80050b8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	3360      	adds	r3, #96	; 0x60
 80050b2:	2205      	movs	r2, #5
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e063      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	212c      	movs	r1, #44	; 0x2c
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	3361      	adds	r3, #97	; 0x61
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b06      	cmp	r3, #6
 80050ca:	d009      	beq.n	80050e0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	212c      	movs	r1, #44	; 0x2c
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	3361      	adds	r3, #97	; 0x61
 80050da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d14f      	bne.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	212c      	movs	r1, #44	; 0x2c
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	335c      	adds	r3, #92	; 0x5c
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	202c      	movs	r0, #44	; 0x2c
 80050f8:	fb00 f303 	mul.w	r3, r0, r3
 80050fc:	440b      	add	r3, r1
 80050fe:	335c      	adds	r3, #92	; 0x5c
 8005100:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	212c      	movs	r1, #44	; 0x2c
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	4413      	add	r3, r2
 800510e:	335c      	adds	r3, #92	; 0x5c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d912      	bls.n	800513c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	212c      	movs	r1, #44	; 0x2c
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	4413      	add	r3, r2
 8005122:	335c      	adds	r3, #92	; 0x5c
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	212c      	movs	r1, #44	; 0x2c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	3360      	adds	r3, #96	; 0x60
 8005136:	2204      	movs	r2, #4
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e021      	b.n	8005180 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	212c      	movs	r1, #44	; 0x2c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	3360      	adds	r3, #96	; 0x60
 800514a:	2202      	movs	r2, #2
 800514c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005164:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800516c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	461a      	mov	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2302      	movs	r3, #2
 8005190:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	b2d9      	uxtb	r1, r3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	202c      	movs	r0, #44	; 0x2c
 800519c:	fb00 f303 	mul.w	r3, r0, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	3360      	adds	r3, #96	; 0x60
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f007 f85b 	bl	800c264 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051ae:	bf00      	nop
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08a      	sub	sp, #40	; 0x28
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	0c5b      	lsrs	r3, r3, #17
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d004      	beq.n	80051fc <HCD_RXQLVL_IRQHandler+0x46>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	f000 80a9 	beq.w	800534c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80051fa:	e0aa      	b.n	8005352 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a6 	beq.w	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3344      	adds	r3, #68	; 0x44
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 809b 	beq.w	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	212c      	movs	r1, #44	; 0x2c
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	3350      	adds	r3, #80	; 0x50
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	441a      	add	r2, r3
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	202c      	movs	r0, #44	; 0x2c
 8005234:	fb00 f303 	mul.w	r3, r0, r3
 8005238:	440b      	add	r3, r1
 800523a:	334c      	adds	r3, #76	; 0x4c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d87a      	bhi.n	8005338 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	212c      	movs	r1, #44	; 0x2c
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4413      	add	r3, r2
 8005252:	3344      	adds	r3, #68	; 0x44
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	b292      	uxth	r2, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f004 f9e3 	bl	8009626 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	3344      	adds	r3, #68	; 0x44
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	441a      	add	r2, r3
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	202c      	movs	r0, #44	; 0x2c
 800527a:	fb00 f303 	mul.w	r3, r0, r3
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	; 0x44
 8005282:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3350      	adds	r3, #80	; 0x50
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	441a      	add	r2, r3
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	202c      	movs	r0, #44	; 0x2c
 800529e:	fb00 f303 	mul.w	r3, r0, r3
 80052a2:	440b      	add	r3, r1
 80052a4:	3350      	adds	r3, #80	; 0x50
 80052a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	0cdb      	lsrs	r3, r3, #19
 80052b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	212c      	movs	r1, #44	; 0x2c
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	4413      	add	r3, r2
 80052ca:	3340      	adds	r3, #64	; 0x40
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d13c      	bne.n	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d039      	beq.n	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005308:	461a      	mov	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	212c      	movs	r1, #44	; 0x2c
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	3354      	adds	r3, #84	; 0x54
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f083 0301 	eor.w	r3, r3, #1
 8005322:	b2d8      	uxtb	r0, r3
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	212c      	movs	r1, #44	; 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3354      	adds	r3, #84	; 0x54
 8005332:	4602      	mov	r2, r0
 8005334:	701a      	strb	r2, [r3, #0]
      break;
 8005336:	e00b      	b.n	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	212c      	movs	r1, #44	; 0x2c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	3360      	adds	r3, #96	; 0x60
 8005346:	2204      	movs	r2, #4
 8005348:	701a      	strb	r2, [r3, #0]
      break;
 800534a:	e001      	b.n	8005350 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005350:	bf00      	nop
  }
}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005386:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d10b      	bne.n	80053aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f006 ff45 	bl	800c22c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f043 0302 	orr.w	r3, r3, #2
 80053a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d132      	bne.n	800541a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f043 0308 	orr.w	r3, r3, #8
 80053ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d126      	bne.n	8005414 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d113      	bne.n	80053f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80053d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d8:	d106      	bne.n	80053e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2102      	movs	r1, #2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f004 fa5b 	bl	800989c <USB_InitFSLSPClkSel>
 80053e6:	e011      	b.n	800540c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2101      	movs	r1, #1
 80053ee:	4618      	mov	r0, r3
 80053f0:	f004 fa54 	bl	800989c <USB_InitFSLSPClkSel>
 80053f4:	e00a      	b.n	800540c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d106      	bne.n	800540c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005404:	461a      	mov	r2, r3
 8005406:	f64e 2360 	movw	r3, #60000	; 0xea60
 800540a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f006 ff37 	bl	800c280 <HAL_HCD_PortEnabled_Callback>
 8005412:	e002      	b.n	800541a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f006 ff41 	bl	800c29c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d103      	bne.n	800542c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f043 0320 	orr.w	r3, r3, #32
 800542a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e12b      	b.n	80056aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fece 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a4:	f002 f9f8 	bl	8007898 <HAL_RCC_GetPCLK1Freq>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4a81      	ldr	r2, [pc, #516]	; (80056b4 <HAL_I2C_Init+0x274>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d807      	bhi.n	80054c4 <HAL_I2C_Init+0x84>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a80      	ldr	r2, [pc, #512]	; (80056b8 <HAL_I2C_Init+0x278>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bf94      	ite	ls
 80054bc:	2301      	movls	r3, #1
 80054be:	2300      	movhi	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e006      	b.n	80054d2 <HAL_I2C_Init+0x92>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a7d      	ldr	r2, [pc, #500]	; (80056bc <HAL_I2C_Init+0x27c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bf94      	ite	ls
 80054cc:	2301      	movls	r3, #1
 80054ce:	2300      	movhi	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e7      	b.n	80056aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a78      	ldr	r2, [pc, #480]	; (80056c0 <HAL_I2C_Init+0x280>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0c9b      	lsrs	r3, r3, #18
 80054e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4a6a      	ldr	r2, [pc, #424]	; (80056b4 <HAL_I2C_Init+0x274>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <HAL_I2C_Init+0xd4>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3301      	adds	r3, #1
 8005512:	e009      	b.n	8005528 <HAL_I2C_Init+0xe8>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	4a69      	ldr	r2, [pc, #420]	; (80056c4 <HAL_I2C_Init+0x284>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	099b      	lsrs	r3, r3, #6
 8005526:	3301      	adds	r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	430b      	orrs	r3, r1
 800552e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800553a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	495c      	ldr	r1, [pc, #368]	; (80056b4 <HAL_I2C_Init+0x274>)
 8005544:	428b      	cmp	r3, r1
 8005546:	d819      	bhi.n	800557c <HAL_I2C_Init+0x13c>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e59      	subs	r1, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fbb1 f3f3 	udiv	r3, r1, r3
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800555c:	400b      	ands	r3, r1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_I2C_Init+0x138>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e59      	subs	r1, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005570:	3301      	adds	r3, #1
 8005572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005576:	e051      	b.n	800561c <HAL_I2C_Init+0x1dc>
 8005578:	2304      	movs	r3, #4
 800557a:	e04f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d111      	bne.n	80055a8 <HAL_I2C_Init+0x168>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e58      	subs	r0, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e012      	b.n	80055ce <HAL_I2C_Init+0x18e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_I2C_Init+0x196>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e022      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10e      	bne.n	80055fc <HAL_I2C_Init+0x1bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e58      	subs	r0, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f0:	3301      	adds	r3, #1
 80055f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	e00f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e58      	subs	r0, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	0099      	lsls	r1, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	6809      	ldr	r1, [r1, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800564a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6911      	ldr	r1, [r2, #16]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	000186a0 	.word	0x000186a0
 80056b8:	001e847f 	.word	0x001e847f
 80056bc:	003d08ff 	.word	0x003d08ff
 80056c0:	431bde83 	.word	0x431bde83
 80056c4:	10624dd3 	.word	0x10624dd3

080056c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	461a      	mov	r2, r3
 80056d4:	460b      	mov	r3, r1
 80056d6:	817b      	strh	r3, [r7, #10]
 80056d8:	4613      	mov	r3, r2
 80056da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056dc:	f7fd fe22 	bl	8003324 <HAL_GetTick>
 80056e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 80e0 	bne.w	80058b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2319      	movs	r3, #25
 80056f6:	2201      	movs	r2, #1
 80056f8:	4970      	ldr	r1, [pc, #448]	; (80058bc <HAL_I2C_Master_Transmit+0x1f4>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fe02 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
 8005708:	e0d3      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_I2C_Master_Transmit+0x50>
 8005714:	2302      	movs	r3, #2
 8005716:	e0cc      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d007      	beq.n	800573e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2221      	movs	r2, #33	; 0x21
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2210      	movs	r2, #16
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	893a      	ldrh	r2, [r7, #8]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a50      	ldr	r2, [pc, #320]	; (80058c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005780:	8979      	ldrh	r1, [r7, #10]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fbbc 	bl	8005f04 <I2C_MasterRequestWrite>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e08d      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057ac:	e066      	b.n	800587c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	6a39      	ldr	r1, [r7, #32]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fe7c 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00d      	beq.n	80057da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d107      	bne.n	80057d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e06b      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d11b      	bne.n	8005850 <HAL_I2C_Master_Transmit+0x188>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	d017      	beq.n	8005850 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fe6c 	bl	8006532 <I2C_WaitOnBTFFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00d      	beq.n	800587c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b04      	cmp	r3, #4
 8005866:	d107      	bne.n	8005878 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005876:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e01a      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d194      	bne.n	80057ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	00100002 	.word	0x00100002
 80058c0:	ffff0000 	.word	0xffff0000

080058c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	817b      	strh	r3, [r7, #10]
 80058d6:	460b      	mov	r3, r1
 80058d8:	813b      	strh	r3, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058de:	f7fd fd21 	bl	8003324 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	f040 80d9 	bne.w	8005aa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2319      	movs	r3, #25
 80058f8:	2201      	movs	r2, #1
 80058fa:	496d      	ldr	r1, [pc, #436]	; (8005ab0 <HAL_I2C_Mem_Write+0x1ec>)
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fd01 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	e0cc      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_I2C_Mem_Write+0x56>
 8005916:	2302      	movs	r3, #2
 8005918:	e0c5      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d007      	beq.n	8005940 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a4d      	ldr	r2, [pc, #308]	; (8005ab4 <HAL_I2C_Mem_Write+0x1f0>)
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005982:	88f8      	ldrh	r0, [r7, #6]
 8005984:	893a      	ldrh	r2, [r7, #8]
 8005986:	8979      	ldrh	r1, [r7, #10]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4603      	mov	r3, r0
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb38 	bl	8006008 <I2C_RequestMemoryWrite>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d052      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e081      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fd82 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d107      	bne.n	80059ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06b      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11b      	bne.n	8005a44 <HAL_I2C_Mem_Write+0x180>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1aa      	bne.n	80059a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fd6e 	bl	8006532 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d107      	bne.n	8005a74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e016      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005aa4:	2302      	movs	r3, #2
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00100002 	.word	0x00100002
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	460b      	mov	r3, r1
 8005acc:	813b      	strh	r3, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ad2:	f7fd fc27 	bl	8003324 <HAL_GetTick>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 8208 	bne.w	8005ef6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2319      	movs	r3, #25
 8005aec:	2201      	movs	r2, #1
 8005aee:	497b      	ldr	r1, [pc, #492]	; (8005cdc <HAL_I2C_Mem_Read+0x224>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fc07 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	e1fb      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Mem_Read+0x56>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e1f4      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d007      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2222      	movs	r2, #34	; 0x22
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a5b      	ldr	r2, [pc, #364]	; (8005ce0 <HAL_I2C_Mem_Read+0x228>)
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b76:	88f8      	ldrh	r0, [r7, #6]
 8005b78:	893a      	ldrh	r2, [r7, #8]
 8005b7a:	8979      	ldrh	r1, [r7, #10]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4603      	mov	r3, r0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fad4 	bl	8006134 <I2C_RequestMemoryRead>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e1b0      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d113      	bne.n	8005bc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e184      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d11b      	bne.n	8005c06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e164      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	e144      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c5c:	e138      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	f200 80f1 	bhi.w	8005e4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d123      	bne.n	8005cb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fc9d 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e139      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cb6:	e10b      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d14e      	bne.n	8005d5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4906      	ldr	r1, [pc, #24]	; (8005ce4 <HAL_I2C_Mem_Read+0x22c>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fb1a 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e10e      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
 8005cda:	bf00      	nop
 8005cdc:	00100002 	.word	0x00100002
 8005ce0:	ffff0000 	.word	0xffff0000
 8005ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d5c:	e0b8      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	2200      	movs	r2, #0
 8005d66:	4966      	ldr	r1, [pc, #408]	; (8005f00 <HAL_I2C_Mem_Read+0x448>)
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 facb 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0bf      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	494f      	ldr	r1, [pc, #316]	; (8005f00 <HAL_I2C_Mem_Read+0x448>)
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fa9d 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e091      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e48:	e042      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fbb0 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e04c      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d118      	bne.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f aec2 	bne.w	8005c5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	00010004 	.word	0x00010004

08005f04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	460b      	mov	r3, r1
 8005f12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d006      	beq.n	8005f2e <I2C_MasterRequestWrite+0x2a>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d003      	beq.n	8005f2e <I2C_MasterRequestWrite+0x2a>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f2c:	d108      	bne.n	8005f40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e00b      	b.n	8005f58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	2b12      	cmp	r3, #18
 8005f46:	d107      	bne.n	8005f58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f9cd 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00d      	beq.n	8005f8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7e:	d103      	bne.n	8005f88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e035      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f94:	d108      	bne.n	8005fa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fa4:	611a      	str	r2, [r3, #16]
 8005fa6:	e01b      	b.n	8005fe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	11db      	asrs	r3, r3, #7
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 0306 	and.w	r3, r3, #6
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f063 030f 	orn	r3, r3, #15
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <I2C_MasterRequestWrite+0xfc>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f9f3 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e010      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4907      	ldr	r1, [pc, #28]	; (8006004 <I2C_MasterRequestWrite+0x100>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f9e3 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00010008 	.word	0x00010008
 8006004:	00010002 	.word	0x00010002

08006008 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	460b      	mov	r3, r1
 800601c:	813b      	strh	r3, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2200      	movs	r2, #0
 800603a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f960 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d103      	bne.n	8006062 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e05f      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006066:	897b      	ldrh	r3, [r7, #10]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	492d      	ldr	r1, [pc, #180]	; (8006130 <I2C_RequestMemoryWrite+0x128>)
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f998 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e04c      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa02 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d107      	bne.n	80060ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e02b      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d105      	bne.n	80060e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	611a      	str	r2, [r3, #16]
 80060de:	e021      	b.n	8006124 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f9dc 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e005      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	00010002 	.word	0x00010002

08006134 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800615c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8c2 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006194:	d103      	bne.n	800619e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0aa      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a2:	897b      	ldrh	r3, [r7, #10]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	4952      	ldr	r1, [pc, #328]	; (8006300 <I2C_RequestMemoryRead+0x1cc>)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f8fa 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e097      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f964 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e076      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	e021      	b.n	8006260 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f93e 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e050      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	6a39      	ldr	r1, [r7, #32]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f923 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b04      	cmp	r3, #4
 8006276:	d107      	bne.n	8006288 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006286:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e035      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f82b 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d103      	bne.n	80062cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e013      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	4906      	ldr	r1, [pc, #24]	; (8006300 <I2C_RequestMemoryRead+0x1cc>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f863 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	00010002 	.word	0x00010002

08006304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006314:	e025      	b.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631c:	d021      	beq.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fd f801 	bl	8003324 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e023      	b.n	80063aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10d      	bne.n	8006388 <I2C_WaitOnFlagUntilTimeout+0x84>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	43da      	mvns	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	e00c      	b.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d0b6      	beq.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c0:	e051      	b.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d0:	d123      	bne.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f043 0204 	orr.w	r2, r3, #4
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e046      	b.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006420:	d021      	beq.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fc ff7f 	bl	8003324 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e020      	b.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10c      	bne.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	43da      	mvns	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	e00b      	b.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	43da      	mvns	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d18d      	bne.n	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064bc:	e02d      	b.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f8ce 	bl	8006660 <I2C_IsAcknowledgeFailed>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e02d      	b.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d4:	d021      	beq.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fc ff25 	bl	8003324 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d116      	bne.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e007      	b.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d1ca      	bne.n	80064be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800653e:	e02d      	b.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f88d 	bl	8006660 <I2C_IsAcknowledgeFailed>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e02d      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006556:	d021      	beq.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006558:	f7fc fee4 	bl	8003324 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	d302      	bcc.n	800656e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d116      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e007      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d1ca      	bne.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c0:	e042      	b.n	8006648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d119      	bne.n	8006604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e029      	b.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006604:	f7fc fe8e 	bl	8003324 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d116      	bne.n	8006648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e007      	b.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d1b5      	bne.n	80065c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d11b      	bne.n	80066b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006680:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	f043 0204 	orr.w	r2, r3, #4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e128      	b.n	8006924 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a90      	ldr	r2, [pc, #576]	; (800692c <HAL_I2S_Init+0x26c>)
 80066ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fa fe2b 	bl	8001348 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006708:	f023 030f 	bic.w	r3, r3, #15
 800670c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2202      	movs	r2, #2
 8006714:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d060      	beq.n	80067e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006726:	2310      	movs	r3, #16
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e001      	b.n	8006730 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800672c:	2320      	movs	r3, #32
 800672e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b20      	cmp	r3, #32
 8006736:	d802      	bhi.n	800673e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800673e:	2001      	movs	r0, #1
 8006740:	f001 f9a0 	bl	8007a84 <HAL_RCCEx_GetPeriphCLKFreq>
 8006744:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674e:	d125      	bne.n	800679c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d010      	beq.n	800677a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	3305      	adds	r3, #5
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	e01f      	b.n	80067ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	fbb2 f2f3 	udiv	r2, r2, r3
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	461a      	mov	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	3305      	adds	r3, #5
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	e00e      	b.n	80067ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	3305      	adds	r3, #5
 80067b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4a5c      	ldr	r2, [pc, #368]	; (8006930 <HAL_I2S_Init+0x270>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	08db      	lsrs	r3, r3, #3
 80067c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e003      	b.n	80067e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80067e0:	2302      	movs	r3, #2
 80067e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d902      	bls.n	80067f4 <HAL_I2S_Init+0x134>
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	2bff      	cmp	r3, #255	; 0xff
 80067f2:	d907      	bls.n	8006804 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f043 0210 	orr.w	r2, r3, #16
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e08f      	b.n	8006924 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	ea42 0103 	orr.w	r1, r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	430a      	orrs	r2, r1
 8006816:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006822:	f023 030f 	bic.w	r3, r3, #15
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6851      	ldr	r1, [r2, #4]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6892      	ldr	r2, [r2, #8]
 800682e:	4311      	orrs	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68d2      	ldr	r2, [r2, #12]
 8006834:	4311      	orrs	r1, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6992      	ldr	r2, [r2, #24]
 800683a:	430a      	orrs	r2, r1
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006846:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d161      	bne.n	8006914 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a38      	ldr	r2, [pc, #224]	; (8006934 <HAL_I2S_Init+0x274>)
 8006854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a37      	ldr	r2, [pc, #220]	; (8006938 <HAL_I2S_Init+0x278>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_I2S_Init+0x1a4>
 8006860:	4b36      	ldr	r3, [pc, #216]	; (800693c <HAL_I2S_Init+0x27c>)
 8006862:	e001      	b.n	8006868 <HAL_I2S_Init+0x1a8>
 8006864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	4932      	ldr	r1, [pc, #200]	; (8006938 <HAL_I2S_Init+0x278>)
 8006870:	428a      	cmp	r2, r1
 8006872:	d101      	bne.n	8006878 <HAL_I2S_Init+0x1b8>
 8006874:	4a31      	ldr	r2, [pc, #196]	; (800693c <HAL_I2S_Init+0x27c>)
 8006876:	e001      	b.n	800687c <HAL_I2S_Init+0x1bc>
 8006878:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800687c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006880:	f023 030f 	bic.w	r3, r3, #15
 8006884:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2b      	ldr	r2, [pc, #172]	; (8006938 <HAL_I2S_Init+0x278>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d101      	bne.n	8006894 <HAL_I2S_Init+0x1d4>
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_I2S_Init+0x27c>)
 8006892:	e001      	b.n	8006898 <HAL_I2S_Init+0x1d8>
 8006894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006898:	2202      	movs	r2, #2
 800689a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a25      	ldr	r2, [pc, #148]	; (8006938 <HAL_I2S_Init+0x278>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_I2S_Init+0x1ea>
 80068a6:	4b25      	ldr	r3, [pc, #148]	; (800693c <HAL_I2S_Init+0x27c>)
 80068a8:	e001      	b.n	80068ae <HAL_I2S_Init+0x1ee>
 80068aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ba:	d003      	beq.n	80068c4 <HAL_I2S_Init+0x204>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80068c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e001      	b.n	80068d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80068da:	4313      	orrs	r3, r2
 80068dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80068e4:	4313      	orrs	r3, r2
 80068e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	897b      	ldrh	r3, [r7, #10]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <HAL_I2S_Init+0x278>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d101      	bne.n	800690c <HAL_I2S_Init+0x24c>
 8006908:	4b0c      	ldr	r3, [pc, #48]	; (800693c <HAL_I2S_Init+0x27c>)
 800690a:	e001      	b.n	8006910 <HAL_I2S_Init+0x250>
 800690c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006910:	897a      	ldrh	r2, [r7, #10]
 8006912:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	08006a37 	.word	0x08006a37
 8006930:	cccccccd 	.word	0xcccccccd
 8006934:	08006b4d 	.word	0x08006b4d
 8006938:	40003800 	.word	0x40003800
 800693c:	40003400 	.word	0x40003400

08006940 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	881a      	ldrh	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	1c9a      	adds	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10e      	bne.n	80069d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ffb8 	bl	8006940 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	b292      	uxth	r2, r2
 80069ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10e      	bne.n	8006a2e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ff93 	bl	8006954 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d13a      	bne.n	8006ac8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d109      	bne.n	8006a70 <I2S_IRQHandler+0x3a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d102      	bne.n	8006a70 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff ffb4 	bl	80069d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d126      	bne.n	8006ac8 <I2S_IRQHandler+0x92>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d11f      	bne.n	8006ac8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	f043 0202 	orr.w	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff ff50 	bl	8006968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d136      	bne.n	8006b42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d109      	bne.n	8006af2 <I2S_IRQHandler+0xbc>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	d102      	bne.n	8006af2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff ff45 	bl	800697c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d122      	bne.n	8006b42 <I2S_IRQHandler+0x10c>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d11b      	bne.n	8006b42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b34:	f043 0204 	orr.w	r2, r3, #4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ff13 	bl	8006968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4aa2      	ldr	r2, [pc, #648]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d101      	bne.n	8006b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006b66:	4ba2      	ldr	r3, [pc, #648]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b68:	e001      	b.n	8006b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a9b      	ldr	r2, [pc, #620]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006b84:	4b9a      	ldr	r3, [pc, #616]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b86:	e001      	b.n	8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b98:	d004      	beq.n	8006ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8099 	bne.w	8006cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d107      	bne.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f925 	bl	8006e08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9c8 	bl	8006f68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d13a      	bne.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d035      	beq.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a7e      	ldr	r2, [pc, #504]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006bf6:	4b7e      	ldr	r3, [pc, #504]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bf8:	e001      	b.n	8006bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4979      	ldr	r1, [pc, #484]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c06:	428b      	cmp	r3, r1
 8006c08:	d101      	bne.n	8006c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c0a:	4b79      	ldr	r3, [pc, #484]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c0c:	e001      	b.n	8006c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fe88 	bl	8006968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	f040 80be 	bne.w	8006de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80b8 	beq.w	8006de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a59      	ldr	r2, [pc, #356]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d101      	bne.n	8006c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006c8a:	4b59      	ldr	r3, [pc, #356]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c8c:	e001      	b.n	8006c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4954      	ldr	r1, [pc, #336]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006c9e:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ca0:	e001      	b.n	8006ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006caa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006cac:	2300      	movs	r3, #0
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f043 0204 	orr.w	r2, r3, #4
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fe4a 	bl	8006968 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cd4:	e084      	b.n	8006de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d107      	bne.n	8006cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8be 	bl	8006e6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d107      	bne.n	8006d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8fd 	bl	8006f04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d12f      	bne.n	8006d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d02a      	beq.n	8006d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006d3a:	e001      	b.n	8006d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4929      	ldr	r1, [pc, #164]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	d101      	bne.n	8006d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006d4e:	e001      	b.n	8006d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	f043 0202 	orr.w	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fdfa 	bl	8006968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d131      	bne.n	8006de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02c      	beq.n	8006de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006d94:	e001      	b.n	8006d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4912      	ldr	r1, [pc, #72]	; (8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006da2:	428b      	cmp	r3, r1
 8006da4:	d101      	bne.n	8006daa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006da8:	e001      	b.n	8006dae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006db2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006dc2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fdc5 	bl	8006968 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dde:	e000      	b.n	8006de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006de0:	bf00      	nop
}
 8006de2:	bf00      	nop
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40003800 	.word	0x40003800
 8006df0:	40003400 	.word	0x40003400

08006df4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c99      	adds	r1, r3, #2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6251      	str	r1, [r2, #36]	; 0x24
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d113      	bne.n	8006e62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ffc9 	bl	8006df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	1c99      	adds	r1, r3, #2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6251      	str	r1, [r2, #36]	; 0x24
 8006e7e:	8819      	ldrh	r1, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <I2SEx_TxISR_I2SExt+0x90>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d101      	bne.n	8006e8e <I2SEx_TxISR_I2SExt+0x22>
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <I2SEx_TxISR_I2SExt+0x94>)
 8006e8c:	e001      	b.n	8006e92 <I2SEx_TxISR_I2SExt+0x26>
 8006e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e92:	460a      	mov	r2, r1
 8006e94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d121      	bne.n	8006ef2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a12      	ldr	r2, [pc, #72]	; (8006efc <I2SEx_TxISR_I2SExt+0x90>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <I2SEx_TxISR_I2SExt+0x50>
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <I2SEx_TxISR_I2SExt+0x94>)
 8006eba:	e001      	b.n	8006ec0 <I2SEx_TxISR_I2SExt+0x54>
 8006ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	490d      	ldr	r1, [pc, #52]	; (8006efc <I2SEx_TxISR_I2SExt+0x90>)
 8006ec8:	428b      	cmp	r3, r1
 8006eca:	d101      	bne.n	8006ed0 <I2SEx_TxISR_I2SExt+0x64>
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <I2SEx_TxISR_I2SExt+0x94>)
 8006ece:	e001      	b.n	8006ed4 <I2SEx_TxISR_I2SExt+0x68>
 8006ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ed8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff81 	bl	8006df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40003800 	.word	0x40003800
 8006f00:	40003400 	.word	0x40003400

08006f04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68d8      	ldr	r0, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	1c99      	adds	r1, r3, #2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006f1c:	b282      	uxth	r2, r0
 8006f1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d113      	bne.n	8006f60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff4a 	bl	8006df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a20      	ldr	r2, [pc, #128]	; (8006ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <I2SEx_RxISR_I2SExt+0x16>
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <I2SEx_RxISR_I2SExt+0x94>)
 8006f7c:	e001      	b.n	8006f82 <I2SEx_RxISR_I2SExt+0x1a>
 8006f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f82:	68d8      	ldr	r0, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	1c99      	adds	r1, r3, #2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006f8e:	b282      	uxth	r2, r0
 8006f90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d121      	bne.n	8006fee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <I2SEx_RxISR_I2SExt+0x50>
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <I2SEx_RxISR_I2SExt+0x94>)
 8006fb6:	e001      	b.n	8006fbc <I2SEx_RxISR_I2SExt+0x54>
 8006fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	490d      	ldr	r1, [pc, #52]	; (8006ff8 <I2SEx_RxISR_I2SExt+0x90>)
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	d101      	bne.n	8006fcc <I2SEx_RxISR_I2SExt+0x64>
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <I2SEx_RxISR_I2SExt+0x94>)
 8006fca:	e001      	b.n	8006fd0 <I2SEx_RxISR_I2SExt+0x68>
 8006fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fd4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ff03 	bl	8006df4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40003800 	.word	0x40003800
 8006ffc:	40003400 	.word	0x40003400

08007000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e264      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d075      	beq.n	800710a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800701e:	4ba3      	ldr	r3, [pc, #652]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b04      	cmp	r3, #4
 8007028:	d00c      	beq.n	8007044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702a:	4ba0      	ldr	r3, [pc, #640]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007032:	2b08      	cmp	r3, #8
 8007034:	d112      	bne.n	800705c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007036:	4b9d      	ldr	r3, [pc, #628]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007042:	d10b      	bne.n	800705c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007044:	4b99      	ldr	r3, [pc, #612]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05b      	beq.n	8007108 <HAL_RCC_OscConfig+0x108>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d157      	bne.n	8007108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e23f      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d106      	bne.n	8007074 <HAL_RCC_OscConfig+0x74>
 8007066:	4b91      	ldr	r3, [pc, #580]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a90      	ldr	r2, [pc, #576]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800706c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e01d      	b.n	80070b0 <HAL_RCC_OscConfig+0xb0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800707c:	d10c      	bne.n	8007098 <HAL_RCC_OscConfig+0x98>
 800707e:	4b8b      	ldr	r3, [pc, #556]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a8a      	ldr	r2, [pc, #552]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4b88      	ldr	r3, [pc, #544]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a87      	ldr	r2, [pc, #540]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	e00b      	b.n	80070b0 <HAL_RCC_OscConfig+0xb0>
 8007098:	4b84      	ldr	r3, [pc, #528]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a83      	ldr	r2, [pc, #524]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800709e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4b81      	ldr	r3, [pc, #516]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a80      	ldr	r2, [pc, #512]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80070aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d013      	beq.n	80070e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7fc f934 	bl	8003324 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fc f930 	bl	8003324 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	; 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e204      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d2:	4b76      	ldr	r3, [pc, #472]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0xc0>
 80070de:	e014      	b.n	800710a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e0:	f7fc f920 	bl	8003324 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070e8:	f7fc f91c 	bl	8003324 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	; 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e1f0      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fa:	4b6c      	ldr	r3, [pc, #432]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0xe8>
 8007106:	e000      	b.n	800710a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d063      	beq.n	80071de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007116:	4b65      	ldr	r3, [pc, #404]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007122:	4b62      	ldr	r3, [pc, #392]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800712a:	2b08      	cmp	r3, #8
 800712c:	d11c      	bne.n	8007168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800712e:	4b5f      	ldr	r3, [pc, #380]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d116      	bne.n	8007168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	4b5c      	ldr	r3, [pc, #368]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_RCC_OscConfig+0x152>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d001      	beq.n	8007152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e1c4      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007152:	4b56      	ldr	r3, [pc, #344]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4952      	ldr	r1, [pc, #328]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007162:	4313      	orrs	r3, r2
 8007164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007166:	e03a      	b.n	80071de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007170:	4b4f      	ldr	r3, [pc, #316]	; (80072b0 <HAL_RCC_OscConfig+0x2b0>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007176:	f7fc f8d5 	bl	8003324 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800717e:	f7fc f8d1 	bl	8003324 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1a5      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007190:	4b46      	ldr	r3, [pc, #280]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719c:	4b43      	ldr	r3, [pc, #268]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4940      	ldr	r1, [pc, #256]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]
 80071b0:	e015      	b.n	80071de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b2:	4b3f      	ldr	r3, [pc, #252]	; (80072b0 <HAL_RCC_OscConfig+0x2b0>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fc f8b4 	bl	8003324 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071c0:	f7fc f8b0 	bl	8003324 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e184      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d2:	4b36      	ldr	r3, [pc, #216]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d030      	beq.n	800724c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d016      	beq.n	8007220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f2:	4b30      	ldr	r3, [pc, #192]	; (80072b4 <HAL_RCC_OscConfig+0x2b4>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f8:	f7fc f894 	bl	8003324 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007200:	f7fc f890 	bl	8003324 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e164      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007212:	4b26      	ldr	r3, [pc, #152]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x200>
 800721e:	e015      	b.n	800724c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007220:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_RCC_OscConfig+0x2b4>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007226:	f7fc f87d 	bl	8003324 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800722e:	f7fc f879 	bl	8003324 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e14d      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f0      	bne.n	800722e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a0 	beq.w	800739a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725a:	2300      	movs	r3, #0
 800725c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10f      	bne.n	800728a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 8007274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007278:	6413      	str	r3, [r2, #64]	; 0x40
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <HAL_RCC_OscConfig+0x2ac>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_OscConfig+0x2b8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007292:	2b00      	cmp	r3, #0
 8007294:	d121      	bne.n	80072da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_RCC_OscConfig+0x2b8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <HAL_RCC_OscConfig+0x2b8>)
 800729c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a2:	f7fc f83f 	bl	8003324 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a8:	e011      	b.n	80072ce <HAL_RCC_OscConfig+0x2ce>
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800
 80072b0:	42470000 	.word	0x42470000
 80072b4:	42470e80 	.word	0x42470e80
 80072b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072bc:	f7fc f832 	bl	8003324 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e106      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ce:	4b85      	ldr	r3, [pc, #532]	; (80074e4 <HAL_RCC_OscConfig+0x4e4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0f0      	beq.n	80072bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d106      	bne.n	80072f0 <HAL_RCC_OscConfig+0x2f0>
 80072e2:	4b81      	ldr	r3, [pc, #516]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	4a80      	ldr	r2, [pc, #512]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80072e8:	f043 0301 	orr.w	r3, r3, #1
 80072ec:	6713      	str	r3, [r2, #112]	; 0x70
 80072ee:	e01c      	b.n	800732a <HAL_RCC_OscConfig+0x32a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b05      	cmp	r3, #5
 80072f6:	d10c      	bne.n	8007312 <HAL_RCC_OscConfig+0x312>
 80072f8:	4b7b      	ldr	r3, [pc, #492]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	4a7a      	ldr	r2, [pc, #488]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80072fe:	f043 0304 	orr.w	r3, r3, #4
 8007302:	6713      	str	r3, [r2, #112]	; 0x70
 8007304:	4b78      	ldr	r3, [pc, #480]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	4a77      	ldr	r2, [pc, #476]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6713      	str	r3, [r2, #112]	; 0x70
 8007310:	e00b      	b.n	800732a <HAL_RCC_OscConfig+0x32a>
 8007312:	4b75      	ldr	r3, [pc, #468]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	4a74      	ldr	r2, [pc, #464]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	6713      	str	r3, [r2, #112]	; 0x70
 800731e:	4b72      	ldr	r3, [pc, #456]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	4a71      	ldr	r2, [pc, #452]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007324:	f023 0304 	bic.w	r3, r3, #4
 8007328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d015      	beq.n	800735e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007332:	f7fb fff7 	bl	8003324 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007338:	e00a      	b.n	8007350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800733a:	f7fb fff3 	bl	8003324 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f241 3288 	movw	r2, #5000	; 0x1388
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e0c5      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007350:	4b65      	ldr	r3, [pc, #404]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ee      	beq.n	800733a <HAL_RCC_OscConfig+0x33a>
 800735c:	e014      	b.n	8007388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735e:	f7fb ffe1 	bl	8003324 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007364:	e00a      	b.n	800737c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007366:	f7fb ffdd 	bl	8003324 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f241 3288 	movw	r2, #5000	; 0x1388
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e0af      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800737c:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1ee      	bne.n	8007366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d105      	bne.n	800739a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738e:	4b56      	ldr	r3, [pc, #344]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	4a55      	ldr	r2, [pc, #340]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 809b 	beq.w	80074da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073a4:	4b50      	ldr	r3, [pc, #320]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d05c      	beq.n	800746a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d141      	bne.n	800743c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b8:	4b4c      	ldr	r3, [pc, #304]	; (80074ec <HAL_RCC_OscConfig+0x4ec>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073be:	f7fb ffb1 	bl	8003324 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c6:	f7fb ffad 	bl	8003324 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e081      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d8:	4b43      	ldr	r3, [pc, #268]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f0      	bne.n	80073c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	019b      	lsls	r3, r3, #6
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	3b01      	subs	r3, #1
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	4937      	ldr	r1, [pc, #220]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 800740a:	4313      	orrs	r3, r2
 800740c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCC_OscConfig+0x4ec>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007414:	f7fb ff86 	bl	8003324 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741c:	f7fb ff82 	bl	8003324 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e056      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800742e:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0x41c>
 800743a:	e04e      	b.n	80074da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743c:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <HAL_RCC_OscConfig+0x4ec>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007442:	f7fb ff6f 	bl	8003324 <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800744a:	f7fb ff6b 	bl	8003324 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e03f      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745c:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f0      	bne.n	800744a <HAL_RCC_OscConfig+0x44a>
 8007468:	e037      	b.n	80074da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e032      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <HAL_RCC_OscConfig+0x4e8>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d028      	beq.n	80074d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800748e:	429a      	cmp	r2, r3
 8007490:	d121      	bne.n	80074d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d11a      	bne.n	80074d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074a6:	4013      	ands	r3, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d111      	bne.n	80074d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d001      	beq.n	80074da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40007000 	.word	0x40007000
 80074e8:	40023800 	.word	0x40023800
 80074ec:	42470060 	.word	0x42470060

080074f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0cc      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007504:	4b68      	ldr	r3, [pc, #416]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d90c      	bls.n	800752c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007512:	4b65      	ldr	r3, [pc, #404]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751a:	4b63      	ldr	r3, [pc, #396]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e0b8      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007544:	4b59      	ldr	r3, [pc, #356]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a58      	ldr	r2, [pc, #352]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800754e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800755c:	4b53      	ldr	r3, [pc, #332]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a52      	ldr	r2, [pc, #328]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007568:	4b50      	ldr	r3, [pc, #320]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	494d      	ldr	r1, [pc, #308]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d044      	beq.n	8007610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d107      	bne.n	800759e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800758e:	4b47      	ldr	r3, [pc, #284]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d119      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e07f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d003      	beq.n	80075ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ae:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e06f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075be:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e067      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ce:	4b37      	ldr	r3, [pc, #220]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f023 0203 	bic.w	r2, r3, #3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4934      	ldr	r1, [pc, #208]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075e0:	f7fb fea0 	bl	8003324 <HAL_GetTick>
 80075e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	e00a      	b.n	80075fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e8:	f7fb fe9c 	bl	8003324 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e04f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fe:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 020c 	and.w	r2, r3, #12
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	429a      	cmp	r2, r3
 800760e:	d1eb      	bne.n	80075e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20c      	bcs.n	8007638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e032      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4916      	ldr	r1, [pc, #88]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	4313      	orrs	r3, r2
 8007654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007662:	4b12      	ldr	r3, [pc, #72]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	490e      	ldr	r1, [pc, #56]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007676:	f000 f821 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800767a:	4602      	mov	r2, r0
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	091b      	lsrs	r3, r3, #4
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	490a      	ldr	r1, [pc, #40]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007688:	5ccb      	ldrb	r3, [r1, r3]
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fb fe00 	bl	800329c <HAL_InitTick>

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40023c00 	.word	0x40023c00
 80076ac:	40023800 	.word	0x40023800
 80076b0:	0800ca0c 	.word	0x0800ca0c
 80076b4:	20000004 	.word	0x20000004
 80076b8:	2000014c 	.word	0x2000014c

080076bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	2300      	movs	r3, #0
 80076ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d4:	4b67      	ldr	r3, [pc, #412]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d00d      	beq.n	80076fc <HAL_RCC_GetSysClockFreq+0x40>
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	f200 80bd 	bhi.w	8007860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x34>
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d003      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ee:	e0b7      	b.n	8007860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076f0:	4b61      	ldr	r3, [pc, #388]	; (8007878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80076f2:	60bb      	str	r3, [r7, #8]
       break;
 80076f4:	e0b7      	b.n	8007866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076f6:	4b61      	ldr	r3, [pc, #388]	; (800787c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80076f8:	60bb      	str	r3, [r7, #8]
      break;
 80076fa:	e0b4      	b.n	8007866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076fc:	4b5d      	ldr	r3, [pc, #372]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007706:	4b5b      	ldr	r3, [pc, #364]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04d      	beq.n	80077ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007712:	4b58      	ldr	r3, [pc, #352]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	ea02 0800 	and.w	r8, r2, r0
 800772a:	ea03 0901 	and.w	r9, r3, r1
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	014b      	lsls	r3, r1, #5
 800773c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007740:	0142      	lsls	r2, r0, #5
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	ebb0 0008 	subs.w	r0, r0, r8
 800774a:	eb61 0109 	sbc.w	r1, r1, r9
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	018b      	lsls	r3, r1, #6
 8007758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800775c:	0182      	lsls	r2, r0, #6
 800775e:	1a12      	subs	r2, r2, r0
 8007760:	eb63 0301 	sbc.w	r3, r3, r1
 8007764:	f04f 0000 	mov.w	r0, #0
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	00d9      	lsls	r1, r3, #3
 800776e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007772:	00d0      	lsls	r0, r2, #3
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	eb12 0208 	adds.w	r2, r2, r8
 800777c:	eb43 0309 	adc.w	r3, r3, r9
 8007780:	f04f 0000 	mov.w	r0, #0
 8007784:	f04f 0100 	mov.w	r1, #0
 8007788:	0259      	lsls	r1, r3, #9
 800778a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800778e:	0250      	lsls	r0, r2, #9
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4610      	mov	r0, r2
 8007796:	4619      	mov	r1, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	461a      	mov	r2, r3
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	f7f8 fd12 	bl	80001c8 <__aeabi_uldivmod>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4613      	mov	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e04a      	b.n	8007844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ae:	4b31      	ldr	r3, [pc, #196]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	099b      	lsrs	r3, r3, #6
 80077b4:	461a      	mov	r2, r3
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	ea02 0400 	and.w	r4, r2, r0
 80077c6:	ea03 0501 	and.w	r5, r3, r1
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	014b      	lsls	r3, r1, #5
 80077d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077dc:	0142      	lsls	r2, r0, #5
 80077de:	4610      	mov	r0, r2
 80077e0:	4619      	mov	r1, r3
 80077e2:	1b00      	subs	r0, r0, r4
 80077e4:	eb61 0105 	sbc.w	r1, r1, r5
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	018b      	lsls	r3, r1, #6
 80077f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077f6:	0182      	lsls	r2, r0, #6
 80077f8:	1a12      	subs	r2, r2, r0
 80077fa:	eb63 0301 	sbc.w	r3, r3, r1
 80077fe:	f04f 0000 	mov.w	r0, #0
 8007802:	f04f 0100 	mov.w	r1, #0
 8007806:	00d9      	lsls	r1, r3, #3
 8007808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800780c:	00d0      	lsls	r0, r2, #3
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	1912      	adds	r2, r2, r4
 8007814:	eb45 0303 	adc.w	r3, r5, r3
 8007818:	f04f 0000 	mov.w	r0, #0
 800781c:	f04f 0100 	mov.w	r1, #0
 8007820:	0299      	lsls	r1, r3, #10
 8007822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007826:	0290      	lsls	r0, r2, #10
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	f7f8 fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4613      	mov	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	3301      	adds	r3, #1
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	60bb      	str	r3, [r7, #8]
      break;
 800785e:	e002      	b.n	8007866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007862:	60bb      	str	r3, [r7, #8]
      break;
 8007864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007866:	68bb      	ldr	r3, [r7, #8]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007872:	bf00      	nop
 8007874:	40023800 	.word	0x40023800
 8007878:	00f42400 	.word	0x00f42400
 800787c:	007a1200 	.word	0x007a1200

08007880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007884:	4b03      	ldr	r3, [pc, #12]	; (8007894 <HAL_RCC_GetHCLKFreq+0x14>)
 8007886:	681b      	ldr	r3, [r3, #0]
}
 8007888:	4618      	mov	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000004 	.word	0x20000004

08007898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800789c:	f7ff fff0 	bl	8007880 <HAL_RCC_GetHCLKFreq>
 80078a0:	4602      	mov	r2, r0
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	0a9b      	lsrs	r3, r3, #10
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	4903      	ldr	r1, [pc, #12]	; (80078bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ae:	5ccb      	ldrb	r3, [r1, r3]
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40023800 	.word	0x40023800
 80078bc:	0800ca1c 	.word	0x0800ca1c

080078c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d035      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078e8:	4b62      	ldr	r3, [pc, #392]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078ee:	f7fb fd19 	bl	8003324 <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078f4:	e008      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078f6:	f7fb fd15 	bl	8003324 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e0b0      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007908:	4b5b      	ldr	r3, [pc, #364]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	019a      	lsls	r2, r3, #6
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	071b      	lsls	r3, r3, #28
 8007920:	4955      	ldr	r1, [pc, #340]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007928:	4b52      	ldr	r3, [pc, #328]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800792e:	f7fb fcf9 	bl	8003324 <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007934:	e008      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007936:	f7fb fcf5 	bl	8003324 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e090      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007948:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8083 	beq.w	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	4a43      	ldr	r2, [pc, #268]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800796c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007970:	6413      	str	r3, [r2, #64]	; 0x40
 8007972:	4b41      	ldr	r3, [pc, #260]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800797e:	4b3f      	ldr	r3, [pc, #252]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800798a:	f7fb fccb 	bl	8003324 <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007992:	f7fb fcc7 	bl	8003324 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e062      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079a4:	4b35      	ldr	r3, [pc, #212]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079b0:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d028      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ce:	4b2a      	ldr	r3, [pc, #168]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079d8:	4b29      	ldr	r3, [pc, #164]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079da:	2201      	movs	r2, #1
 80079dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079de:	4b28      	ldr	r3, [pc, #160]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80079e4:	4a24      	ldr	r2, [pc, #144]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079ea:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d114      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80079f6:	f7fb fc95 	bl	8003324 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fb fc91 	bl	8003324 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e02a      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a14:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0ee      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2c:	d10d      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a42:	490d      	ldr	r1, [pc, #52]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]
 8007a48:	e005      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a54:	6093      	str	r3, [r2, #8]
 8007a56:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a62:	4905      	ldr	r1, [pc, #20]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	42470068 	.word	0x42470068
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	40007000 	.word	0x40007000
 8007a80:	42470e40 	.word	0x42470e40

08007a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d13e      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007aa2:	4b23      	ldr	r3, [pc, #140]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d12f      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007aba:	617b      	str	r3, [r7, #20]
          break;
 8007abc:	e02f      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007abe:	4b1c      	ldr	r3, [pc, #112]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aca:	d108      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007acc:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad4:	4a18      	ldr	r2, [pc, #96]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	e007      	b.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ade:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae6:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af4:	099b      	lsrs	r3, r3, #6
 8007af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b08:	0f1b      	lsrs	r3, r3, #28
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b14:	617b      	str	r3, [r7, #20]
          break;
 8007b16:	e002      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
          break;
 8007b1c:	bf00      	nop
        }
      }
      break;
 8007b1e:	bf00      	nop
    }
  }
  return frequency;
 8007b20:	697b      	ldr	r3, [r7, #20]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40023800 	.word	0x40023800
 8007b34:	00bb8000 	.word	0x00bb8000
 8007b38:	007a1200 	.word	0x007a1200
 8007b3c:	00f42400 	.word	0x00f42400

08007b40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e01c      	b.n	8007b8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	795b      	ldrb	r3, [r3, #5]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7f9 fc58 	bl	8001418 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0204 	orr.w	r2, r2, #4
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_RNG_GenerateRandomNumber+0x1a>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e03d      	b.n	8007c2a <HAL_RNG_GenerateRandomNumber+0x96>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	795b      	ldrb	r3, [r3, #5]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d12c      	bne.n	8007c18 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc4:	f7fb fbae 	bl	8003324 <HAL_GetTick>
 8007bc8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007bca:	e011      	b.n	8007bf0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007bcc:	f7fb fbaa 	bl	8003324 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d90a      	bls.n	8007bf0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e01c      	b.n	8007c2a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d1e6      	bne.n	8007bcc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	715a      	strb	r2, [r3, #5]
 8007c16:	e004      	b.n	8007c22 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	711a      	strb	r2, [r3, #4]

  return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ffa7 	bl	8007b94 <HAL_RNG_GenerateRandomNumber>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d102      	bne.n	8007c52 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	e000      	b.n	8007c54 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8007c52:	2300      	movs	r3, #0
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e07b      	b.n	8007d66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d108      	bne.n	8007c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7e:	d009      	beq.n	8007c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	61da      	str	r2, [r3, #28]
 8007c86:	e005      	b.n	8007c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7f9 fbd4 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d18:	ea42 0103 	orr.w	r1, r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	f003 0104 	and.w	r1, r3, #4
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f003 0210 	and.w	r2, r3, #16
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b088      	sub	sp, #32
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_SPI_Transmit+0x22>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e126      	b.n	8007fde <HAL_SPI_Transmit+0x270>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d98:	f7fb fac4 	bl	8003324 <HAL_GetTick>
 8007d9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d002      	beq.n	8007db4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007dae:	2302      	movs	r3, #2
 8007db0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007db2:	e10b      	b.n	8007fcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_SPI_Transmit+0x52>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dc4:	e102      	b.n	8007fcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2203      	movs	r2, #3
 8007dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	88fa      	ldrh	r2, [r7, #6]
 8007dde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0c:	d10f      	bne.n	8007e2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d007      	beq.n	8007e4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e54:	d14b      	bne.n	8007eee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_SPI_Transmit+0xf6>
 8007e5e:	8afb      	ldrh	r3, [r7, #22]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d13e      	bne.n	8007ee2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	881a      	ldrh	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	1c9a      	adds	r2, r3, #2
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e88:	e02b      	b.n	8007ee2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d112      	bne.n	8007ebe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9c:	881a      	ldrh	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	1c9a      	adds	r2, r3, #2
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ebc:	e011      	b.n	8007ee2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ebe:	f7fb fa31 	bl	8003324 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d803      	bhi.n	8007ed6 <HAL_SPI_Transmit+0x168>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ed4:	d102      	bne.n	8007edc <HAL_SPI_Transmit+0x16e>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ee0:	e074      	b.n	8007fcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1ce      	bne.n	8007e8a <HAL_SPI_Transmit+0x11c>
 8007eec:	e04c      	b.n	8007f88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_SPI_Transmit+0x18e>
 8007ef6:	8afb      	ldrh	r3, [r7, #22]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d140      	bne.n	8007f7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	330c      	adds	r3, #12
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f22:	e02c      	b.n	8007f7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d113      	bne.n	8007f5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	7812      	ldrb	r2, [r2, #0]
 8007f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f58:	e011      	b.n	8007f7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f5a:	f7fb f9e3 	bl	8003324 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d803      	bhi.n	8007f72 <HAL_SPI_Transmit+0x204>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f70:	d102      	bne.n	8007f78 <HAL_SPI_Transmit+0x20a>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f7c:	e026      	b.n	8007fcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1cd      	bne.n	8007f24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f8b3 	bl	80080f8 <SPI_EndRxTxTransaction>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	77fb      	strb	r3, [r7, #31]
 8007fc8:	e000      	b.n	8007fcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8007fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ff8:	f7fb f994 	bl	8003324 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4413      	add	r3, r2
 8008006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008008:	f7fb f98c 	bl	8003324 <HAL_GetTick>
 800800c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800800e:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	015b      	lsls	r3, r3, #5
 8008014:	0d1b      	lsrs	r3, r3, #20
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	fb02 f303 	mul.w	r3, r2, r3
 800801c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800801e:	e054      	b.n	80080ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008026:	d050      	beq.n	80080ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008028:	f7fb f97c 	bl	8003324 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	429a      	cmp	r2, r3
 8008036:	d902      	bls.n	800803e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d13d      	bne.n	80080ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800804c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008056:	d111      	bne.n	800807c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008060:	d004      	beq.n	800806c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d107      	bne.n	800807c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800807a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008084:	d10f      	bne.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e017      	b.n	80080ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4013      	ands	r3, r2
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	bf0c      	ite	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	2300      	movne	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d19b      	bne.n	8008020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000004 	.word	0x20000004

080080f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008104:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <SPI_EndRxTxTransaction+0x7c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <SPI_EndRxTxTransaction+0x80>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	0d5b      	lsrs	r3, r3, #21
 8008110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008114:	fb02 f303 	mul.w	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008122:	d112      	bne.n	800814a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff ff5a 	bl	8007fe8 <SPI_WaitFlagStateUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d016      	beq.n	8008168 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	f043 0220 	orr.w	r2, r3, #32
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e00f      	b.n	800816a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	3b01      	subs	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008160:	2b80      	cmp	r3, #128	; 0x80
 8008162:	d0f2      	beq.n	800814a <SPI_EndRxTxTransaction+0x52>
 8008164:	e000      	b.n	8008168 <SPI_EndRxTxTransaction+0x70>
        break;
 8008166:	bf00      	nop
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000004 	.word	0x20000004
 8008178:	165e9f81 	.word	0x165e9f81

0800817c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e041      	b.n	8008212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7f9 fa40 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	f000 fd68 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e04e      	b.n	80082d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a23      	ldr	r2, [pc, #140]	; (80082e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825e:	d01d      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <HAL_TIM_Base_Start_IT+0xd0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d111      	bne.n	80082c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d010      	beq.n	80082d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0201 	orr.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082be:	e007      	b.n	80082d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40001800 	.word	0x40001800

080082fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d109      	bne.n	8008320 <HAL_TIM_OC_Start_IT+0x24>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	e022      	b.n	8008366 <HAL_TIM_OC_Start_IT+0x6a>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d109      	bne.n	800833a <HAL_TIM_OC_Start_IT+0x3e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b01      	cmp	r3, #1
 8008330:	bf14      	ite	ne
 8008332:	2301      	movne	r3, #1
 8008334:	2300      	moveq	r3, #0
 8008336:	b2db      	uxtb	r3, r3
 8008338:	e015      	b.n	8008366 <HAL_TIM_OC_Start_IT+0x6a>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b08      	cmp	r3, #8
 800833e:	d109      	bne.n	8008354 <HAL_TIM_OC_Start_IT+0x58>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b01      	cmp	r3, #1
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	e008      	b.n	8008366 <HAL_TIM_OC_Start_IT+0x6a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b01      	cmp	r3, #1
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e0c2      	b.n	80084f4 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <HAL_TIM_OC_Start_IT+0x82>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800837c:	e013      	b.n	80083a6 <HAL_TIM_OC_Start_IT+0xaa>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d104      	bne.n	800838e <HAL_TIM_OC_Start_IT+0x92>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800838c:	e00b      	b.n	80083a6 <HAL_TIM_OC_Start_IT+0xaa>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b08      	cmp	r3, #8
 8008392:	d104      	bne.n	800839e <HAL_TIM_OC_Start_IT+0xa2>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800839c:	e003      	b.n	80083a6 <HAL_TIM_OC_Start_IT+0xaa>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b0c      	cmp	r3, #12
 80083aa:	d841      	bhi.n	8008430 <HAL_TIM_OC_Start_IT+0x134>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <HAL_TIM_OC_Start_IT+0xb8>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083e9 	.word	0x080083e9
 80083b8:	08008431 	.word	0x08008431
 80083bc:	08008431 	.word	0x08008431
 80083c0:	08008431 	.word	0x08008431
 80083c4:	080083fb 	.word	0x080083fb
 80083c8:	08008431 	.word	0x08008431
 80083cc:	08008431 	.word	0x08008431
 80083d0:	08008431 	.word	0x08008431
 80083d4:	0800840d 	.word	0x0800840d
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008431 	.word	0x08008431
 80083e0:	08008431 	.word	0x08008431
 80083e4:	0800841f 	.word	0x0800841f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0202 	orr.w	r2, r2, #2
 80083f6:	60da      	str	r2, [r3, #12]
      break;
 80083f8:	e01b      	b.n	8008432 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0204 	orr.w	r2, r2, #4
 8008408:	60da      	str	r2, [r3, #12]
      break;
 800840a:	e012      	b.n	8008432 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	60da      	str	r2, [r3, #12]
      break;
 800841c:	e009      	b.n	8008432 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0210 	orr.w	r2, r2, #16
 800842c:	60da      	str	r2, [r3, #12]
      break;
 800842e:	e000      	b.n	8008432 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8008430:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2201      	movs	r2, #1
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ff12 	bl	8009264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a2d      	ldr	r2, [pc, #180]	; (80084fc <HAL_TIM_OC_Start_IT+0x200>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <HAL_TIM_OC_Start_IT+0x158>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <HAL_TIM_OC_Start_IT+0x204>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d101      	bne.n	8008458 <HAL_TIM_OC_Start_IT+0x15c>
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_TIM_OC_Start_IT+0x15e>
 8008458:	2300      	movs	r3, #0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800846c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a22      	ldr	r2, [pc, #136]	; (80084fc <HAL_TIM_OC_Start_IT+0x200>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d022      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008480:	d01d      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <HAL_TIM_OC_Start_IT+0x208>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d018      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1d      	ldr	r2, [pc, #116]	; (8008508 <HAL_TIM_OC_Start_IT+0x20c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1c      	ldr	r2, [pc, #112]	; (800850c <HAL_TIM_OC_Start_IT+0x210>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00e      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <HAL_TIM_OC_Start_IT+0x204>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a18      	ldr	r2, [pc, #96]	; (8008510 <HAL_TIM_OC_Start_IT+0x214>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <HAL_TIM_OC_Start_IT+0x1c2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a16      	ldr	r2, [pc, #88]	; (8008514 <HAL_TIM_OC_Start_IT+0x218>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d111      	bne.n	80084e2 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0307 	and.w	r3, r3, #7
 80084c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	d010      	beq.n	80084f2 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e0:	e007      	b.n	80084f2 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0201 	orr.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	40010000 	.word	0x40010000
 8008500:	40010400 	.word	0x40010400
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40014000 	.word	0x40014000
 8008514:	40001800 	.word	0x40001800

08008518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e041      	b.n	80085ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f839 	bl	80085b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f000 fb9a 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e097      	b.n	800870e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7f8 ffd0 	bl	8001598 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800860e:	f023 0307 	bic.w	r3, r3, #7
 8008612:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f000 fb36 	bl	8008c90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	4313      	orrs	r3, r2
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800866a:	f023 030c 	bic.w	r3, r3, #12
 800866e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800867a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	4313      	orrs	r3, r2
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	011a      	lsls	r2, r3, #4
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	4313      	orrs	r3, r2
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80086a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80086b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	4313      	orrs	r3, r2
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d122      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0202 	mvn.w	r2, #2
 8008742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa7b 	bl	8008c54 <HAL_TIM_IC_CaptureCallback>
 800875e:	e005      	b.n	800876c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa6d 	bl	8008c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa7e 	bl	8008c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d122      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d11b      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0204 	mvn.w	r2, #4
 8008796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fa51 	bl	8008c54 <HAL_TIM_IC_CaptureCallback>
 80087b2:	e005      	b.n	80087c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa43 	bl	8008c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa54 	bl	8008c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d122      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11b      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f06f 0208 	mvn.w	r2, #8
 80087ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa27 	bl	8008c54 <HAL_TIM_IC_CaptureCallback>
 8008806:	e005      	b.n	8008814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa19 	bl	8008c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa2a 	bl	8008c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d122      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d11b      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0210 	mvn.w	r2, #16
 800883e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2208      	movs	r2, #8
 8008844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f9fd 	bl	8008c54 <HAL_TIM_IC_CaptureCallback>
 800885a:	e005      	b.n	8008868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f9ef 	bl	8008c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa00 	bl	8008c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0201 	mvn.w	r2, #1
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9c9 	bl	8008c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d10e      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d107      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fd7b 	bl	80093bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d10e      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d107      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9c5 	bl	8008c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d10e      	bne.n	800891e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b20      	cmp	r3, #32
 800890c:	d107      	bne.n	800891e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f06f 0220 	mvn.w	r2, #32
 8008916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fd45 	bl	80093a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800893e:	2302      	movs	r3, #2
 8008940:	e0ac      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b0c      	cmp	r3, #12
 800894e:	f200 809f 	bhi.w	8008a90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	0800898d 	.word	0x0800898d
 800895c:	08008a91 	.word	0x08008a91
 8008960:	08008a91 	.word	0x08008a91
 8008964:	08008a91 	.word	0x08008a91
 8008968:	080089cd 	.word	0x080089cd
 800896c:	08008a91 	.word	0x08008a91
 8008970:	08008a91 	.word	0x08008a91
 8008974:	08008a91 	.word	0x08008a91
 8008978:	08008a0f 	.word	0x08008a0f
 800897c:	08008a91 	.word	0x08008a91
 8008980:	08008a91 	.word	0x08008a91
 8008984:	08008a91 	.word	0x08008a91
 8008988:	08008a4f 	.word	0x08008a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fa1c 	bl	8008dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0208 	orr.w	r2, r2, #8
 80089a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0204 	bic.w	r2, r2, #4
 80089b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6999      	ldr	r1, [r3, #24]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	619a      	str	r2, [r3, #24]
      break;
 80089ca:	e062      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fa6c 	bl	8008eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6999      	ldr	r1, [r3, #24]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	021a      	lsls	r2, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	619a      	str	r2, [r3, #24]
      break;
 8008a0c:	e041      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fac1 	bl	8008f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0208 	orr.w	r2, r2, #8
 8008a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0204 	bic.w	r2, r2, #4
 8008a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69d9      	ldr	r1, [r3, #28]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	61da      	str	r2, [r3, #28]
      break;
 8008a4c:	e021      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb15 	bl	8009084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69d9      	ldr	r1, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	021a      	lsls	r2, r3, #8
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	61da      	str	r2, [r3, #28]
      break;
 8008a8e:	e000      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIM_ConfigClockSource+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e0b3      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x180>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af4:	d03e      	beq.n	8008b74 <HAL_TIM_ConfigClockSource+0xd0>
 8008af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008afa:	f200 8087 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b02:	f000 8085 	beq.w	8008c10 <HAL_TIM_ConfigClockSource+0x16c>
 8008b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0a:	d87f      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b0c:	2b70      	cmp	r3, #112	; 0x70
 8008b0e:	d01a      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0xa2>
 8008b10:	2b70      	cmp	r3, #112	; 0x70
 8008b12:	d87b      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b14:	2b60      	cmp	r3, #96	; 0x60
 8008b16:	d050      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0x116>
 8008b18:	2b60      	cmp	r3, #96	; 0x60
 8008b1a:	d877      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b1c:	2b50      	cmp	r3, #80	; 0x50
 8008b1e:	d03c      	beq.n	8008b9a <HAL_TIM_ConfigClockSource+0xf6>
 8008b20:	2b50      	cmp	r3, #80	; 0x50
 8008b22:	d873      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b24:	2b40      	cmp	r3, #64	; 0x40
 8008b26:	d058      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x136>
 8008b28:	2b40      	cmp	r3, #64	; 0x40
 8008b2a:	d86f      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b2c:	2b30      	cmp	r3, #48	; 0x30
 8008b2e:	d064      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x156>
 8008b30:	2b30      	cmp	r3, #48	; 0x30
 8008b32:	d86b      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d060      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x156>
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d867      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05c      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x156>
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d05a      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b44:	e062      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6899      	ldr	r1, [r3, #8]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f000 fb65 	bl	8009224 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	609a      	str	r2, [r3, #8]
      break;
 8008b72:	e04e      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6899      	ldr	r1, [r3, #8]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f000 fb4e 	bl	8009224 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b96:	609a      	str	r2, [r3, #8]
      break;
 8008b98:	e03b      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6859      	ldr	r1, [r3, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f000 fac2 	bl	8009130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2150      	movs	r1, #80	; 0x50
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fb1b 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 8008bb8:	e02b      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 fae1 	bl	800918e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2160      	movs	r1, #96	; 0x60
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fb0b 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 8008bd8:	e01b      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 faa2 	bl	8009130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2140      	movs	r1, #64	; 0x40
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fafb 	bl	80091ee <TIM_ITRx_SetConfig>
      break;
 8008bf8:	e00b      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f000 faf2 	bl	80091ee <TIM_ITRx_SetConfig>
        break;
 8008c0a:	e002      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a40      	ldr	r2, [pc, #256]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cae:	d00f      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3d      	ldr	r2, [pc, #244]	; (8008da8 <TIM_Base_SetConfig+0x118>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3c      	ldr	r2, [pc, #240]	; (8008dac <TIM_Base_SetConfig+0x11c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3b      	ldr	r2, [pc, #236]	; (8008db0 <TIM_Base_SetConfig+0x120>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a3a      	ldr	r2, [pc, #232]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d108      	bne.n	8008ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d02b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf0:	d027      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2c      	ldr	r2, [pc, #176]	; (8008da8 <TIM_Base_SetConfig+0x118>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d023      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2b      	ldr	r2, [pc, #172]	; (8008dac <TIM_Base_SetConfig+0x11c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01f      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a2a      	ldr	r2, [pc, #168]	; (8008db0 <TIM_Base_SetConfig+0x120>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d01b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a29      	ldr	r2, [pc, #164]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d017      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a28      	ldr	r2, [pc, #160]	; (8008db8 <TIM_Base_SetConfig+0x128>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d013      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a27      	ldr	r2, [pc, #156]	; (8008dbc <TIM_Base_SetConfig+0x12c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00f      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a26      	ldr	r2, [pc, #152]	; (8008dc0 <TIM_Base_SetConfig+0x130>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a25      	ldr	r2, [pc, #148]	; (8008dc4 <TIM_Base_SetConfig+0x134>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a24      	ldr	r2, [pc, #144]	; (8008dc8 <TIM_Base_SetConfig+0x138>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <TIM_Base_SetConfig+0x13c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d108      	bne.n	8008d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d003      	beq.n	8008d88 <TIM_Base_SetConfig+0xf8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a0c      	ldr	r2, [pc, #48]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d103      	bne.n	8008d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	615a      	str	r2, [r3, #20]
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40000400 	.word	0x40000400
 8008dac:	40000800 	.word	0x40000800
 8008db0:	40000c00 	.word	0x40000c00
 8008db4:	40010400 	.word	0x40010400
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40014400 	.word	0x40014400
 8008dc0:	40014800 	.word	0x40014800
 8008dc4:	40001800 	.word	0x40001800
 8008dc8:	40001c00 	.word	0x40001c00
 8008dcc:	40002000 	.word	0x40002000

08008dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f023 0201 	bic.w	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0303 	bic.w	r3, r3, #3
 8008e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f023 0302 	bic.w	r3, r3, #2
 8008e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a20      	ldr	r2, [pc, #128]	; (8008ea8 <TIM_OC1_SetConfig+0xd8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_OC1_SetConfig+0x64>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <TIM_OC1_SetConfig+0xdc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10c      	bne.n	8008e4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0308 	bic.w	r3, r3, #8
 8008e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f023 0304 	bic.w	r3, r3, #4
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <TIM_OC1_SetConfig+0xd8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d003      	beq.n	8008e5e <TIM_OC1_SetConfig+0x8e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a14      	ldr	r2, [pc, #80]	; (8008eac <TIM_OC1_SetConfig+0xdc>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d111      	bne.n	8008e82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	621a      	str	r2, [r3, #32]
}
 8008e9c:	bf00      	nop
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	40010000 	.word	0x40010000
 8008eac:	40010400 	.word	0x40010400

08008eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0210 	bic.w	r2, r3, #16
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 0320 	bic.w	r3, r3, #32
 8008efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <TIM_OC2_SetConfig+0xe4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC2_SetConfig+0x68>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <TIM_OC2_SetConfig+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d10d      	bne.n	8008f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC2_SetConfig+0xe4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_OC2_SetConfig+0x94>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC2_SetConfig+0xe8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d113      	bne.n	8008f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400

08008f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0303 	bic.w	r3, r3, #3
 8008fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a21      	ldr	r2, [pc, #132]	; (800907c <TIM_OC3_SetConfig+0xe0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <TIM_OC3_SetConfig+0x66>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a20      	ldr	r2, [pc, #128]	; (8009080 <TIM_OC3_SetConfig+0xe4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10d      	bne.n	800901e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800901c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a16      	ldr	r2, [pc, #88]	; (800907c <TIM_OC3_SetConfig+0xe0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d003      	beq.n	800902e <TIM_OC3_SetConfig+0x92>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <TIM_OC3_SetConfig+0xe4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d113      	bne.n	8009056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800903c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	621a      	str	r2, [r3, #32]
}
 8009070:	bf00      	nop
 8009072:	371c      	adds	r7, #28
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400

08009084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	031b      	lsls	r3, r3, #12
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a12      	ldr	r2, [pc, #72]	; (8009128 <TIM_OC4_SetConfig+0xa4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d003      	beq.n	80090ec <TIM_OC4_SetConfig+0x68>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a11      	ldr	r2, [pc, #68]	; (800912c <TIM_OC4_SetConfig+0xa8>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d109      	bne.n	8009100 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	019b      	lsls	r3, r3, #6
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000
 800912c:	40010400 	.word	0x40010400

08009130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800915a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f023 030a 	bic.w	r3, r3, #10
 800916c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	621a      	str	r2, [r3, #32]
}
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800918e:	b480      	push	{r7}
 8009190:	b087      	sub	sp, #28
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f023 0210 	bic.w	r2, r3, #16
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	031b      	lsls	r3, r3, #12
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	f043 0307 	orr.w	r3, r3, #7
 8009210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	609a      	str	r2, [r3, #8]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800923e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	021a      	lsls	r2, r3, #8
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	431a      	orrs	r2, r3
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4313      	orrs	r3, r2
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	609a      	str	r2, [r3, #8]
}
 8009258:	bf00      	nop
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f003 031f 	and.w	r3, r3, #31
 8009276:	2201      	movs	r2, #1
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	43db      	mvns	r3, r3
 8009286:	401a      	ands	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6a1a      	ldr	r2, [r3, #32]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 031f 	and.w	r3, r3, #31
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	fa01 f303 	lsl.w	r3, r1, r3
 800929c:	431a      	orrs	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	621a      	str	r2, [r3, #32]
}
 80092a2:	bf00      	nop
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e05a      	b.n	800937e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a21      	ldr	r2, [pc, #132]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d022      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009314:	d01d      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1d      	ldr	r2, [pc, #116]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d018      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1b      	ldr	r2, [pc, #108]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d013      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1a      	ldr	r2, [pc, #104]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00e      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a18      	ldr	r2, [pc, #96]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d009      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a17      	ldr	r2, [pc, #92]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d004      	beq.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a15      	ldr	r2, [pc, #84]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d10c      	bne.n	800936c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4313      	orrs	r3, r2
 8009362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	40010000 	.word	0x40010000
 8009390:	40000400 	.word	0x40000400
 8009394:	40000800 	.word	0x40000800
 8009398:	40000c00 	.word	0x40000c00
 800939c:	40010400 	.word	0x40010400
 80093a0:	40014000 	.word	0x40014000
 80093a4:	40001800 	.word	0x40001800

080093a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d0:	b084      	sub	sp, #16
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	f107 001c 	add.w	r0, r7, #28
 80093de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d122      	bne.n	800942e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80093fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d105      	bne.n	8009422 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f94a 	bl	80096bc <USB_CoreReset>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	e01a      	b.n	8009464 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f93e 	bl	80096bc <USB_CoreReset>
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
 8009456:	e005      	b.n	8009464 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10b      	bne.n	8009482 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f043 0206 	orr.w	r2, r3, #6
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f043 0220 	orr.w	r2, r3, #32
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800948e:	b004      	add	sp, #16
 8009490:	4770      	bx	lr

08009492 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f043 0201 	orr.w	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f023 0201 	bic.w	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d106      	bne.n	8009502 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	e00b      	b.n	800951a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60da      	str	r2, [r3, #12]
 8009514:	e001      	b.n	800951a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e003      	b.n	8009522 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800951a:	2032      	movs	r0, #50	; 0x32
 800951c:	f7f9 ff0e 	bl	800333c <HAL_Delay>

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	019b      	lsls	r3, r3, #6
 800953e:	f043 0220 	orr.w	r2, r3, #32
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4a09      	ldr	r2, [pc, #36]	; (8009574 <USB_FlushTxFifo+0x48>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d901      	bls.n	8009558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e006      	b.n	8009566 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b20      	cmp	r3, #32
 8009562:	d0f0      	beq.n	8009546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	00030d40 	.word	0x00030d40

08009578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2210      	movs	r2, #16
 8009588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a09      	ldr	r2, [pc, #36]	; (80095b8 <USB_FlushRxFifo+0x40>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d901      	bls.n	800959c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e006      	b.n	80095aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d0f0      	beq.n	800958a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	00030d40 	.word	0x00030d40

080095bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095bc:	b480      	push	{r7}
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4611      	mov	r1, r2
 80095c8:	461a      	mov	r2, r3
 80095ca:	460b      	mov	r3, r1
 80095cc:	71fb      	strb	r3, [r7, #7]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80095da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d11a      	bne.n	8009618 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095e2:	88bb      	ldrh	r3, [r7, #4]
 80095e4:	3303      	adds	r3, #3
 80095e6:	089b      	lsrs	r3, r3, #2
 80095e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80095ea:	2300      	movs	r3, #0
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e00f      	b.n	8009610 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	031a      	lsls	r2, r3, #12
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	461a      	mov	r2, r3
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	3304      	adds	r3, #4
 8009608:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	3301      	adds	r3, #1
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	429a      	cmp	r2, r3
 8009616:	d3eb      	bcc.n	80095f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3724      	adds	r7, #36	; 0x24
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009626:	b480      	push	{r7}
 8009628:	b089      	sub	sp, #36	; 0x24
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	3303      	adds	r3, #3
 8009640:	089b      	lsrs	r3, r3, #2
 8009642:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009644:	2300      	movs	r3, #0
 8009646:	61bb      	str	r3, [r7, #24]
 8009648:	e00b      	b.n	8009662 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	601a      	str	r2, [r3, #0]
    pDest++;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	3304      	adds	r3, #4
 800965a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	3301      	adds	r3, #1
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d3ef      	bcc.n	800964a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800966a:	69fb      	ldr	r3, [r7, #28]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3724      	adds	r7, #36	; 0x24
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4013      	ands	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	f003 0301 	and.w	r3, r3, #1
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a13      	ldr	r2, [pc, #76]	; (8009720 <USB_CoreReset+0x64>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d901      	bls.n	80096da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e01b      	b.n	8009712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	daf2      	bge.n	80096c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f043 0201 	orr.w	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3301      	adds	r3, #1
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4a09      	ldr	r2, [pc, #36]	; (8009720 <USB_CoreReset+0x64>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d901      	bls.n	8009704 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e006      	b.n	8009712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b01      	cmp	r3, #1
 800970e:	d0f0      	beq.n	80096f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	00030d40 	.word	0x00030d40

08009724 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009724:	b084      	sub	sp, #16
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	f107 001c 	add.w	r0, r7, #28
 8009732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009740:	461a      	mov	r2, r3
 8009742:	2300      	movs	r3, #0
 8009744:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009772:	2b00      	cmp	r3, #0
 8009774:	d018      	beq.n	80097a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	2b01      	cmp	r3, #1
 800977a:	d10a      	bne.n	8009792 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800978a:	f043 0304 	orr.w	r3, r3, #4
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e014      	b.n	80097bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097a0:	f023 0304 	bic.w	r3, r3, #4
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	e009      	b.n	80097bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097b6:	f023 0304 	bic.w	r3, r3, #4
 80097ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80097bc:	2110      	movs	r1, #16
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff feb4 	bl	800952c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fed7 	bl	8009578 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	e015      	b.n	80097fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097dc:	461a      	mov	r2, r3
 80097de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f0:	461a      	mov	r2, r3
 80097f2:	2300      	movs	r3, #0
 80097f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d3e5      	bcc.n	80097d0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009804:	2101      	movs	r1, #1
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f8ac 	bl	8009964 <USB_DriveVbus>

  HAL_Delay(200U);
 800980c:	20c8      	movs	r0, #200	; 0xc8
 800980e:	f7f9 fd95 	bl	800333c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800981e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009832:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a14      	ldr	r2, [pc, #80]	; (8009888 <USB_HostInit+0x164>)
 8009838:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a13      	ldr	r2, [pc, #76]	; (800988c <USB_HostInit+0x168>)
 800983e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009842:	e009      	b.n	8009858 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2280      	movs	r2, #128	; 0x80
 8009848:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a10      	ldr	r2, [pc, #64]	; (8009890 <USB_HostInit+0x16c>)
 800984e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a10      	ldr	r2, [pc, #64]	; (8009894 <USB_HostInit+0x170>)
 8009854:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f043 0210 	orr.w	r2, r3, #16
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <USB_HostInit+0x174>)
 8009870:	4313      	orrs	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009882:	b004      	add	sp, #16
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	01000200 	.word	0x01000200
 800988c:	00e00300 	.word	0x00e00300
 8009890:	00600080 	.word	0x00600080
 8009894:	004000e0 	.word	0x004000e0
 8009898:	a3200008 	.word	0xa3200008

0800989c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80098d4:	4313      	orrs	r3, r2
 80098d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80098d8:	78fb      	ldrb	r3, [r7, #3]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d107      	bne.n	80098ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e4:	461a      	mov	r2, r3
 80098e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80098ea:	6053      	str	r3, [r2, #4]
 80098ec:	e009      	b.n	8009902 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d106      	bne.n	8009902 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098fa:	461a      	mov	r2, r3
 80098fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8009900:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800993a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009940:	2064      	movs	r0, #100	; 0x64
 8009942:	f7f9 fcfb 	bl	800333c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800994e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009952:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009954:	200a      	movs	r0, #10
 8009956:	f7f9 fcf1 	bl	800333c <HAL_Delay>

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009988:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <USB_DriveVbus+0x44>
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d106      	bne.n	80099a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b2:	d109      	bne.n	80099c8 <USB_DriveVbus+0x64>
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d106      	bne.n	80099c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	0c5b      	lsrs	r3, r3, #17
 80099f4:	f003 0303 	and.w	r3, r3, #3
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	b29b      	uxth	r3, r3
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
	...

08009a28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	4608      	mov	r0, r1
 8009a32:	4611      	mov	r1, r2
 8009a34:	461a      	mov	r2, r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	70fb      	strb	r3, [r7, #3]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70bb      	strb	r3, [r7, #2]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a56:	461a      	mov	r2, r3
 8009a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d87e      	bhi.n	8009b64 <USB_HC_Init+0x13c>
 8009a66:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <USB_HC_Init+0x44>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009a7d 	.word	0x08009a7d
 8009a70:	08009b27 	.word	0x08009b27
 8009a74:	08009a7d 	.word	0x08009a7d
 8009a78:	08009ae9 	.word	0x08009ae9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009a8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	da10      	bge.n	8009aba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	0151      	lsls	r1, r2, #5
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	440a      	add	r2, r1
 8009aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ab8:	e057      	b.n	8009b6a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d051      	beq.n	8009b6a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	0151      	lsls	r1, r2, #5
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	440a      	add	r2, r1
 8009adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009ae4:	60d3      	str	r3, [r2, #12]
      break;
 8009ae6:	e040      	b.n	8009b6a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af4:	461a      	mov	r2, r3
 8009af6:	f240 639d 	movw	r3, #1693	; 0x69d
 8009afa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009afc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	da34      	bge.n	8009b6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	78fa      	ldrb	r2, [r7, #3]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b22:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b24:	e023      	b.n	8009b6e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b32:	461a      	mov	r2, r3
 8009b34:	f240 2325 	movw	r3, #549	; 0x225
 8009b38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da17      	bge.n	8009b72 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	78fa      	ldrb	r2, [r7, #3]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b5c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b60:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b62:	e006      	b.n	8009b72 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	77fb      	strb	r3, [r7, #31]
      break;
 8009b68:	e004      	b.n	8009b74 <USB_HC_Init+0x14c>
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e002      	b.n	8009b74 <USB_HC_Init+0x14c>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e000      	b.n	8009b74 <USB_HC_Init+0x14c>
      break;
 8009b72:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	2101      	movs	r1, #1
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	6939      	ldr	r1, [r7, #16]
 8009b8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	da03      	bge.n	8009bae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	e001      	b.n	8009bb2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff ff0f 	bl	80099d6 <USB_GetHostSpeed>
 8009bb8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d106      	bne.n	8009bd0 <USB_HC_Init+0x1a8>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d003      	beq.n	8009bd0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	e001      	b.n	8009bd4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bd4:	787b      	ldrb	r3, [r7, #1]
 8009bd6:	059b      	lsls	r3, r3, #22
 8009bd8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bdc:	78bb      	ldrb	r3, [r7, #2]
 8009bde:	02db      	lsls	r3, r3, #11
 8009be0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009be4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bea:	049b      	lsls	r3, r3, #18
 8009bec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bf0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bf2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bf8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	0159      	lsls	r1, r3, #5
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	440b      	add	r3, r1
 8009c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c0a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c10:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d10f      	bne.n	8009c3a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c38:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3720      	adds	r7, #32
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08c      	sub	sp, #48	; 0x30
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c60:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d02d      	beq.n	8009cca <USB_HC_StartXfer+0x86>
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d129      	bne.n	8009cca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d117      	bne.n	8009cac <USB_HC_StartXfer+0x68>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	79db      	ldrb	r3, [r3, #7]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <USB_HC_StartXfer+0x48>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	79db      	ldrb	r3, [r3, #7]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d10f      	bne.n	8009cac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	6a3a      	ldr	r2, [r7, #32]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009caa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <USB_HC_StartXfer+0x86>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	795b      	ldrb	r3, [r3, #5]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d107      	bne.n	8009cca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fa2f 	bl	800a124 <USB_DoPing>
      return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e0f8      	b.n	8009ebc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d018      	beq.n	8009d04 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	8912      	ldrh	r2, [r2, #8]
 8009cda:	4413      	add	r3, r2
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	8912      	ldrh	r2, [r2, #8]
 8009ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ce8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009cea:	8b7b      	ldrh	r3, [r7, #26]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d90b      	bls.n	8009d08 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009cf0:	8b7b      	ldrh	r3, [r7, #26]
 8009cf2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009cf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	8912      	ldrh	r2, [r2, #8]
 8009cfa:	fb02 f203 	mul.w	r2, r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	611a      	str	r2, [r3, #16]
 8009d02:	e001      	b.n	8009d08 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009d04:	2301      	movs	r3, #1
 8009d06:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	78db      	ldrb	r3, [r3, #3]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	8912      	ldrh	r2, [r2, #8]
 8009d16:	fb02 f203 	mul.w	r2, r2, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	611a      	str	r2, [r3, #16]
 8009d1e:	e003      	b.n	8009d28 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	695a      	ldr	r2, [r3, #20]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d32:	04d9      	lsls	r1, r3, #19
 8009d34:	4b63      	ldr	r3, [pc, #396]	; (8009ec4 <USB_HC_StartXfer+0x280>)
 8009d36:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d38:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	7a9b      	ldrb	r3, [r3, #10]
 8009d3e:	075b      	lsls	r3, r3, #29
 8009d40:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d44:	69f9      	ldr	r1, [r7, #28]
 8009d46:	0148      	lsls	r0, r1, #5
 8009d48:	6a39      	ldr	r1, [r7, #32]
 8009d4a:	4401      	add	r1, r0
 8009d4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d50:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d52:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	68d9      	ldr	r1, [r3, #12]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf0c      	ite	eq
 8009d7e:	2301      	moveq	r3, #1
 8009d80:	2300      	movne	r3, #0
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	0151      	lsls	r1, r2, #5
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	440a      	add	r2, r1
 8009d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009da0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009da4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	7e7b      	ldrb	r3, [r7, #25]
 8009db6:	075b      	lsls	r3, r3, #29
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	0148      	lsls	r0, r1, #5
 8009dbc:	6a39      	ldr	r1, [r7, #32]
 8009dbe:	4401      	add	r1, r0
 8009dc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dde:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	78db      	ldrb	r3, [r3, #3]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	e003      	b.n	8009dfa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009df8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e00:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0e:	461a      	mov	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e04e      	b.n	8009ebc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	78db      	ldrb	r3, [r3, #3]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d149      	bne.n	8009eba <USB_HC_StartXfer+0x276>
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d045      	beq.n	8009eba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	79db      	ldrb	r3, [r3, #7]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d830      	bhi.n	8009e98 <USB_HC_StartXfer+0x254>
 8009e36:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <USB_HC_StartXfer+0x1f8>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009e71 	.word	0x08009e71
 8009e44:	08009e4d 	.word	0x08009e4d
 8009e48:	08009e71 	.word	0x08009e71
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	3303      	adds	r3, #3
 8009e52:	089b      	lsrs	r3, r3, #2
 8009e54:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009e56:	8afa      	ldrh	r2, [r7, #22]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d91c      	bls.n	8009e9c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	f043 0220 	orr.w	r2, r3, #32
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e6e:	e015      	b.n	8009e9c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	3303      	adds	r3, #3
 8009e76:	089b      	lsrs	r3, r3, #2
 8009e78:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e7a:	8afa      	ldrh	r2, [r7, #22]
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d90a      	bls.n	8009ea0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e96:	e003      	b.n	8009ea0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009e98:	bf00      	nop
 8009e9a:	e002      	b.n	8009ea2 <USB_HC_StartXfer+0x25e>
        break;
 8009e9c:	bf00      	nop
 8009e9e:	e000      	b.n	8009ea2 <USB_HC_StartXfer+0x25e>
        break;
 8009ea0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	68d9      	ldr	r1, [r3, #12]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	785a      	ldrb	r2, [r3, #1]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	9000      	str	r0, [sp, #0]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff fb81 	bl	80095bc <USB_WritePacket>
  }

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3728      	adds	r7, #40	; 0x28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	1ff80000 	.word	0x1ff80000

08009ec8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	b29b      	uxth	r3, r3
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b089      	sub	sp, #36	; 0x24
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	0c9b      	lsrs	r3, r3, #18
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	0fdb      	lsrs	r3, r3, #31
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d104      	bne.n	8009f44 <USB_HC_Halt+0x5a>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e0e8      	b.n	800a116 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <USB_HC_Halt+0x66>
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d173      	bne.n	800a038 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f6e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 80cb 	bne.w	800a114 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d143      	bne.n	800a012 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	0151      	lsls	r1, r2, #5
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	440a      	add	r2, r1
 8009fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fe8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	3301      	adds	r3, #1
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ff6:	d81d      	bhi.n	800a034 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a00e:	d0ec      	beq.n	8009fea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a010:	e080      	b.n	800a114 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	440a      	add	r2, r1
 800a028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a02c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a030:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a032:	e06f      	b.n	800a114 <USB_HC_Halt+0x22a>
            break;
 800a034:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a036:	e06d      	b.n	800a114 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a056:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d143      	bne.n	800a0f0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a086:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0d4:	d81d      	bhi.n	800a112 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ec:	d0ec      	beq.n	800a0c8 <USB_HC_Halt+0x1de>
 800a0ee:	e011      	b.n	800a114 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	440a      	add	r2, r1
 800a106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a10a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	e000      	b.n	800a114 <USB_HC_Halt+0x22a>
          break;
 800a112:	bf00      	nop
    }
  }

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3724      	adds	r7, #36	; 0x24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a138:	2301      	movs	r3, #1
 800a13a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	04da      	lsls	r2, r3, #19
 800a140:	4b15      	ldr	r3, [pc, #84]	; (800a198 <USB_DoPing+0x74>)
 800a142:	4013      	ands	r3, r2
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	0151      	lsls	r1, r2, #5
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	440a      	add	r2, r1
 800a14c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a154:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a16c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a174:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a182:	461a      	mov	r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	1ff80000 	.word	0x1ff80000

0800a19c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff f981 	bl	80094b4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a1b2:	2110      	movs	r1, #16
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff f9b9 	bl	800952c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff f9dc 	bl	8009578 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	613b      	str	r3, [r7, #16]
 800a1c4:	e01f      	b.n	800a206 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3301      	adds	r3, #1
 800a204:	613b      	str	r3, [r7, #16]
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b0f      	cmp	r3, #15
 800a20a:	d9dc      	bls.n	800a1c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	e034      	b.n	800a27c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a228:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a230:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a238:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a246:	461a      	mov	r2, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	3301      	adds	r3, #1
 800a250:	617b      	str	r3, [r7, #20]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a258:	d80c      	bhi.n	800a274 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a26c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a270:	d0ec      	beq.n	800a24c <USB_StopHost+0xb0>
 800a272:	e000      	b.n	800a276 <USB_StopHost+0xda>
        break;
 800a274:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	3301      	adds	r3, #1
 800a27a:	613b      	str	r3, [r7, #16]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	2b0f      	cmp	r3, #15
 800a280:	d9c7      	bls.n	800a212 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a288:	461a      	mov	r2, r3
 800a28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a28e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a296:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff f8fa 	bl	8009492 <USB_EnableGlobalInt>

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a2a8:	b590      	push	{r4, r7, lr}
 800a2aa:	b089      	sub	sp, #36	; 0x24
 800a2ac:	af04      	add	r7, sp, #16
 800a2ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	2102      	movs	r1, #2
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fc66 	bl	800ab88 <USBH_FindInterface>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	2bff      	cmp	r3, #255	; 0xff
 800a2c4:	d002      	beq.n	800a2cc <USBH_CDC_InterfaceInit+0x24>
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d901      	bls.n	800a2d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e13d      	b.n	800a54c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fc3b 	bl	800ab50 <USBH_SelectInterface>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e131      	b.n	800a54c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a2ee:	2050      	movs	r0, #80	; 0x50
 800a2f0:	f002 fa00 	bl	800c6f4 <malloc>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	e11f      	b.n	800a54c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a30c:	2250      	movs	r2, #80	; 0x50
 800a30e:	2100      	movs	r1, #0
 800a310:	68b8      	ldr	r0, [r7, #8]
 800a312:	f002 f9ff 	bl	800c714 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	211a      	movs	r1, #26
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	4413      	add	r3, r2
 800a322:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	b25b      	sxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da15      	bge.n	800a35a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	211a      	movs	r1, #26
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	4413      	add	r3, r2
 800a33a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	211a      	movs	r1, #26
 800a34a:	fb01 f303 	mul.w	r3, r1, r3
 800a34e:	4413      	add	r3, r2
 800a350:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 fe32 	bl	800bfca <USBH_AllocPipe>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	7819      	ldrb	r1, [r3, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	7858      	ldrb	r0, [r3, #1]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	8952      	ldrh	r2, [r2, #10]
 800a386:	9202      	str	r2, [sp, #8]
 800a388:	2203      	movs	r2, #3
 800a38a:	9201      	str	r2, [sp, #4]
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4623      	mov	r3, r4
 800a390:	4602      	mov	r2, r0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 fdea 	bl	800bf6c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f002 f8f9 	bl	800c598 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	210a      	movs	r1, #10
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fbeb 	bl	800ab88 <USBH_FindInterface>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	2bff      	cmp	r3, #255	; 0xff
 800a3ba:	d002      	beq.n	800a3c2 <USBH_CDC_InterfaceInit+0x11a>
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d901      	bls.n	800a3c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e0c2      	b.n	800a54c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	211a      	movs	r1, #26
 800a3cc:	fb01 f303 	mul.w	r3, r1, r3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da16      	bge.n	800a40c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	211a      	movs	r1, #26
 800a3e4:	fb01 f303 	mul.w	r3, r1, r3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	211a      	movs	r1, #26
 800a3fa:	fb01 f303 	mul.w	r3, r1, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a404:	881a      	ldrh	r2, [r3, #0]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	835a      	strh	r2, [r3, #26]
 800a40a:	e015      	b.n	800a438 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	211a      	movs	r1, #26
 800a412:	fb01 f303 	mul.w	r3, r1, r3
 800a416:	4413      	add	r3, r2
 800a418:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	211a      	movs	r1, #26
 800a428:	fb01 f303 	mul.w	r3, r1, r3
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a432:	881a      	ldrh	r2, [r3, #0]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	211a      	movs	r1, #26
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	4413      	add	r3, r2
 800a444:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	da16      	bge.n	800a47e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	211a      	movs	r1, #26
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a460:	781a      	ldrb	r2, [r3, #0]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	211a      	movs	r1, #26
 800a46c:	fb01 f303 	mul.w	r3, r1, r3
 800a470:	4413      	add	r3, r2
 800a472:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a476:	881a      	ldrh	r2, [r3, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	835a      	strh	r2, [r3, #26]
 800a47c:	e015      	b.n	800a4aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	211a      	movs	r1, #26
 800a484:	fb01 f303 	mul.w	r3, r1, r3
 800a488:	4413      	add	r3, r2
 800a48a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a48e:	781a      	ldrb	r2, [r3, #0]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	211a      	movs	r1, #26
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4a4:	881a      	ldrh	r2, [r3, #0]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	7b9b      	ldrb	r3, [r3, #14]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fd8a 	bl	800bfca <USBH_AllocPipe>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	7bdb      	ldrb	r3, [r3, #15]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fd80 	bl	800bfca <USBH_AllocPipe>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	7b59      	ldrb	r1, [r3, #13]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	7b98      	ldrb	r0, [r3, #14]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	8b12      	ldrh	r2, [r2, #24]
 800a4ea:	9202      	str	r2, [sp, #8]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	9201      	str	r2, [sp, #4]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 fd38 	bl	800bf6c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	7b19      	ldrb	r1, [r3, #12]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	7bd8      	ldrb	r0, [r3, #15]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	8b52      	ldrh	r2, [r2, #26]
 800a514:	9202      	str	r2, [sp, #8]
 800a516:	2202      	movs	r2, #2
 800a518:	9201      	str	r2, [sp, #4]
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	4623      	mov	r3, r4
 800a51e:	4602      	mov	r2, r0
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fd23 	bl	800bf6c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	7b5b      	ldrb	r3, [r3, #13]
 800a532:	2200      	movs	r2, #0
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f002 f82e 	bl	800c598 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	7b1b      	ldrb	r3, [r3, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f002 f827 	bl	800c598 <USBH_LL_SetToggle>

  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	bd90      	pop	{r4, r7, pc}

0800a554 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00e      	beq.n	800a58c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 fd18 	bl	800bfaa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 fd43 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	7b1b      	ldrb	r3, [r3, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00e      	beq.n	800a5b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	7b1b      	ldrb	r3, [r3, #12]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fd05 	bl	800bfaa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	7b1b      	ldrb	r3, [r3, #12]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f001 fd30 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	7b5b      	ldrb	r3, [r3, #13]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00e      	beq.n	800a5d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	7b5b      	ldrb	r3, [r3, #13]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 fcf2 	bl	800bfaa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	7b5b      	ldrb	r3, [r3, #13]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 fd1d 	bl	800c00c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f002 f889 	bl	800c704 <free>
    phost->pActiveClass->pData = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3340      	adds	r3, #64	; 0x40
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f8b1 	bl	800a786 <GetLineCoding>
 800a624:	4603      	mov	r3, r0
 800a626:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a628:	7afb      	ldrb	r3, [r7, #11]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d105      	bne.n	800a63a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a634:	2102      	movs	r1, #2
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a63a:	7afb      	ldrb	r3, [r7, #11]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a664:	2b04      	cmp	r3, #4
 800a666:	d877      	bhi.n	800a758 <USBH_CDC_Process+0x114>
 800a668:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <USBH_CDC_Process+0x2c>)
 800a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a685 	.word	0x0800a685
 800a674:	0800a68b 	.word	0x0800a68b
 800a678:	0800a6bb 	.word	0x0800a6bb
 800a67c:	0800a72f 	.word	0x0800a72f
 800a680:	0800a73d 	.word	0x0800a73d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]
      break;
 800a688:	e06d      	b.n	800a766 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f897 	bl	800a7c4 <SetLineCoding>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d104      	bne.n	800a6aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6a8:	e058      	b.n	800a75c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d055      	beq.n	800a75c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2204      	movs	r2, #4
 800a6b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a6b8:	e050      	b.n	800a75c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	3340      	adds	r3, #64	; 0x40
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f860 	bl	800a786 <GetLineCoding>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d126      	bne.n	800a71e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d13b      	bne.n	800a760 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d133      	bne.n	800a760 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a702:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a704:	429a      	cmp	r2, r3
 800a706:	d12b      	bne.n	800a760 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a710:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a712:	429a      	cmp	r2, r3
 800a714:	d124      	bne.n	800a760 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f958 	bl	800a9cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a71c:	e020      	b.n	800a760 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d01d      	beq.n	800a760 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2204      	movs	r2, #4
 800a728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a72c:	e018      	b.n	800a760 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f867 	bl	800a802 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8da 	bl	800a8ee <CDC_ProcessReception>
      break;
 800a73a:	e014      	b.n	800a766 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a73c:	2100      	movs	r1, #0
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 ffe3 	bl	800b70a <USBH_ClrFeature>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a756:	e005      	b.n	800a764 <USBH_CDC_Process+0x120>

    default:
      break;
 800a758:	bf00      	nop
 800a75a:	e004      	b.n	800a766 <USBH_CDC_Process+0x122>
      break;
 800a75c:	bf00      	nop
 800a75e:	e002      	b.n	800a766 <USBH_CDC_Process+0x122>
      break;
 800a760:	bf00      	nop
 800a762:	e000      	b.n	800a766 <USBH_CDC_Process+0x122>
      break;
 800a764:	bf00      	nop

  }

  return status;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	22a1      	movs	r2, #161	; 0xa1
 800a794:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2221      	movs	r2, #33	; 0x21
 800a79a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2207      	movs	r2, #7
 800a7ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2207      	movs	r2, #7
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f988 	bl	800baca <USBH_CtlReq>
 800a7ba:	4603      	mov	r3, r0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2221      	movs	r2, #33	; 0x21
 800a7d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2207      	movs	r2, #7
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 f969 	bl	800baca <USBH_CtlReq>
 800a7f8:	4603      	mov	r3, r0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af02      	add	r7, sp, #8
 800a808:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a814:	2300      	movs	r3, #0
 800a816:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d002      	beq.n	800a828 <CDC_ProcessTransmission+0x26>
 800a822:	2b02      	cmp	r3, #2
 800a824:	d023      	beq.n	800a86e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a826:	e05e      	b.n	800a8e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	8b12      	ldrh	r2, [r2, #24]
 800a830:	4293      	cmp	r3, r2
 800a832:	d90b      	bls.n	800a84c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	69d9      	ldr	r1, [r3, #28]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8b1a      	ldrh	r2, [r3, #24]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	7b5b      	ldrb	r3, [r3, #13]
 800a840:	2001      	movs	r0, #1
 800a842:	9000      	str	r0, [sp, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 fb4e 	bl	800bee6 <USBH_BulkSendData>
 800a84a:	e00b      	b.n	800a864 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a854:	b29a      	uxth	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	7b5b      	ldrb	r3, [r3, #13]
 800a85a:	2001      	movs	r0, #1
 800a85c:	9000      	str	r0, [sp, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f001 fb41 	bl	800bee6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a86c:	e03b      	b.n	800a8e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	7b5b      	ldrb	r3, [r3, #13]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f001 fe65 	bl	800c544 <USBH_LL_GetURBState>
 800a87a:	4603      	mov	r3, r0
 800a87c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a87e:	7afb      	ldrb	r3, [r7, #11]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d128      	bne.n	800a8d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	8b12      	ldrh	r2, [r2, #24]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d90e      	bls.n	800a8ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	8b12      	ldrh	r2, [r2, #24]
 800a898:	1a9a      	subs	r2, r3, r2
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	8b12      	ldrh	r2, [r2, #24]
 800a8a6:	441a      	add	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	61da      	str	r2, [r3, #28]
 800a8ac:	e002      	b.n	800a8b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8c4:	e00e      	b.n	800a8e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f868 	bl	800a9a4 <USBH_CDC_TransmitCallback>
      break;
 800a8d4:	e006      	b.n	800a8e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a8d6:	7afb      	ldrb	r3, [r7, #11]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d103      	bne.n	800a8e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8e4:	bf00      	nop
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b086      	sub	sp, #24
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a900:	2300      	movs	r3, #0
 800a902:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d002      	beq.n	800a914 <CDC_ProcessReception+0x26>
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d00e      	beq.n	800a930 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a912:	e043      	b.n	800a99c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	6a19      	ldr	r1, [r3, #32]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	8b5a      	ldrh	r2, [r3, #26]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	7b1b      	ldrb	r3, [r3, #12]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 fb05 	bl	800bf30 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2204      	movs	r2, #4
 800a92a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a92e:	e035      	b.n	800a99c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	7b1b      	ldrb	r3, [r3, #12]
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 fe04 	bl	800c544 <USBH_LL_GetURBState>
 800a93c:	4603      	mov	r3, r0
 800a93e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a940:	7cfb      	ldrb	r3, [r7, #19]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d129      	bne.n	800a99a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	7b1b      	ldrb	r3, [r3, #12]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 fd67 	bl	800c420 <USBH_LL_GetLastXferSize>
 800a952:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d016      	beq.n	800a98c <CDC_ProcessReception+0x9e>
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	8b5b      	ldrh	r3, [r3, #26]
 800a962:	461a      	mov	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4293      	cmp	r3, r2
 800a968:	d910      	bls.n	800a98c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	1ad2      	subs	r2, r2, r3
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	441a      	add	r2, r3
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2203      	movs	r2, #3
 800a986:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a98a:	e006      	b.n	800a99a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f80f 	bl	800a9b8 <USBH_CDC_ReceiveCallback>
      break;
 800a99a:	bf00      	nop
  }
}
 800a99c:	bf00      	nop
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e029      	b.n	800aa4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	79fa      	ldrb	r2, [r7, #7]
 800a9fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f81f 	bl	800aa54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f001 fc37 	bl	800c2b8 <USBH_LL_Init>

  return USBH_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e009      	b.n	800aa7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	33e0      	adds	r3, #224	; 0xe0
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	2200      	movs	r2, #0
 800aa72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b0e      	cmp	r3, #14
 800aa7e:	d9f2      	bls.n	800aa66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e009      	b.n	800aa9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaa0:	d3f1      	bcc.n	800aa86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2240      	movs	r2, #64	; 0x40
 800aac6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d016      	beq.n	800ab3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10e      	bne.n	800ab38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab20:	1c59      	adds	r1, r3, #1
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	33de      	adds	r3, #222	; 0xde
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]
 800ab36:	e004      	b.n	800ab42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab38:	2302      	movs	r3, #2
 800ab3a:	73fb      	strb	r3, [r7, #15]
 800ab3c:	e001      	b.n	800ab42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d204      	bcs.n	800ab76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ab74:	e001      	b.n	800ab7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab76:	2302      	movs	r3, #2
 800ab78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	4608      	mov	r0, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	461a      	mov	r2, r3
 800ab96:	4603      	mov	r3, r0
 800ab98:	70fb      	strb	r3, [r7, #3]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70bb      	strb	r3, [r7, #2]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800abb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abb2:	e025      	b.n	800ac00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	221a      	movs	r2, #26
 800abb8:	fb02 f303 	mul.w	r3, r2, r3
 800abbc:	3308      	adds	r3, #8
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4413      	add	r3, r2
 800abc2:	3302      	adds	r3, #2
 800abc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	795b      	ldrb	r3, [r3, #5]
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d002      	beq.n	800abd6 <USBH_FindInterface+0x4e>
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	2bff      	cmp	r3, #255	; 0xff
 800abd4:	d111      	bne.n	800abfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abda:	78ba      	ldrb	r2, [r7, #2]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d002      	beq.n	800abe6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abe0:	78bb      	ldrb	r3, [r7, #2]
 800abe2:	2bff      	cmp	r3, #255	; 0xff
 800abe4:	d109      	bne.n	800abfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abea:	787a      	ldrb	r2, [r7, #1]
 800abec:	429a      	cmp	r2, r3
 800abee:	d002      	beq.n	800abf6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abf0:	787b      	ldrb	r3, [r7, #1]
 800abf2:	2bff      	cmp	r3, #255	; 0xff
 800abf4:	d101      	bne.n	800abfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	e006      	b.n	800ac08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abfa:	7dfb      	ldrb	r3, [r7, #23]
 800abfc:	3301      	adds	r3, #1
 800abfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d9d6      	bls.n	800abb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac06:	23ff      	movs	r3, #255	; 0xff
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	371c      	adds	r7, #28
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f001 fb87 	bl	800c330 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ac22:	2101      	movs	r1, #1
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f001 fca0 	bl	800c56a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af04      	add	r7, sp, #16
 800ac3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d102      	bne.n	800ac56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2203      	movs	r2, #3
 800ac54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b0b      	cmp	r3, #11
 800ac5e:	f200 81b3 	bhi.w	800afc8 <USBH_Process+0x394>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <USBH_Process+0x34>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac99 	.word	0x0800ac99
 800ac6c:	0800accb 	.word	0x0800accb
 800ac70:	0800ad33 	.word	0x0800ad33
 800ac74:	0800af63 	.word	0x0800af63
 800ac78:	0800afc9 	.word	0x0800afc9
 800ac7c:	0800add7 	.word	0x0800add7
 800ac80:	0800af09 	.word	0x0800af09
 800ac84:	0800ae0d 	.word	0x0800ae0d
 800ac88:	0800ae2d 	.word	0x0800ae2d
 800ac8c:	0800ae4d 	.word	0x0800ae4d
 800ac90:	0800ae7b 	.word	0x0800ae7b
 800ac94:	0800af4b 	.word	0x0800af4b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8193 	beq.w	800afcc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800acac:	20c8      	movs	r0, #200	; 0xc8
 800acae:	f001 fca3 	bl	800c5f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fb99 	bl	800c3ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acc8:	e180      	b.n	800afcc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d107      	bne.n	800ace4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ace2:	e182      	b.n	800afea <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acee:	d914      	bls.n	800ad1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acf6:	3301      	adds	r3, #1
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d903      	bls.n	800ad12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	220d      	movs	r2, #13
 800ad0e:	701a      	strb	r2, [r3, #0]
      break;
 800ad10:	e16b      	b.n	800afea <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
      break;
 800ad18:	e167      	b.n	800afea <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad20:	f103 020a 	add.w	r2, r3, #10
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ad2a:	200a      	movs	r0, #10
 800ad2c:	f001 fc64 	bl	800c5f8 <USBH_Delay>
      break;
 800ad30:	e15b      	b.n	800afea <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad42:	2104      	movs	r1, #4
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad48:	2064      	movs	r0, #100	; 0x64
 800ad4a:	f001 fc55 	bl	800c5f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 fb24 	bl	800c39c <USBH_LL_GetSpeed>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2205      	movs	r2, #5
 800ad62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad64:	2100      	movs	r1, #0
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 f92f 	bl	800bfca <USBH_AllocPipe>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ad74:	2180      	movs	r1, #128	; 0x80
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 f927 	bl	800bfca <USBH_AllocPipe>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7919      	ldrb	r1, [r3, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad98:	b292      	uxth	r2, r2
 800ad9a:	9202      	str	r2, [sp, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	9201      	str	r2, [sp, #4]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4603      	mov	r3, r0
 800ada4:	2280      	movs	r2, #128	; 0x80
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f8e0 	bl	800bf6c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7959      	ldrb	r1, [r3, #5]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adc0:	b292      	uxth	r2, r2
 800adc2:	9202      	str	r2, [sp, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	9201      	str	r2, [sp, #4]
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4603      	mov	r3, r0
 800adcc:	2200      	movs	r2, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f001 f8cc 	bl	800bf6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800add4:	e109      	b.n	800afea <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f90c 	bl	800aff4 <USBH_HandleEnum>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f040 80f3 	bne.w	800afd0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d103      	bne.n	800ae04 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2208      	movs	r2, #8
 800ae00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae02:	e0e5      	b.n	800afd0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2207      	movs	r2, #7
 800ae08:	701a      	strb	r2, [r3, #0]
      break;
 800ae0a:	e0e1      	b.n	800afd0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80de 	beq.w	800afd4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2208      	movs	r2, #8
 800ae28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ae2a:	e0d3      	b.n	800afd4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fc20 	bl	800b67c <USBH_SetCfg>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f040 80ca 	bne.w	800afd8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2209      	movs	r2, #9
 800ae48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae4a:	e0c5      	b.n	800afd8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00b      	beq.n	800ae72 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fc30 	bl	800b6c2 <USBH_SetFeature>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f040 80b9 	bne.w	800afdc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	220a      	movs	r2, #10
 800ae6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae70:	e0b4      	b.n	800afdc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	220a      	movs	r2, #10
 800ae76:	701a      	strb	r2, [r3, #0]
      break;
 800ae78:	e0b0      	b.n	800afdc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 80ad 	beq.w	800afe0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
 800ae92:	e016      	b.n	800aec2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ae94:	7bfa      	ldrb	r2, [r7, #15]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	32de      	adds	r2, #222	; 0xde
 800ae9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9e:	791a      	ldrb	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d108      	bne.n	800aebc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aeaa:	7bfa      	ldrb	r2, [r7, #15]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	32de      	adds	r2, #222	; 0xde
 800aeb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aeba:	e005      	b.n	800aec8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	3301      	adds	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0e5      	beq.n	800ae94 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d016      	beq.n	800af00 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d109      	bne.n	800aef8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2206      	movs	r2, #6
 800aee8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aef0:	2103      	movs	r1, #3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aef6:	e073      	b.n	800afe0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	220d      	movs	r2, #13
 800aefc:	701a      	strb	r2, [r3, #0]
      break;
 800aefe:	e06f      	b.n	800afe0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	220d      	movs	r2, #13
 800af04:	701a      	strb	r2, [r3, #0]
      break;
 800af06:	e06b      	b.n	800afe0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d017      	beq.n	800af42 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
 800af1e:	4603      	mov	r3, r0
 800af20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	220b      	movs	r2, #11
 800af2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af30:	e058      	b.n	800afe4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d154      	bne.n	800afe4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	220d      	movs	r2, #13
 800af3e:	701a      	strb	r2, [r3, #0]
      break;
 800af40:	e050      	b.n	800afe4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	220d      	movs	r2, #13
 800af46:	701a      	strb	r2, [r3, #0]
      break;
 800af48:	e04c      	b.n	800afe4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d049      	beq.n	800afe8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	4798      	blx	r3
      }
      break;
 800af60:	e042      	b.n	800afe8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fd72 	bl	800aa54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af9e:	2105      	movs	r1, #5
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	d107      	bne.n	800afc0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fe2b 	bl	800ac14 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800afbe:	e014      	b.n	800afea <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f001 f9b5 	bl	800c330 <USBH_LL_Start>
      break;
 800afc6:	e010      	b.n	800afea <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800afc8:	bf00      	nop
 800afca:	e00e      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afcc:	bf00      	nop
 800afce:	e00c      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afd0:	bf00      	nop
 800afd2:	e00a      	b.n	800afea <USBH_Process+0x3b6>
    break;
 800afd4:	bf00      	nop
 800afd6:	e008      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afd8:	bf00      	nop
 800afda:	e006      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afdc:	bf00      	nop
 800afde:	e004      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afe0:	bf00      	nop
 800afe2:	e002      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afe4:	bf00      	nop
 800afe6:	e000      	b.n	800afea <USBH_Process+0x3b6>
      break;
 800afe8:	bf00      	nop
  }
  return USBH_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af04      	add	r7, sp, #16
 800affa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b000:	2301      	movs	r3, #1
 800b002:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	2b07      	cmp	r3, #7
 800b00a:	f200 81c1 	bhi.w	800b390 <USBH_HandleEnum+0x39c>
 800b00e:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <USBH_HandleEnum+0x20>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b035 	.word	0x0800b035
 800b018:	0800b0f3 	.word	0x0800b0f3
 800b01c:	0800b15d 	.word	0x0800b15d
 800b020:	0800b1eb 	.word	0x0800b1eb
 800b024:	0800b255 	.word	0x0800b255
 800b028:	0800b2c5 	.word	0x0800b2c5
 800b02c:	0800b30b 	.word	0x0800b30b
 800b030:	0800b351 	.word	0x0800b351
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b034:	2108      	movs	r1, #8
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa50 	bl	800b4dc <USBH_Get_DevDesc>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d130      	bne.n	800b0a8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	7919      	ldrb	r1, [r3, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b06a:	b292      	uxth	r2, r2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	9201      	str	r2, [sp, #4]
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	4603      	mov	r3, r0
 800b076:	2280      	movs	r2, #128	; 0x80
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 ff77 	bl	800bf6c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	7959      	ldrb	r1, [r3, #5]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b092:	b292      	uxth	r2, r2
 800b094:	9202      	str	r2, [sp, #8]
 800b096:	2200      	movs	r2, #0
 800b098:	9201      	str	r2, [sp, #4]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	4603      	mov	r3, r0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 ff63 	bl	800bf6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0a6:	e175      	b.n	800b394 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	f040 8172 	bne.w	800b394 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d903      	bls.n	800b0d2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	220d      	movs	r2, #13
 800b0ce:	701a      	strb	r2, [r3, #0]
      break;
 800b0d0:	e160      	b.n	800b394 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	795b      	ldrb	r3, [r3, #5]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 ff97 	bl	800c00c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	791b      	ldrb	r3, [r3, #4]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 ff91 	bl	800c00c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
      break;
 800b0f0:	e150      	b.n	800b394 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b0f2:	2112      	movs	r1, #18
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f9f1 	bl	800b4dc <USBH_Get_DevDesc>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d103      	bne.n	800b10c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b10a:	e145      	b.n	800b398 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	2b03      	cmp	r3, #3
 800b110:	f040 8142 	bne.w	800b398 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b11a:	3301      	adds	r3, #1
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d903      	bls.n	800b136 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	220d      	movs	r2, #13
 800b132:	701a      	strb	r2, [r3, #0]
      break;
 800b134:	e130      	b.n	800b398 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	795b      	ldrb	r3, [r3, #5]
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 ff65 	bl	800c00c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	791b      	ldrb	r3, [r3, #4]
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 ff5f 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
      break;
 800b15a:	e11d      	b.n	800b398 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b15c:	2101      	movs	r1, #1
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa68 	bl	800b634 <USBH_SetAddress>
 800b164:	4603      	mov	r3, r0
 800b166:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d132      	bne.n	800b1d4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b16e:	2002      	movs	r0, #2
 800b170:	f001 fa42 	bl	800c5f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2203      	movs	r2, #3
 800b180:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7919      	ldrb	r1, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b196:	b292      	uxth	r2, r2
 800b198:	9202      	str	r2, [sp, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	9201      	str	r2, [sp, #4]
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2280      	movs	r2, #128	; 0x80
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fee1 	bl	800bf6c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7959      	ldrb	r1, [r3, #5]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1be:	b292      	uxth	r2, r2
 800b1c0:	9202      	str	r2, [sp, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	9201      	str	r2, [sp, #4]
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fecd 	bl	800bf6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b1d2:	e0e3      	b.n	800b39c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	f040 80e0 	bne.w	800b39c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	220d      	movs	r2, #13
 800b1e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	705a      	strb	r2, [r3, #1]
      break;
 800b1e8:	e0d8      	b.n	800b39c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b1ea:	2109      	movs	r1, #9
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f99d 	bl	800b52c <USBH_Get_CfgDesc>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2204      	movs	r2, #4
 800b200:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b202:	e0cd      	b.n	800b3a0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b03      	cmp	r3, #3
 800b208:	f040 80ca 	bne.w	800b3a0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b212:	3301      	adds	r3, #1
 800b214:	b2da      	uxtb	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b222:	2b03      	cmp	r3, #3
 800b224:	d903      	bls.n	800b22e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	220d      	movs	r2, #13
 800b22a:	701a      	strb	r2, [r3, #0]
      break;
 800b22c:	e0b8      	b.n	800b3a0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	795b      	ldrb	r3, [r3, #5]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fee9 	bl	800c00c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	791b      	ldrb	r3, [r3, #4]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fee3 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
      break;
 800b252:	e0a5      	b.n	800b3a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f965 	bl	800b52c <USBH_Get_CfgDesc>
 800b262:	4603      	mov	r3, r0
 800b264:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d103      	bne.n	800b274 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2205      	movs	r2, #5
 800b270:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b272:	e097      	b.n	800b3a4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	2b03      	cmp	r3, #3
 800b278:	f040 8094 	bne.w	800b3a4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b282:	3301      	adds	r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b292:	2b03      	cmp	r3, #3
 800b294:	d903      	bls.n	800b29e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	220d      	movs	r2, #13
 800b29a:	701a      	strb	r2, [r3, #0]
      break;
 800b29c:	e082      	b.n	800b3a4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	795b      	ldrb	r3, [r3, #5]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 feb1 	bl	800c00c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	791b      	ldrb	r3, [r3, #4]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 feab 	bl	800c00c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
      break;
 800b2c2:	e06f      	b.n	800b3a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d019      	beq.n	800b302 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2da:	23ff      	movs	r3, #255	; 0xff
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f949 	bl	800b574 <USBH_Get_StringDesc>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d103      	bne.n	800b2f4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2206      	movs	r2, #6
 800b2f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b2f2:	e059      	b.n	800b3a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d156      	bne.n	800b3a8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2206      	movs	r2, #6
 800b2fe:	705a      	strb	r2, [r3, #1]
      break;
 800b300:	e052      	b.n	800b3a8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2206      	movs	r2, #6
 800b306:	705a      	strb	r2, [r3, #1]
      break;
 800b308:	e04e      	b.n	800b3a8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b310:	2b00      	cmp	r3, #0
 800b312:	d019      	beq.n	800b348 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b320:	23ff      	movs	r3, #255	; 0xff
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f926 	bl	800b574 <USBH_Get_StringDesc>
 800b328:	4603      	mov	r3, r0
 800b32a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d103      	bne.n	800b33a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2207      	movs	r2, #7
 800b336:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b338:	e038      	b.n	800b3ac <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d135      	bne.n	800b3ac <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2207      	movs	r2, #7
 800b344:	705a      	strb	r2, [r3, #1]
      break;
 800b346:	e031      	b.n	800b3ac <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2207      	movs	r2, #7
 800b34c:	705a      	strb	r2, [r3, #1]
      break;
 800b34e:	e02d      	b.n	800b3ac <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b356:	2b00      	cmp	r3, #0
 800b358:	d017      	beq.n	800b38a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b366:	23ff      	movs	r3, #255	; 0xff
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f903 	bl	800b574 <USBH_Get_StringDesc>
 800b36e:	4603      	mov	r3, r0
 800b370:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b372:	7bbb      	ldrb	r3, [r7, #14]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b37c:	e018      	b.n	800b3b0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d115      	bne.n	800b3b0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
      break;
 800b388:	e012      	b.n	800b3b0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]
      break;
 800b38e:	e00f      	b.n	800b3b0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b390:	bf00      	nop
 800b392:	e00e      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b394:	bf00      	nop
 800b396:	e00c      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b398:	bf00      	nop
 800b39a:	e00a      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b39c:	bf00      	nop
 800b39e:	e008      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b3a0:	bf00      	nop
 800b3a2:	e006      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b3a4:	bf00      	nop
 800b3a6:	e004      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b3a8:	bf00      	nop
 800b3aa:	e002      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b3ac:	bf00      	nop
 800b3ae:	e000      	b.n	800b3b2 <USBH_HandleEnum+0x3be>
      break;
 800b3b0:	bf00      	nop
  }
  return Status;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f804 	bl	800b3fe <USBH_HandleSof>
}
 800b3f6:	bf00      	nop
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b0b      	cmp	r3, #11
 800b40e:	d10a      	bne.n	800b426 <USBH_HandleSof+0x28>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
  }
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b43e:	bf00      	nop
}
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b45a:	bf00      	nop
}
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 ff56 	bl	800c366 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	791b      	ldrb	r3, [r3, #4]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fda3 	bl	800c00c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	795b      	ldrb	r3, [r3, #5]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fd9d 	bl	800c00c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f864 	bl	800b5ca <USBH_GetDescriptor>
 800b502:	4603      	mov	r3, r0
 800b504:	73fb      	strb	r3, [r7, #15]
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b518:	78fa      	ldrb	r2, [r7, #3]
 800b51a:	b292      	uxth	r2, r2
 800b51c:	4619      	mov	r1, r3
 800b51e:	f000 f918 	bl	800b752 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b522:	7bfb      	ldrb	r3, [r7, #15]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af02      	add	r7, sp, #8
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	331c      	adds	r3, #28
 800b53c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b53e:	887b      	ldrh	r3, [r7, #2]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f83d 	bl	800b5ca <USBH_GetDescriptor>
 800b550:	4603      	mov	r3, r0
 800b552:	72fb      	strb	r3, [r7, #11]
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d107      	bne.n	800b56a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b560:	887a      	ldrh	r2, [r7, #2]
 800b562:	68f9      	ldr	r1, [r7, #12]
 800b564:	4618      	mov	r0, r3
 800b566:	f000 f964 	bl	800b832 <USBH_ParseCfgDesc>
  }

  return status;
 800b56a:	7afb      	ldrb	r3, [r7, #11]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af02      	add	r7, sp, #8
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	461a      	mov	r2, r3
 800b580:	460b      	mov	r3, r1
 800b582:	72fb      	strb	r3, [r7, #11]
 800b584:	4613      	mov	r3, r2
 800b586:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b590:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b598:	893b      	ldrh	r3, [r7, #8]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	460b      	mov	r3, r1
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 f812 	bl	800b5ca <USBH_GetDescriptor>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	75fb      	strb	r3, [r7, #23]
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d107      	bne.n	800b5c0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5b6:	893a      	ldrh	r2, [r7, #8]
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 fa37 	bl	800ba2e <USBH_ParseStringDesc>
  }

  return status;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	607b      	str	r3, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	72fb      	strb	r3, [r7, #11]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d11c      	bne.n	800b61e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2206      	movs	r2, #6
 800b5f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	893a      	ldrh	r2, [r7, #8]
 800b5fa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b5fc:	893b      	ldrh	r3, [r7, #8]
 800b5fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b606:	d104      	bne.n	800b612 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f240 4209 	movw	r2, #1033	; 0x409
 800b60e:	829a      	strh	r2, [r3, #20]
 800b610:	e002      	b.n	800b618 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8b3a      	ldrh	r2, [r7, #24]
 800b61c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b61e:	8b3b      	ldrh	r3, [r7, #24]
 800b620:	461a      	mov	r2, r3
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 fa50 	bl	800baca <USBH_CtlReq>
 800b62a:	4603      	mov	r3, r0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	789b      	ldrb	r3, [r3, #2]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d10f      	bne.n	800b668 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2205      	movs	r2, #5
 800b652:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b654:	78fb      	ldrb	r3, [r7, #3]
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fa2c 	bl	800baca <USBH_CtlReq>
 800b672:	4603      	mov	r3, r0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	789b      	ldrb	r3, [r3, #2]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d10e      	bne.n	800b6ae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2209      	movs	r2, #9
 800b69a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	887a      	ldrh	r2, [r7, #2]
 800b6a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fa09 	bl	800baca <USBH_CtlReq>
 800b6b8:	4603      	mov	r3, r0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	789b      	ldrb	r3, [r3, #2]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d10f      	bne.n	800b6f6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2203      	movs	r2, #3
 800b6e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f9e5 	bl	800baca <USBH_CtlReq>
 800b700:	4603      	mov	r3, r0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	789b      	ldrb	r3, [r3, #2]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d10f      	bne.n	800b73e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b73e:	2200      	movs	r2, #0
 800b740:	2100      	movs	r1, #0
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9c1 	bl	800baca <USBH_CtlReq>
 800b748:	4603      	mov	r3, r0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	4613      	mov	r3, r2
 800b75e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	781a      	ldrb	r2, [r3, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	785a      	ldrb	r2, [r3, #1]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3302      	adds	r3, #2
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	b29a      	uxth	r2, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	3303      	adds	r3, #3
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	b29b      	uxth	r3, r3
 800b784:	4313      	orrs	r3, r2
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	791a      	ldrb	r2, [r3, #4]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	795a      	ldrb	r2, [r3, #5]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	799a      	ldrb	r2, [r3, #6]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	79da      	ldrb	r2, [r3, #7]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b7ac:	88fb      	ldrh	r3, [r7, #6]
 800b7ae:	2b08      	cmp	r3, #8
 800b7b0:	d939      	bls.n	800b826 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	3309      	adds	r3, #9
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	330a      	adds	r3, #10
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	330b      	adds	r3, #11
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	021b      	lsls	r3, r3, #8
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	330d      	adds	r3, #13
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	4313      	orrs	r3, r2
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	7b9a      	ldrb	r2, [r3, #14]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	7bda      	ldrb	r2, [r3, #15]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	7c1a      	ldrb	r2, [r3, #16]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	7c5a      	ldrb	r2, [r3, #17]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	745a      	strb	r2, [r3, #17]
  }
}
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b08a      	sub	sp, #40	; 0x28
 800b836:	af00      	add	r7, sp, #0
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
 800b83c:	4613      	mov	r3, r2
 800b83e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	781a      	ldrb	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	785a      	ldrb	r2, [r3, #1]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	3302      	adds	r3, #2
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	3303      	adds	r3, #3
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	b29b      	uxth	r3, r3
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	b29b      	uxth	r3, r3
 800b878:	4313      	orrs	r3, r2
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	791a      	ldrb	r2, [r3, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	795a      	ldrb	r2, [r3, #5]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	799a      	ldrb	r2, [r3, #6]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	79da      	ldrb	r2, [r3, #7]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	7a1a      	ldrb	r2, [r3, #8]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
 800b8aa:	2b09      	cmp	r3, #9
 800b8ac:	d95f      	bls.n	800b96e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8ae:	2309      	movs	r3, #9
 800b8b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8b6:	e051      	b.n	800b95c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8b8:	f107 0316 	add.w	r3, r7, #22
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8c0:	f000 f8e8 	bl	800ba94 <USBH_GetNextDesc>
 800b8c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d146      	bne.n	800b95c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b8ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8d2:	221a      	movs	r2, #26
 800b8d4:	fb02 f303 	mul.w	r3, r2, r3
 800b8d8:	3308      	adds	r3, #8
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	3302      	adds	r3, #2
 800b8e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b8e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8e4:	69f8      	ldr	r0, [r7, #28]
 800b8e6:	f000 f846 	bl	800b976 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8f4:	e022      	b.n	800b93c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8f6:	f107 0316 	add.w	r3, r7, #22
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8fe:	f000 f8c9 	bl	800ba94 <USBH_GetNextDesc>
 800b902:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b05      	cmp	r3, #5
 800b90a:	d117      	bne.n	800b93c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b910:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b914:	3201      	adds	r2, #1
 800b916:	00d2      	lsls	r2, r2, #3
 800b918:	211a      	movs	r1, #26
 800b91a:	fb01 f303 	mul.w	r3, r1, r3
 800b91e:	4413      	add	r3, r2
 800b920:	3308      	adds	r3, #8
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	3304      	adds	r3, #4
 800b928:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b92a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b92c:	69b8      	ldr	r0, [r7, #24]
 800b92e:	f000 f851 	bl	800b9d4 <USBH_ParseEPDesc>
            ep_ix++;
 800b932:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b936:	3301      	adds	r3, #1
 800b938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b944:	429a      	cmp	r2, r3
 800b946:	d204      	bcs.n	800b952 <USBH_ParseCfgDesc+0x120>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	885a      	ldrh	r2, [r3, #2]
 800b94c:	8afb      	ldrh	r3, [r7, #22]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d8d1      	bhi.n	800b8f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b956:	3301      	adds	r3, #1
 800b958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b960:	2b01      	cmp	r3, #1
 800b962:	d804      	bhi.n	800b96e <USBH_ParseCfgDesc+0x13c>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	885a      	ldrh	r2, [r3, #2]
 800b968:	8afb      	ldrh	r3, [r7, #22]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d8a4      	bhi.n	800b8b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b96e:	bf00      	nop
 800b970:	3728      	adds	r7, #40	; 0x28
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	785a      	ldrb	r2, [r3, #1]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	789a      	ldrb	r2, [r3, #2]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	78da      	ldrb	r2, [r3, #3]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	791a      	ldrb	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	795a      	ldrb	r2, [r3, #5]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	799a      	ldrb	r2, [r3, #6]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	79da      	ldrb	r2, [r3, #7]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	7a1a      	ldrb	r2, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	721a      	strb	r2, [r3, #8]
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781a      	ldrb	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	785a      	ldrb	r2, [r3, #1]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	789a      	ldrb	r2, [r3, #2]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	78da      	ldrb	r2, [r3, #3]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	3304      	adds	r3, #4
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	3305      	adds	r3, #5
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	021b      	lsls	r3, r3, #8
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	4313      	orrs	r3, r2
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	799a      	ldrb	r2, [r3, #6]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	719a      	strb	r2, [r3, #6]
}
 800ba22:	bf00      	nop
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b087      	sub	sp, #28
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	d120      	bne.n	800ba88 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	1e9a      	subs	r2, r3, #2
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bf28      	it	cs
 800ba52:	4613      	movcs	r3, r2
 800ba54:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3302      	adds	r3, #2
 800ba5a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	82fb      	strh	r3, [r7, #22]
 800ba60:	e00b      	b.n	800ba7a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba62:	8afb      	ldrh	r3, [r7, #22]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	4413      	add	r3, r2
 800ba68:	781a      	ldrb	r2, [r3, #0]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	3301      	adds	r3, #1
 800ba72:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ba74:	8afb      	ldrh	r3, [r7, #22]
 800ba76:	3302      	adds	r3, #2
 800ba78:	82fb      	strh	r3, [r7, #22]
 800ba7a:	8afa      	ldrh	r2, [r7, #22]
 800ba7c:	8abb      	ldrh	r3, [r7, #20]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d3ef      	bcc.n	800ba62 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2200      	movs	r2, #0
 800ba86:	701a      	strb	r2, [r3, #0]
  }
}
 800ba88:	bf00      	nop
 800ba8a:	371c      	adds	r7, #28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	881a      	ldrh	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	4413      	add	r3, r2
 800baaa:	b29a      	uxth	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800babc:	68fb      	ldr	r3, [r7, #12]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	4613      	mov	r3, r2
 800bad6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bad8:	2301      	movs	r3, #1
 800bada:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	789b      	ldrb	r3, [r3, #2]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d002      	beq.n	800baea <USBH_CtlReq+0x20>
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d00f      	beq.n	800bb08 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bae8:	e027      	b.n	800bb3a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2202      	movs	r2, #2
 800bb00:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb02:	2301      	movs	r3, #1
 800bb04:	75fb      	strb	r3, [r7, #23]
      break;
 800bb06:	e018      	b.n	800bb3a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 f81b 	bl	800bb44 <USBH_HandleControl>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <USBH_CtlReq+0x54>
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d106      	bne.n	800bb2c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2201      	movs	r2, #1
 800bb22:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	761a      	strb	r2, [r3, #24]
      break;
 800bb2a:	e005      	b.n	800bb38 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d102      	bne.n	800bb38 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	709a      	strb	r2, [r3, #2]
      break;
 800bb38:	bf00      	nop
  }
  return status;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7e1b      	ldrb	r3, [r3, #24]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	2b0a      	cmp	r3, #10
 800bb5c:	f200 8156 	bhi.w	800be0c <USBH_HandleControl+0x2c8>
 800bb60:	a201      	add	r2, pc, #4	; (adr r2, 800bb68 <USBH_HandleControl+0x24>)
 800bb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb66:	bf00      	nop
 800bb68:	0800bb95 	.word	0x0800bb95
 800bb6c:	0800bbaf 	.word	0x0800bbaf
 800bb70:	0800bc19 	.word	0x0800bc19
 800bb74:	0800bc3f 	.word	0x0800bc3f
 800bb78:	0800bc77 	.word	0x0800bc77
 800bb7c:	0800bca1 	.word	0x0800bca1
 800bb80:	0800bcf3 	.word	0x0800bcf3
 800bb84:	0800bd15 	.word	0x0800bd15
 800bb88:	0800bd51 	.word	0x0800bd51
 800bb8c:	0800bd77 	.word	0x0800bd77
 800bb90:	0800bdb5 	.word	0x0800bdb5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f103 0110 	add.w	r1, r3, #16
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	795b      	ldrb	r3, [r3, #5]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f943 	bl	800be2c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2202      	movs	r2, #2
 800bbaa:	761a      	strb	r2, [r3, #24]
      break;
 800bbac:	e139      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	795b      	ldrb	r3, [r3, #5]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fcc5 	bl	800c544 <USBH_LL_GetURBState>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d11e      	bne.n	800bc02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7c1b      	ldrb	r3, [r3, #16]
 800bbc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	8adb      	ldrh	r3, [r3, #22]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bbd6:	7b7b      	ldrb	r3, [r7, #13]
 800bbd8:	2b80      	cmp	r3, #128	; 0x80
 800bbda:	d103      	bne.n	800bbe4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2203      	movs	r2, #3
 800bbe0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbe2:	e115      	b.n	800be10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2205      	movs	r2, #5
 800bbe8:	761a      	strb	r2, [r3, #24]
      break;
 800bbea:	e111      	b.n	800be10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bbec:	7b7b      	ldrb	r3, [r7, #13]
 800bbee:	2b80      	cmp	r3, #128	; 0x80
 800bbf0:	d103      	bne.n	800bbfa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2209      	movs	r2, #9
 800bbf6:	761a      	strb	r2, [r3, #24]
      break;
 800bbf8:	e10a      	b.n	800be10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2207      	movs	r2, #7
 800bbfe:	761a      	strb	r2, [r3, #24]
      break;
 800bc00:	e106      	b.n	800be10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc02:	7bbb      	ldrb	r3, [r7, #14]
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d003      	beq.n	800bc10 <USBH_HandleControl+0xcc>
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	f040 8100 	bne.w	800be10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	220b      	movs	r2, #11
 800bc14:	761a      	strb	r2, [r3, #24]
      break;
 800bc16:	e0fb      	b.n	800be10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6899      	ldr	r1, [r3, #8]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	899a      	ldrh	r2, [r3, #12]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	791b      	ldrb	r3, [r3, #4]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f93a 	bl	800beaa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	761a      	strb	r2, [r3, #24]
      break;
 800bc3c:	e0f1      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	791b      	ldrb	r3, [r3, #4]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fc7d 	bl	800c544 <USBH_LL_GetURBState>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d102      	bne.n	800bc5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2209      	movs	r2, #9
 800bc58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	2b05      	cmp	r3, #5
 800bc5e:	d102      	bne.n	800bc66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bc60:	2303      	movs	r3, #3
 800bc62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc64:	e0d6      	b.n	800be14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	f040 80d3 	bne.w	800be14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	220b      	movs	r2, #11
 800bc72:	761a      	strb	r2, [r3, #24]
      break;
 800bc74:	e0ce      	b.n	800be14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6899      	ldr	r1, [r3, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	899a      	ldrh	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	795b      	ldrb	r3, [r3, #5]
 800bc82:	2001      	movs	r0, #1
 800bc84:	9000      	str	r0, [sp, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f8ea 	bl	800be60 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2206      	movs	r2, #6
 800bc9c:	761a      	strb	r2, [r3, #24]
      break;
 800bc9e:	e0c0      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	795b      	ldrb	r3, [r3, #5]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fc4c 	bl	800c544 <USBH_LL_GetURBState>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d103      	bne.n	800bcbe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2207      	movs	r2, #7
 800bcba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bcbc:	e0ac      	b.n	800be18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	d105      	bne.n	800bcd0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	220c      	movs	r2, #12
 800bcc8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bcca:	2303      	movs	r3, #3
 800bccc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcce:	e0a3      	b.n	800be18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2205      	movs	r2, #5
 800bcda:	761a      	strb	r2, [r3, #24]
      break;
 800bcdc:	e09c      	b.n	800be18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	f040 8099 	bne.w	800be18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	220b      	movs	r2, #11
 800bcea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bcec:	2302      	movs	r3, #2
 800bcee:	73fb      	strb	r3, [r7, #15]
      break;
 800bcf0:	e092      	b.n	800be18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	791b      	ldrb	r3, [r3, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f8d5 	bl	800beaa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2208      	movs	r2, #8
 800bd10:	761a      	strb	r2, [r3, #24]

      break;
 800bd12:	e086      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fc12 	bl	800c544 <USBH_LL_GetURBState>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d105      	bne.n	800bd36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	220d      	movs	r2, #13
 800bd2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd34:	e072      	b.n	800be1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	d103      	bne.n	800bd44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	220b      	movs	r2, #11
 800bd40:	761a      	strb	r2, [r3, #24]
      break;
 800bd42:	e06b      	b.n	800be1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b05      	cmp	r3, #5
 800bd48:	d168      	bne.n	800be1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd4e:	e065      	b.n	800be1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	795b      	ldrb	r3, [r3, #5]
 800bd54:	2201      	movs	r2, #1
 800bd56:	9200      	str	r2, [sp, #0]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f87f 	bl	800be60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	220a      	movs	r2, #10
 800bd72:	761a      	strb	r2, [r3, #24]
      break;
 800bd74:	e055      	b.n	800be22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	795b      	ldrb	r3, [r3, #5]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fbe1 	bl	800c544 <USBH_LL_GetURBState>
 800bd82:	4603      	mov	r3, r0
 800bd84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d105      	bne.n	800bd98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	220d      	movs	r2, #13
 800bd94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd96:	e043      	b.n	800be20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d103      	bne.n	800bda6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2209      	movs	r2, #9
 800bda2:	761a      	strb	r2, [r3, #24]
      break;
 800bda4:	e03c      	b.n	800be20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	d139      	bne.n	800be20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	220b      	movs	r2, #11
 800bdb0:	761a      	strb	r2, [r3, #24]
      break;
 800bdb2:	e035      	b.n	800be20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7e5b      	ldrb	r3, [r3, #25]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	765a      	strb	r2, [r3, #25]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7e5b      	ldrb	r3, [r3, #25]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d806      	bhi.n	800bdd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bdd4:	e025      	b.n	800be22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bddc:	2106      	movs	r1, #6
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	795b      	ldrb	r3, [r3, #5]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f90c 	bl	800c00c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	791b      	ldrb	r3, [r3, #4]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f906 	bl	800c00c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be06:	2302      	movs	r3, #2
 800be08:	73fb      	strb	r3, [r7, #15]
      break;
 800be0a:	e00a      	b.n	800be22 <USBH_HandleControl+0x2de>

    default:
      break;
 800be0c:	bf00      	nop
 800be0e:	e008      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be10:	bf00      	nop
 800be12:	e006      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be14:	bf00      	nop
 800be16:	e004      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be18:	bf00      	nop
 800be1a:	e002      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <USBH_HandleControl+0x2de>
      break;
 800be20:	bf00      	nop
  }

  return status;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af04      	add	r7, sp, #16
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be3a:	79f9      	ldrb	r1, [r7, #7]
 800be3c:	2300      	movs	r3, #0
 800be3e:	9303      	str	r3, [sp, #12]
 800be40:	2308      	movs	r3, #8
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	2300      	movs	r3, #0
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2300      	movs	r3, #0
 800be4e:	2200      	movs	r2, #0
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 fb46 	bl	800c4e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af04      	add	r7, sp, #16
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4611      	mov	r1, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	460b      	mov	r3, r1
 800be70:	80fb      	strh	r3, [r7, #6]
 800be72:	4613      	mov	r3, r2
 800be74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be84:	7979      	ldrb	r1, [r7, #5]
 800be86:	7e3b      	ldrb	r3, [r7, #24]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	9302      	str	r3, [sp, #8]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	2301      	movs	r3, #1
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	2300      	movs	r3, #0
 800be98:	2200      	movs	r2, #0
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 fb21 	bl	800c4e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af04      	add	r7, sp, #16
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	4611      	mov	r1, r2
 800beb6:	461a      	mov	r2, r3
 800beb8:	460b      	mov	r3, r1
 800beba:	80fb      	strh	r3, [r7, #6]
 800bebc:	4613      	mov	r3, r2
 800bebe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bec0:	7979      	ldrb	r1, [r7, #5]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9303      	str	r3, [sp, #12]
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	9302      	str	r3, [sp, #8]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	2301      	movs	r3, #1
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	2300      	movs	r3, #0
 800bed4:	2201      	movs	r2, #1
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 fb03 	bl	800c4e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bedc:	2300      	movs	r3, #0

}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b088      	sub	sp, #32
 800beea:	af04      	add	r7, sp, #16
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	60b9      	str	r1, [r7, #8]
 800bef0:	4611      	mov	r1, r2
 800bef2:	461a      	mov	r2, r3
 800bef4:	460b      	mov	r3, r1
 800bef6:	80fb      	strh	r3, [r7, #6]
 800bef8:	4613      	mov	r3, r2
 800befa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf0a:	7979      	ldrb	r1, [r7, #5]
 800bf0c:	7e3b      	ldrb	r3, [r7, #24]
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	9302      	str	r3, [sp, #8]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 fade 	bl	800c4e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	460b      	mov	r3, r1
 800bf40:	80fb      	strh	r3, [r7, #6]
 800bf42:	4613      	mov	r3, r2
 800bf44:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf46:	7979      	ldrb	r1, [r7, #5]
 800bf48:	2300      	movs	r3, #0
 800bf4a:	9303      	str	r3, [sp, #12]
 800bf4c:	88fb      	ldrh	r3, [r7, #6]
 800bf4e:	9302      	str	r3, [sp, #8]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	2301      	movs	r3, #1
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2302      	movs	r3, #2
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fac0 	bl	800c4e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	4608      	mov	r0, r1
 800bf76:	4611      	mov	r1, r2
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	70fb      	strb	r3, [r7, #3]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70bb      	strb	r3, [r7, #2]
 800bf82:	4613      	mov	r3, r2
 800bf84:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bf86:	7878      	ldrb	r0, [r7, #1]
 800bf88:	78ba      	ldrb	r2, [r7, #2]
 800bf8a:	78f9      	ldrb	r1, [r7, #3]
 800bf8c:	8b3b      	ldrh	r3, [r7, #24]
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	7d3b      	ldrb	r3, [r7, #20]
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	7c3b      	ldrb	r3, [r7, #16]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	4603      	mov	r3, r0
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa53 	bl	800c446 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fa72 	bl	800c4a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f836 	bl	800c048 <USBH_GetFreePipe>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bfe0:	89fb      	ldrh	r3, [r7, #14]
 800bfe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d00a      	beq.n	800c000 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	89fb      	ldrh	r3, [r7, #14]
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	33e0      	adds	r3, #224	; 0xe0
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	440b      	add	r3, r1
 800bffe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c000:	89fb      	ldrh	r3, [r7, #14]
 800c002:	b2db      	uxtb	r3, r3
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	2b0a      	cmp	r3, #10
 800c01c:	d80d      	bhi.n	800c03a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	33e0      	adds	r3, #224	; 0xe0
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	78fb      	ldrb	r3, [r7, #3]
 800c02c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c030:	6879      	ldr	r1, [r7, #4]
 800c032:	33e0      	adds	r3, #224	; 0xe0
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	e00f      	b.n	800c07a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	33e0      	adds	r3, #224	; 0xe0
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	b29b      	uxth	r3, r3
 800c072:	e007      	b.n	800c084 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	3301      	adds	r3, #1
 800c078:	73fb      	strb	r3, [r7, #15]
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	2b0a      	cmp	r3, #10
 800c07e:	d9ec      	bls.n	800c05a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c080:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c094:	2201      	movs	r2, #1
 800c096:	490e      	ldr	r1, [pc, #56]	; (800c0d0 <MX_USB_HOST_Init+0x40>)
 800c098:	480e      	ldr	r0, [pc, #56]	; (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c09a:	f7fe fca1 	bl	800a9e0 <USBH_Init>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0a4:	f7f5 f87a 	bl	800119c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c0a8:	490b      	ldr	r1, [pc, #44]	; (800c0d8 <MX_USB_HOST_Init+0x48>)
 800c0aa:	480a      	ldr	r0, [pc, #40]	; (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c0ac:	f7fe fd26 	bl	800aafc <USBH_RegisterClass>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0b6:	f7f5 f871 	bl	800119c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0ba:	4806      	ldr	r0, [pc, #24]	; (800c0d4 <MX_USB_HOST_Init+0x44>)
 800c0bc:	f7fe fdaa 	bl	800ac14 <USBH_Start>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0c6:	f7f5 f869 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0ca:	bf00      	nop
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800c0f1 	.word	0x0800c0f1
 800c0d4:	200004f0 	.word	0x200004f0
 800c0d8:	20000154 	.word	0x20000154

0800c0dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c0e0:	4802      	ldr	r0, [pc, #8]	; (800c0ec <MX_USB_HOST_Process+0x10>)
 800c0e2:	f7fe fda7 	bl	800ac34 <USBH_Process>
}
 800c0e6:	bf00      	nop
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200004f0 	.word	0x200004f0

0800c0f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	2b04      	cmp	r3, #4
 800c102:	d819      	bhi.n	800c138 <USBH_UserProcess+0x48>
 800c104:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <USBH_UserProcess+0x1c>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c139 	.word	0x0800c139
 800c110:	0800c129 	.word	0x0800c129
 800c114:	0800c139 	.word	0x0800c139
 800c118:	0800c131 	.word	0x0800c131
 800c11c:	0800c121 	.word	0x0800c121
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c120:	4b09      	ldr	r3, [pc, #36]	; (800c148 <USBH_UserProcess+0x58>)
 800c122:	2203      	movs	r2, #3
 800c124:	701a      	strb	r2, [r3, #0]
  break;
 800c126:	e008      	b.n	800c13a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <USBH_UserProcess+0x58>)
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]
  break;
 800c12e:	e004      	b.n	800c13a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <USBH_UserProcess+0x58>)
 800c132:	2201      	movs	r2, #1
 800c134:	701a      	strb	r2, [r3, #0]
  break;
 800c136:	e000      	b.n	800c13a <USBH_UserProcess+0x4a>

  default:
  break;
 800c138:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c13a:	bf00      	nop
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000201 	.word	0x20000201

0800c14c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	; 0x28
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c154:	f107 0314 	add.w	r3, r7, #20
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	605a      	str	r2, [r3, #4]
 800c15e:	609a      	str	r2, [r3, #8]
 800c160:	60da      	str	r2, [r3, #12]
 800c162:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c16c:	d147      	bne.n	800c1fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c16e:	2300      	movs	r3, #0
 800c170:	613b      	str	r3, [r7, #16]
 800c172:	4b25      	ldr	r3, [pc, #148]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	4a24      	ldr	r2, [pc, #144]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c178:	f043 0301 	orr.w	r3, r3, #1
 800c17c:	6313      	str	r3, [r2, #48]	; 0x30
 800c17e:	4b22      	ldr	r3, [pc, #136]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c18e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c190:	2300      	movs	r3, #0
 800c192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c194:	2300      	movs	r3, #0
 800c196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c198:	f107 0314 	add.w	r3, r7, #20
 800c19c:	4619      	mov	r1, r3
 800c19e:	481b      	ldr	r0, [pc, #108]	; (800c20c <HAL_HCD_MspInit+0xc0>)
 800c1a0:	f7f7 fa02 	bl	80035a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c1a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c1a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c1b6:	230a      	movs	r3, #10
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4812      	ldr	r0, [pc, #72]	; (800c20c <HAL_HCD_MspInit+0xc0>)
 800c1c2:	f7f7 f9f1 	bl	80035a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ca:	4a0f      	ldr	r2, [pc, #60]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1d0:	6353      	str	r3, [r2, #52]	; 0x34
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1da:	4a0b      	ldr	r2, [pc, #44]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1e0:	6453      	str	r3, [r2, #68]	; 0x44
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <HAL_HCD_MspInit+0xbc>)
 800c1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	2043      	movs	r0, #67	; 0x43
 800c1f4:	f7f7 f9a1 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1f8:	2043      	movs	r0, #67	; 0x43
 800c1fa:	f7f7 f9ba 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1fe:	bf00      	nop
 800c200:	3728      	adds	r7, #40	; 0x28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	40023800 	.word	0x40023800
 800c20c:	40020000 	.word	0x40020000

0800c210 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff f8db 	bl	800b3da <USBH_LL_IncTimer>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff f913 	bl	800b466 <USBH_LL_Connect>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff f91c 	bl	800b494 <USBH_LL_Disconnect>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
 800c270:	4613      	mov	r3, r2
 800c272:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff f8cd 	bl	800b42e <USBH_LL_PortEnabled>
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff f8cd 	bl	800b44a <USBH_LL_PortDisabled>
}
 800c2b0:	bf00      	nop
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d12a      	bne.n	800c320 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c2ca:	4a18      	ldr	r2, [pc, #96]	; (800c32c <USBH_LL_Init+0x74>)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a15      	ldr	r2, [pc, #84]	; (800c32c <USBH_LL_Init+0x74>)
 800c2d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2da:	4b14      	ldr	r3, [pc, #80]	; (800c32c <USBH_LL_Init+0x74>)
 800c2dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c2e2:	4b12      	ldr	r3, [pc, #72]	; (800c32c <USBH_LL_Init+0x74>)
 800c2e4:	2208      	movs	r2, #8
 800c2e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c2e8:	4b10      	ldr	r3, [pc, #64]	; (800c32c <USBH_LL_Init+0x74>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <USBH_LL_Init+0x74>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c2f4:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <USBH_LL_Init+0x74>)
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2fa:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <USBH_LL_Init+0x74>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c300:	480a      	ldr	r0, [pc, #40]	; (800c32c <USBH_LL_Init+0x74>)
 800c302:	f7f7 fb38 	bl	8003976 <HAL_HCD_Init>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c30c:	f7f4 ff46 	bl	800119c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c310:	4806      	ldr	r0, [pc, #24]	; (800c32c <USBH_LL_Init+0x74>)
 800c312:	f7f7 ff15 	bl	8004140 <HAL_HCD_GetCurrentFrame>
 800c316:	4603      	mov	r3, r0
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff f84e 	bl	800b3bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	200008c8 	.word	0x200008c8

0800c330 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c346:	4618      	mov	r0, r3
 800c348:	f7f7 fe84 	bl	8004054 <HAL_HCD_Start>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f95c 	bl	800c610 <USBH_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f7 fe8c 	bl	800409a <HAL_HCD_Stop>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f941 	bl	800c610 <USBH_Get_USB_Status>
 800c38e:	4603      	mov	r3, r0
 800c390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c392:	7bbb      	ldrb	r3, [r7, #14]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f7 fed4 	bl	800415c <HAL_HCD_GetCurrentSpeed>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d00c      	beq.n	800c3d4 <USBH_LL_GetSpeed+0x38>
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d80d      	bhi.n	800c3da <USBH_LL_GetSpeed+0x3e>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <USBH_LL_GetSpeed+0x2c>
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <USBH_LL_GetSpeed+0x32>
 800c3c6:	e008      	b.n	800c3da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c3cc:	e008      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d2:	e005      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	e002      	b.n	800c3e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3de:	bf00      	nop
  }
  return  speed;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c400:	4618      	mov	r0, r3
 800c402:	f7f7 fe67 	bl	80040d4 <HAL_HCD_ResetPort>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 f8ff 	bl	800c610 <USBH_Get_USB_Status>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c416:	7bbb      	ldrb	r3, [r7, #14]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c432:	78fa      	ldrb	r2, [r7, #3]
 800c434:	4611      	mov	r1, r2
 800c436:	4618      	mov	r0, r3
 800c438:	f7f7 fe6e 	bl	8004118 <HAL_HCD_HC_GetXferCount>
 800c43c:	4603      	mov	r3, r0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c446:	b590      	push	{r4, r7, lr}
 800c448:	b089      	sub	sp, #36	; 0x24
 800c44a:	af04      	add	r7, sp, #16
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	461a      	mov	r2, r3
 800c454:	4603      	mov	r3, r0
 800c456:	70fb      	strb	r3, [r7, #3]
 800c458:	460b      	mov	r3, r1
 800c45a:	70bb      	strb	r3, [r7, #2]
 800c45c:	4613      	mov	r3, r2
 800c45e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c46e:	787c      	ldrb	r4, [r7, #1]
 800c470:	78ba      	ldrb	r2, [r7, #2]
 800c472:	78f9      	ldrb	r1, [r7, #3]
 800c474:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	4623      	mov	r3, r4
 800c486:	f7f7 fad8 	bl	8003a3a <HAL_HCD_HC_Init>
 800c48a:	4603      	mov	r3, r0
 800c48c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 f8bd 	bl	800c610 <USBH_Get_USB_Status>
 800c496:	4603      	mov	r3, r0
 800c498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd90      	pop	{r4, r7, pc}

0800c4a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f7 fb48 	bl	8003b58 <HAL_HCD_HC_Halt>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 f89e 	bl	800c610 <USBH_Get_USB_Status>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c4e2:	b590      	push	{r4, r7, lr}
 800c4e4:	b089      	sub	sp, #36	; 0x24
 800c4e6:	af04      	add	r7, sp, #16
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	70fb      	strb	r3, [r7, #3]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70bb      	strb	r3, [r7, #2]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c50a:	787c      	ldrb	r4, [r7, #1]
 800c50c:	78ba      	ldrb	r2, [r7, #2]
 800c50e:	78f9      	ldrb	r1, [r7, #3]
 800c510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c514:	9303      	str	r3, [sp, #12]
 800c516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	4623      	mov	r3, r4
 800c526:	f7f7 fb3b 	bl	8003ba0 <HAL_HCD_HC_SubmitRequest>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 f86d 	bl	800c610 <USBH_Get_USB_Status>
 800c536:	4603      	mov	r3, r0
 800c538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bd90      	pop	{r4, r7, pc}

0800c544 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c556:	78fa      	ldrb	r2, [r7, #3]
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f7 fdc8 	bl	80040f0 <HAL_HCD_HC_GetURBState>
 800c560:	4603      	mov	r3, r0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	460b      	mov	r3, r1
 800c574:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d103      	bne.n	800c588 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c580:	78fb      	ldrb	r3, [r7, #3]
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f870 	bl	800c668 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c588:	20c8      	movs	r0, #200	; 0xc8
 800c58a:	f7f6 fed7 	bl	800333c <HAL_Delay>
  return USBH_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	70fb      	strb	r3, [r7, #3]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	212c      	movs	r1, #44	; 0x2c
 800c5b6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ba:	4413      	add	r3, r2
 800c5bc:	333b      	adds	r3, #59	; 0x3b
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d009      	beq.n	800c5d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	212c      	movs	r1, #44	; 0x2c
 800c5ca:	fb01 f303 	mul.w	r3, r1, r3
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3354      	adds	r3, #84	; 0x54
 800c5d2:	78ba      	ldrb	r2, [r7, #2]
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	e008      	b.n	800c5ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c5d8:	78fb      	ldrb	r3, [r7, #3]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	212c      	movs	r1, #44	; 0x2c
 800c5de:	fb01 f303 	mul.w	r3, r1, r3
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3355      	adds	r3, #85	; 0x55
 800c5e6:	78ba      	ldrb	r2, [r7, #2]
 800c5e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7f6 fe9b 	bl	800333c <HAL_Delay>
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	2b03      	cmp	r3, #3
 800c622:	d817      	bhi.n	800c654 <USBH_Get_USB_Status+0x44>
 800c624:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <USBH_Get_USB_Status+0x1c>)
 800c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62a:	bf00      	nop
 800c62c:	0800c63d 	.word	0x0800c63d
 800c630:	0800c643 	.word	0x0800c643
 800c634:	0800c649 	.word	0x0800c649
 800c638:	0800c64f 	.word	0x0800c64f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	73fb      	strb	r3, [r7, #15]
    break;
 800c640:	e00b      	b.n	800c65a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c642:	2302      	movs	r3, #2
 800c644:	73fb      	strb	r3, [r7, #15]
    break;
 800c646:	e008      	b.n	800c65a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c648:	2301      	movs	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
    break;
 800c64c:	e005      	b.n	800c65a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c64e:	2302      	movs	r3, #2
 800c650:	73fb      	strb	r3, [r7, #15]
    break;
 800c652:	e002      	b.n	800c65a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c654:	2302      	movs	r3, #2
 800c656:	73fb      	strb	r3, [r7, #15]
    break;
 800c658:	bf00      	nop
  }
  return usb_status;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c67c:	2301      	movs	r3, #1
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	e001      	b.n	800c686 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	461a      	mov	r2, r3
 800c68a:	2101      	movs	r1, #1
 800c68c:	4803      	ldr	r0, [pc, #12]	; (800c69c <MX_DriverVbusFS+0x34>)
 800c68e:	f7f7 f93f 	bl	8003910 <HAL_GPIO_WritePin>
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	40020800 	.word	0x40020800

0800c6a0 <__errno>:
 800c6a0:	4b01      	ldr	r3, [pc, #4]	; (800c6a8 <__errno+0x8>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000174 	.word	0x20000174

0800c6ac <__libc_init_array>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4d0d      	ldr	r5, [pc, #52]	; (800c6e4 <__libc_init_array+0x38>)
 800c6b0:	4c0d      	ldr	r4, [pc, #52]	; (800c6e8 <__libc_init_array+0x3c>)
 800c6b2:	1b64      	subs	r4, r4, r5
 800c6b4:	10a4      	asrs	r4, r4, #2
 800c6b6:	2600      	movs	r6, #0
 800c6b8:	42a6      	cmp	r6, r4
 800c6ba:	d109      	bne.n	800c6d0 <__libc_init_array+0x24>
 800c6bc:	4d0b      	ldr	r5, [pc, #44]	; (800c6ec <__libc_init_array+0x40>)
 800c6be:	4c0c      	ldr	r4, [pc, #48]	; (800c6f0 <__libc_init_array+0x44>)
 800c6c0:	f000 f90c 	bl	800c8dc <_init>
 800c6c4:	1b64      	subs	r4, r4, r5
 800c6c6:	10a4      	asrs	r4, r4, #2
 800c6c8:	2600      	movs	r6, #0
 800c6ca:	42a6      	cmp	r6, r4
 800c6cc:	d105      	bne.n	800c6da <__libc_init_array+0x2e>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d4:	4798      	blx	r3
 800c6d6:	3601      	adds	r6, #1
 800c6d8:	e7ee      	b.n	800c6b8 <__libc_init_array+0xc>
 800c6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6de:	4798      	blx	r3
 800c6e0:	3601      	adds	r6, #1
 800c6e2:	e7f2      	b.n	800c6ca <__libc_init_array+0x1e>
 800c6e4:	0800ce60 	.word	0x0800ce60
 800c6e8:	0800ce60 	.word	0x0800ce60
 800c6ec:	0800ce60 	.word	0x0800ce60
 800c6f0:	0800ce64 	.word	0x0800ce64

0800c6f4 <malloc>:
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <malloc+0xc>)
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f000 b863 	b.w	800c7c4 <_malloc_r>
 800c6fe:	bf00      	nop
 800c700:	20000174 	.word	0x20000174

0800c704 <free>:
 800c704:	4b02      	ldr	r3, [pc, #8]	; (800c710 <free+0xc>)
 800c706:	4601      	mov	r1, r0
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	f000 b80b 	b.w	800c724 <_free_r>
 800c70e:	bf00      	nop
 800c710:	20000174 	.word	0x20000174

0800c714 <memset>:
 800c714:	4402      	add	r2, r0
 800c716:	4603      	mov	r3, r0
 800c718:	4293      	cmp	r3, r2
 800c71a:	d100      	bne.n	800c71e <memset+0xa>
 800c71c:	4770      	bx	lr
 800c71e:	f803 1b01 	strb.w	r1, [r3], #1
 800c722:	e7f9      	b.n	800c718 <memset+0x4>

0800c724 <_free_r>:
 800c724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c726:	2900      	cmp	r1, #0
 800c728:	d048      	beq.n	800c7bc <_free_r+0x98>
 800c72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c72e:	9001      	str	r0, [sp, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f1a1 0404 	sub.w	r4, r1, #4
 800c736:	bfb8      	it	lt
 800c738:	18e4      	addlt	r4, r4, r3
 800c73a:	f000 f8c1 	bl	800c8c0 <__malloc_lock>
 800c73e:	4a20      	ldr	r2, [pc, #128]	; (800c7c0 <_free_r+0x9c>)
 800c740:	9801      	ldr	r0, [sp, #4]
 800c742:	6813      	ldr	r3, [r2, #0]
 800c744:	4615      	mov	r5, r2
 800c746:	b933      	cbnz	r3, 800c756 <_free_r+0x32>
 800c748:	6063      	str	r3, [r4, #4]
 800c74a:	6014      	str	r4, [r2, #0]
 800c74c:	b003      	add	sp, #12
 800c74e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c752:	f000 b8bb 	b.w	800c8cc <__malloc_unlock>
 800c756:	42a3      	cmp	r3, r4
 800c758:	d90b      	bls.n	800c772 <_free_r+0x4e>
 800c75a:	6821      	ldr	r1, [r4, #0]
 800c75c:	1862      	adds	r2, r4, r1
 800c75e:	4293      	cmp	r3, r2
 800c760:	bf04      	itt	eq
 800c762:	681a      	ldreq	r2, [r3, #0]
 800c764:	685b      	ldreq	r3, [r3, #4]
 800c766:	6063      	str	r3, [r4, #4]
 800c768:	bf04      	itt	eq
 800c76a:	1852      	addeq	r2, r2, r1
 800c76c:	6022      	streq	r2, [r4, #0]
 800c76e:	602c      	str	r4, [r5, #0]
 800c770:	e7ec      	b.n	800c74c <_free_r+0x28>
 800c772:	461a      	mov	r2, r3
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b10b      	cbz	r3, 800c77c <_free_r+0x58>
 800c778:	42a3      	cmp	r3, r4
 800c77a:	d9fa      	bls.n	800c772 <_free_r+0x4e>
 800c77c:	6811      	ldr	r1, [r2, #0]
 800c77e:	1855      	adds	r5, r2, r1
 800c780:	42a5      	cmp	r5, r4
 800c782:	d10b      	bne.n	800c79c <_free_r+0x78>
 800c784:	6824      	ldr	r4, [r4, #0]
 800c786:	4421      	add	r1, r4
 800c788:	1854      	adds	r4, r2, r1
 800c78a:	42a3      	cmp	r3, r4
 800c78c:	6011      	str	r1, [r2, #0]
 800c78e:	d1dd      	bne.n	800c74c <_free_r+0x28>
 800c790:	681c      	ldr	r4, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	6053      	str	r3, [r2, #4]
 800c796:	4421      	add	r1, r4
 800c798:	6011      	str	r1, [r2, #0]
 800c79a:	e7d7      	b.n	800c74c <_free_r+0x28>
 800c79c:	d902      	bls.n	800c7a4 <_free_r+0x80>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	6003      	str	r3, [r0, #0]
 800c7a2:	e7d3      	b.n	800c74c <_free_r+0x28>
 800c7a4:	6825      	ldr	r5, [r4, #0]
 800c7a6:	1961      	adds	r1, r4, r5
 800c7a8:	428b      	cmp	r3, r1
 800c7aa:	bf04      	itt	eq
 800c7ac:	6819      	ldreq	r1, [r3, #0]
 800c7ae:	685b      	ldreq	r3, [r3, #4]
 800c7b0:	6063      	str	r3, [r4, #4]
 800c7b2:	bf04      	itt	eq
 800c7b4:	1949      	addeq	r1, r1, r5
 800c7b6:	6021      	streq	r1, [r4, #0]
 800c7b8:	6054      	str	r4, [r2, #4]
 800c7ba:	e7c7      	b.n	800c74c <_free_r+0x28>
 800c7bc:	b003      	add	sp, #12
 800c7be:	bd30      	pop	{r4, r5, pc}
 800c7c0:	20000204 	.word	0x20000204

0800c7c4 <_malloc_r>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	1ccd      	adds	r5, r1, #3
 800c7c8:	f025 0503 	bic.w	r5, r5, #3
 800c7cc:	3508      	adds	r5, #8
 800c7ce:	2d0c      	cmp	r5, #12
 800c7d0:	bf38      	it	cc
 800c7d2:	250c      	movcc	r5, #12
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	db01      	blt.n	800c7de <_malloc_r+0x1a>
 800c7da:	42a9      	cmp	r1, r5
 800c7dc:	d903      	bls.n	800c7e6 <_malloc_r+0x22>
 800c7de:	230c      	movs	r3, #12
 800c7e0:	6033      	str	r3, [r6, #0]
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e6:	f000 f86b 	bl	800c8c0 <__malloc_lock>
 800c7ea:	4921      	ldr	r1, [pc, #132]	; (800c870 <_malloc_r+0xac>)
 800c7ec:	680a      	ldr	r2, [r1, #0]
 800c7ee:	4614      	mov	r4, r2
 800c7f0:	b99c      	cbnz	r4, 800c81a <_malloc_r+0x56>
 800c7f2:	4f20      	ldr	r7, [pc, #128]	; (800c874 <_malloc_r+0xb0>)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	b923      	cbnz	r3, 800c802 <_malloc_r+0x3e>
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 f83c 	bl	800c878 <_sbrk_r>
 800c800:	6038      	str	r0, [r7, #0]
 800c802:	4629      	mov	r1, r5
 800c804:	4630      	mov	r0, r6
 800c806:	f000 f837 	bl	800c878 <_sbrk_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	d123      	bne.n	800c856 <_malloc_r+0x92>
 800c80e:	230c      	movs	r3, #12
 800c810:	6033      	str	r3, [r6, #0]
 800c812:	4630      	mov	r0, r6
 800c814:	f000 f85a 	bl	800c8cc <__malloc_unlock>
 800c818:	e7e3      	b.n	800c7e2 <_malloc_r+0x1e>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	1b5b      	subs	r3, r3, r5
 800c81e:	d417      	bmi.n	800c850 <_malloc_r+0x8c>
 800c820:	2b0b      	cmp	r3, #11
 800c822:	d903      	bls.n	800c82c <_malloc_r+0x68>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	441c      	add	r4, r3
 800c828:	6025      	str	r5, [r4, #0]
 800c82a:	e004      	b.n	800c836 <_malloc_r+0x72>
 800c82c:	6863      	ldr	r3, [r4, #4]
 800c82e:	42a2      	cmp	r2, r4
 800c830:	bf0c      	ite	eq
 800c832:	600b      	streq	r3, [r1, #0]
 800c834:	6053      	strne	r3, [r2, #4]
 800c836:	4630      	mov	r0, r6
 800c838:	f000 f848 	bl	800c8cc <__malloc_unlock>
 800c83c:	f104 000b 	add.w	r0, r4, #11
 800c840:	1d23      	adds	r3, r4, #4
 800c842:	f020 0007 	bic.w	r0, r0, #7
 800c846:	1ac2      	subs	r2, r0, r3
 800c848:	d0cc      	beq.n	800c7e4 <_malloc_r+0x20>
 800c84a:	1a1b      	subs	r3, r3, r0
 800c84c:	50a3      	str	r3, [r4, r2]
 800c84e:	e7c9      	b.n	800c7e4 <_malloc_r+0x20>
 800c850:	4622      	mov	r2, r4
 800c852:	6864      	ldr	r4, [r4, #4]
 800c854:	e7cc      	b.n	800c7f0 <_malloc_r+0x2c>
 800c856:	1cc4      	adds	r4, r0, #3
 800c858:	f024 0403 	bic.w	r4, r4, #3
 800c85c:	42a0      	cmp	r0, r4
 800c85e:	d0e3      	beq.n	800c828 <_malloc_r+0x64>
 800c860:	1a21      	subs	r1, r4, r0
 800c862:	4630      	mov	r0, r6
 800c864:	f000 f808 	bl	800c878 <_sbrk_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	d1dd      	bne.n	800c828 <_malloc_r+0x64>
 800c86c:	e7cf      	b.n	800c80e <_malloc_r+0x4a>
 800c86e:	bf00      	nop
 800c870:	20000204 	.word	0x20000204
 800c874:	20000208 	.word	0x20000208

0800c878 <_sbrk_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	; (800c894 <_sbrk_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f4 ff9e 	bl	80017c4 <_sbrk>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_sbrk_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_sbrk_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20000bcc 	.word	0x20000bcc

0800c898 <strncat>:
 800c898:	b530      	push	{r4, r5, lr}
 800c89a:	4604      	mov	r4, r0
 800c89c:	7825      	ldrb	r5, [r4, #0]
 800c89e:	4623      	mov	r3, r4
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	2d00      	cmp	r5, #0
 800c8a4:	d1fa      	bne.n	800c89c <strncat+0x4>
 800c8a6:	3a01      	subs	r2, #1
 800c8a8:	d304      	bcc.n	800c8b4 <strncat+0x1c>
 800c8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ae:	f803 4b01 	strb.w	r4, [r3], #1
 800c8b2:	b904      	cbnz	r4, 800c8b6 <strncat+0x1e>
 800c8b4:	bd30      	pop	{r4, r5, pc}
 800c8b6:	2a00      	cmp	r2, #0
 800c8b8:	d1f5      	bne.n	800c8a6 <strncat+0xe>
 800c8ba:	701a      	strb	r2, [r3, #0]
 800c8bc:	e7f3      	b.n	800c8a6 <strncat+0xe>
	...

0800c8c0 <__malloc_lock>:
 800c8c0:	4801      	ldr	r0, [pc, #4]	; (800c8c8 <__malloc_lock+0x8>)
 800c8c2:	f000 b809 	b.w	800c8d8 <__retarget_lock_acquire_recursive>
 800c8c6:	bf00      	nop
 800c8c8:	20000bd4 	.word	0x20000bd4

0800c8cc <__malloc_unlock>:
 800c8cc:	4801      	ldr	r0, [pc, #4]	; (800c8d4 <__malloc_unlock+0x8>)
 800c8ce:	f000 b804 	b.w	800c8da <__retarget_lock_release_recursive>
 800c8d2:	bf00      	nop
 800c8d4:	20000bd4 	.word	0x20000bd4

0800c8d8 <__retarget_lock_acquire_recursive>:
 800c8d8:	4770      	bx	lr

0800c8da <__retarget_lock_release_recursive>:
 800c8da:	4770      	bx	lr

0800c8dc <_init>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr

0800c8e8 <_fini>:
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	bf00      	nop
 800c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ee:	bc08      	pop	{r3}
 800c8f0:	469e      	mov	lr, r3
 800c8f2:	4770      	bx	lr
